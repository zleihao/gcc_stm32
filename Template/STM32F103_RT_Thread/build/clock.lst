ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"clock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.rt_tick,"aw",%nobits
  18              		.align	2
  21              	rt_tick:
  22 0000 00000000 		.space	4
  23              		.section	.text.rt_system_tick_init,"ax",%progbits
  24              		.align	1
  25              		.global	rt_system_tick_init
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  30              	rt_system_tick_init:
  31              	.LFB15:
  32              		.file 1 "./rt_thread/src/clock.c"
   1:./rt_thread/src/clock.c **** /*
   2:./rt_thread/src/clock.c ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:./rt_thread/src/clock.c ****  *
   4:./rt_thread/src/clock.c ****  * SPDX-License-Identifier: Apache-2.0
   5:./rt_thread/src/clock.c ****  *
   6:./rt_thread/src/clock.c ****  * Change Logs:
   7:./rt_thread/src/clock.c ****  * Date           Author       Notes
   8:./rt_thread/src/clock.c ****  * 2006-03-12     Bernard      first version
   9:./rt_thread/src/clock.c ****  * 2006-05-27     Bernard      add support for same priority thread schedule
  10:./rt_thread/src/clock.c ****  * 2006-08-10     Bernard      remove the last rt_schedule in rt_tick_increase
  11:./rt_thread/src/clock.c ****  * 2010-03-08     Bernard      remove rt_passed_second
  12:./rt_thread/src/clock.c ****  * 2010-05-20     Bernard      fix the tick exceeds the maximum limits
  13:./rt_thread/src/clock.c ****  * 2010-07-13     Bernard      fix rt_tick_from_millisecond issue found by kuronca
  14:./rt_thread/src/clock.c ****  * 2011-06-26     Bernard      add rt_tick_set function.
  15:./rt_thread/src/clock.c ****  * 2018-11-22     Jesven       add per cpu tick
  16:./rt_thread/src/clock.c ****  */
  17:./rt_thread/src/clock.c **** 
  18:./rt_thread/src/clock.c **** #include <rthw.h>
  19:./rt_thread/src/clock.c **** #include <rtthread.h>
  20:./rt_thread/src/clock.c **** 
  21:./rt_thread/src/clock.c **** static rt_tick_t rt_tick = 0;
  22:./rt_thread/src/clock.c **** 
  23:./rt_thread/src/clock.c **** /**
  24:./rt_thread/src/clock.c ****  * This function will initialize system tick and set it to zero.
  25:./rt_thread/src/clock.c ****  * @ingroup SystemInit
  26:./rt_thread/src/clock.c ****  *
  27:./rt_thread/src/clock.c ****  * @deprecated since 1.1.0, this function does not need to be invoked
  28:./rt_thread/src/clock.c ****  * in the system initialization.
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 2


  29:./rt_thread/src/clock.c ****  */
  30:./rt_thread/src/clock.c **** void rt_system_tick_init(void)
  31:./rt_thread/src/clock.c **** {
  33              		.loc 1 31 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37              		@ link register save eliminated.
  38 0000 80B4     		push	{r7}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 7, -4
  42 0002 00AF     		add	r7, sp, #0
  43              	.LCFI1:
  44              		.cfi_def_cfa_register 7
  32:./rt_thread/src/clock.c **** }
  45              		.loc 1 32 1
  46 0004 00BF     		nop
  47 0006 BD46     		mov	sp, r7
  48              	.LCFI2:
  49              		.cfi_def_cfa_register 13
  50              		@ sp needed
  51 0008 80BC     		pop	{r7}
  52              	.LCFI3:
  53              		.cfi_restore 7
  54              		.cfi_def_cfa_offset 0
  55 000a 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE15:
  59              		.section	.text.rt_tick_get,"ax",%progbits
  60              		.align	1
  61              		.global	rt_tick_get
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  66              	rt_tick_get:
  67              	.LFB16:
  33:./rt_thread/src/clock.c **** 
  34:./rt_thread/src/clock.c **** /**
  35:./rt_thread/src/clock.c ****  * @addtogroup Clock
  36:./rt_thread/src/clock.c ****  */
  37:./rt_thread/src/clock.c **** 
  38:./rt_thread/src/clock.c **** /**@{*/
  39:./rt_thread/src/clock.c **** 
  40:./rt_thread/src/clock.c **** /**
  41:./rt_thread/src/clock.c ****  * This function will return current tick from operating system startup
  42:./rt_thread/src/clock.c ****  *
  43:./rt_thread/src/clock.c ****  * @return current tick
  44:./rt_thread/src/clock.c ****  */
  45:./rt_thread/src/clock.c **** rt_tick_t rt_tick_get(void)
  46:./rt_thread/src/clock.c **** {
  68              		.loc 1 46 1
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 1, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73 0000 80B4     		push	{r7}
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 3


  74              	.LCFI4:
  75              		.cfi_def_cfa_offset 4
  76              		.cfi_offset 7, -4
  77 0002 00AF     		add	r7, sp, #0
  78              	.LCFI5:
  79              		.cfi_def_cfa_register 7
  47:./rt_thread/src/clock.c ****     /* return the global tick */
  48:./rt_thread/src/clock.c ****     return rt_tick;
  80              		.loc 1 48 12
  81 0004 024B     		ldr	r3, .L4
  82 0006 1B68     		ldr	r3, [r3]
  49:./rt_thread/src/clock.c **** }
  83              		.loc 1 49 1
  84 0008 1846     		mov	r0, r3
  85 000a BD46     		mov	sp, r7
  86              	.LCFI6:
  87              		.cfi_def_cfa_register 13
  88              		@ sp needed
  89 000c 80BC     		pop	{r7}
  90              	.LCFI7:
  91              		.cfi_restore 7
  92              		.cfi_def_cfa_offset 0
  93 000e 7047     		bx	lr
  94              	.L5:
  95              		.align	2
  96              	.L4:
  97 0010 00000000 		.word	rt_tick
  98              		.cfi_endproc
  99              	.LFE16:
 101              		.section	.text.rt_tick_set,"ax",%progbits
 102              		.align	1
 103              		.global	rt_tick_set
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 108              	rt_tick_set:
 109              	.LFB17:
  50:./rt_thread/src/clock.c **** 
  51:./rt_thread/src/clock.c **** /**
  52:./rt_thread/src/clock.c ****  * This function will set current tick
  53:./rt_thread/src/clock.c ****  */
  54:./rt_thread/src/clock.c **** void rt_tick_set(rt_tick_t tick)
  55:./rt_thread/src/clock.c **** {
 110              		.loc 1 55 1
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 16
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 80B5     		push	{r7, lr}
 115              	.LCFI8:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 84B0     		sub	sp, sp, #16
 120              	.LCFI9:
 121              		.cfi_def_cfa_offset 24
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI10:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 4


 124              		.cfi_def_cfa_register 7
 125 0006 7860     		str	r0, [r7, #4]
  56:./rt_thread/src/clock.c ****     rt_base_t level;
  57:./rt_thread/src/clock.c **** 
  58:./rt_thread/src/clock.c ****     level = rt_hw_interrupt_disable();
 126              		.loc 1 58 13
 127 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 128 000c F860     		str	r0, [r7, #12]
  59:./rt_thread/src/clock.c ****     rt_tick = tick;
 129              		.loc 1 59 13
 130 000e 054A     		ldr	r2, .L7
 131 0010 7B68     		ldr	r3, [r7, #4]
 132 0012 1360     		str	r3, [r2]
  60:./rt_thread/src/clock.c ****     rt_hw_interrupt_enable(level);
 133              		.loc 1 60 5
 134 0014 F868     		ldr	r0, [r7, #12]
 135 0016 FFF7FEFF 		bl	rt_hw_interrupt_enable
  61:./rt_thread/src/clock.c **** }
 136              		.loc 1 61 1
 137 001a 00BF     		nop
 138 001c 1037     		adds	r7, r7, #16
 139              	.LCFI11:
 140              		.cfi_def_cfa_offset 8
 141 001e BD46     		mov	sp, r7
 142              	.LCFI12:
 143              		.cfi_def_cfa_register 13
 144              		@ sp needed
 145 0020 80BD     		pop	{r7, pc}
 146              	.L8:
 147 0022 00BF     		.align	2
 148              	.L7:
 149 0024 00000000 		.word	rt_tick
 150              		.cfi_endproc
 151              	.LFE17:
 153              		.section	.text.rt_tick_increase,"ax",%progbits
 154              		.align	1
 155              		.global	rt_tick_increase
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 160              	rt_tick_increase:
 161              	.LFB18:
  62:./rt_thread/src/clock.c **** 
  63:./rt_thread/src/clock.c **** /**
  64:./rt_thread/src/clock.c ****  * This function will notify kernel there is one tick passed. Normally,
  65:./rt_thread/src/clock.c ****  * this function is invoked by clock ISR.
  66:./rt_thread/src/clock.c ****  */
  67:./rt_thread/src/clock.c **** void rt_tick_increase(void)
  68:./rt_thread/src/clock.c **** {
 162              		.loc 1 68 1
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166 0000 80B5     		push	{r7, lr}
 167              	.LCFI13:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 5


 170              		.cfi_offset 14, -4
 171 0002 82B0     		sub	sp, sp, #8
 172              	.LCFI14:
 173              		.cfi_def_cfa_offset 16
 174 0004 00AF     		add	r7, sp, #0
 175              	.LCFI15:
 176              		.cfi_def_cfa_register 7
  69:./rt_thread/src/clock.c ****     struct rt_thread *thread;
  70:./rt_thread/src/clock.c **** 
  71:./rt_thread/src/clock.c ****     /* increase the global tick */
  72:./rt_thread/src/clock.c ****     ++ rt_tick;
 177              		.loc 1 72 5
 178 0006 0E4B     		ldr	r3, .L11
 179 0008 1B68     		ldr	r3, [r3]
 180 000a 0133     		adds	r3, r3, #1
 181 000c 0C4A     		ldr	r2, .L11
 182 000e 1360     		str	r3, [r2]
  73:./rt_thread/src/clock.c **** 
  74:./rt_thread/src/clock.c ****     /* check time slice */
  75:./rt_thread/src/clock.c ****     thread = rt_thread_self();
 183              		.loc 1 75 14
 184 0010 FFF7FEFF 		bl	rt_thread_self
 185 0014 7860     		str	r0, [r7, #4]
  76:./rt_thread/src/clock.c **** 
  77:./rt_thread/src/clock.c ****     -- thread->remaining_tick;
 186              		.loc 1 77 14
 187 0016 7B68     		ldr	r3, [r7, #4]
 188 0018 1B6C     		ldr	r3, [r3, #64]
 189              		.loc 1 77 5
 190 001a 5A1E     		subs	r2, r3, #1
 191 001c 7B68     		ldr	r3, [r7, #4]
 192 001e 1A64     		str	r2, [r3, #64]
  78:./rt_thread/src/clock.c ****     if (thread->remaining_tick == 0)
 193              		.loc 1 78 15
 194 0020 7B68     		ldr	r3, [r7, #4]
 195 0022 1B6C     		ldr	r3, [r3, #64]
 196              		.loc 1 78 8
 197 0024 002B     		cmp	r3, #0
 198 0026 05D1     		bne	.L10
  79:./rt_thread/src/clock.c ****     {
  80:./rt_thread/src/clock.c ****         /* change to initialized tick */
  81:./rt_thread/src/clock.c ****         thread->remaining_tick = thread->init_tick;
 199              		.loc 1 81 40
 200 0028 7B68     		ldr	r3, [r7, #4]
 201 002a DA6B     		ldr	r2, [r3, #60]
 202              		.loc 1 81 32
 203 002c 7B68     		ldr	r3, [r7, #4]
 204 002e 1A64     		str	r2, [r3, #64]
  82:./rt_thread/src/clock.c **** 
  83:./rt_thread/src/clock.c ****         /* yield */
  84:./rt_thread/src/clock.c ****         rt_thread_yield();
 205              		.loc 1 84 9
 206 0030 FFF7FEFF 		bl	rt_thread_yield
 207              	.L10:
  85:./rt_thread/src/clock.c ****     }
  86:./rt_thread/src/clock.c **** 
  87:./rt_thread/src/clock.c ****     /* check timer */
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 6


  88:./rt_thread/src/clock.c ****     rt_timer_check();
 208              		.loc 1 88 5
 209 0034 FFF7FEFF 		bl	rt_timer_check
  89:./rt_thread/src/clock.c **** }
 210              		.loc 1 89 1
 211 0038 00BF     		nop
 212 003a 0837     		adds	r7, r7, #8
 213              	.LCFI16:
 214              		.cfi_def_cfa_offset 8
 215 003c BD46     		mov	sp, r7
 216              	.LCFI17:
 217              		.cfi_def_cfa_register 13
 218              		@ sp needed
 219 003e 80BD     		pop	{r7, pc}
 220              	.L12:
 221              		.align	2
 222              	.L11:
 223 0040 00000000 		.word	rt_tick
 224              		.cfi_endproc
 225              	.LFE18:
 227              		.section	.text.rt_tick_from_millisecond,"ax",%progbits
 228              		.align	1
 229              		.global	rt_tick_from_millisecond
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 234              	rt_tick_from_millisecond:
 235              	.LFB19:
  90:./rt_thread/src/clock.c **** 
  91:./rt_thread/src/clock.c **** /**
  92:./rt_thread/src/clock.c ****  * This function will calculate the tick from millisecond.
  93:./rt_thread/src/clock.c ****  *
  94:./rt_thread/src/clock.c ****  * @param ms the specified millisecond
  95:./rt_thread/src/clock.c ****  *           - Negative Number wait forever
  96:./rt_thread/src/clock.c ****  *           - Zero not wait
  97:./rt_thread/src/clock.c ****  *           - Max 0x7fffffff
  98:./rt_thread/src/clock.c ****  *
  99:./rt_thread/src/clock.c ****  * @return the calculated tick
 100:./rt_thread/src/clock.c ****  */
 101:./rt_thread/src/clock.c **** rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
 102:./rt_thread/src/clock.c **** {
 236              		.loc 1 102 1
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 16
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 0000 80B4     		push	{r7}
 242              	.LCFI18:
 243              		.cfi_def_cfa_offset 4
 244              		.cfi_offset 7, -4
 245 0002 85B0     		sub	sp, sp, #20
 246              	.LCFI19:
 247              		.cfi_def_cfa_offset 24
 248 0004 00AF     		add	r7, sp, #0
 249              	.LCFI20:
 250              		.cfi_def_cfa_register 7
 251 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 7


 103:./rt_thread/src/clock.c ****     rt_tick_t tick;
 104:./rt_thread/src/clock.c **** 
 105:./rt_thread/src/clock.c ****     if (ms < 0)
 252              		.loc 1 105 8
 253 0008 7B68     		ldr	r3, [r7, #4]
 254 000a 002B     		cmp	r3, #0
 255 000c 03DA     		bge	.L14
 106:./rt_thread/src/clock.c ****     {
 107:./rt_thread/src/clock.c ****         tick = (rt_tick_t)RT_WAITING_FOREVER;
 256              		.loc 1 107 14
 257 000e 4FF0FF33 		mov	r3, #-1
 258 0012 FB60     		str	r3, [r7, #12]
 259 0014 27E0     		b	.L15
 260              	.L14:
 108:./rt_thread/src/clock.c ****     }
 109:./rt_thread/src/clock.c ****     else
 110:./rt_thread/src/clock.c ****     {
 111:./rt_thread/src/clock.c ****         tick = RT_TICK_PER_SECOND * (ms / 1000);
 261              		.loc 1 111 41
 262 0016 7B68     		ldr	r3, [r7, #4]
 263 0018 164A     		ldr	r2, .L17
 264 001a 82FB0312 		smull	r1, r2, r2, r3
 265 001e 9211     		asrs	r2, r2, #6
 266 0020 DB17     		asrs	r3, r3, #31
 267 0022 D31A     		subs	r3, r2, r3
 268              		.loc 1 111 35
 269 0024 4FF47A72 		mov	r2, #1000
 270 0028 02FB03F3 		mul	r3, r2, r3
 271              		.loc 1 111 14
 272 002c FB60     		str	r3, [r7, #12]
 112:./rt_thread/src/clock.c ****         tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
 273              		.loc 1 112 43
 274 002e 7A68     		ldr	r2, [r7, #4]
 275 0030 104B     		ldr	r3, .L17
 276 0032 83FB0213 		smull	r1, r3, r3, r2
 277 0036 9911     		asrs	r1, r3, #6
 278 0038 D317     		asrs	r3, r2, #31
 279 003a CB1A     		subs	r3, r1, r3
 280 003c 4FF47A71 		mov	r1, #1000
 281 0040 01FB03F3 		mul	r3, r1, r3
 282 0044 D31A     		subs	r3, r2, r3
 283              		.loc 1 112 37
 284 0046 4FF47A72 		mov	r2, #1000
 285 004a 02FB03F3 		mul	r3, r2, r3
 286              		.loc 1 112 51
 287 004e 03F2E733 		addw	r3, r3, #999
 288              		.loc 1 112 58
 289 0052 084A     		ldr	r2, .L17
 290 0054 82FB0312 		smull	r1, r2, r2, r3
 291 0058 9211     		asrs	r2, r2, #6
 292 005a DB17     		asrs	r3, r3, #31
 293 005c D31A     		subs	r3, r2, r3
 294 005e 1A46     		mov	r2, r3
 295              		.loc 1 112 14
 296 0060 FB68     		ldr	r3, [r7, #12]
 297 0062 1344     		add	r3, r3, r2
 298 0064 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 8


 299              	.L15:
 113:./rt_thread/src/clock.c ****     }
 114:./rt_thread/src/clock.c **** 
 115:./rt_thread/src/clock.c ****     /* return the calculated tick */
 116:./rt_thread/src/clock.c ****     return tick;
 300              		.loc 1 116 12
 301 0066 FB68     		ldr	r3, [r7, #12]
 117:./rt_thread/src/clock.c **** }
 302              		.loc 1 117 1
 303 0068 1846     		mov	r0, r3
 304 006a 1437     		adds	r7, r7, #20
 305              	.LCFI21:
 306              		.cfi_def_cfa_offset 4
 307 006c BD46     		mov	sp, r7
 308              	.LCFI22:
 309              		.cfi_def_cfa_register 13
 310              		@ sp needed
 311 006e 80BC     		pop	{r7}
 312              	.LCFI23:
 313              		.cfi_restore 7
 314              		.cfi_def_cfa_offset 0
 315 0070 7047     		bx	lr
 316              	.L18:
 317 0072 00BF     		.align	2
 318              	.L17:
 319 0074 D34D6210 		.word	274877907
 320              		.cfi_endproc
 321              	.LFE19:
 323              		.text
 324              	.Letext0:
 325              		.file 2 "./rt_thread/include/rtdef.h"
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 clock.c
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:18     .bss.rt_tick:00000000 $d
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:21     .bss.rt_tick:00000000 rt_tick
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:24     .text.rt_system_tick_init:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:30     .text.rt_system_tick_init:00000000 rt_system_tick_init
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:60     .text.rt_tick_get:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:66     .text.rt_tick_get:00000000 rt_tick_get
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:97     .text.rt_tick_get:00000010 $d
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:102    .text.rt_tick_set:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:108    .text.rt_tick_set:00000000 rt_tick_set
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:149    .text.rt_tick_set:00000024 $d
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:154    .text.rt_tick_increase:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:160    .text.rt_tick_increase:00000000 rt_tick_increase
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:223    .text.rt_tick_increase:00000040 $d
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:228    .text.rt_tick_from_millisecond:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:234    .text.rt_tick_from_millisecond:00000000 rt_tick_from_millisecond
C:\Users\hao\AppData\Local\Temp\ccp8xkkb.s:319    .text.rt_tick_from_millisecond:00000074 $d

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_thread_self
rt_thread_yield
rt_timer_check
