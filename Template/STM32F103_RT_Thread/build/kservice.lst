ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"kservice.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.__rt_errno,"aw",%nobits
  18              		.align	2
  21              	__rt_errno:
  22 0000 00000000 		.space	4
  23              		.section	.text.rt_get_errno,"ax",%progbits
  24              		.align	1
  25              		.global	rt_get_errno
  26              		.syntax unified
  27              		.thumb
  28              		.thumb_func
  30              	rt_get_errno:
  31              	.LFB15:
  32              		.file 1 "./rt_thread/src/kservice.c"
   1:./rt_thread/src/kservice.c **** /*
   2:./rt_thread/src/kservice.c ****  * Copyright (c) 2006-2021, RT-Thread Development Team
   3:./rt_thread/src/kservice.c ****  *
   4:./rt_thread/src/kservice.c ****  * SPDX-License-Identifier: Apache-2.0
   5:./rt_thread/src/kservice.c ****  *
   6:./rt_thread/src/kservice.c ****  * Change Logs:
   7:./rt_thread/src/kservice.c ****  * Date           Author       Notes
   8:./rt_thread/src/kservice.c ****  * 2006-03-16     Bernard      the first version
   9:./rt_thread/src/kservice.c ****  * 2006-05-25     Bernard      rewrite vsprintf
  10:./rt_thread/src/kservice.c ****  * 2006-08-10     Bernard      add rt_show_version
  11:./rt_thread/src/kservice.c ****  * 2010-03-17     Bernard      remove rt_strlcpy function
  12:./rt_thread/src/kservice.c ****  *                             fix gcc compiling issue.
  13:./rt_thread/src/kservice.c ****  * 2010-04-15     Bernard      remove weak definition on ICCM16C compiler
  14:./rt_thread/src/kservice.c ****  * 2012-07-18     Arda         add the alignment display for signed integer
  15:./rt_thread/src/kservice.c ****  * 2012-11-23     Bernard      fix IAR compiler error.
  16:./rt_thread/src/kservice.c ****  * 2012-12-22     Bernard      fix rt_kprintf issue, which found by Grissiom.
  17:./rt_thread/src/kservice.c ****  * 2013-06-24     Bernard      remove rt_kprintf if RT_USING_CONSOLE is not defined.
  18:./rt_thread/src/kservice.c ****  * 2013-09-24     aozima       make sure the device is in STREAM mode when used by rt_kprintf.
  19:./rt_thread/src/kservice.c ****  * 2015-07-06     Bernard      Add rt_assert_handler routine.
  20:./rt_thread/src/kservice.c ****  */
  21:./rt_thread/src/kservice.c **** 
  22:./rt_thread/src/kservice.c **** #include <rtthread.h>
  23:./rt_thread/src/kservice.c **** #include <rthw.h>
  24:./rt_thread/src/kservice.c **** 
  25:./rt_thread/src/kservice.c **** /* use precision */
  26:./rt_thread/src/kservice.c **** #define RT_PRINTF_PRECISION
  27:./rt_thread/src/kservice.c **** 
  28:./rt_thread/src/kservice.c **** /**
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 2


  29:./rt_thread/src/kservice.c ****  * @addtogroup KernelService
  30:./rt_thread/src/kservice.c ****  */
  31:./rt_thread/src/kservice.c **** 
  32:./rt_thread/src/kservice.c **** /**@{*/
  33:./rt_thread/src/kservice.c **** 
  34:./rt_thread/src/kservice.c **** /* global errno in RT-Thread */
  35:./rt_thread/src/kservice.c **** static volatile int __rt_errno;
  36:./rt_thread/src/kservice.c **** 
  37:./rt_thread/src/kservice.c **** #if defined(RT_USING_DEVICE) && defined(RT_USING_CONSOLE)
  38:./rt_thread/src/kservice.c **** static rt_device_t _console_device = RT_NULL;
  39:./rt_thread/src/kservice.c **** #endif
  40:./rt_thread/src/kservice.c **** 
  41:./rt_thread/src/kservice.c **** /*
  42:./rt_thread/src/kservice.c ****  * This function will get errno
  43:./rt_thread/src/kservice.c ****  *
  44:./rt_thread/src/kservice.c ****  * @return errno
  45:./rt_thread/src/kservice.c ****  */
  46:./rt_thread/src/kservice.c **** rt_err_t rt_get_errno(void)
  47:./rt_thread/src/kservice.c **** {
  33              		.loc 1 47 1
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 82B0     		sub	sp, sp, #8
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
  48:./rt_thread/src/kservice.c ****     rt_thread_t tid;
  49:./rt_thread/src/kservice.c **** 
  50:./rt_thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
  48              		.loc 1 50 9
  49 0006 FFF7FEFF 		bl	rt_interrupt_get_nest
  50 000a 0346     		mov	r3, r0
  51              		.loc 1 50 8
  52 000c 002B     		cmp	r3, #0
  53 000e 02D0     		beq	.L2
  51:./rt_thread/src/kservice.c ****     {
  52:./rt_thread/src/kservice.c ****         /* it's in interrupt context */
  53:./rt_thread/src/kservice.c ****         return __rt_errno;
  54              		.loc 1 53 16
  55 0010 084B     		ldr	r3, .L5
  56 0012 1B68     		ldr	r3, [r3]
  57 0014 0AE0     		b	.L3
  58              	.L2:
  54:./rt_thread/src/kservice.c ****     }
  55:./rt_thread/src/kservice.c **** 
  56:./rt_thread/src/kservice.c ****     tid = rt_thread_self();
  59              		.loc 1 56 11
  60 0016 FFF7FEFF 		bl	rt_thread_self
  61 001a 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 3


  57:./rt_thread/src/kservice.c ****     if (tid == RT_NULL)
  62              		.loc 1 57 8
  63 001c 7B68     		ldr	r3, [r7, #4]
  64 001e 002B     		cmp	r3, #0
  65 0020 02D1     		bne	.L4
  58:./rt_thread/src/kservice.c ****         return __rt_errno;
  66              		.loc 1 58 16
  67 0022 044B     		ldr	r3, .L5
  68 0024 1B68     		ldr	r3, [r3]
  69 0026 01E0     		b	.L3
  70              	.L4:
  59:./rt_thread/src/kservice.c **** 
  60:./rt_thread/src/kservice.c ****     return tid->error;
  71              		.loc 1 60 15
  72 0028 7B68     		ldr	r3, [r7, #4]
  73 002a 1B6B     		ldr	r3, [r3, #48]
  74              	.L3:
  61:./rt_thread/src/kservice.c **** }
  75              		.loc 1 61 1
  76 002c 1846     		mov	r0, r3
  77 002e 0837     		adds	r7, r7, #8
  78              	.LCFI3:
  79              		.cfi_def_cfa_offset 8
  80 0030 BD46     		mov	sp, r7
  81              	.LCFI4:
  82              		.cfi_def_cfa_register 13
  83              		@ sp needed
  84 0032 80BD     		pop	{r7, pc}
  85              	.L6:
  86              		.align	2
  87              	.L5:
  88 0034 00000000 		.word	__rt_errno
  89              		.cfi_endproc
  90              	.LFE15:
  92              		.section	.text.rt_set_errno,"ax",%progbits
  93              		.align	1
  94              		.global	rt_set_errno
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  99              	rt_set_errno:
 100              	.LFB16:
  62:./rt_thread/src/kservice.c **** 
  63:./rt_thread/src/kservice.c **** /*
  64:./rt_thread/src/kservice.c ****  * This function will set errno
  65:./rt_thread/src/kservice.c ****  *
  66:./rt_thread/src/kservice.c ****  * @param error the errno shall be set
  67:./rt_thread/src/kservice.c ****  */
  68:./rt_thread/src/kservice.c **** void rt_set_errno(rt_err_t error)
  69:./rt_thread/src/kservice.c **** {
 101              		.loc 1 69 1
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 16
 104              		@ frame_needed = 1, uses_anonymous_args = 0
 105 0000 80B5     		push	{r7, lr}
 106              	.LCFI5:
 107              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 4


 108              		.cfi_offset 7, -8
 109              		.cfi_offset 14, -4
 110 0002 84B0     		sub	sp, sp, #16
 111              	.LCFI6:
 112              		.cfi_def_cfa_offset 24
 113 0004 00AF     		add	r7, sp, #0
 114              	.LCFI7:
 115              		.cfi_def_cfa_register 7
 116 0006 7860     		str	r0, [r7, #4]
  70:./rt_thread/src/kservice.c ****     rt_thread_t tid;
  71:./rt_thread/src/kservice.c **** 
  72:./rt_thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
 117              		.loc 1 72 9
 118 0008 FFF7FEFF 		bl	rt_interrupt_get_nest
 119 000c 0346     		mov	r3, r0
 120              		.loc 1 72 8
 121 000e 002B     		cmp	r3, #0
 122 0010 03D0     		beq	.L8
  73:./rt_thread/src/kservice.c ****     {
  74:./rt_thread/src/kservice.c ****         /* it's in interrupt context */
  75:./rt_thread/src/kservice.c ****         __rt_errno = error;
 123              		.loc 1 75 20
 124 0012 0A4A     		ldr	r2, .L11
 125 0014 7B68     		ldr	r3, [r7, #4]
 126 0016 1360     		str	r3, [r2]
  76:./rt_thread/src/kservice.c **** 
  77:./rt_thread/src/kservice.c ****         return;
 127              		.loc 1 77 9
 128 0018 0CE0     		b	.L7
 129              	.L8:
  78:./rt_thread/src/kservice.c ****     }
  79:./rt_thread/src/kservice.c **** 
  80:./rt_thread/src/kservice.c ****     tid = rt_thread_self();
 130              		.loc 1 80 11
 131 001a FFF7FEFF 		bl	rt_thread_self
 132 001e F860     		str	r0, [r7, #12]
  81:./rt_thread/src/kservice.c ****     if (tid == RT_NULL)
 133              		.loc 1 81 8
 134 0020 FB68     		ldr	r3, [r7, #12]
 135 0022 002B     		cmp	r3, #0
 136 0024 03D1     		bne	.L10
  82:./rt_thread/src/kservice.c ****     {
  83:./rt_thread/src/kservice.c ****         __rt_errno = error;
 137              		.loc 1 83 20
 138 0026 054A     		ldr	r2, .L11
 139 0028 7B68     		ldr	r3, [r7, #4]
 140 002a 1360     		str	r3, [r2]
  84:./rt_thread/src/kservice.c **** 
  85:./rt_thread/src/kservice.c ****         return;
 141              		.loc 1 85 9
 142 002c 02E0     		b	.L7
 143              	.L10:
  86:./rt_thread/src/kservice.c ****     }
  87:./rt_thread/src/kservice.c **** 
  88:./rt_thread/src/kservice.c ****     tid->error = error;
 144              		.loc 1 88 16
 145 002e FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 5


 146 0030 7A68     		ldr	r2, [r7, #4]
 147 0032 1A63     		str	r2, [r3, #48]
 148              	.L7:
  89:./rt_thread/src/kservice.c **** }
 149              		.loc 1 89 1
 150 0034 1037     		adds	r7, r7, #16
 151              	.LCFI8:
 152              		.cfi_def_cfa_offset 8
 153 0036 BD46     		mov	sp, r7
 154              	.LCFI9:
 155              		.cfi_def_cfa_register 13
 156              		@ sp needed
 157 0038 80BD     		pop	{r7, pc}
 158              	.L12:
 159 003a 00BF     		.align	2
 160              	.L11:
 161 003c 00000000 		.word	__rt_errno
 162              		.cfi_endproc
 163              	.LFE16:
 165              		.section	.text._rt_errno,"ax",%progbits
 166              		.align	1
 167              		.global	_rt_errno
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 172              	_rt_errno:
 173              	.LFB17:
  90:./rt_thread/src/kservice.c **** 
  91:./rt_thread/src/kservice.c **** /**
  92:./rt_thread/src/kservice.c ****  * This function returns errno.
  93:./rt_thread/src/kservice.c ****  *
  94:./rt_thread/src/kservice.c ****  * @return the errno in the system
  95:./rt_thread/src/kservice.c ****  */
  96:./rt_thread/src/kservice.c **** int *_rt_errno(void)
  97:./rt_thread/src/kservice.c **** {
 174              		.loc 1 97 1
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 8
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 0000 80B5     		push	{r7, lr}
 179              	.LCFI10:
 180              		.cfi_def_cfa_offset 8
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 82B0     		sub	sp, sp, #8
 184              	.LCFI11:
 185              		.cfi_def_cfa_offset 16
 186 0004 00AF     		add	r7, sp, #0
 187              	.LCFI12:
 188              		.cfi_def_cfa_register 7
  98:./rt_thread/src/kservice.c ****     rt_thread_t tid;
  99:./rt_thread/src/kservice.c **** 
 100:./rt_thread/src/kservice.c ****     if (rt_interrupt_get_nest() != 0)
 189              		.loc 1 100 9
 190 0006 FFF7FEFF 		bl	rt_interrupt_get_nest
 191 000a 0346     		mov	r3, r0
 192              		.loc 1 100 8
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 6


 193 000c 002B     		cmp	r3, #0
 194 000e 01D0     		beq	.L14
 101:./rt_thread/src/kservice.c ****         return (int *)&__rt_errno;
 195              		.loc 1 101 16
 196 0010 074B     		ldr	r3, .L17
 197 0012 09E0     		b	.L15
 198              	.L14:
 102:./rt_thread/src/kservice.c **** 
 103:./rt_thread/src/kservice.c ****     tid = rt_thread_self();
 199              		.loc 1 103 11
 200 0014 FFF7FEFF 		bl	rt_thread_self
 201 0018 7860     		str	r0, [r7, #4]
 104:./rt_thread/src/kservice.c ****     if (tid != RT_NULL)
 202              		.loc 1 104 8
 203 001a 7B68     		ldr	r3, [r7, #4]
 204 001c 002B     		cmp	r3, #0
 205 001e 02D0     		beq	.L16
 105:./rt_thread/src/kservice.c ****         return (int *) & (tid->error);
 206              		.loc 1 105 16
 207 0020 7B68     		ldr	r3, [r7, #4]
 208 0022 3033     		adds	r3, r3, #48
 209 0024 00E0     		b	.L15
 210              	.L16:
 106:./rt_thread/src/kservice.c **** 
 107:./rt_thread/src/kservice.c ****     return (int *)&__rt_errno;
 211              		.loc 1 107 12
 212 0026 024B     		ldr	r3, .L17
 213              	.L15:
 108:./rt_thread/src/kservice.c **** }
 214              		.loc 1 108 1
 215 0028 1846     		mov	r0, r3
 216 002a 0837     		adds	r7, r7, #8
 217              	.LCFI13:
 218              		.cfi_def_cfa_offset 8
 219 002c BD46     		mov	sp, r7
 220              	.LCFI14:
 221              		.cfi_def_cfa_register 13
 222              		@ sp needed
 223 002e 80BD     		pop	{r7, pc}
 224              	.L18:
 225              		.align	2
 226              	.L17:
 227 0030 00000000 		.word	__rt_errno
 228              		.cfi_endproc
 229              	.LFE17:
 231              		.section	.text.rt_memset,"ax",%progbits
 232              		.align	1
 233              		.global	rt_memset
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 238              	rt_memset:
 239              	.LFB18:
 109:./rt_thread/src/kservice.c **** 
 110:./rt_thread/src/kservice.c **** /**
 111:./rt_thread/src/kservice.c ****  * This function will set the content of memory to specified value
 112:./rt_thread/src/kservice.c ****  *
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 7


 113:./rt_thread/src/kservice.c ****  * @param s the address of source memory
 114:./rt_thread/src/kservice.c ****  * @param c the value shall be set in content
 115:./rt_thread/src/kservice.c ****  * @param count the copied length
 116:./rt_thread/src/kservice.c ****  *
 117:./rt_thread/src/kservice.c ****  * @return the address of source memory
 118:./rt_thread/src/kservice.c ****  */
 119:./rt_thread/src/kservice.c **** void *rt_memset(void *s, int c, rt_ubase_t count)
 120:./rt_thread/src/kservice.c **** {
 240              		.loc 1 120 1
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 32
 243              		@ frame_needed = 1, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245 0000 80B4     		push	{r7}
 246              	.LCFI15:
 247              		.cfi_def_cfa_offset 4
 248              		.cfi_offset 7, -4
 249 0002 89B0     		sub	sp, sp, #36
 250              	.LCFI16:
 251              		.cfi_def_cfa_offset 40
 252 0004 00AF     		add	r7, sp, #0
 253              	.LCFI17:
 254              		.cfi_def_cfa_register 7
 255 0006 F860     		str	r0, [r7, #12]
 256 0008 B960     		str	r1, [r7, #8]
 257 000a 7A60     		str	r2, [r7, #4]
 121:./rt_thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 122:./rt_thread/src/kservice.c ****     char *xs = (char *)s;
 123:./rt_thread/src/kservice.c **** 
 124:./rt_thread/src/kservice.c ****     while (count--)
 125:./rt_thread/src/kservice.c ****         *xs++ = c;
 126:./rt_thread/src/kservice.c **** 
 127:./rt_thread/src/kservice.c ****     return s;
 128:./rt_thread/src/kservice.c **** #else
 129:./rt_thread/src/kservice.c **** #define LBLOCKSIZE      (sizeof(long))
 130:./rt_thread/src/kservice.c **** #define UNALIGNED(X)    ((long)X & (LBLOCKSIZE - 1))
 131:./rt_thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < LBLOCKSIZE)
 132:./rt_thread/src/kservice.c **** 
 133:./rt_thread/src/kservice.c ****     unsigned int i;
 134:./rt_thread/src/kservice.c ****     char *m = (char *)s;
 258              		.loc 1 134 11
 259 000c FB68     		ldr	r3, [r7, #12]
 260 000e FB61     		str	r3, [r7, #28]
 135:./rt_thread/src/kservice.c ****     unsigned long buffer;
 136:./rt_thread/src/kservice.c ****     unsigned long *aligned_addr;
 137:./rt_thread/src/kservice.c ****     unsigned int d = c & 0xff;  /* To avoid sign extension, copy C to an
 261              		.loc 1 137 24
 262 0010 BB68     		ldr	r3, [r7, #8]
 263              		.loc 1 137 18
 264 0012 DBB2     		uxtb	r3, r3
 265 0014 7B61     		str	r3, [r7, #20]
 138:./rt_thread/src/kservice.c ****                                 unsigned variable.  */
 139:./rt_thread/src/kservice.c **** 
 140:./rt_thread/src/kservice.c ****     if (!TOO_SMALL(count) && !UNALIGNED(s))
 266              		.loc 1 140 8
 267 0016 7B68     		ldr	r3, [r7, #4]
 268 0018 032B     		cmp	r3, #3
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 8


 269 001a 40D9     		bls	.L25
 270              		.loc 1 140 31 discriminator 1
 271 001c FB68     		ldr	r3, [r7, #12]
 272 001e 03F00303 		and	r3, r3, #3
 273              		.loc 1 140 27 discriminator 1
 274 0022 002B     		cmp	r3, #0
 275 0024 3BD1     		bne	.L25
 141:./rt_thread/src/kservice.c ****     {
 142:./rt_thread/src/kservice.c ****         /* If we get this far, we know that n is large and m is word-aligned. */
 143:./rt_thread/src/kservice.c ****         aligned_addr = (unsigned long *)s;
 276              		.loc 1 143 22
 277 0026 FB68     		ldr	r3, [r7, #12]
 278 0028 BB61     		str	r3, [r7, #24]
 144:./rt_thread/src/kservice.c **** 
 145:./rt_thread/src/kservice.c ****         /* Store D into each char sized location in BUFFER so that
 146:./rt_thread/src/kservice.c ****          * we can set large blocks quickly.
 147:./rt_thread/src/kservice.c ****          */
 148:./rt_thread/src/kservice.c ****         if (LBLOCKSIZE == 4)
 149:./rt_thread/src/kservice.c ****         {
 150:./rt_thread/src/kservice.c ****             buffer = (d << 8) | d;
 279              		.loc 1 150 25
 280 002a 7B69     		ldr	r3, [r7, #20]
 281 002c 1B02     		lsls	r3, r3, #8
 282              		.loc 1 150 20
 283 002e 7A69     		ldr	r2, [r7, #20]
 284 0030 1343     		orrs	r3, r3, r2
 285 0032 3B61     		str	r3, [r7, #16]
 151:./rt_thread/src/kservice.c ****             buffer |= (buffer << 16);
 286              		.loc 1 151 31
 287 0034 3B69     		ldr	r3, [r7, #16]
 288 0036 1B04     		lsls	r3, r3, #16
 289              		.loc 1 151 20
 290 0038 3A69     		ldr	r2, [r7, #16]
 291 003a 1343     		orrs	r3, r3, r2
 292 003c 3B61     		str	r3, [r7, #16]
 152:./rt_thread/src/kservice.c ****         }
 153:./rt_thread/src/kservice.c ****         else
 154:./rt_thread/src/kservice.c ****         {
 155:./rt_thread/src/kservice.c ****             buffer = 0;
 156:./rt_thread/src/kservice.c ****             for (i = 0; i < LBLOCKSIZE; i ++)
 157:./rt_thread/src/kservice.c ****                 buffer = (buffer << 8) | d;
 158:./rt_thread/src/kservice.c ****         }
 159:./rt_thread/src/kservice.c **** 
 160:./rt_thread/src/kservice.c ****         while (count >= LBLOCKSIZE * 4)
 293              		.loc 1 160 15
 294 003e 16E0     		b	.L21
 295              	.L22:
 161:./rt_thread/src/kservice.c ****         {
 162:./rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 296              		.loc 1 162 26
 297 0040 BB69     		ldr	r3, [r7, #24]
 298 0042 1A1D     		adds	r2, r3, #4
 299 0044 BA61     		str	r2, [r7, #24]
 300              		.loc 1 162 29
 301 0046 3A69     		ldr	r2, [r7, #16]
 302 0048 1A60     		str	r2, [r3]
 163:./rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 9


 303              		.loc 1 163 26
 304 004a BB69     		ldr	r3, [r7, #24]
 305 004c 1A1D     		adds	r2, r3, #4
 306 004e BA61     		str	r2, [r7, #24]
 307              		.loc 1 163 29
 308 0050 3A69     		ldr	r2, [r7, #16]
 309 0052 1A60     		str	r2, [r3]
 164:./rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 310              		.loc 1 164 26
 311 0054 BB69     		ldr	r3, [r7, #24]
 312 0056 1A1D     		adds	r2, r3, #4
 313 0058 BA61     		str	r2, [r7, #24]
 314              		.loc 1 164 29
 315 005a 3A69     		ldr	r2, [r7, #16]
 316 005c 1A60     		str	r2, [r3]
 165:./rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 317              		.loc 1 165 26
 318 005e BB69     		ldr	r3, [r7, #24]
 319 0060 1A1D     		adds	r2, r3, #4
 320 0062 BA61     		str	r2, [r7, #24]
 321              		.loc 1 165 29
 322 0064 3A69     		ldr	r2, [r7, #16]
 323 0066 1A60     		str	r2, [r3]
 166:./rt_thread/src/kservice.c ****             count -= 4 * LBLOCKSIZE;
 324              		.loc 1 166 19
 325 0068 7B68     		ldr	r3, [r7, #4]
 326 006a 103B     		subs	r3, r3, #16
 327 006c 7B60     		str	r3, [r7, #4]
 328              	.L21:
 160:./rt_thread/src/kservice.c ****         {
 329              		.loc 1 160 15
 330 006e 7B68     		ldr	r3, [r7, #4]
 331 0070 0F2B     		cmp	r3, #15
 332 0072 E5D8     		bhi	.L22
 167:./rt_thread/src/kservice.c ****         }
 168:./rt_thread/src/kservice.c **** 
 169:./rt_thread/src/kservice.c ****         while (count >= LBLOCKSIZE)
 333              		.loc 1 169 15
 334 0074 07E0     		b	.L23
 335              	.L24:
 170:./rt_thread/src/kservice.c ****         {
 171:./rt_thread/src/kservice.c ****             *aligned_addr++ = buffer;
 336              		.loc 1 171 26
 337 0076 BB69     		ldr	r3, [r7, #24]
 338 0078 1A1D     		adds	r2, r3, #4
 339 007a BA61     		str	r2, [r7, #24]
 340              		.loc 1 171 29
 341 007c 3A69     		ldr	r2, [r7, #16]
 342 007e 1A60     		str	r2, [r3]
 172:./rt_thread/src/kservice.c ****             count -= LBLOCKSIZE;
 343              		.loc 1 172 19
 344 0080 7B68     		ldr	r3, [r7, #4]
 345 0082 043B     		subs	r3, r3, #4
 346 0084 7B60     		str	r3, [r7, #4]
 347              	.L23:
 169:./rt_thread/src/kservice.c ****         {
 348              		.loc 1 169 15
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 10


 349 0086 7B68     		ldr	r3, [r7, #4]
 350 0088 032B     		cmp	r3, #3
 351 008a F4D8     		bhi	.L24
 173:./rt_thread/src/kservice.c ****         }
 174:./rt_thread/src/kservice.c **** 
 175:./rt_thread/src/kservice.c ****         /* Pick up the remainder with a bytewise loop. */
 176:./rt_thread/src/kservice.c ****         m = (char *)aligned_addr;
 352              		.loc 1 176 11
 353 008c BB69     		ldr	r3, [r7, #24]
 354 008e FB61     		str	r3, [r7, #28]
 177:./rt_thread/src/kservice.c ****     }
 178:./rt_thread/src/kservice.c **** 
 179:./rt_thread/src/kservice.c ****     while (count--)
 355              		.loc 1 179 11
 356 0090 05E0     		b	.L25
 357              	.L26:
 180:./rt_thread/src/kservice.c ****     {
 181:./rt_thread/src/kservice.c ****         *m++ = (char)d;
 358              		.loc 1 181 11
 359 0092 FB69     		ldr	r3, [r7, #28]
 360 0094 5A1C     		adds	r2, r3, #1
 361 0096 FA61     		str	r2, [r7, #28]
 362              		.loc 1 181 16
 363 0098 7A69     		ldr	r2, [r7, #20]
 364 009a D2B2     		uxtb	r2, r2
 365              		.loc 1 181 14
 366 009c 1A70     		strb	r2, [r3]
 367              	.L25:
 179:./rt_thread/src/kservice.c ****     {
 368              		.loc 1 179 17
 369 009e 7B68     		ldr	r3, [r7, #4]
 370 00a0 5A1E     		subs	r2, r3, #1
 371 00a2 7A60     		str	r2, [r7, #4]
 179:./rt_thread/src/kservice.c ****     {
 372              		.loc 1 179 11
 373 00a4 002B     		cmp	r3, #0
 374 00a6 F4D1     		bne	.L26
 182:./rt_thread/src/kservice.c ****     }
 183:./rt_thread/src/kservice.c **** 
 184:./rt_thread/src/kservice.c ****     return s;
 375              		.loc 1 184 12
 376 00a8 FB68     		ldr	r3, [r7, #12]
 185:./rt_thread/src/kservice.c **** 
 186:./rt_thread/src/kservice.c **** #undef LBLOCKSIZE
 187:./rt_thread/src/kservice.c **** #undef UNALIGNED
 188:./rt_thread/src/kservice.c **** #undef TOO_SMALL
 189:./rt_thread/src/kservice.c **** #endif
 190:./rt_thread/src/kservice.c **** }
 377              		.loc 1 190 1
 378 00aa 1846     		mov	r0, r3
 379 00ac 2437     		adds	r7, r7, #36
 380              	.LCFI18:
 381              		.cfi_def_cfa_offset 4
 382 00ae BD46     		mov	sp, r7
 383              	.LCFI19:
 384              		.cfi_def_cfa_register 13
 385              		@ sp needed
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 11


 386 00b0 80BC     		pop	{r7}
 387              	.LCFI20:
 388              		.cfi_restore 7
 389              		.cfi_def_cfa_offset 0
 390 00b2 7047     		bx	lr
 391              		.cfi_endproc
 392              	.LFE18:
 394              		.section	.text.rt_memcpy,"ax",%progbits
 395              		.align	1
 396              		.global	rt_memcpy
 397              		.syntax unified
 398              		.thumb
 399              		.thumb_func
 401              	rt_memcpy:
 402              	.LFB19:
 191:./rt_thread/src/kservice.c **** 
 192:./rt_thread/src/kservice.c **** /**
 193:./rt_thread/src/kservice.c ****  * This function will copy memory content from source address to destination
 194:./rt_thread/src/kservice.c ****  * address.
 195:./rt_thread/src/kservice.c ****  *
 196:./rt_thread/src/kservice.c ****  * @param dst the address of destination memory
 197:./rt_thread/src/kservice.c ****  * @param src  the address of source memory
 198:./rt_thread/src/kservice.c ****  * @param count the copied length
 199:./rt_thread/src/kservice.c ****  *
 200:./rt_thread/src/kservice.c ****  * @return the address of destination memory
 201:./rt_thread/src/kservice.c ****  */
 202:./rt_thread/src/kservice.c **** void *rt_memcpy(void *dst, const void *src, rt_ubase_t count)
 203:./rt_thread/src/kservice.c **** {
 403              		.loc 1 203 1
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 40
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 80B4     		push	{r7}
 409              	.LCFI21:
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 7, -4
 412 0002 8BB0     		sub	sp, sp, #44
 413              	.LCFI22:
 414              		.cfi_def_cfa_offset 48
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI23:
 417              		.cfi_def_cfa_register 7
 418 0006 F860     		str	r0, [r7, #12]
 419 0008 B960     		str	r1, [r7, #8]
 420 000a 7A60     		str	r2, [r7, #4]
 204:./rt_thread/src/kservice.c **** #ifdef RT_USING_TINY_SIZE
 205:./rt_thread/src/kservice.c ****     char *tmp = (char *)dst, *s = (char *)src;
 206:./rt_thread/src/kservice.c ****     rt_ubase_t len;
 207:./rt_thread/src/kservice.c **** 
 208:./rt_thread/src/kservice.c ****     if (tmp <= s || tmp > (s + count))
 209:./rt_thread/src/kservice.c ****     {
 210:./rt_thread/src/kservice.c ****         while (count--)
 211:./rt_thread/src/kservice.c ****             *tmp ++ = *s ++;
 212:./rt_thread/src/kservice.c ****     }
 213:./rt_thread/src/kservice.c ****     else
 214:./rt_thread/src/kservice.c ****     {
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 12


 215:./rt_thread/src/kservice.c ****         for (len = count; len > 0; len --)
 216:./rt_thread/src/kservice.c ****             tmp[len - 1] = s[len - 1];
 217:./rt_thread/src/kservice.c ****     }
 218:./rt_thread/src/kservice.c **** 
 219:./rt_thread/src/kservice.c ****     return dst;
 220:./rt_thread/src/kservice.c **** #else
 221:./rt_thread/src/kservice.c **** 
 222:./rt_thread/src/kservice.c **** #define UNALIGNED(X, Y) \
 223:./rt_thread/src/kservice.c ****     (((long)X & (sizeof (long) - 1)) | ((long)Y & (sizeof (long) - 1)))
 224:./rt_thread/src/kservice.c **** #define BIGBLOCKSIZE    (sizeof (long) << 2)
 225:./rt_thread/src/kservice.c **** #define LITTLEBLOCKSIZE (sizeof (long))
 226:./rt_thread/src/kservice.c **** #define TOO_SMALL(LEN)  ((LEN) < BIGBLOCKSIZE)
 227:./rt_thread/src/kservice.c **** 
 228:./rt_thread/src/kservice.c ****     char *dst_ptr = (char *)dst;
 421              		.loc 1 228 11
 422 000c FB68     		ldr	r3, [r7, #12]
 423 000e 7B62     		str	r3, [r7, #36]
 229:./rt_thread/src/kservice.c ****     char *src_ptr = (char *)src;
 424              		.loc 1 229 11
 425 0010 BB68     		ldr	r3, [r7, #8]
 426 0012 3B62     		str	r3, [r7, #32]
 230:./rt_thread/src/kservice.c ****     long *aligned_dst;
 231:./rt_thread/src/kservice.c ****     long *aligned_src;
 232:./rt_thread/src/kservice.c ****     int len = count;
 427              		.loc 1 232 9
 428 0014 7B68     		ldr	r3, [r7, #4]
 429 0016 7B61     		str	r3, [r7, #20]
 233:./rt_thread/src/kservice.c **** 
 234:./rt_thread/src/kservice.c ****     /* If the size is small, or either SRC or DST is unaligned,
 235:./rt_thread/src/kservice.c ****     then punt into the byte copy loop.  This should be rare. */
 236:./rt_thread/src/kservice.c ****     if (!TOO_SMALL(len) && !UNALIGNED(src_ptr, dst_ptr))
 430              		.loc 1 236 9
 431 0018 7B69     		ldr	r3, [r7, #20]
 432              		.loc 1 236 8
 433 001a 0F2B     		cmp	r3, #15
 434 001c 4DD9     		bls	.L34
 435              		.loc 1 236 29 discriminator 1
 436 001e 3A6A     		ldr	r2, [r7, #32]
 437 0020 7B6A     		ldr	r3, [r7, #36]
 438 0022 1343     		orrs	r3, r3, r2
 439 0024 03F00303 		and	r3, r3, #3
 440              		.loc 1 236 25 discriminator 1
 441 0028 002B     		cmp	r3, #0
 442 002a 46D1     		bne	.L34
 237:./rt_thread/src/kservice.c ****     {
 238:./rt_thread/src/kservice.c ****         aligned_dst = (long *)dst_ptr;
 443              		.loc 1 238 21
 444 002c 7B6A     		ldr	r3, [r7, #36]
 445 002e FB61     		str	r3, [r7, #28]
 239:./rt_thread/src/kservice.c ****         aligned_src = (long *)src_ptr;
 446              		.loc 1 239 21
 447 0030 3B6A     		ldr	r3, [r7, #32]
 448 0032 BB61     		str	r3, [r7, #24]
 240:./rt_thread/src/kservice.c **** 
 241:./rt_thread/src/kservice.c ****         /* Copy 4X long words at a time if possible. */
 242:./rt_thread/src/kservice.c ****         while (len >= BIGBLOCKSIZE)
 449              		.loc 1 242 15
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 13


 450 0034 22E0     		b	.L30
 451              	.L31:
 243:./rt_thread/src/kservice.c ****         {
 244:./rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 452              		.loc 1 244 42
 453 0036 BA69     		ldr	r2, [r7, #24]
 454 0038 131D     		adds	r3, r2, #4
 455 003a BB61     		str	r3, [r7, #24]
 456              		.loc 1 244 25
 457 003c FB69     		ldr	r3, [r7, #28]
 458 003e 191D     		adds	r1, r3, #4
 459 0040 F961     		str	r1, [r7, #28]
 460              		.loc 1 244 30
 461 0042 1268     		ldr	r2, [r2]
 462              		.loc 1 244 28
 463 0044 1A60     		str	r2, [r3]
 245:./rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 464              		.loc 1 245 42
 465 0046 BA69     		ldr	r2, [r7, #24]
 466 0048 131D     		adds	r3, r2, #4
 467 004a BB61     		str	r3, [r7, #24]
 468              		.loc 1 245 25
 469 004c FB69     		ldr	r3, [r7, #28]
 470 004e 191D     		adds	r1, r3, #4
 471 0050 F961     		str	r1, [r7, #28]
 472              		.loc 1 245 30
 473 0052 1268     		ldr	r2, [r2]
 474              		.loc 1 245 28
 475 0054 1A60     		str	r2, [r3]
 246:./rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 476              		.loc 1 246 42
 477 0056 BA69     		ldr	r2, [r7, #24]
 478 0058 131D     		adds	r3, r2, #4
 479 005a BB61     		str	r3, [r7, #24]
 480              		.loc 1 246 25
 481 005c FB69     		ldr	r3, [r7, #28]
 482 005e 191D     		adds	r1, r3, #4
 483 0060 F961     		str	r1, [r7, #28]
 484              		.loc 1 246 30
 485 0062 1268     		ldr	r2, [r2]
 486              		.loc 1 246 28
 487 0064 1A60     		str	r2, [r3]
 247:./rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 488              		.loc 1 247 42
 489 0066 BA69     		ldr	r2, [r7, #24]
 490 0068 131D     		adds	r3, r2, #4
 491 006a BB61     		str	r3, [r7, #24]
 492              		.loc 1 247 25
 493 006c FB69     		ldr	r3, [r7, #28]
 494 006e 191D     		adds	r1, r3, #4
 495 0070 F961     		str	r1, [r7, #28]
 496              		.loc 1 247 30
 497 0072 1268     		ldr	r2, [r2]
 498              		.loc 1 247 28
 499 0074 1A60     		str	r2, [r3]
 248:./rt_thread/src/kservice.c ****             len -= BIGBLOCKSIZE;
 500              		.loc 1 248 17
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 14


 501 0076 7B69     		ldr	r3, [r7, #20]
 502 0078 103B     		subs	r3, r3, #16
 503 007a 7B61     		str	r3, [r7, #20]
 504              	.L30:
 242:./rt_thread/src/kservice.c ****         {
 505              		.loc 1 242 20
 506 007c 7B69     		ldr	r3, [r7, #20]
 242:./rt_thread/src/kservice.c ****         {
 507              		.loc 1 242 15
 508 007e 0F2B     		cmp	r3, #15
 509 0080 D9D8     		bhi	.L31
 249:./rt_thread/src/kservice.c ****         }
 250:./rt_thread/src/kservice.c **** 
 251:./rt_thread/src/kservice.c ****         /* Copy one long word at a time if possible. */
 252:./rt_thread/src/kservice.c ****         while (len >= LITTLEBLOCKSIZE)
 510              		.loc 1 252 15
 511 0082 0AE0     		b	.L32
 512              	.L33:
 253:./rt_thread/src/kservice.c ****         {
 254:./rt_thread/src/kservice.c ****             *aligned_dst++ = *aligned_src++;
 513              		.loc 1 254 42
 514 0084 BA69     		ldr	r2, [r7, #24]
 515 0086 131D     		adds	r3, r2, #4
 516 0088 BB61     		str	r3, [r7, #24]
 517              		.loc 1 254 25
 518 008a FB69     		ldr	r3, [r7, #28]
 519 008c 191D     		adds	r1, r3, #4
 520 008e F961     		str	r1, [r7, #28]
 521              		.loc 1 254 30
 522 0090 1268     		ldr	r2, [r2]
 523              		.loc 1 254 28
 524 0092 1A60     		str	r2, [r3]
 255:./rt_thread/src/kservice.c ****             len -= LITTLEBLOCKSIZE;
 525              		.loc 1 255 17
 526 0094 7B69     		ldr	r3, [r7, #20]
 527 0096 043B     		subs	r3, r3, #4
 528 0098 7B61     		str	r3, [r7, #20]
 529              	.L32:
 252:./rt_thread/src/kservice.c ****         {
 530              		.loc 1 252 20
 531 009a 7B69     		ldr	r3, [r7, #20]
 252:./rt_thread/src/kservice.c ****         {
 532              		.loc 1 252 15
 533 009c 032B     		cmp	r3, #3
 534 009e F1D8     		bhi	.L33
 256:./rt_thread/src/kservice.c ****         }
 257:./rt_thread/src/kservice.c **** 
 258:./rt_thread/src/kservice.c ****         /* Pick up any residual with a byte copier. */
 259:./rt_thread/src/kservice.c ****         dst_ptr = (char *)aligned_dst;
 535              		.loc 1 259 17
 536 00a0 FB69     		ldr	r3, [r7, #28]
 537 00a2 7B62     		str	r3, [r7, #36]
 260:./rt_thread/src/kservice.c ****         src_ptr = (char *)aligned_src;
 538              		.loc 1 260 17
 539 00a4 BB69     		ldr	r3, [r7, #24]
 540 00a6 3B62     		str	r3, [r7, #32]
 261:./rt_thread/src/kservice.c ****     }
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 15


 262:./rt_thread/src/kservice.c **** 
 263:./rt_thread/src/kservice.c ****     while (len--)
 541              		.loc 1 263 11
 542 00a8 07E0     		b	.L34
 543              	.L35:
 264:./rt_thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 544              		.loc 1 264 30
 545 00aa 3A6A     		ldr	r2, [r7, #32]
 546 00ac 531C     		adds	r3, r2, #1
 547 00ae 3B62     		str	r3, [r7, #32]
 548              		.loc 1 264 17
 549 00b0 7B6A     		ldr	r3, [r7, #36]
 550 00b2 591C     		adds	r1, r3, #1
 551 00b4 7962     		str	r1, [r7, #36]
 552              		.loc 1 264 22
 553 00b6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 554              		.loc 1 264 20
 555 00b8 1A70     		strb	r2, [r3]
 556              	.L34:
 263:./rt_thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 557              		.loc 1 263 15
 558 00ba 7B69     		ldr	r3, [r7, #20]
 559 00bc 5A1E     		subs	r2, r3, #1
 560 00be 7A61     		str	r2, [r7, #20]
 263:./rt_thread/src/kservice.c ****         *dst_ptr++ = *src_ptr++;
 561              		.loc 1 263 11
 562 00c0 002B     		cmp	r3, #0
 563 00c2 F2D1     		bne	.L35
 265:./rt_thread/src/kservice.c **** 
 266:./rt_thread/src/kservice.c ****     return dst;
 564              		.loc 1 266 12
 565 00c4 FB68     		ldr	r3, [r7, #12]
 267:./rt_thread/src/kservice.c **** #undef UNALIGNED
 268:./rt_thread/src/kservice.c **** #undef BIGBLOCKSIZE
 269:./rt_thread/src/kservice.c **** #undef LITTLEBLOCKSIZE
 270:./rt_thread/src/kservice.c **** #undef TOO_SMALL
 271:./rt_thread/src/kservice.c **** #endif
 272:./rt_thread/src/kservice.c **** }
 566              		.loc 1 272 1
 567 00c6 1846     		mov	r0, r3
 568 00c8 2C37     		adds	r7, r7, #44
 569              	.LCFI24:
 570              		.cfi_def_cfa_offset 4
 571 00ca BD46     		mov	sp, r7
 572              	.LCFI25:
 573              		.cfi_def_cfa_register 13
 574              		@ sp needed
 575 00cc 80BC     		pop	{r7}
 576              	.LCFI26:
 577              		.cfi_restore 7
 578              		.cfi_def_cfa_offset 0
 579 00ce 7047     		bx	lr
 580              		.cfi_endproc
 581              	.LFE19:
 583              		.section	.text.rt_memmove,"ax",%progbits
 584              		.align	1
 585              		.global	rt_memmove
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 16


 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 590              	rt_memmove:
 591              	.LFB20:
 273:./rt_thread/src/kservice.c **** 
 274:./rt_thread/src/kservice.c **** /**
 275:./rt_thread/src/kservice.c ****  * This function will move memory content from source address to destination
 276:./rt_thread/src/kservice.c ****  * address.
 277:./rt_thread/src/kservice.c ****  *
 278:./rt_thread/src/kservice.c ****  * @param dest the address of destination memory
 279:./rt_thread/src/kservice.c ****  * @param src  the address of source memory
 280:./rt_thread/src/kservice.c ****  * @param n the copied length
 281:./rt_thread/src/kservice.c ****  *
 282:./rt_thread/src/kservice.c ****  * @return the address of destination memory
 283:./rt_thread/src/kservice.c ****  */
 284:./rt_thread/src/kservice.c **** void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
 285:./rt_thread/src/kservice.c **** {
 592              		.loc 1 285 1
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 24
 595              		@ frame_needed = 1, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597 0000 80B4     		push	{r7}
 598              	.LCFI27:
 599              		.cfi_def_cfa_offset 4
 600              		.cfi_offset 7, -4
 601 0002 87B0     		sub	sp, sp, #28
 602              	.LCFI28:
 603              		.cfi_def_cfa_offset 32
 604 0004 00AF     		add	r7, sp, #0
 605              	.LCFI29:
 606              		.cfi_def_cfa_register 7
 607 0006 F860     		str	r0, [r7, #12]
 608 0008 B960     		str	r1, [r7, #8]
 609 000a 7A60     		str	r2, [r7, #4]
 286:./rt_thread/src/kservice.c ****     char *tmp = (char *)dest, *s = (char *)src;
 610              		.loc 1 286 11
 611 000c FB68     		ldr	r3, [r7, #12]
 612 000e 7B61     		str	r3, [r7, #20]
 613              		.loc 1 286 32
 614 0010 BB68     		ldr	r3, [r7, #8]
 615 0012 3B61     		str	r3, [r7, #16]
 287:./rt_thread/src/kservice.c **** 
 288:./rt_thread/src/kservice.c ****     if (s < tmp && tmp < s + n)
 616              		.loc 1 288 8
 617 0014 3A69     		ldr	r2, [r7, #16]
 618 0016 7B69     		ldr	r3, [r7, #20]
 619 0018 9A42     		cmp	r2, r3
 620 001a 26D2     		bcs	.L42
 621              		.loc 1 288 28 discriminator 1
 622 001c 3A69     		ldr	r2, [r7, #16]
 623 001e 7B68     		ldr	r3, [r7, #4]
 624 0020 1344     		add	r3, r3, r2
 625              		.loc 1 288 17 discriminator 1
 626 0022 7A69     		ldr	r2, [r7, #20]
 627 0024 9A42     		cmp	r2, r3
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 17


 628 0026 20D2     		bcs	.L42
 289:./rt_thread/src/kservice.c ****     {
 290:./rt_thread/src/kservice.c ****         tmp += n;
 629              		.loc 1 290 13
 630 0028 7A69     		ldr	r2, [r7, #20]
 631 002a 7B68     		ldr	r3, [r7, #4]
 632 002c 1344     		add	r3, r3, r2
 633 002e 7B61     		str	r3, [r7, #20]
 291:./rt_thread/src/kservice.c ****         s += n;
 634              		.loc 1 291 11
 635 0030 3A69     		ldr	r2, [r7, #16]
 636 0032 7B68     		ldr	r3, [r7, #4]
 637 0034 1344     		add	r3, r3, r2
 638 0036 3B61     		str	r3, [r7, #16]
 292:./rt_thread/src/kservice.c **** 
 293:./rt_thread/src/kservice.c ****         while (n--)
 639              		.loc 1 293 15
 640 0038 09E0     		b	.L39
 641              	.L40:
 294:./rt_thread/src/kservice.c ****             *(--tmp) = *(--s);
 642              		.loc 1 294 22
 643 003a 3B69     		ldr	r3, [r7, #16]
 644 003c 013B     		subs	r3, r3, #1
 645 003e 3B61     		str	r3, [r7, #16]
 646 0040 7B69     		ldr	r3, [r7, #20]
 647 0042 013B     		subs	r3, r3, #1
 648 0044 7B61     		str	r3, [r7, #20]
 649              		.loc 1 294 24
 650 0046 3B69     		ldr	r3, [r7, #16]
 651 0048 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 652              		.loc 1 294 22
 653 004a 7B69     		ldr	r3, [r7, #20]
 654 004c 1A70     		strb	r2, [r3]
 655              	.L39:
 293:./rt_thread/src/kservice.c ****             *(--tmp) = *(--s);
 656              		.loc 1 293 17
 657 004e 7B68     		ldr	r3, [r7, #4]
 658 0050 5A1E     		subs	r2, r3, #1
 659 0052 7A60     		str	r2, [r7, #4]
 293:./rt_thread/src/kservice.c ****             *(--tmp) = *(--s);
 660              		.loc 1 293 15
 661 0054 002B     		cmp	r3, #0
 662 0056 F0D1     		bne	.L40
 288:./rt_thread/src/kservice.c ****     {
 663              		.loc 1 288 8
 664 0058 0CE0     		b	.L41
 665              	.L43:
 295:./rt_thread/src/kservice.c ****     }
 296:./rt_thread/src/kservice.c ****     else
 297:./rt_thread/src/kservice.c ****     {
 298:./rt_thread/src/kservice.c ****         while (n--)
 299:./rt_thread/src/kservice.c ****             *tmp++ = *s++;
 666              		.loc 1 299 24
 667 005a 3A69     		ldr	r2, [r7, #16]
 668 005c 531C     		adds	r3, r2, #1
 669 005e 3B61     		str	r3, [r7, #16]
 670              		.loc 1 299 17
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 18


 671 0060 7B69     		ldr	r3, [r7, #20]
 672 0062 591C     		adds	r1, r3, #1
 673 0064 7961     		str	r1, [r7, #20]
 674              		.loc 1 299 22
 675 0066 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 676              		.loc 1 299 20
 677 0068 1A70     		strb	r2, [r3]
 678              	.L42:
 298:./rt_thread/src/kservice.c ****             *tmp++ = *s++;
 679              		.loc 1 298 17
 680 006a 7B68     		ldr	r3, [r7, #4]
 681 006c 5A1E     		subs	r2, r3, #1
 682 006e 7A60     		str	r2, [r7, #4]
 298:./rt_thread/src/kservice.c ****             *tmp++ = *s++;
 683              		.loc 1 298 15
 684 0070 002B     		cmp	r3, #0
 685 0072 F2D1     		bne	.L43
 686              	.L41:
 300:./rt_thread/src/kservice.c ****     }
 301:./rt_thread/src/kservice.c **** 
 302:./rt_thread/src/kservice.c ****     return dest;
 687              		.loc 1 302 12
 688 0074 FB68     		ldr	r3, [r7, #12]
 303:./rt_thread/src/kservice.c **** }
 689              		.loc 1 303 1
 690 0076 1846     		mov	r0, r3
 691 0078 1C37     		adds	r7, r7, #28
 692              	.LCFI30:
 693              		.cfi_def_cfa_offset 4
 694 007a BD46     		mov	sp, r7
 695              	.LCFI31:
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 007c 80BC     		pop	{r7}
 699              	.LCFI32:
 700              		.cfi_restore 7
 701              		.cfi_def_cfa_offset 0
 702 007e 7047     		bx	lr
 703              		.cfi_endproc
 704              	.LFE20:
 706              		.section	.text.rt_memcmp,"ax",%progbits
 707              		.align	1
 708              		.global	rt_memcmp
 709              		.syntax unified
 710              		.thumb
 711              		.thumb_func
 713              	rt_memcmp:
 714              	.LFB21:
 304:./rt_thread/src/kservice.c **** 
 305:./rt_thread/src/kservice.c **** /**
 306:./rt_thread/src/kservice.c ****  * This function will compare two areas of memory
 307:./rt_thread/src/kservice.c ****  *
 308:./rt_thread/src/kservice.c ****  * @param cs one area of memory
 309:./rt_thread/src/kservice.c ****  * @param ct another area of memory
 310:./rt_thread/src/kservice.c ****  * @param count the size of the area
 311:./rt_thread/src/kservice.c ****  *
 312:./rt_thread/src/kservice.c ****  * @return the result
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 19


 313:./rt_thread/src/kservice.c ****  */
 314:./rt_thread/src/kservice.c **** rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
 315:./rt_thread/src/kservice.c **** {
 715              		.loc 1 315 1
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 32
 718              		@ frame_needed = 1, uses_anonymous_args = 0
 719              		@ link register save eliminated.
 720 0000 80B4     		push	{r7}
 721              	.LCFI33:
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
 724 0002 89B0     		sub	sp, sp, #36
 725              	.LCFI34:
 726              		.cfi_def_cfa_offset 40
 727 0004 00AF     		add	r7, sp, #0
 728              	.LCFI35:
 729              		.cfi_def_cfa_register 7
 730 0006 F860     		str	r0, [r7, #12]
 731 0008 B960     		str	r1, [r7, #8]
 732 000a 7A60     		str	r2, [r7, #4]
 316:./rt_thread/src/kservice.c ****     const unsigned char *su1, *su2;
 317:./rt_thread/src/kservice.c ****     int res = 0;
 733              		.loc 1 317 9
 734 000c 0023     		movs	r3, #0
 735 000e 7B61     		str	r3, [r7, #20]
 318:./rt_thread/src/kservice.c **** 
 319:./rt_thread/src/kservice.c ****     for (su1 = (const unsigned char *)cs, su2 = (const unsigned char *)ct; 0 < count; ++su1, ++su2,
 736              		.loc 1 319 14
 737 0010 FB68     		ldr	r3, [r7, #12]
 738 0012 FB61     		str	r3, [r7, #28]
 739              		.loc 1 319 47
 740 0014 BB68     		ldr	r3, [r7, #8]
 741 0016 BB61     		str	r3, [r7, #24]
 742              		.loc 1 319 5
 743 0018 12E0     		b	.L46
 744              	.L49:
 320:./rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 745              		.loc 1 320 20
 746 001a FB69     		ldr	r3, [r7, #28]
 747 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 748 001e 1A46     		mov	r2, r3
 749              		.loc 1 320 27
 750 0020 BB69     		ldr	r3, [r7, #24]
 751 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 752              		.loc 1 320 18
 753 0024 D31A     		subs	r3, r2, r3
 754 0026 7B61     		str	r3, [r7, #20]
 755              		.loc 1 320 12
 756 0028 7B69     		ldr	r3, [r7, #20]
 757 002a 002B     		cmp	r3, #0
 758 002c 0CD1     		bne	.L51
 319:./rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 759              		.loc 1 319 87 discriminator 2
 760 002e FB69     		ldr	r3, [r7, #28]
 761 0030 0133     		adds	r3, r3, #1
 762 0032 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 20


 319:./rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 763              		.loc 1 319 94 discriminator 2
 764 0034 BB69     		ldr	r3, [r7, #24]
 765 0036 0133     		adds	r3, r3, #1
 766 0038 BB61     		str	r3, [r7, #24]
 319:./rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 767              		.loc 1 319 106 discriminator 2
 768 003a 7B68     		ldr	r3, [r7, #4]
 769 003c 013B     		subs	r3, r3, #1
 770 003e 7B60     		str	r3, [r7, #4]
 771              	.L46:
 319:./rt_thread/src/kservice.c ****         if ((res = *su1 - *su2) != 0)
 772              		.loc 1 319 5 discriminator 1
 773 0040 7B68     		ldr	r3, [r7, #4]
 774 0042 002B     		cmp	r3, #0
 775 0044 E9D1     		bne	.L49
 776 0046 00E0     		b	.L48
 777              	.L51:
 321:./rt_thread/src/kservice.c ****             break;
 778              		.loc 1 321 13
 779 0048 00BF     		nop
 780              	.L48:
 322:./rt_thread/src/kservice.c **** 
 323:./rt_thread/src/kservice.c ****     return res;
 781              		.loc 1 323 12
 782 004a 7B69     		ldr	r3, [r7, #20]
 324:./rt_thread/src/kservice.c **** }
 783              		.loc 1 324 1
 784 004c 1846     		mov	r0, r3
 785 004e 2437     		adds	r7, r7, #36
 786              	.LCFI36:
 787              		.cfi_def_cfa_offset 4
 788 0050 BD46     		mov	sp, r7
 789              	.LCFI37:
 790              		.cfi_def_cfa_register 13
 791              		@ sp needed
 792 0052 80BC     		pop	{r7}
 793              	.LCFI38:
 794              		.cfi_restore 7
 795              		.cfi_def_cfa_offset 0
 796 0054 7047     		bx	lr
 797              		.cfi_endproc
 798              	.LFE21:
 800              		.section	.text.rt_strstr,"ax",%progbits
 801              		.align	1
 802              		.global	rt_strstr
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 807              	rt_strstr:
 808              	.LFB22:
 325:./rt_thread/src/kservice.c **** 
 326:./rt_thread/src/kservice.c **** /**
 327:./rt_thread/src/kservice.c ****  * This function will return the first occurrence of a string.
 328:./rt_thread/src/kservice.c ****  *
 329:./rt_thread/src/kservice.c ****  * @param s1 the source string
 330:./rt_thread/src/kservice.c ****  * @param s2 the find string
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 21


 331:./rt_thread/src/kservice.c ****  *
 332:./rt_thread/src/kservice.c ****  * @return the first occurrence of a s2 in s1, or RT_NULL if no found.
 333:./rt_thread/src/kservice.c ****  */
 334:./rt_thread/src/kservice.c **** char *rt_strstr(const char *s1, const char *s2)
 335:./rt_thread/src/kservice.c **** {
 809              		.loc 1 335 1
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 16
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813 0000 80B5     		push	{r7, lr}
 814              	.LCFI39:
 815              		.cfi_def_cfa_offset 8
 816              		.cfi_offset 7, -8
 817              		.cfi_offset 14, -4
 818 0002 84B0     		sub	sp, sp, #16
 819              	.LCFI40:
 820              		.cfi_def_cfa_offset 24
 821 0004 00AF     		add	r7, sp, #0
 822              	.LCFI41:
 823              		.cfi_def_cfa_register 7
 824 0006 7860     		str	r0, [r7, #4]
 825 0008 3960     		str	r1, [r7]
 336:./rt_thread/src/kservice.c ****     int l1, l2;
 337:./rt_thread/src/kservice.c **** 
 338:./rt_thread/src/kservice.c ****     l2 = rt_strlen(s2);
 826              		.loc 1 338 10
 827 000a 3868     		ldr	r0, [r7]
 828 000c FFF7FEFF 		bl	rt_strlen
 829 0010 0346     		mov	r3, r0
 830              		.loc 1 338 8
 831 0012 BB60     		str	r3, [r7, #8]
 339:./rt_thread/src/kservice.c ****     if (!l2)
 832              		.loc 1 339 8
 833 0014 BB68     		ldr	r3, [r7, #8]
 834 0016 002B     		cmp	r3, #0
 835 0018 01D1     		bne	.L53
 340:./rt_thread/src/kservice.c ****         return (char *)s1;
 836              		.loc 1 340 16
 837 001a 7B68     		ldr	r3, [r7, #4]
 838 001c 1BE0     		b	.L54
 839              	.L53:
 341:./rt_thread/src/kservice.c ****     l1 = rt_strlen(s1);
 840              		.loc 1 341 10
 841 001e 7868     		ldr	r0, [r7, #4]
 842 0020 FFF7FEFF 		bl	rt_strlen
 843 0024 0346     		mov	r3, r0
 844              		.loc 1 341 8
 845 0026 FB60     		str	r3, [r7, #12]
 342:./rt_thread/src/kservice.c ****     while (l1 >= l2)
 846              		.loc 1 342 11
 847 0028 10E0     		b	.L55
 848              	.L57:
 343:./rt_thread/src/kservice.c ****     {
 344:./rt_thread/src/kservice.c ****         l1 --;
 849              		.loc 1 344 12
 850 002a FB68     		ldr	r3, [r7, #12]
 851 002c 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 22


 852 002e FB60     		str	r3, [r7, #12]
 345:./rt_thread/src/kservice.c ****         if (!rt_memcmp(s1, s2, l2))
 853              		.loc 1 345 14
 854 0030 BB68     		ldr	r3, [r7, #8]
 855 0032 1A46     		mov	r2, r3
 856 0034 3968     		ldr	r1, [r7]
 857 0036 7868     		ldr	r0, [r7, #4]
 858 0038 FFF7FEFF 		bl	rt_memcmp
 859 003c 0346     		mov	r3, r0
 860              		.loc 1 345 12
 861 003e 002B     		cmp	r3, #0
 862 0040 01D1     		bne	.L56
 346:./rt_thread/src/kservice.c ****             return (char *)s1;
 863              		.loc 1 346 20
 864 0042 7B68     		ldr	r3, [r7, #4]
 865 0044 07E0     		b	.L54
 866              	.L56:
 347:./rt_thread/src/kservice.c ****         s1 ++;
 867              		.loc 1 347 12
 868 0046 7B68     		ldr	r3, [r7, #4]
 869 0048 0133     		adds	r3, r3, #1
 870 004a 7B60     		str	r3, [r7, #4]
 871              	.L55:
 342:./rt_thread/src/kservice.c ****     {
 872              		.loc 1 342 11
 873 004c FA68     		ldr	r2, [r7, #12]
 874 004e BB68     		ldr	r3, [r7, #8]
 875 0050 9A42     		cmp	r2, r3
 876 0052 EADA     		bge	.L57
 348:./rt_thread/src/kservice.c ****     }
 349:./rt_thread/src/kservice.c **** 
 350:./rt_thread/src/kservice.c ****     return RT_NULL;
 877              		.loc 1 350 12
 878 0054 0023     		movs	r3, #0
 879              	.L54:
 351:./rt_thread/src/kservice.c **** }
 880              		.loc 1 351 1
 881 0056 1846     		mov	r0, r3
 882 0058 1037     		adds	r7, r7, #16
 883              	.LCFI42:
 884              		.cfi_def_cfa_offset 8
 885 005a BD46     		mov	sp, r7
 886              	.LCFI43:
 887              		.cfi_def_cfa_register 13
 888              		@ sp needed
 889 005c 80BD     		pop	{r7, pc}
 890              		.cfi_endproc
 891              	.LFE22:
 893              		.section	.text.rt_strcasecmp,"ax",%progbits
 894              		.align	1
 895              		.global	rt_strcasecmp
 896              		.syntax unified
 897              		.thumb
 898              		.thumb_func
 900              	rt_strcasecmp:
 901              	.LFB23:
 352:./rt_thread/src/kservice.c **** 
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 23


 353:./rt_thread/src/kservice.c **** /**
 354:./rt_thread/src/kservice.c ****  * This function will compare two strings while ignoring differences in case
 355:./rt_thread/src/kservice.c ****  *
 356:./rt_thread/src/kservice.c ****  * @param a the string to be compared
 357:./rt_thread/src/kservice.c ****  * @param b the string to be compared
 358:./rt_thread/src/kservice.c ****  *
 359:./rt_thread/src/kservice.c ****  * @return the result
 360:./rt_thread/src/kservice.c ****  */
 361:./rt_thread/src/kservice.c **** rt_int32_t rt_strcasecmp(const char *a, const char *b)
 362:./rt_thread/src/kservice.c **** {
 902              		.loc 1 362 1
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 16
 905              		@ frame_needed = 1, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907 0000 80B4     		push	{r7}
 908              	.LCFI44:
 909              		.cfi_def_cfa_offset 4
 910              		.cfi_offset 7, -4
 911 0002 85B0     		sub	sp, sp, #20
 912              	.LCFI45:
 913              		.cfi_def_cfa_offset 24
 914 0004 00AF     		add	r7, sp, #0
 915              	.LCFI46:
 916              		.cfi_def_cfa_register 7
 917 0006 7860     		str	r0, [r7, #4]
 918 0008 3960     		str	r1, [r7]
 919              	.L62:
 363:./rt_thread/src/kservice.c ****     int ca, cb;
 364:./rt_thread/src/kservice.c **** 
 365:./rt_thread/src/kservice.c ****     do
 366:./rt_thread/src/kservice.c ****     {
 367:./rt_thread/src/kservice.c ****         ca = *a++ & 0xff;
 920              		.loc 1 367 16
 921 000a 7B68     		ldr	r3, [r7, #4]
 922 000c 5A1C     		adds	r2, r3, #1
 923 000e 7A60     		str	r2, [r7, #4]
 924              		.loc 1 367 14
 925 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 926              		.loc 1 367 12
 927 0012 FB60     		str	r3, [r7, #12]
 368:./rt_thread/src/kservice.c ****         cb = *b++ & 0xff;
 928              		.loc 1 368 16
 929 0014 3B68     		ldr	r3, [r7]
 930 0016 5A1C     		adds	r2, r3, #1
 931 0018 3A60     		str	r2, [r7]
 932              		.loc 1 368 14
 933 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 934              		.loc 1 368 12
 935 001c BB60     		str	r3, [r7, #8]
 369:./rt_thread/src/kservice.c ****         if (ca >= 'A' && ca <= 'Z')
 936              		.loc 1 369 12
 937 001e FB68     		ldr	r3, [r7, #12]
 938 0020 402B     		cmp	r3, #64
 939 0022 05DD     		ble	.L59
 940              		.loc 1 369 23 discriminator 1
 941 0024 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 24


 942 0026 5A2B     		cmp	r3, #90
 943 0028 02DC     		bgt	.L59
 370:./rt_thread/src/kservice.c ****             ca += 'a' - 'A';
 944              		.loc 1 370 16
 945 002a FB68     		ldr	r3, [r7, #12]
 946 002c 2033     		adds	r3, r3, #32
 947 002e FB60     		str	r3, [r7, #12]
 948              	.L59:
 371:./rt_thread/src/kservice.c ****         if (cb >= 'A' && cb <= 'Z')
 949              		.loc 1 371 12
 950 0030 BB68     		ldr	r3, [r7, #8]
 951 0032 402B     		cmp	r3, #64
 952 0034 05DD     		ble	.L60
 953              		.loc 1 371 23 discriminator 1
 954 0036 BB68     		ldr	r3, [r7, #8]
 955 0038 5A2B     		cmp	r3, #90
 956 003a 02DC     		bgt	.L60
 372:./rt_thread/src/kservice.c ****             cb += 'a' - 'A';
 957              		.loc 1 372 16
 958 003c BB68     		ldr	r3, [r7, #8]
 959 003e 2033     		adds	r3, r3, #32
 960 0040 BB60     		str	r3, [r7, #8]
 961              	.L60:
 373:./rt_thread/src/kservice.c ****     }
 374:./rt_thread/src/kservice.c ****     while (ca == cb && ca != '\0');
 962              		.loc 1 374 5
 963 0042 FA68     		ldr	r2, [r7, #12]
 964 0044 BB68     		ldr	r3, [r7, #8]
 965 0046 9A42     		cmp	r2, r3
 966 0048 02D1     		bne	.L61
 967              		.loc 1 374 21 discriminator 1
 968 004a FB68     		ldr	r3, [r7, #12]
 969 004c 002B     		cmp	r3, #0
 970 004e DCD1     		bne	.L62
 971              	.L61:
 375:./rt_thread/src/kservice.c **** 
 376:./rt_thread/src/kservice.c ****     return ca - cb;
 972              		.loc 1 376 15
 973 0050 FA68     		ldr	r2, [r7, #12]
 974 0052 BB68     		ldr	r3, [r7, #8]
 975 0054 D31A     		subs	r3, r2, r3
 377:./rt_thread/src/kservice.c **** }
 976              		.loc 1 377 1
 977 0056 1846     		mov	r0, r3
 978 0058 1437     		adds	r7, r7, #20
 979              	.LCFI47:
 980              		.cfi_def_cfa_offset 4
 981 005a BD46     		mov	sp, r7
 982              	.LCFI48:
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 005c 80BC     		pop	{r7}
 986              	.LCFI49:
 987              		.cfi_restore 7
 988              		.cfi_def_cfa_offset 0
 989 005e 7047     		bx	lr
 990              		.cfi_endproc
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 25


 991              	.LFE23:
 993              		.section	.text.rt_strncpy,"ax",%progbits
 994              		.align	1
 995              		.global	rt_strncpy
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 1000              	rt_strncpy:
 1001              	.LFB24:
 378:./rt_thread/src/kservice.c **** 
 379:./rt_thread/src/kservice.c **** /**
 380:./rt_thread/src/kservice.c ****  * This function will copy string no more than n bytes.
 381:./rt_thread/src/kservice.c ****  *
 382:./rt_thread/src/kservice.c ****  * @param dst the string to copy
 383:./rt_thread/src/kservice.c ****  * @param src the string to be copied
 384:./rt_thread/src/kservice.c ****  * @param n the maximum copied length
 385:./rt_thread/src/kservice.c ****  *
 386:./rt_thread/src/kservice.c ****  * @return the result
 387:./rt_thread/src/kservice.c ****  */
 388:./rt_thread/src/kservice.c **** char *rt_strncpy(char *dst, const char *src, rt_ubase_t n)
 389:./rt_thread/src/kservice.c **** {
 1002              		.loc 1 389 1
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 24
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 1007 0000 80B4     		push	{r7}
 1008              	.LCFI50:
 1009              		.cfi_def_cfa_offset 4
 1010              		.cfi_offset 7, -4
 1011 0002 87B0     		sub	sp, sp, #28
 1012              	.LCFI51:
 1013              		.cfi_def_cfa_offset 32
 1014 0004 00AF     		add	r7, sp, #0
 1015              	.LCFI52:
 1016              		.cfi_def_cfa_register 7
 1017 0006 F860     		str	r0, [r7, #12]
 1018 0008 B960     		str	r1, [r7, #8]
 1019 000a 7A60     		str	r2, [r7, #4]
 390:./rt_thread/src/kservice.c ****     if (n != 0)
 1020              		.loc 1 390 8
 1021 000c 7B68     		ldr	r3, [r7, #4]
 1022 000e 002B     		cmp	r3, #0
 1023 0010 21D0     		beq	.L65
 1024              	.LBB2:
 391:./rt_thread/src/kservice.c ****     {
 392:./rt_thread/src/kservice.c ****         char *d = dst;
 1025              		.loc 1 392 15
 1026 0012 FB68     		ldr	r3, [r7, #12]
 1027 0014 7B61     		str	r3, [r7, #20]
 393:./rt_thread/src/kservice.c ****         const char *s = src;
 1028              		.loc 1 393 21
 1029 0016 BB68     		ldr	r3, [r7, #8]
 1030 0018 3B61     		str	r3, [r7, #16]
 1031              	.L69:
 394:./rt_thread/src/kservice.c **** 
 395:./rt_thread/src/kservice.c ****         do
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 26


 396:./rt_thread/src/kservice.c ****         {
 397:./rt_thread/src/kservice.c ****             if ((*d++ = *s++) == 0)
 1032              		.loc 1 397 27
 1033 001a 3A69     		ldr	r2, [r7, #16]
 1034 001c 531C     		adds	r3, r2, #1
 1035 001e 3B61     		str	r3, [r7, #16]
 1036              		.loc 1 397 20
 1037 0020 7B69     		ldr	r3, [r7, #20]
 1038 0022 591C     		adds	r1, r3, #1
 1039 0024 7961     		str	r1, [r7, #20]
 1040              		.loc 1 397 25
 1041 0026 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1042              		.loc 1 397 23
 1043 0028 1A70     		strb	r2, [r3]
 1044              		.loc 1 397 18
 1045 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1046              		.loc 1 397 16
 1047 002c 002B     		cmp	r3, #0
 1048 002e 0CD1     		bne	.L66
 398:./rt_thread/src/kservice.c ****             {
 399:./rt_thread/src/kservice.c ****                 /* NUL pad the remaining n-1 bytes */
 400:./rt_thread/src/kservice.c ****                 while (--n != 0)
 1049              		.loc 1 400 23
 1050 0030 04E0     		b	.L67
 1051              	.L68:
 401:./rt_thread/src/kservice.c ****                     *d++ = 0;
 1052              		.loc 1 401 23
 1053 0032 7B69     		ldr	r3, [r7, #20]
 1054 0034 5A1C     		adds	r2, r3, #1
 1055 0036 7A61     		str	r2, [r7, #20]
 1056              		.loc 1 401 26
 1057 0038 0022     		movs	r2, #0
 1058 003a 1A70     		strb	r2, [r3]
 1059              	.L67:
 400:./rt_thread/src/kservice.c ****                     *d++ = 0;
 1060              		.loc 1 400 23
 1061 003c 7B68     		ldr	r3, [r7, #4]
 1062 003e 013B     		subs	r3, r3, #1
 1063 0040 7B60     		str	r3, [r7, #4]
 1064 0042 7B68     		ldr	r3, [r7, #4]
 1065 0044 002B     		cmp	r3, #0
 1066 0046 F4D1     		bne	.L68
 402:./rt_thread/src/kservice.c ****                 break;
 1067              		.loc 1 402 17
 1068 0048 05E0     		b	.L65
 1069              	.L66:
 403:./rt_thread/src/kservice.c ****             }
 404:./rt_thread/src/kservice.c ****         } while (--n != 0);
 1070              		.loc 1 404 9
 1071 004a 7B68     		ldr	r3, [r7, #4]
 1072 004c 013B     		subs	r3, r3, #1
 1073 004e 7B60     		str	r3, [r7, #4]
 1074 0050 7B68     		ldr	r3, [r7, #4]
 1075 0052 002B     		cmp	r3, #0
 1076 0054 E1D1     		bne	.L69
 1077              	.L65:
 1078              	.LBE2:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 27


 405:./rt_thread/src/kservice.c ****     }
 406:./rt_thread/src/kservice.c **** 
 407:./rt_thread/src/kservice.c ****     return (dst);
 1079              		.loc 1 407 12
 1080 0056 FB68     		ldr	r3, [r7, #12]
 408:./rt_thread/src/kservice.c **** }
 1081              		.loc 1 408 1
 1082 0058 1846     		mov	r0, r3
 1083 005a 1C37     		adds	r7, r7, #28
 1084              	.LCFI53:
 1085              		.cfi_def_cfa_offset 4
 1086 005c BD46     		mov	sp, r7
 1087              	.LCFI54:
 1088              		.cfi_def_cfa_register 13
 1089              		@ sp needed
 1090 005e 80BC     		pop	{r7}
 1091              	.LCFI55:
 1092              		.cfi_restore 7
 1093              		.cfi_def_cfa_offset 0
 1094 0060 7047     		bx	lr
 1095              		.cfi_endproc
 1096              	.LFE24:
 1098              		.section	.text.rt_strncmp,"ax",%progbits
 1099              		.align	1
 1100              		.global	rt_strncmp
 1101              		.syntax unified
 1102              		.thumb
 1103              		.thumb_func
 1105              	rt_strncmp:
 1106              	.LFB25:
 409:./rt_thread/src/kservice.c **** 
 410:./rt_thread/src/kservice.c **** /**
 411:./rt_thread/src/kservice.c ****  * This function will compare two strings with specified maximum length
 412:./rt_thread/src/kservice.c ****  *
 413:./rt_thread/src/kservice.c ****  * @param cs the string to be compared
 414:./rt_thread/src/kservice.c ****  * @param ct the string to be compared
 415:./rt_thread/src/kservice.c ****  * @param count the maximum compare length
 416:./rt_thread/src/kservice.c ****  *
 417:./rt_thread/src/kservice.c ****  * @return the result
 418:./rt_thread/src/kservice.c ****  */
 419:./rt_thread/src/kservice.c **** rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
 420:./rt_thread/src/kservice.c **** {
 1107              		.loc 1 420 1
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 16
 1110              		@ frame_needed = 1, uses_anonymous_args = 0
 1111              		@ link register save eliminated.
 1112 0000 90B4     		push	{r4, r7}
 1113              	.LCFI56:
 1114              		.cfi_def_cfa_offset 8
 1115              		.cfi_offset 4, -8
 1116              		.cfi_offset 7, -4
 1117 0002 84B0     		sub	sp, sp, #16
 1118              	.LCFI57:
 1119              		.cfi_def_cfa_offset 24
 1120 0004 00AF     		add	r7, sp, #0
 1121              	.LCFI58:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 28


 1122              		.cfi_def_cfa_register 7
 1123 0006 F860     		str	r0, [r7, #12]
 1124 0008 B960     		str	r1, [r7, #8]
 1125 000a 7A60     		str	r2, [r7, #4]
 421:./rt_thread/src/kservice.c ****     register signed char __res = 0;
 1126              		.loc 1 421 26
 1127 000c 0024     		movs	r4, #0
 422:./rt_thread/src/kservice.c **** 
 423:./rt_thread/src/kservice.c ****     while (count)
 1128              		.loc 1 423 11
 1129 000e 13E0     		b	.L72
 1130              	.L74:
 424:./rt_thread/src/kservice.c ****     {
 425:./rt_thread/src/kservice.c ****         if ((__res = *cs - *ct++) != 0 || !*cs++)
 1131              		.loc 1 425 22
 1132 0010 FB68     		ldr	r3, [r7, #12]
 1133 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1134              		.loc 1 425 31
 1135 0014 BB68     		ldr	r3, [r7, #8]
 1136 0016 591C     		adds	r1, r3, #1
 1137 0018 B960     		str	r1, [r7, #8]
 1138              		.loc 1 425 28
 1139 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1140              		.loc 1 425 26
 1141 001c D31A     		subs	r3, r2, r3
 1142 001e DBB2     		uxtb	r3, r3
 1143              		.loc 1 425 20
 1144 0020 5CB2     		sxtb	r4, r3
 1145              		.loc 1 425 12
 1146 0022 002C     		cmp	r4, #0
 1147 0024 0BD1     		bne	.L73
 1148              		.loc 1 425 47 discriminator 1
 1149 0026 FB68     		ldr	r3, [r7, #12]
 1150 0028 5A1C     		adds	r2, r3, #1
 1151 002a FA60     		str	r2, [r7, #12]
 1152              		.loc 1 425 44 discriminator 1
 1153 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1154              		.loc 1 425 40 discriminator 1
 1155 002e 002B     		cmp	r3, #0
 1156 0030 05D0     		beq	.L73
 426:./rt_thread/src/kservice.c ****             break;
 427:./rt_thread/src/kservice.c ****         count --;
 1157              		.loc 1 427 15
 1158 0032 7B68     		ldr	r3, [r7, #4]
 1159 0034 013B     		subs	r3, r3, #1
 1160 0036 7B60     		str	r3, [r7, #4]
 1161              	.L72:
 423:./rt_thread/src/kservice.c ****     {
 1162              		.loc 1 423 11
 1163 0038 7B68     		ldr	r3, [r7, #4]
 1164 003a 002B     		cmp	r3, #0
 1165 003c E8D1     		bne	.L74
 1166              	.L73:
 428:./rt_thread/src/kservice.c ****     }
 429:./rt_thread/src/kservice.c **** 
 430:./rt_thread/src/kservice.c ****     return __res;
 1167              		.loc 1 430 12
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 29


 1168 003e 2346     		mov	r3, r4
 431:./rt_thread/src/kservice.c **** }
 1169              		.loc 1 431 1
 1170 0040 1846     		mov	r0, r3
 1171 0042 1037     		adds	r7, r7, #16
 1172              	.LCFI59:
 1173              		.cfi_def_cfa_offset 8
 1174 0044 BD46     		mov	sp, r7
 1175              	.LCFI60:
 1176              		.cfi_def_cfa_register 13
 1177              		@ sp needed
 1178 0046 90BC     		pop	{r4, r7}
 1179              	.LCFI61:
 1180              		.cfi_restore 7
 1181              		.cfi_restore 4
 1182              		.cfi_def_cfa_offset 0
 1183 0048 7047     		bx	lr
 1184              		.cfi_endproc
 1185              	.LFE25:
 1187              		.section	.text.rt_strcmp,"ax",%progbits
 1188              		.align	1
 1189              		.global	rt_strcmp
 1190              		.syntax unified
 1191              		.thumb
 1192              		.thumb_func
 1194              	rt_strcmp:
 1195              	.LFB26:
 432:./rt_thread/src/kservice.c **** 
 433:./rt_thread/src/kservice.c **** /**
 434:./rt_thread/src/kservice.c ****  * This function will compare two strings without specified length
 435:./rt_thread/src/kservice.c ****  *
 436:./rt_thread/src/kservice.c ****  * @param cs the string to be compared
 437:./rt_thread/src/kservice.c ****  * @param ct the string to be compared
 438:./rt_thread/src/kservice.c ****  *
 439:./rt_thread/src/kservice.c ****  * @return the result
 440:./rt_thread/src/kservice.c ****  */
 441:./rt_thread/src/kservice.c **** rt_int32_t rt_strcmp(const char *cs, const char *ct)
 442:./rt_thread/src/kservice.c **** {
 1196              		.loc 1 442 1
 1197              		.cfi_startproc
 1198              		@ args = 0, pretend = 0, frame = 8
 1199              		@ frame_needed = 1, uses_anonymous_args = 0
 1200              		@ link register save eliminated.
 1201 0000 80B4     		push	{r7}
 1202              	.LCFI62:
 1203              		.cfi_def_cfa_offset 4
 1204              		.cfi_offset 7, -4
 1205 0002 83B0     		sub	sp, sp, #12
 1206              	.LCFI63:
 1207              		.cfi_def_cfa_offset 16
 1208 0004 00AF     		add	r7, sp, #0
 1209              	.LCFI64:
 1210              		.cfi_def_cfa_register 7
 1211 0006 7860     		str	r0, [r7, #4]
 1212 0008 3960     		str	r1, [r7]
 443:./rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1213              		.loc 1 443 11
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 30


 1214 000a 05E0     		b	.L77
 1215              	.L79:
 444:./rt_thread/src/kservice.c ****     {
 445:./rt_thread/src/kservice.c ****         cs++;
 1216              		.loc 1 445 11
 1217 000c 7B68     		ldr	r3, [r7, #4]
 1218 000e 0133     		adds	r3, r3, #1
 1219 0010 7B60     		str	r3, [r7, #4]
 446:./rt_thread/src/kservice.c ****         ct++;
 1220              		.loc 1 446 11
 1221 0012 3B68     		ldr	r3, [r7]
 1222 0014 0133     		adds	r3, r3, #1
 1223 0016 3B60     		str	r3, [r7]
 1224              	.L77:
 443:./rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1225              		.loc 1 443 12
 1226 0018 7B68     		ldr	r3, [r7, #4]
 1227 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443:./rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1228              		.loc 1 443 11
 1229 001c 002B     		cmp	r3, #0
 1230 001e 05D0     		beq	.L78
 443:./rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1231              		.loc 1 443 19 discriminator 1
 1232 0020 7B68     		ldr	r3, [r7, #4]
 1233 0022 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 443:./rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1234              		.loc 1 443 26 discriminator 1
 1235 0024 3B68     		ldr	r3, [r7]
 1236 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 443:./rt_thread/src/kservice.c ****     while (*cs && *cs == *ct)
 1237              		.loc 1 443 16 discriminator 1
 1238 0028 9A42     		cmp	r2, r3
 1239 002a EFD0     		beq	.L79
 1240              	.L78:
 447:./rt_thread/src/kservice.c ****     }
 448:./rt_thread/src/kservice.c **** 
 449:./rt_thread/src/kservice.c ****     return (*cs - *ct);
 1241              		.loc 1 449 13
 1242 002c 7B68     		ldr	r3, [r7, #4]
 1243 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1244 0030 1A46     		mov	r2, r3
 1245              		.loc 1 449 19
 1246 0032 3B68     		ldr	r3, [r7]
 1247 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1248              		.loc 1 449 17
 1249 0036 D31A     		subs	r3, r2, r3
 450:./rt_thread/src/kservice.c **** }
 1250              		.loc 1 450 1
 1251 0038 1846     		mov	r0, r3
 1252 003a 0C37     		adds	r7, r7, #12
 1253              	.LCFI65:
 1254              		.cfi_def_cfa_offset 4
 1255 003c BD46     		mov	sp, r7
 1256              	.LCFI66:
 1257              		.cfi_def_cfa_register 13
 1258              		@ sp needed
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 31


 1259 003e 80BC     		pop	{r7}
 1260              	.LCFI67:
 1261              		.cfi_restore 7
 1262              		.cfi_def_cfa_offset 0
 1263 0040 7047     		bx	lr
 1264              		.cfi_endproc
 1265              	.LFE26:
 1267              		.section	.text.rt_strnlen,"ax",%progbits
 1268              		.align	1
 1269              		.global	rt_strnlen
 1270              		.syntax unified
 1271              		.thumb
 1272              		.thumb_func
 1274              	rt_strnlen:
 1275              	.LFB27:
 451:./rt_thread/src/kservice.c **** 
 452:./rt_thread/src/kservice.c **** /**
 453:./rt_thread/src/kservice.c ****  * The  strnlen()  function  returns the number of characters in the
 454:./rt_thread/src/kservice.c ****  * string pointed to by s, excluding the terminating null byte ('\0'),
 455:./rt_thread/src/kservice.c ****  * but at most maxlen.  In doing this, strnlen() looks only at the
 456:./rt_thread/src/kservice.c ****  * first maxlen characters in the string pointed to by s and never
 457:./rt_thread/src/kservice.c ****  * beyond s+maxlen.
 458:./rt_thread/src/kservice.c ****  *
 459:./rt_thread/src/kservice.c ****  * @param s the string
 460:./rt_thread/src/kservice.c ****  * @param maxlen the max size
 461:./rt_thread/src/kservice.c ****  * @return the length of string
 462:./rt_thread/src/kservice.c ****  */
 463:./rt_thread/src/kservice.c **** rt_size_t rt_strnlen(const char *s, rt_ubase_t maxlen)
 464:./rt_thread/src/kservice.c **** {
 1276              		.loc 1 464 1
 1277              		.cfi_startproc
 1278              		@ args = 0, pretend = 0, frame = 16
 1279              		@ frame_needed = 1, uses_anonymous_args = 0
 1280              		@ link register save eliminated.
 1281 0000 80B4     		push	{r7}
 1282              	.LCFI68:
 1283              		.cfi_def_cfa_offset 4
 1284              		.cfi_offset 7, -4
 1285 0002 85B0     		sub	sp, sp, #20
 1286              	.LCFI69:
 1287              		.cfi_def_cfa_offset 24
 1288 0004 00AF     		add	r7, sp, #0
 1289              	.LCFI70:
 1290              		.cfi_def_cfa_register 7
 1291 0006 7860     		str	r0, [r7, #4]
 1292 0008 3960     		str	r1, [r7]
 465:./rt_thread/src/kservice.c ****     const char *sc;
 466:./rt_thread/src/kservice.c **** 
 467:./rt_thread/src/kservice.c ****     for (sc = s; *sc != '\0' && (rt_ubase_t)(sc - s) < maxlen; ++sc) /* nothing */
 1293              		.loc 1 467 13
 1294 000a 7B68     		ldr	r3, [r7, #4]
 1295 000c FB60     		str	r3, [r7, #12]
 1296              		.loc 1 467 5
 1297 000e 02E0     		b	.L82
 1298              	.L84:
 1299              		.loc 1 467 64 discriminator 4
 1300 0010 FB68     		ldr	r3, [r7, #12]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 32


 1301 0012 0133     		adds	r3, r3, #1
 1302 0014 FB60     		str	r3, [r7, #12]
 1303              	.L82:
 1304              		.loc 1 467 18 discriminator 1
 1305 0016 FB68     		ldr	r3, [r7, #12]
 1306 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1307              		.loc 1 467 5 discriminator 1
 1308 001a 002B     		cmp	r3, #0
 1309 001c 06D0     		beq	.L83
 1310              		.loc 1 467 49 discriminator 3
 1311 001e FA68     		ldr	r2, [r7, #12]
 1312 0020 7B68     		ldr	r3, [r7, #4]
 1313 0022 D31A     		subs	r3, r2, r3
 1314              		.loc 1 467 33 discriminator 3
 1315 0024 1A46     		mov	r2, r3
 1316              		.loc 1 467 30 discriminator 3
 1317 0026 3B68     		ldr	r3, [r7]
 1318 0028 9342     		cmp	r3, r2
 1319 002a F1D8     		bhi	.L84
 1320              	.L83:
 468:./rt_thread/src/kservice.c ****         ;
 469:./rt_thread/src/kservice.c **** 
 470:./rt_thread/src/kservice.c ****     return sc - s;
 1321              		.loc 1 470 15
 1322 002c FA68     		ldr	r2, [r7, #12]
 1323 002e 7B68     		ldr	r3, [r7, #4]
 1324 0030 D31A     		subs	r3, r2, r3
 471:./rt_thread/src/kservice.c **** }
 1325              		.loc 1 471 1
 1326 0032 1846     		mov	r0, r3
 1327 0034 1437     		adds	r7, r7, #20
 1328              	.LCFI71:
 1329              		.cfi_def_cfa_offset 4
 1330 0036 BD46     		mov	sp, r7
 1331              	.LCFI72:
 1332              		.cfi_def_cfa_register 13
 1333              		@ sp needed
 1334 0038 80BC     		pop	{r7}
 1335              	.LCFI73:
 1336              		.cfi_restore 7
 1337              		.cfi_def_cfa_offset 0
 1338 003a 7047     		bx	lr
 1339              		.cfi_endproc
 1340              	.LFE27:
 1342              		.section	.text.rt_strlen,"ax",%progbits
 1343              		.align	1
 1344              		.global	rt_strlen
 1345              		.syntax unified
 1346              		.thumb
 1347              		.thumb_func
 1349              	rt_strlen:
 1350              	.LFB28:
 472:./rt_thread/src/kservice.c **** 
 473:./rt_thread/src/kservice.c **** /**
 474:./rt_thread/src/kservice.c ****  * This function will return the length of a string, which terminate will
 475:./rt_thread/src/kservice.c ****  * null character.
 476:./rt_thread/src/kservice.c ****  *
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 33


 477:./rt_thread/src/kservice.c ****  * @param s the string
 478:./rt_thread/src/kservice.c ****  *
 479:./rt_thread/src/kservice.c ****  * @return the length of string
 480:./rt_thread/src/kservice.c ****  */
 481:./rt_thread/src/kservice.c **** rt_size_t rt_strlen(const char *s)
 482:./rt_thread/src/kservice.c **** {
 1351              		.loc 1 482 1
 1352              		.cfi_startproc
 1353              		@ args = 0, pretend = 0, frame = 16
 1354              		@ frame_needed = 1, uses_anonymous_args = 0
 1355              		@ link register save eliminated.
 1356 0000 80B4     		push	{r7}
 1357              	.LCFI74:
 1358              		.cfi_def_cfa_offset 4
 1359              		.cfi_offset 7, -4
 1360 0002 85B0     		sub	sp, sp, #20
 1361              	.LCFI75:
 1362              		.cfi_def_cfa_offset 24
 1363 0004 00AF     		add	r7, sp, #0
 1364              	.LCFI76:
 1365              		.cfi_def_cfa_register 7
 1366 0006 7860     		str	r0, [r7, #4]
 483:./rt_thread/src/kservice.c ****     const char *sc;
 484:./rt_thread/src/kservice.c **** 
 485:./rt_thread/src/kservice.c ****     for (sc = s; *sc != '\0'; ++sc) /* nothing */
 1367              		.loc 1 485 13
 1368 0008 7B68     		ldr	r3, [r7, #4]
 1369 000a FB60     		str	r3, [r7, #12]
 1370              		.loc 1 485 5
 1371 000c 02E0     		b	.L87
 1372              	.L88:
 1373              		.loc 1 485 31 discriminator 3
 1374 000e FB68     		ldr	r3, [r7, #12]
 1375 0010 0133     		adds	r3, r3, #1
 1376 0012 FB60     		str	r3, [r7, #12]
 1377              	.L87:
 1378              		.loc 1 485 18 discriminator 1
 1379 0014 FB68     		ldr	r3, [r7, #12]
 1380 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1381              		.loc 1 485 5 discriminator 1
 1382 0018 002B     		cmp	r3, #0
 1383 001a F8D1     		bne	.L88
 486:./rt_thread/src/kservice.c ****         ;
 487:./rt_thread/src/kservice.c **** 
 488:./rt_thread/src/kservice.c ****     return sc - s;
 1384              		.loc 1 488 15
 1385 001c FA68     		ldr	r2, [r7, #12]
 1386 001e 7B68     		ldr	r3, [r7, #4]
 1387 0020 D31A     		subs	r3, r2, r3
 489:./rt_thread/src/kservice.c **** }
 1388              		.loc 1 489 1
 1389 0022 1846     		mov	r0, r3
 1390 0024 1437     		adds	r7, r7, #20
 1391              	.LCFI77:
 1392              		.cfi_def_cfa_offset 4
 1393 0026 BD46     		mov	sp, r7
 1394              	.LCFI78:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 34


 1395              		.cfi_def_cfa_register 13
 1396              		@ sp needed
 1397 0028 80BC     		pop	{r7}
 1398              	.LCFI79:
 1399              		.cfi_restore 7
 1400              		.cfi_def_cfa_offset 0
 1401 002a 7047     		bx	lr
 1402              		.cfi_endproc
 1403              	.LFE28:
 1405              		.section	.text.rt_strdup,"ax",%progbits
 1406              		.align	1
 1407              		.global	rt_strdup
 1408              		.syntax unified
 1409              		.thumb
 1410              		.thumb_func
 1412              	rt_strdup:
 1413              	.LFB29:
 490:./rt_thread/src/kservice.c **** 
 491:./rt_thread/src/kservice.c **** #ifdef RT_USING_HEAP
 492:./rt_thread/src/kservice.c **** /**
 493:./rt_thread/src/kservice.c ****  * This function will duplicate a string.
 494:./rt_thread/src/kservice.c ****  *
 495:./rt_thread/src/kservice.c ****  * @param s the string to be duplicated
 496:./rt_thread/src/kservice.c ****  *
 497:./rt_thread/src/kservice.c ****  * @return the duplicated string pointer
 498:./rt_thread/src/kservice.c ****  */
 499:./rt_thread/src/kservice.c **** char *rt_strdup(const char *s)
 500:./rt_thread/src/kservice.c **** {
 1414              		.loc 1 500 1
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 16
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418 0000 80B5     		push	{r7, lr}
 1419              	.LCFI80:
 1420              		.cfi_def_cfa_offset 8
 1421              		.cfi_offset 7, -8
 1422              		.cfi_offset 14, -4
 1423 0002 84B0     		sub	sp, sp, #16
 1424              	.LCFI81:
 1425              		.cfi_def_cfa_offset 24
 1426 0004 00AF     		add	r7, sp, #0
 1427              	.LCFI82:
 1428              		.cfi_def_cfa_register 7
 1429 0006 7860     		str	r0, [r7, #4]
 501:./rt_thread/src/kservice.c ****     rt_size_t len = rt_strlen(s) + 1;
 1430              		.loc 1 501 21
 1431 0008 7868     		ldr	r0, [r7, #4]
 1432 000a FFF7FEFF 		bl	rt_strlen
 1433 000e 0346     		mov	r3, r0
 1434              		.loc 1 501 15
 1435 0010 0133     		adds	r3, r3, #1
 1436 0012 FB60     		str	r3, [r7, #12]
 502:./rt_thread/src/kservice.c ****     char *tmp = (char *)rt_malloc(len);
 1437              		.loc 1 502 25
 1438 0014 F868     		ldr	r0, [r7, #12]
 1439 0016 FFF7FEFF 		bl	rt_malloc
 1440 001a B860     		str	r0, [r7, #8]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 35


 503:./rt_thread/src/kservice.c **** 
 504:./rt_thread/src/kservice.c ****     if (!tmp)
 1441              		.loc 1 504 8
 1442 001c BB68     		ldr	r3, [r7, #8]
 1443 001e 002B     		cmp	r3, #0
 1444 0020 01D1     		bne	.L91
 505:./rt_thread/src/kservice.c ****         return RT_NULL;
 1445              		.loc 1 505 16
 1446 0022 0023     		movs	r3, #0
 1447 0024 05E0     		b	.L92
 1448              	.L91:
 506:./rt_thread/src/kservice.c **** 
 507:./rt_thread/src/kservice.c ****     rt_memcpy(tmp, s, len);
 1449              		.loc 1 507 5
 1450 0026 FA68     		ldr	r2, [r7, #12]
 1451 0028 7968     		ldr	r1, [r7, #4]
 1452 002a B868     		ldr	r0, [r7, #8]
 1453 002c FFF7FEFF 		bl	rt_memcpy
 508:./rt_thread/src/kservice.c **** 
 509:./rt_thread/src/kservice.c ****     return tmp;
 1454              		.loc 1 509 12
 1455 0030 BB68     		ldr	r3, [r7, #8]
 1456              	.L92:
 510:./rt_thread/src/kservice.c **** }
 1457              		.loc 1 510 1
 1458 0032 1846     		mov	r0, r3
 1459 0034 1037     		adds	r7, r7, #16
 1460              	.LCFI83:
 1461              		.cfi_def_cfa_offset 8
 1462 0036 BD46     		mov	sp, r7
 1463              	.LCFI84:
 1464              		.cfi_def_cfa_register 13
 1465              		@ sp needed
 1466 0038 80BD     		pop	{r7, pc}
 1467              		.cfi_endproc
 1468              	.LFE29:
 1470              		.section	.rodata
 1471              		.align	2
 1472              	.LC0:
 1473 0000 0A205C20 		.ascii	"\012 \\ | /\012\000"
 1473      7C202F0A 
 1473      00
 1474 0009 000000   		.align	2
 1475              	.LC1:
 1476 000c 2D205254 		.ascii	"- RT -     Thread Operating System\012\000"
 1476      202D2020 
 1476      20202054 
 1476      68726561 
 1476      64204F70 
 1477              		.align	2
 1478              	.LC2:
 1479 0030 202F207C 		.ascii	" / | \\     %d.%d.%d build %s\012\000"
 1479      205C2020 
 1479      20202025 
 1479      642E2564 
 1479      2E256420 
 1480 004e 0000     		.align	2
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 36


 1481              	.LC3:
 1482 0050 41707220 		.ascii	"Apr 27 2023\000"
 1482      32372032 
 1482      30323300 
 1483              		.align	2
 1484              	.LC4:
 1485 005c 20323030 		.ascii	" 2006 - 2020 Copyright by rt-thread team\012\000"
 1485      36202D20 
 1485      32303230 
 1485      20436F70 
 1485      79726967 
 1486              		.section	.text.rt_show_version,"ax",%progbits
 1487              		.align	1
 1488              		.global	rt_show_version
 1489              		.syntax unified
 1490              		.thumb
 1491              		.thumb_func
 1493              	rt_show_version:
 1494              	.LFB30:
 511:./rt_thread/src/kservice.c **** 
 512:./rt_thread/src/kservice.c **** #if defined(__CC_ARM) || defined(__CLANG_ARM)
 513:./rt_thread/src/kservice.c **** char *strdup(const char *s) __attribute__((alias("rt_strdup")));
 514:./rt_thread/src/kservice.c **** #endif
 515:./rt_thread/src/kservice.c **** #endif
 516:./rt_thread/src/kservice.c **** 
 517:./rt_thread/src/kservice.c **** /**
 518:./rt_thread/src/kservice.c ****  * This function will show the version of rt-thread rtos
 519:./rt_thread/src/kservice.c ****  */
 520:./rt_thread/src/kservice.c **** void rt_show_version(void)
 521:./rt_thread/src/kservice.c **** {
 1495              		.loc 1 521 1
 1496              		.cfi_startproc
 1497              		@ args = 0, pretend = 0, frame = 0
 1498              		@ frame_needed = 1, uses_anonymous_args = 0
 1499 0000 80B5     		push	{r7, lr}
 1500              	.LCFI85:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 7, -8
 1503              		.cfi_offset 14, -4
 1504 0002 82B0     		sub	sp, sp, #8
 1505              	.LCFI86:
 1506              		.cfi_def_cfa_offset 16
 1507 0004 02AF     		add	r7, sp, #8
 1508              	.LCFI87:
 1509              		.cfi_def_cfa 7, 8
 522:./rt_thread/src/kservice.c ****     rt_kprintf("\n \\ | /\n");
 1510              		.loc 1 522 5
 1511 0006 0A48     		ldr	r0, .L94
 1512 0008 FFF7FEFF 		bl	rt_kprintf
 523:./rt_thread/src/kservice.c ****     rt_kprintf("- RT -     Thread Operating System\n");
 1513              		.loc 1 523 5
 1514 000c 0948     		ldr	r0, .L94+4
 1515 000e FFF7FEFF 		bl	rt_kprintf
 524:./rt_thread/src/kservice.c ****     rt_kprintf(" / | \\     %d.%d.%d build %s\n",
 1516              		.loc 1 524 5
 1517 0012 094B     		ldr	r3, .L94+8
 1518 0014 0093     		str	r3, [sp]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 37


 1519 0016 0523     		movs	r3, #5
 1520 0018 0122     		movs	r2, #1
 1521 001a 0321     		movs	r1, #3
 1522 001c 0748     		ldr	r0, .L94+12
 1523 001e FFF7FEFF 		bl	rt_kprintf
 525:./rt_thread/src/kservice.c ****                RT_VERSION, RT_SUBVERSION, RT_REVISION, __DATE__);
 526:./rt_thread/src/kservice.c ****     rt_kprintf(" 2006 - 2020 Copyright by rt-thread team\n");
 1524              		.loc 1 526 5
 1525 0022 0748     		ldr	r0, .L94+16
 1526 0024 FFF7FEFF 		bl	rt_kprintf
 527:./rt_thread/src/kservice.c **** }
 1527              		.loc 1 527 1
 1528 0028 00BF     		nop
 1529 002a BD46     		mov	sp, r7
 1530              	.LCFI88:
 1531              		.cfi_def_cfa_register 13
 1532              		@ sp needed
 1533 002c 80BD     		pop	{r7, pc}
 1534              	.L95:
 1535 002e 00BF     		.align	2
 1536              	.L94:
 1537 0030 00000000 		.word	.LC0
 1538 0034 0C000000 		.word	.LC1
 1539 0038 50000000 		.word	.LC3
 1540 003c 30000000 		.word	.LC2
 1541 0040 5C000000 		.word	.LC4
 1542              		.cfi_endproc
 1543              	.LFE30:
 1545              		.section	.text.divide,"ax",%progbits
 1546              		.align	1
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1551              	divide:
 1552              	.LFB31:
 528:./rt_thread/src/kservice.c **** 
 529:./rt_thread/src/kservice.c **** /* private function */
 530:./rt_thread/src/kservice.c **** #define _ISDIGIT(c)  ((unsigned)((c) - '0') < 10)
 531:./rt_thread/src/kservice.c **** 
 532:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 533:./rt_thread/src/kservice.c **** rt_inline int divide(long long *n, int base)
 534:./rt_thread/src/kservice.c **** {
 535:./rt_thread/src/kservice.c ****     int res;
 536:./rt_thread/src/kservice.c **** 
 537:./rt_thread/src/kservice.c ****     /* optimized for processor which does not support divide instructions. */
 538:./rt_thread/src/kservice.c ****     if (base == 10)
 539:./rt_thread/src/kservice.c ****     {
 540:./rt_thread/src/kservice.c ****         res = (int)(((unsigned long long)*n) % 10U);
 541:./rt_thread/src/kservice.c ****         *n = (long long)(((unsigned long long)*n) / 10U);
 542:./rt_thread/src/kservice.c ****     }
 543:./rt_thread/src/kservice.c ****     else
 544:./rt_thread/src/kservice.c ****     {
 545:./rt_thread/src/kservice.c ****         res = (int)(((unsigned long long)*n) % 16U);
 546:./rt_thread/src/kservice.c ****         *n = (long long)(((unsigned long long)*n) / 16U);
 547:./rt_thread/src/kservice.c ****     }
 548:./rt_thread/src/kservice.c **** 
 549:./rt_thread/src/kservice.c ****     return res;
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 38


 550:./rt_thread/src/kservice.c **** }
 551:./rt_thread/src/kservice.c **** #else
 552:./rt_thread/src/kservice.c **** rt_inline int divide(long *n, int base)
 553:./rt_thread/src/kservice.c **** {
 1553              		.loc 1 553 1
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 16
 1556              		@ frame_needed = 1, uses_anonymous_args = 0
 1557              		@ link register save eliminated.
 1558 0000 80B4     		push	{r7}
 1559              	.LCFI89:
 1560              		.cfi_def_cfa_offset 4
 1561              		.cfi_offset 7, -4
 1562 0002 85B0     		sub	sp, sp, #20
 1563              	.LCFI90:
 1564              		.cfi_def_cfa_offset 24
 1565 0004 00AF     		add	r7, sp, #0
 1566              	.LCFI91:
 1567              		.cfi_def_cfa_register 7
 1568 0006 7860     		str	r0, [r7, #4]
 1569 0008 3960     		str	r1, [r7]
 554:./rt_thread/src/kservice.c ****     int res;
 555:./rt_thread/src/kservice.c **** 
 556:./rt_thread/src/kservice.c ****     /* optimized for processor which does not support divide instructions. */
 557:./rt_thread/src/kservice.c ****     if (base == 10)
 1570              		.loc 1 557 8
 1571 000a 3B68     		ldr	r3, [r7]
 1572 000c 0A2B     		cmp	r3, #10
 1573 000e 17D1     		bne	.L97
 558:./rt_thread/src/kservice.c ****     {
 559:./rt_thread/src/kservice.c ****         res = (int)(((unsigned long)*n) % 10U);
 1574              		.loc 1 559 37
 1575 0010 7B68     		ldr	r3, [r7, #4]
 1576 0012 1B68     		ldr	r3, [r3]
 1577              		.loc 1 559 22
 1578 0014 1946     		mov	r1, r3
 1579              		.loc 1 559 41
 1580 0016 134B     		ldr	r3, .L100
 1581 0018 A3FB0123 		umull	r2, r3, r3, r1
 1582 001c DA08     		lsrs	r2, r3, #3
 1583 001e 1346     		mov	r3, r2
 1584 0020 9B00     		lsls	r3, r3, #2
 1585 0022 1344     		add	r3, r3, r2
 1586 0024 5B00     		lsls	r3, r3, #1
 1587 0026 CA1A     		subs	r2, r1, r3
 1588              		.loc 1 559 13
 1589 0028 FA60     		str	r2, [r7, #12]
 560:./rt_thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 10U);
 1590              		.loc 1 560 37
 1591 002a 7B68     		ldr	r3, [r7, #4]
 1592 002c 1B68     		ldr	r3, [r3]
 1593              		.loc 1 560 22
 1594 002e 1A46     		mov	r2, r3
 1595              		.loc 1 560 41
 1596 0030 0C4B     		ldr	r3, .L100
 1597 0032 A3FB0223 		umull	r2, r3, r3, r2
 1598 0036 DB08     		lsrs	r3, r3, #3
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 39


 1599              		.loc 1 560 14
 1600 0038 1A46     		mov	r2, r3
 1601              		.loc 1 560 12
 1602 003a 7B68     		ldr	r3, [r7, #4]
 1603 003c 1A60     		str	r2, [r3]
 1604 003e 0AE0     		b	.L98
 1605              	.L97:
 561:./rt_thread/src/kservice.c ****     }
 562:./rt_thread/src/kservice.c ****     else
 563:./rt_thread/src/kservice.c ****     {
 564:./rt_thread/src/kservice.c ****         res = (int)(((unsigned long)*n) % 16U);
 1606              		.loc 1 564 15
 1607 0040 7B68     		ldr	r3, [r7, #4]
 1608 0042 1B68     		ldr	r3, [r3]
 1609              		.loc 1 564 13
 1610 0044 03F00F03 		and	r3, r3, #15
 1611 0048 FB60     		str	r3, [r7, #12]
 565:./rt_thread/src/kservice.c ****         *n = (long)(((unsigned long)*n) / 16U);
 1612              		.loc 1 565 37
 1613 004a 7B68     		ldr	r3, [r7, #4]
 1614 004c 1B68     		ldr	r3, [r3]
 1615              		.loc 1 565 41
 1616 004e 1B09     		lsrs	r3, r3, #4
 1617              		.loc 1 565 14
 1618 0050 1A46     		mov	r2, r3
 1619              		.loc 1 565 12
 1620 0052 7B68     		ldr	r3, [r7, #4]
 1621 0054 1A60     		str	r2, [r3]
 1622              	.L98:
 566:./rt_thread/src/kservice.c ****     }
 567:./rt_thread/src/kservice.c **** 
 568:./rt_thread/src/kservice.c ****     return res;
 1623              		.loc 1 568 12
 1624 0056 FB68     		ldr	r3, [r7, #12]
 569:./rt_thread/src/kservice.c **** }
 1625              		.loc 1 569 1
 1626 0058 1846     		mov	r0, r3
 1627 005a 1437     		adds	r7, r7, #20
 1628              	.LCFI92:
 1629              		.cfi_def_cfa_offset 4
 1630 005c BD46     		mov	sp, r7
 1631              	.LCFI93:
 1632              		.cfi_def_cfa_register 13
 1633              		@ sp needed
 1634 005e 80BC     		pop	{r7}
 1635              	.LCFI94:
 1636              		.cfi_restore 7
 1637              		.cfi_def_cfa_offset 0
 1638 0060 7047     		bx	lr
 1639              	.L101:
 1640 0062 00BF     		.align	2
 1641              	.L100:
 1642 0064 CDCCCCCC 		.word	-858993459
 1643              		.cfi_endproc
 1644              	.LFE31:
 1646              		.section	.text.skip_atoi,"ax",%progbits
 1647              		.align	1
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 40


 1648              		.syntax unified
 1649              		.thumb
 1650              		.thumb_func
 1652              	skip_atoi:
 1653              	.LFB32:
 570:./rt_thread/src/kservice.c **** #endif
 571:./rt_thread/src/kservice.c **** 
 572:./rt_thread/src/kservice.c **** rt_inline int skip_atoi(const char **s)
 573:./rt_thread/src/kservice.c **** {
 1654              		.loc 1 573 1
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 8
 1657              		@ frame_needed = 1, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 1659 0000 90B4     		push	{r4, r7}
 1660              	.LCFI95:
 1661              		.cfi_def_cfa_offset 8
 1662              		.cfi_offset 4, -8
 1663              		.cfi_offset 7, -4
 1664 0002 82B0     		sub	sp, sp, #8
 1665              	.LCFI96:
 1666              		.cfi_def_cfa_offset 16
 1667 0004 00AF     		add	r7, sp, #0
 1668              	.LCFI97:
 1669              		.cfi_def_cfa_register 7
 1670 0006 7860     		str	r0, [r7, #4]
 574:./rt_thread/src/kservice.c ****     register int i = 0;
 1671              		.loc 1 574 18
 1672 0008 0024     		movs	r4, #0
 575:./rt_thread/src/kservice.c ****     while (_ISDIGIT(**s))
 1673              		.loc 1 575 11
 1674 000a 0DE0     		b	.L103
 1675              	.L104:
 576:./rt_thread/src/kservice.c ****         i = i * 10 + *((*s)++) - '0';
 1676              		.loc 1 576 15
 1677 000c 2346     		mov	r3, r4
 1678 000e 9B00     		lsls	r3, r3, #2
 1679 0010 2344     		add	r3, r3, r4
 1680 0012 5B00     		lsls	r3, r3, #1
 1681 0014 1846     		mov	r0, r3
 1682              		.loc 1 576 25
 1683 0016 7B68     		ldr	r3, [r7, #4]
 1684 0018 1B68     		ldr	r3, [r3]
 1685              		.loc 1 576 28
 1686 001a 591C     		adds	r1, r3, #1
 1687 001c 7A68     		ldr	r2, [r7, #4]
 1688 001e 1160     		str	r1, [r2]
 1689              		.loc 1 576 22
 1690 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1691              		.loc 1 576 20
 1692 0022 0344     		add	r3, r3, r0
 1693              		.loc 1 576 11
 1694 0024 A3F13004 		sub	r4, r3, #48
 1695              	.L103:
 575:./rt_thread/src/kservice.c ****     while (_ISDIGIT(**s))
 1696              		.loc 1 575 12
 1697 0028 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 41


 1698 002a 1B68     		ldr	r3, [r3]
 1699 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1700 002e 303B     		subs	r3, r3, #48
 575:./rt_thread/src/kservice.c ****     while (_ISDIGIT(**s))
 1701              		.loc 1 575 11
 1702 0030 092B     		cmp	r3, #9
 1703 0032 EBD9     		bls	.L104
 577:./rt_thread/src/kservice.c **** 
 578:./rt_thread/src/kservice.c ****     return i;
 1704              		.loc 1 578 12
 1705 0034 2346     		mov	r3, r4
 579:./rt_thread/src/kservice.c **** }
 1706              		.loc 1 579 1
 1707 0036 1846     		mov	r0, r3
 1708 0038 0837     		adds	r7, r7, #8
 1709              	.LCFI98:
 1710              		.cfi_def_cfa_offset 8
 1711 003a BD46     		mov	sp, r7
 1712              	.LCFI99:
 1713              		.cfi_def_cfa_register 13
 1714              		@ sp needed
 1715 003c 90BC     		pop	{r4, r7}
 1716              	.LCFI100:
 1717              		.cfi_restore 7
 1718              		.cfi_restore 4
 1719              		.cfi_def_cfa_offset 0
 1720 003e 7047     		bx	lr
 1721              		.cfi_endproc
 1722              	.LFE32:
 1724              		.section	.text.print_number,"ax",%progbits
 1725              		.align	1
 1726              		.syntax unified
 1727              		.thumb
 1728              		.thumb_func
 1730              	print_number:
 1731              	.LFB33:
 580:./rt_thread/src/kservice.c **** 
 581:./rt_thread/src/kservice.c **** #define ZEROPAD     (1 << 0)    /* pad with zero */
 582:./rt_thread/src/kservice.c **** #define SIGN        (1 << 1)    /* unsigned/signed long */
 583:./rt_thread/src/kservice.c **** #define PLUS        (1 << 2)    /* show plus */
 584:./rt_thread/src/kservice.c **** #define SPACE       (1 << 3)    /* space if plus */
 585:./rt_thread/src/kservice.c **** #define LEFT        (1 << 4)    /* left justified */
 586:./rt_thread/src/kservice.c **** #define SPECIAL     (1 << 5)    /* 0x */
 587:./rt_thread/src/kservice.c **** #define LARGE       (1 << 6)    /* use 'ABCDEF' instead of 'abcdef' */
 588:./rt_thread/src/kservice.c **** 
 589:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 590:./rt_thread/src/kservice.c **** static char *print_number(char *buf,
 591:./rt_thread/src/kservice.c ****                           char *end,
 592:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 593:./rt_thread/src/kservice.c ****                           long long  num,
 594:./rt_thread/src/kservice.c **** #else
 595:./rt_thread/src/kservice.c ****                           long  num,
 596:./rt_thread/src/kservice.c **** #endif
 597:./rt_thread/src/kservice.c ****                           int   base,
 598:./rt_thread/src/kservice.c ****                           int   s,
 599:./rt_thread/src/kservice.c ****                           int   precision,
 600:./rt_thread/src/kservice.c ****                           int   type)
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 42


 601:./rt_thread/src/kservice.c **** #else
 602:./rt_thread/src/kservice.c **** static char *print_number(char *buf,
 603:./rt_thread/src/kservice.c ****                           char *end,
 604:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 605:./rt_thread/src/kservice.c ****                           long long  num,
 606:./rt_thread/src/kservice.c **** #else
 607:./rt_thread/src/kservice.c ****                           long  num,
 608:./rt_thread/src/kservice.c **** #endif
 609:./rt_thread/src/kservice.c ****                           int   base,
 610:./rt_thread/src/kservice.c ****                           int   s,
 611:./rt_thread/src/kservice.c ****                           int   type)
 612:./rt_thread/src/kservice.c **** #endif
 613:./rt_thread/src/kservice.c **** {
 1732              		.loc 1 613 1
 1733              		.cfi_startproc
 1734              		@ args = 12, pretend = 0, frame = 48
 1735              		@ frame_needed = 1, uses_anonymous_args = 0
 1736 0000 B0B5     		push	{r4, r5, r7, lr}
 1737              	.LCFI101:
 1738              		.cfi_def_cfa_offset 16
 1739              		.cfi_offset 4, -16
 1740              		.cfi_offset 5, -12
 1741              		.cfi_offset 7, -8
 1742              		.cfi_offset 14, -4
 1743 0002 8CB0     		sub	sp, sp, #48
 1744              	.LCFI102:
 1745              		.cfi_def_cfa_offset 64
 1746 0004 00AF     		add	r7, sp, #0
 1747              	.LCFI103:
 1748              		.cfi_def_cfa_register 7
 1749 0006 F860     		str	r0, [r7, #12]
 1750 0008 B960     		str	r1, [r7, #8]
 1751 000a 7A60     		str	r2, [r7, #4]
 1752 000c 3B60     		str	r3, [r7]
 614:./rt_thread/src/kservice.c ****     char c, sign;
 615:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 616:./rt_thread/src/kservice.c ****     char tmp[32];
 617:./rt_thread/src/kservice.c **** #else
 618:./rt_thread/src/kservice.c ****     char tmp[16];
 619:./rt_thread/src/kservice.c **** #endif
 620:./rt_thread/src/kservice.c ****     int precision_bak = precision;
 1753              		.loc 1 620 9
 1754 000e 7B6C     		ldr	r3, [r7, #68]
 1755 0010 BB62     		str	r3, [r7, #40]
 621:./rt_thread/src/kservice.c ****     const char *digits;
 622:./rt_thread/src/kservice.c ****     static const char small_digits[] = "0123456789abcdef";
 623:./rt_thread/src/kservice.c ****     static const char large_digits[] = "0123456789ABCDEF";
 624:./rt_thread/src/kservice.c ****     register int i;
 625:./rt_thread/src/kservice.c ****     register int size;
 626:./rt_thread/src/kservice.c **** 
 627:./rt_thread/src/kservice.c ****     size = s;
 1756              		.loc 1 627 10
 1757 0012 3C6C     		ldr	r4, [r7, #64]
 628:./rt_thread/src/kservice.c **** 
 629:./rt_thread/src/kservice.c ****     digits = (type & LARGE) ? large_digits : small_digits;
 1758              		.loc 1 629 20
 1759 0014 BB6C     		ldr	r3, [r7, #72]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 43


 1760 0016 03F04003 		and	r3, r3, #64
 1761              		.loc 1 629 44
 1762 001a 002B     		cmp	r3, #0
 1763 001c 01D0     		beq	.L107
 1764              		.loc 1 629 44 is_stmt 0 discriminator 1
 1765 001e 6C4B     		ldr	r3, .L142
 1766 0020 00E0     		b	.L108
 1767              	.L107:
 1768              		.loc 1 629 44 discriminator 2
 1769 0022 6C4B     		ldr	r3, .L142+4
 1770              	.L108:
 1771              		.loc 1 629 12 is_stmt 1 discriminator 4
 1772 0024 7B62     		str	r3, [r7, #36]
 630:./rt_thread/src/kservice.c ****     if (type & LEFT)
 1773              		.loc 1 630 14 discriminator 4
 1774 0026 BB6C     		ldr	r3, [r7, #72]
 1775 0028 03F01003 		and	r3, r3, #16
 1776              		.loc 1 630 8 discriminator 4
 1777 002c 002B     		cmp	r3, #0
 1778 002e 03D0     		beq	.L109
 631:./rt_thread/src/kservice.c ****         type &= ~ZEROPAD;
 1779              		.loc 1 631 14
 1780 0030 BB6C     		ldr	r3, [r7, #72]
 1781 0032 23F00103 		bic	r3, r3, #1
 1782 0036 BB64     		str	r3, [r7, #72]
 1783              	.L109:
 632:./rt_thread/src/kservice.c **** 
 633:./rt_thread/src/kservice.c ****     c = (type & ZEROPAD) ? '0' : ' ';
 1784              		.loc 1 633 15
 1785 0038 BB6C     		ldr	r3, [r7, #72]
 1786 003a 03F00103 		and	r3, r3, #1
 1787              		.loc 1 633 7
 1788 003e 002B     		cmp	r3, #0
 1789 0040 01D0     		beq	.L110
 1790              		.loc 1 633 7 is_stmt 0 discriminator 1
 1791 0042 3023     		movs	r3, #48
 1792 0044 00E0     		b	.L111
 1793              	.L110:
 1794              		.loc 1 633 7 discriminator 2
 1795 0046 2023     		movs	r3, #32
 1796              	.L111:
 1797              		.loc 1 633 7 discriminator 4
 1798 0048 87F82330 		strb	r3, [r7, #35]
 634:./rt_thread/src/kservice.c **** 
 635:./rt_thread/src/kservice.c ****     /* get sign */
 636:./rt_thread/src/kservice.c ****     sign = 0;
 1799              		.loc 1 636 10 is_stmt 1 discriminator 4
 1800 004c 0023     		movs	r3, #0
 1801 004e 87F82F30 		strb	r3, [r7, #47]
 637:./rt_thread/src/kservice.c ****     if (type & SIGN)
 1802              		.loc 1 637 14 discriminator 4
 1803 0052 BB6C     		ldr	r3, [r7, #72]
 1804 0054 03F00203 		and	r3, r3, #2
 1805              		.loc 1 637 8 discriminator 4
 1806 0058 002B     		cmp	r3, #0
 1807 005a 1AD0     		beq	.L112
 638:./rt_thread/src/kservice.c ****     {
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 44


 639:./rt_thread/src/kservice.c ****         if (num < 0)
 1808              		.loc 1 639 17
 1809 005c 7B68     		ldr	r3, [r7, #4]
 1810              		.loc 1 639 12
 1811 005e 002B     		cmp	r3, #0
 1812 0060 06DA     		bge	.L113
 640:./rt_thread/src/kservice.c ****         {
 641:./rt_thread/src/kservice.c ****             sign = '-';
 1813              		.loc 1 641 18
 1814 0062 2D23     		movs	r3, #45
 1815 0064 87F82F30 		strb	r3, [r7, #47]
 642:./rt_thread/src/kservice.c ****             num = -num;
 1816              		.loc 1 642 19
 1817 0068 7B68     		ldr	r3, [r7, #4]
 1818 006a 5B42     		rsbs	r3, r3, #0
 1819              		.loc 1 642 17
 1820 006c 7B60     		str	r3, [r7, #4]
 1821 006e 10E0     		b	.L112
 1822              	.L113:
 643:./rt_thread/src/kservice.c ****         }
 644:./rt_thread/src/kservice.c ****         else if (type & PLUS)
 1823              		.loc 1 644 23
 1824 0070 BB6C     		ldr	r3, [r7, #72]
 1825 0072 03F00403 		and	r3, r3, #4
 1826              		.loc 1 644 17
 1827 0076 002B     		cmp	r3, #0
 1828 0078 03D0     		beq	.L114
 645:./rt_thread/src/kservice.c ****             sign = '+';
 1829              		.loc 1 645 18
 1830 007a 2B23     		movs	r3, #43
 1831 007c 87F82F30 		strb	r3, [r7, #47]
 1832 0080 07E0     		b	.L112
 1833              	.L114:
 646:./rt_thread/src/kservice.c ****         else if (type & SPACE)
 1834              		.loc 1 646 23
 1835 0082 BB6C     		ldr	r3, [r7, #72]
 1836 0084 03F00803 		and	r3, r3, #8
 1837              		.loc 1 646 17
 1838 0088 002B     		cmp	r3, #0
 1839 008a 02D0     		beq	.L112
 647:./rt_thread/src/kservice.c ****             sign = ' ';
 1840              		.loc 1 647 18
 1841 008c 2023     		movs	r3, #32
 1842 008e 87F82F30 		strb	r3, [r7, #47]
 1843              	.L112:
 648:./rt_thread/src/kservice.c ****     }
 649:./rt_thread/src/kservice.c **** 
 650:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 651:./rt_thread/src/kservice.c ****     if (type & SPECIAL)
 652:./rt_thread/src/kservice.c ****     {
 653:./rt_thread/src/kservice.c ****         if (base == 16)
 654:./rt_thread/src/kservice.c ****             size -= 2;
 655:./rt_thread/src/kservice.c ****         else if (base == 8)
 656:./rt_thread/src/kservice.c ****             size--;
 657:./rt_thread/src/kservice.c ****     }
 658:./rt_thread/src/kservice.c **** #endif
 659:./rt_thread/src/kservice.c **** 
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 45


 660:./rt_thread/src/kservice.c ****     i = 0;
 1844              		.loc 1 660 7
 1845 0092 0025     		movs	r5, #0
 661:./rt_thread/src/kservice.c ****     if (num == 0)
 1846              		.loc 1 661 13
 1847 0094 7B68     		ldr	r3, [r7, #4]
 1848              		.loc 1 661 8
 1849 0096 002B     		cmp	r3, #0
 1850 0098 17D1     		bne	.L117
 662:./rt_thread/src/kservice.c ****         tmp[i++] = '0';
 1851              		.loc 1 662 14
 1852 009a 2B46     		mov	r3, r5
 1853 009c 5D1C     		adds	r5, r3, #1
 1854              		.loc 1 662 18
 1855 009e 3033     		adds	r3, r3, #48
 1856 00a0 3B44     		add	r3, r3, r7
 1857 00a2 3022     		movs	r2, #48
 1858 00a4 03F8202C 		strb	r2, [r3, #-32]
 1859 00a8 12E0     		b	.L116
 1860              	.L118:
 663:./rt_thread/src/kservice.c ****     else
 664:./rt_thread/src/kservice.c ****     {
 665:./rt_thread/src/kservice.c ****         while (num != 0)
 666:./rt_thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
 1861              		.loc 1 666 31
 1862 00aa 3B1D     		adds	r3, r7, #4
 1863 00ac 3968     		ldr	r1, [r7]
 1864 00ae 1846     		mov	r0, r3
 1865 00b0 FFF7FEFF 		bl	divide
 1866 00b4 0346     		mov	r3, r0
 1867 00b6 1A46     		mov	r2, r3
 1868              		.loc 1 666 30
 1869 00b8 7B6A     		ldr	r3, [r7, #36]
 1870 00ba 1A44     		add	r2, r2, r3
 1871              		.loc 1 666 18
 1872 00bc 2B46     		mov	r3, r5
 1873 00be 5D1C     		adds	r5, r3, #1
 1874              		.loc 1 666 30
 1875 00c0 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1876              		.loc 1 666 22
 1877 00c2 3033     		adds	r3, r3, #48
 1878 00c4 3B44     		add	r3, r3, r7
 1879 00c6 03F8202C 		strb	r2, [r3, #-32]
 1880              	.L117:
 665:./rt_thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
 1881              		.loc 1 665 20
 1882 00ca 7B68     		ldr	r3, [r7, #4]
 665:./rt_thread/src/kservice.c ****             tmp[i++] = digits[divide(&num, base)];
 1883              		.loc 1 665 15
 1884 00cc 002B     		cmp	r3, #0
 1885 00ce ECD1     		bne	.L118
 1886              	.L116:
 667:./rt_thread/src/kservice.c ****     }
 668:./rt_thread/src/kservice.c **** 
 669:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 670:./rt_thread/src/kservice.c ****     if (i > precision)
 1887              		.loc 1 670 8
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 46


 1888 00d0 7B6C     		ldr	r3, [r7, #68]
 1889 00d2 9D42     		cmp	r5, r3
 1890 00d4 00DD     		ble	.L119
 671:./rt_thread/src/kservice.c ****         precision = i;
 1891              		.loc 1 671 19
 1892 00d6 7D64     		str	r5, [r7, #68]
 1893              	.L119:
 672:./rt_thread/src/kservice.c ****     size -= precision;
 1894              		.loc 1 672 10
 1895 00d8 7B6C     		ldr	r3, [r7, #68]
 1896 00da E41A     		subs	r4, r4, r3
 673:./rt_thread/src/kservice.c **** #else
 674:./rt_thread/src/kservice.c ****     size -= i;
 675:./rt_thread/src/kservice.c **** #endif
 676:./rt_thread/src/kservice.c **** 
 677:./rt_thread/src/kservice.c ****     if (!(type & (ZEROPAD | LEFT)))
 1897              		.loc 1 677 16
 1898 00dc BB6C     		ldr	r3, [r7, #72]
 1899 00de 03F01103 		and	r3, r3, #17
 1900              		.loc 1 677 8
 1901 00e2 002B     		cmp	r3, #0
 1902 00e4 15D1     		bne	.L120
 678:./rt_thread/src/kservice.c ****     {
 679:./rt_thread/src/kservice.c ****         if ((sign) && (size > 0))
 1903              		.loc 1 679 12
 1904 00e6 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1905 00ea 002B     		cmp	r3, #0
 1906 00ec 0DD0     		beq	.L122
 1907              		.loc 1 679 20 discriminator 1
 1908 00ee 002C     		cmp	r4, #0
 1909 00f0 0BDD     		ble	.L122
 680:./rt_thread/src/kservice.c ****             size--;
 1910              		.loc 1 680 17
 1911 00f2 013C     		subs	r4, r4, #1
 681:./rt_thread/src/kservice.c **** 
 682:./rt_thread/src/kservice.c ****         while (size-- > 0)
 1912              		.loc 1 682 15
 1913 00f4 09E0     		b	.L122
 1914              	.L124:
 683:./rt_thread/src/kservice.c ****         {
 684:./rt_thread/src/kservice.c ****             if (buf < end)
 1915              		.loc 1 684 16
 1916 00f6 FA68     		ldr	r2, [r7, #12]
 1917 00f8 BB68     		ldr	r3, [r7, #8]
 1918 00fa 9A42     		cmp	r2, r3
 1919 00fc 02D2     		bcs	.L123
 685:./rt_thread/src/kservice.c ****                 *buf = ' ';
 1920              		.loc 1 685 22
 1921 00fe FB68     		ldr	r3, [r7, #12]
 1922 0100 2022     		movs	r2, #32
 1923 0102 1A70     		strb	r2, [r3]
 1924              	.L123:
 686:./rt_thread/src/kservice.c ****             ++ buf;
 1925              		.loc 1 686 13
 1926 0104 FB68     		ldr	r3, [r7, #12]
 1927 0106 0133     		adds	r3, r3, #1
 1928 0108 FB60     		str	r3, [r7, #12]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 47


 1929              	.L122:
 682:./rt_thread/src/kservice.c ****         {
 1930              		.loc 1 682 20
 1931 010a 2346     		mov	r3, r4
 1932 010c 5C1E     		subs	r4, r3, #1
 682:./rt_thread/src/kservice.c ****         {
 1933              		.loc 1 682 15
 1934 010e 002B     		cmp	r3, #0
 1935 0110 F1DC     		bgt	.L124
 1936              	.L120:
 687:./rt_thread/src/kservice.c ****         }
 688:./rt_thread/src/kservice.c ****     }
 689:./rt_thread/src/kservice.c **** 
 690:./rt_thread/src/kservice.c ****     if (sign)
 1937              		.loc 1 690 8
 1938 0112 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 1939 0116 002B     		cmp	r3, #0
 1940 0118 0BD0     		beq	.L125
 691:./rt_thread/src/kservice.c ****     {
 692:./rt_thread/src/kservice.c ****         if (buf < end)
 1941              		.loc 1 692 12
 1942 011a FA68     		ldr	r2, [r7, #12]
 1943 011c BB68     		ldr	r3, [r7, #8]
 1944 011e 9A42     		cmp	r2, r3
 1945 0120 03D2     		bcs	.L126
 693:./rt_thread/src/kservice.c ****         {
 694:./rt_thread/src/kservice.c ****             *buf = sign;
 1946              		.loc 1 694 18
 1947 0122 FB68     		ldr	r3, [r7, #12]
 1948 0124 97F82F20 		ldrb	r2, [r7, #47]
 1949 0128 1A70     		strb	r2, [r3]
 1950              	.L126:
 695:./rt_thread/src/kservice.c ****         }
 696:./rt_thread/src/kservice.c ****         -- size;
 1951              		.loc 1 696 9
 1952 012a 013C     		subs	r4, r4, #1
 697:./rt_thread/src/kservice.c ****         ++ buf;
 1953              		.loc 1 697 9
 1954 012c FB68     		ldr	r3, [r7, #12]
 1955 012e 0133     		adds	r3, r3, #1
 1956 0130 FB60     		str	r3, [r7, #12]
 1957              	.L125:
 698:./rt_thread/src/kservice.c ****     }
 699:./rt_thread/src/kservice.c **** 
 700:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_SPECIAL
 701:./rt_thread/src/kservice.c ****     if (type & SPECIAL)
 702:./rt_thread/src/kservice.c ****     {
 703:./rt_thread/src/kservice.c ****         if (base == 8)
 704:./rt_thread/src/kservice.c ****         {
 705:./rt_thread/src/kservice.c ****             if (buf < end)
 706:./rt_thread/src/kservice.c ****                 *buf = '0';
 707:./rt_thread/src/kservice.c ****             ++ buf;
 708:./rt_thread/src/kservice.c ****         }
 709:./rt_thread/src/kservice.c ****         else if (base == 16)
 710:./rt_thread/src/kservice.c ****         {
 711:./rt_thread/src/kservice.c ****             if (buf < end)
 712:./rt_thread/src/kservice.c ****                 *buf = '0';
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 48


 713:./rt_thread/src/kservice.c ****             ++ buf;
 714:./rt_thread/src/kservice.c ****             if (buf < end)
 715:./rt_thread/src/kservice.c ****             {
 716:./rt_thread/src/kservice.c ****                 *buf = type & LARGE ? 'X' : 'x';
 717:./rt_thread/src/kservice.c ****             }
 718:./rt_thread/src/kservice.c ****             ++ buf;
 719:./rt_thread/src/kservice.c ****         }
 720:./rt_thread/src/kservice.c ****     }
 721:./rt_thread/src/kservice.c **** #endif
 722:./rt_thread/src/kservice.c **** 
 723:./rt_thread/src/kservice.c ****     /* no align to the left */
 724:./rt_thread/src/kservice.c ****     if (!(type & LEFT))
 1958              		.loc 1 724 16
 1959 0132 BB6C     		ldr	r3, [r7, #72]
 1960 0134 03F01003 		and	r3, r3, #16
 1961              		.loc 1 724 8
 1962 0138 002B     		cmp	r3, #0
 1963 013a 1AD1     		bne	.L131
 725:./rt_thread/src/kservice.c ****     {
 726:./rt_thread/src/kservice.c ****         while (size-- > 0)
 1964              		.loc 1 726 15
 1965 013c 0AE0     		b	.L128
 1966              	.L130:
 727:./rt_thread/src/kservice.c ****         {
 728:./rt_thread/src/kservice.c ****             if (buf < end)
 1967              		.loc 1 728 16
 1968 013e FA68     		ldr	r2, [r7, #12]
 1969 0140 BB68     		ldr	r3, [r7, #8]
 1970 0142 9A42     		cmp	r2, r3
 1971 0144 03D2     		bcs	.L129
 729:./rt_thread/src/kservice.c ****                 *buf = c;
 1972              		.loc 1 729 22
 1973 0146 FB68     		ldr	r3, [r7, #12]
 1974 0148 97F82320 		ldrb	r2, [r7, #35]
 1975 014c 1A70     		strb	r2, [r3]
 1976              	.L129:
 730:./rt_thread/src/kservice.c ****             ++ buf;
 1977              		.loc 1 730 13
 1978 014e FB68     		ldr	r3, [r7, #12]
 1979 0150 0133     		adds	r3, r3, #1
 1980 0152 FB60     		str	r3, [r7, #12]
 1981              	.L128:
 726:./rt_thread/src/kservice.c ****         {
 1982              		.loc 1 726 20
 1983 0154 2346     		mov	r3, r4
 1984 0156 5C1E     		subs	r4, r3, #1
 726:./rt_thread/src/kservice.c ****         {
 1985              		.loc 1 726 15
 1986 0158 002B     		cmp	r3, #0
 1987 015a F0DC     		bgt	.L130
 731:./rt_thread/src/kservice.c ****         }
 732:./rt_thread/src/kservice.c ****     }
 733:./rt_thread/src/kservice.c **** 
 734:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 735:./rt_thread/src/kservice.c ****     while (i < precision--)
 1988              		.loc 1 735 11
 1989 015c 09E0     		b	.L131
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 49


 1990              	.L133:
 736:./rt_thread/src/kservice.c ****     {
 737:./rt_thread/src/kservice.c ****         if (buf < end)
 1991              		.loc 1 737 12
 1992 015e FA68     		ldr	r2, [r7, #12]
 1993 0160 BB68     		ldr	r3, [r7, #8]
 1994 0162 9A42     		cmp	r2, r3
 1995 0164 02D2     		bcs	.L132
 738:./rt_thread/src/kservice.c ****             *buf = '0';
 1996              		.loc 1 738 18
 1997 0166 FB68     		ldr	r3, [r7, #12]
 1998 0168 3022     		movs	r2, #48
 1999 016a 1A70     		strb	r2, [r3]
 2000              	.L132:
 739:./rt_thread/src/kservice.c ****         ++ buf;
 2001              		.loc 1 739 9
 2002 016c FB68     		ldr	r3, [r7, #12]
 2003 016e 0133     		adds	r3, r3, #1
 2004 0170 FB60     		str	r3, [r7, #12]
 2005              	.L131:
 735:./rt_thread/src/kservice.c ****     {
 2006              		.loc 1 735 25
 2007 0172 7B6C     		ldr	r3, [r7, #68]
 2008 0174 5A1E     		subs	r2, r3, #1
 2009 0176 7A64     		str	r2, [r7, #68]
 735:./rt_thread/src/kservice.c ****     {
 2010              		.loc 1 735 11
 2011 0178 9D42     		cmp	r5, r3
 2012 017a F0DB     		blt	.L133
 740:./rt_thread/src/kservice.c ****     }
 741:./rt_thread/src/kservice.c **** #endif
 742:./rt_thread/src/kservice.c **** 
 743:./rt_thread/src/kservice.c ****     /* put number in the temporary buffer */
 744:./rt_thread/src/kservice.c ****     while (i-- > 0 && (precision_bak != 0))
 2013              		.loc 1 744 11
 2014 017c 0DE0     		b	.L134
 2015              	.L137:
 745:./rt_thread/src/kservice.c ****     {
 746:./rt_thread/src/kservice.c ****         if (buf < end)
 2016              		.loc 1 746 12
 2017 017e FA68     		ldr	r2, [r7, #12]
 2018 0180 BB68     		ldr	r3, [r7, #8]
 2019 0182 9A42     		cmp	r2, r3
 2020 0184 06D2     		bcs	.L135
 747:./rt_thread/src/kservice.c ****             *buf = tmp[i];
 2021              		.loc 1 747 23
 2022 0186 05F13003 		add	r3, r5, #48
 2023 018a 3B44     		add	r3, r3, r7
 2024 018c 13F8202C 		ldrb	r2, [r3, #-32]	@ zero_extendqisi2
 2025              		.loc 1 747 18
 2026 0190 FB68     		ldr	r3, [r7, #12]
 2027 0192 1A70     		strb	r2, [r3]
 2028              	.L135:
 748:./rt_thread/src/kservice.c ****         ++ buf;
 2029              		.loc 1 748 9
 2030 0194 FB68     		ldr	r3, [r7, #12]
 2031 0196 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 50


 2032 0198 FB60     		str	r3, [r7, #12]
 2033              	.L134:
 744:./rt_thread/src/kservice.c ****     {
 2034              		.loc 1 744 13
 2035 019a 2B46     		mov	r3, r5
 2036 019c 5D1E     		subs	r5, r3, #1
 744:./rt_thread/src/kservice.c ****     {
 2037              		.loc 1 744 11
 2038 019e 002B     		cmp	r3, #0
 2039 01a0 0DDD     		ble	.L138
 744:./rt_thread/src/kservice.c ****     {
 2040              		.loc 1 744 20 discriminator 1
 2041 01a2 BB6A     		ldr	r3, [r7, #40]
 2042 01a4 002B     		cmp	r3, #0
 2043 01a6 EAD1     		bne	.L137
 749:./rt_thread/src/kservice.c ****     }
 750:./rt_thread/src/kservice.c **** 
 751:./rt_thread/src/kservice.c ****     while (size-- > 0)
 2044              		.loc 1 751 11
 2045 01a8 09E0     		b	.L138
 2046              	.L140:
 752:./rt_thread/src/kservice.c ****     {
 753:./rt_thread/src/kservice.c ****         if (buf < end)
 2047              		.loc 1 753 12
 2048 01aa FA68     		ldr	r2, [r7, #12]
 2049 01ac BB68     		ldr	r3, [r7, #8]
 2050 01ae 9A42     		cmp	r2, r3
 2051 01b0 02D2     		bcs	.L139
 754:./rt_thread/src/kservice.c ****             *buf = ' ';
 2052              		.loc 1 754 18
 2053 01b2 FB68     		ldr	r3, [r7, #12]
 2054 01b4 2022     		movs	r2, #32
 2055 01b6 1A70     		strb	r2, [r3]
 2056              	.L139:
 755:./rt_thread/src/kservice.c ****         ++ buf;
 2057              		.loc 1 755 9
 2058 01b8 FB68     		ldr	r3, [r7, #12]
 2059 01ba 0133     		adds	r3, r3, #1
 2060 01bc FB60     		str	r3, [r7, #12]
 2061              	.L138:
 751:./rt_thread/src/kservice.c ****     {
 2062              		.loc 1 751 16
 2063 01be 2346     		mov	r3, r4
 2064 01c0 5C1E     		subs	r4, r3, #1
 751:./rt_thread/src/kservice.c ****     {
 2065              		.loc 1 751 11
 2066 01c2 002B     		cmp	r3, #0
 2067 01c4 F1DC     		bgt	.L140
 756:./rt_thread/src/kservice.c ****     }
 757:./rt_thread/src/kservice.c **** 
 758:./rt_thread/src/kservice.c ****     return buf;
 2068              		.loc 1 758 12
 2069 01c6 FB68     		ldr	r3, [r7, #12]
 759:./rt_thread/src/kservice.c **** }
 2070              		.loc 1 759 1
 2071 01c8 1846     		mov	r0, r3
 2072 01ca 3037     		adds	r7, r7, #48
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 51


 2073              	.LCFI104:
 2074              		.cfi_def_cfa_offset 16
 2075 01cc BD46     		mov	sp, r7
 2076              	.LCFI105:
 2077              		.cfi_def_cfa_register 13
 2078              		@ sp needed
 2079 01ce B0BD     		pop	{r4, r5, r7, pc}
 2080              	.L143:
 2081              		.align	2
 2082              	.L142:
 2083 01d0 00000000 		.word	large_digits.2
 2084 01d4 00000000 		.word	small_digits.1
 2085              		.cfi_endproc
 2086              	.LFE33:
 2088              		.section	.rodata
 2089 0086 0000     		.align	2
 2090              	.LC5:
 2091 0088 284E554C 		.ascii	"(NULL)\000"
 2091      4C2900
 2092              		.section	.text.rt_vsnprintf,"ax",%progbits
 2093              		.align	1
 2094              		.global	rt_vsnprintf
 2095              		.syntax unified
 2096              		.thumb
 2097              		.thumb_func
 2099              	rt_vsnprintf:
 2100              	.LFB34:
 760:./rt_thread/src/kservice.c **** 
 761:./rt_thread/src/kservice.c **** rt_int32_t rt_vsnprintf(char       *buf,
 762:./rt_thread/src/kservice.c ****                         rt_size_t   size,
 763:./rt_thread/src/kservice.c ****                         const char *fmt,
 764:./rt_thread/src/kservice.c ****                         va_list     args)
 765:./rt_thread/src/kservice.c **** {
 2101              		.loc 1 765 1
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 56
 2104              		@ frame_needed = 1, uses_anonymous_args = 0
 2105 0000 80B5     		push	{r7, lr}
 2106              	.LCFI106:
 2107              		.cfi_def_cfa_offset 8
 2108              		.cfi_offset 7, -8
 2109              		.cfi_offset 14, -4
 2110 0002 92B0     		sub	sp, sp, #72
 2111              	.LCFI107:
 2112              		.cfi_def_cfa_offset 80
 2113 0004 04AF     		add	r7, sp, #16
 2114              	.LCFI108:
 2115              		.cfi_def_cfa 7, 64
 2116 0006 F860     		str	r0, [r7, #12]
 2117 0008 B960     		str	r1, [r7, #8]
 2118 000a 7A60     		str	r2, [r7, #4]
 2119 000c 3B60     		str	r3, [r7]
 766:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 767:./rt_thread/src/kservice.c ****     unsigned long long num;
 768:./rt_thread/src/kservice.c **** #else
 769:./rt_thread/src/kservice.c ****     rt_uint32_t num;
 770:./rt_thread/src/kservice.c **** #endif
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 52


 771:./rt_thread/src/kservice.c ****     int i, len;
 772:./rt_thread/src/kservice.c ****     char *str, *end, c;
 773:./rt_thread/src/kservice.c ****     const char *s;
 774:./rt_thread/src/kservice.c **** 
 775:./rt_thread/src/kservice.c ****     rt_uint8_t base;            /* the base of number */
 776:./rt_thread/src/kservice.c ****     rt_uint8_t flags;           /* flags to print number */
 777:./rt_thread/src/kservice.c ****     rt_uint8_t qualifier;       /* 'h', 'l', or 'L' for integer fields */
 778:./rt_thread/src/kservice.c ****     rt_int32_t field_width;     /* width of output field */
 779:./rt_thread/src/kservice.c **** 
 780:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 781:./rt_thread/src/kservice.c ****     int precision;      /* min. # of digits for integers and max for a string */
 782:./rt_thread/src/kservice.c **** #endif
 783:./rt_thread/src/kservice.c **** 
 784:./rt_thread/src/kservice.c ****     str = buf;
 2120              		.loc 1 784 9
 2121 000e FB68     		ldr	r3, [r7, #12]
 2122 0010 BB62     		str	r3, [r7, #40]
 785:./rt_thread/src/kservice.c ****     end = buf + size;
 2123              		.loc 1 785 9
 2124 0012 FA68     		ldr	r2, [r7, #12]
 2125 0014 BB68     		ldr	r3, [r7, #8]
 2126 0016 1344     		add	r3, r3, r2
 2127 0018 7B62     		str	r3, [r7, #36]
 786:./rt_thread/src/kservice.c **** 
 787:./rt_thread/src/kservice.c ****     /* Make sure end is always >= buf */
 788:./rt_thread/src/kservice.c ****     if (end < buf)
 2128              		.loc 1 788 8
 2129 001a 7A6A     		ldr	r2, [r7, #36]
 2130 001c FB68     		ldr	r3, [r7, #12]
 2131 001e 9A42     		cmp	r2, r3
 2132 0020 80F02682 		bcs	.L146
 789:./rt_thread/src/kservice.c ****     {
 790:./rt_thread/src/kservice.c ****         end  = ((char *) - 1);
 2133              		.loc 1 790 14
 2134 0024 4FF0FF33 		mov	r3, #-1
 2135 0028 7B62     		str	r3, [r7, #36]
 791:./rt_thread/src/kservice.c ****         size = end - buf;
 2136              		.loc 1 791 20
 2137 002a 7A6A     		ldr	r2, [r7, #36]
 2138 002c FB68     		ldr	r3, [r7, #12]
 2139 002e D31A     		subs	r3, r2, r3
 2140              		.loc 1 791 14
 2141 0030 BB60     		str	r3, [r7, #8]
 792:./rt_thread/src/kservice.c ****     }
 793:./rt_thread/src/kservice.c **** 
 794:./rt_thread/src/kservice.c ****     for (; *fmt ; ++fmt)
 2142              		.loc 1 794 5
 2143 0032 1DE2     		b	.L146
 2144              	.L209:
 795:./rt_thread/src/kservice.c ****     {
 796:./rt_thread/src/kservice.c ****         if (*fmt != '%')
 2145              		.loc 1 796 13
 2146 0034 7B68     		ldr	r3, [r7, #4]
 2147 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2148              		.loc 1 796 12
 2149 0038 252B     		cmp	r3, #37
 2150 003a 0BD0     		beq	.L147
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 53


 797:./rt_thread/src/kservice.c ****         {
 798:./rt_thread/src/kservice.c ****             if (str < end)
 2151              		.loc 1 798 16
 2152 003c BA6A     		ldr	r2, [r7, #40]
 2153 003e 7B6A     		ldr	r3, [r7, #36]
 2154 0040 9A42     		cmp	r2, r3
 2155 0042 03D2     		bcs	.L148
 799:./rt_thread/src/kservice.c ****                 *str = *fmt;
 2156              		.loc 1 799 24
 2157 0044 7B68     		ldr	r3, [r7, #4]
 2158 0046 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2159              		.loc 1 799 22
 2160 0048 BB6A     		ldr	r3, [r7, #40]
 2161 004a 1A70     		strb	r2, [r3]
 2162              	.L148:
 800:./rt_thread/src/kservice.c ****             ++ str;
 2163              		.loc 1 800 13
 2164 004c BB6A     		ldr	r3, [r7, #40]
 2165 004e 0133     		adds	r3, r3, #1
 2166 0050 BB62     		str	r3, [r7, #40]
 801:./rt_thread/src/kservice.c ****             continue;
 2167              		.loc 1 801 13
 2168 0052 0AE2     		b	.L149
 2169              	.L147:
 802:./rt_thread/src/kservice.c ****         }
 803:./rt_thread/src/kservice.c **** 
 804:./rt_thread/src/kservice.c ****         /* process flags */
 805:./rt_thread/src/kservice.c ****         flags = 0;
 2170              		.loc 1 805 15
 2171 0054 0023     		movs	r3, #0
 2172 0056 BB77     		strb	r3, [r7, #30]
 2173              	.L157:
 806:./rt_thread/src/kservice.c **** 
 807:./rt_thread/src/kservice.c ****         while (1)
 808:./rt_thread/src/kservice.c ****         {
 809:./rt_thread/src/kservice.c ****             /* skips the first '%' also */
 810:./rt_thread/src/kservice.c ****             ++ fmt;
 2174              		.loc 1 810 13
 2175 0058 7B68     		ldr	r3, [r7, #4]
 2176 005a 0133     		adds	r3, r3, #1
 2177 005c 7B60     		str	r3, [r7, #4]
 811:./rt_thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 2178              		.loc 1 811 17
 2179 005e 7B68     		ldr	r3, [r7, #4]
 2180 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2181              		.loc 1 811 16
 2182 0062 2D2B     		cmp	r3, #45
 2183 0064 04D1     		bne	.L150
 2184              		.loc 1 811 36 discriminator 1
 2185 0066 BB7F     		ldrb	r3, [r7, #30]
 2186 0068 43F01003 		orr	r3, r3, #16
 2187 006c BB77     		strb	r3, [r7, #30]
 2188 006e F3E7     		b	.L157
 2189              	.L150:
 812:./rt_thread/src/kservice.c ****             else if (*fmt == '+') flags |= PLUS;
 2190              		.loc 1 812 22
 2191 0070 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 54


 2192 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2193              		.loc 1 812 21
 2194 0074 2B2B     		cmp	r3, #43
 2195 0076 04D1     		bne	.L152
 2196              		.loc 1 812 41 discriminator 1
 2197 0078 BB7F     		ldrb	r3, [r7, #30]
 2198 007a 43F00403 		orr	r3, r3, #4
 2199 007e BB77     		strb	r3, [r7, #30]
 2200 0080 EAE7     		b	.L157
 2201              	.L152:
 813:./rt_thread/src/kservice.c ****             else if (*fmt == ' ') flags |= SPACE;
 2202              		.loc 1 813 22
 2203 0082 7B68     		ldr	r3, [r7, #4]
 2204 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2205              		.loc 1 813 21
 2206 0086 202B     		cmp	r3, #32
 2207 0088 04D1     		bne	.L153
 2208              		.loc 1 813 41 discriminator 1
 2209 008a BB7F     		ldrb	r3, [r7, #30]
 2210 008c 43F00803 		orr	r3, r3, #8
 2211 0090 BB77     		strb	r3, [r7, #30]
 2212 0092 E1E7     		b	.L157
 2213              	.L153:
 814:./rt_thread/src/kservice.c ****             else if (*fmt == '#') flags |= SPECIAL;
 2214              		.loc 1 814 22
 2215 0094 7B68     		ldr	r3, [r7, #4]
 2216 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2217              		.loc 1 814 21
 2218 0098 232B     		cmp	r3, #35
 2219 009a 04D1     		bne	.L154
 2220              		.loc 1 814 41 discriminator 1
 2221 009c BB7F     		ldrb	r3, [r7, #30]
 2222 009e 43F02003 		orr	r3, r3, #32
 2223 00a2 BB77     		strb	r3, [r7, #30]
 2224 00a4 D8E7     		b	.L157
 2225              	.L154:
 815:./rt_thread/src/kservice.c ****             else if (*fmt == '0') flags |= ZEROPAD;
 2226              		.loc 1 815 22
 2227 00a6 7B68     		ldr	r3, [r7, #4]
 2228 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2229              		.loc 1 815 21
 2230 00aa 302B     		cmp	r3, #48
 2231 00ac 04D1     		bne	.L213
 2232              		.loc 1 815 41 discriminator 1
 2233 00ae BB7F     		ldrb	r3, [r7, #30]
 2234 00b0 43F00103 		orr	r3, r3, #1
 2235 00b4 BB77     		strb	r3, [r7, #30]
 810:./rt_thread/src/kservice.c ****             if (*fmt == '-') flags |= LEFT;
 2236              		.loc 1 810 13 discriminator 1
 2237 00b6 CFE7     		b	.L157
 2238              	.L213:
 816:./rt_thread/src/kservice.c ****             else break;
 2239              		.loc 1 816 13
 2240 00b8 00BF     		nop
 817:./rt_thread/src/kservice.c ****         }
 818:./rt_thread/src/kservice.c **** 
 819:./rt_thread/src/kservice.c ****         /* get field width */
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 55


 820:./rt_thread/src/kservice.c ****         field_width = -1;
 2241              		.loc 1 820 21
 2242 00ba 4FF0FF33 		mov	r3, #-1
 2243 00be BB61     		str	r3, [r7, #24]
 821:./rt_thread/src/kservice.c ****         if (_ISDIGIT(*fmt)) field_width = skip_atoi(&fmt);
 2244              		.loc 1 821 13
 2245 00c0 7B68     		ldr	r3, [r7, #4]
 2246 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2247 00c4 303B     		subs	r3, r3, #48
 2248              		.loc 1 821 12
 2249 00c6 092B     		cmp	r3, #9
 2250 00c8 05D8     		bhi	.L158
 2251              		.loc 1 821 43 discriminator 1
 2252 00ca 3B1D     		adds	r3, r7, #4
 2253 00cc 1846     		mov	r0, r3
 2254 00ce FFF7FEFF 		bl	skip_atoi
 2255 00d2 B861     		str	r0, [r7, #24]
 2256 00d4 15E0     		b	.L159
 2257              	.L158:
 822:./rt_thread/src/kservice.c ****         else if (*fmt == '*')
 2258              		.loc 1 822 18
 2259 00d6 7B68     		ldr	r3, [r7, #4]
 2260 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2261              		.loc 1 822 17
 2262 00da 2A2B     		cmp	r3, #42
 2263 00dc 11D1     		bne	.L159
 823:./rt_thread/src/kservice.c ****         {
 824:./rt_thread/src/kservice.c ****             ++ fmt;
 2264              		.loc 1 824 13
 2265 00de 7B68     		ldr	r3, [r7, #4]
 2266 00e0 0133     		adds	r3, r3, #1
 2267 00e2 7B60     		str	r3, [r7, #4]
 825:./rt_thread/src/kservice.c ****             /* it's the next argument */
 826:./rt_thread/src/kservice.c ****             field_width = va_arg(args, int);
 2268              		.loc 1 826 25
 2269 00e4 3B68     		ldr	r3, [r7]
 2270 00e6 1A1D     		adds	r2, r3, #4
 2271 00e8 3A60     		str	r2, [r7]
 2272 00ea 1B68     		ldr	r3, [r3]
 2273 00ec BB61     		str	r3, [r7, #24]
 827:./rt_thread/src/kservice.c ****             if (field_width < 0)
 2274              		.loc 1 827 16
 2275 00ee BB69     		ldr	r3, [r7, #24]
 2276 00f0 002B     		cmp	r3, #0
 2277 00f2 06DA     		bge	.L159
 828:./rt_thread/src/kservice.c ****             {
 829:./rt_thread/src/kservice.c ****                 field_width = -field_width;
 2278              		.loc 1 829 29
 2279 00f4 BB69     		ldr	r3, [r7, #24]
 2280 00f6 5B42     		rsbs	r3, r3, #0
 2281 00f8 BB61     		str	r3, [r7, #24]
 830:./rt_thread/src/kservice.c ****                 flags |= LEFT;
 2282              		.loc 1 830 23
 2283 00fa BB7F     		ldrb	r3, [r7, #30]
 2284 00fc 43F01003 		orr	r3, r3, #16
 2285 0100 BB77     		strb	r3, [r7, #30]
 2286              	.L159:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 56


 831:./rt_thread/src/kservice.c ****             }
 832:./rt_thread/src/kservice.c ****         }
 833:./rt_thread/src/kservice.c **** 
 834:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 835:./rt_thread/src/kservice.c ****         /* get the precision */
 836:./rt_thread/src/kservice.c ****         precision = -1;
 2287              		.loc 1 836 19
 2288 0102 4FF0FF33 		mov	r3, #-1
 2289 0106 7B61     		str	r3, [r7, #20]
 837:./rt_thread/src/kservice.c ****         if (*fmt == '.')
 2290              		.loc 1 837 13
 2291 0108 7B68     		ldr	r3, [r7, #4]
 2292 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2293              		.loc 1 837 12
 2294 010c 2E2B     		cmp	r3, #46
 2295 010e 1ED1     		bne	.L160
 838:./rt_thread/src/kservice.c ****         {
 839:./rt_thread/src/kservice.c ****             ++ fmt;
 2296              		.loc 1 839 13
 2297 0110 7B68     		ldr	r3, [r7, #4]
 2298 0112 0133     		adds	r3, r3, #1
 2299 0114 7B60     		str	r3, [r7, #4]
 840:./rt_thread/src/kservice.c ****             if (_ISDIGIT(*fmt)) precision = skip_atoi(&fmt);
 2300              		.loc 1 840 17
 2301 0116 7B68     		ldr	r3, [r7, #4]
 2302 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2303 011a 303B     		subs	r3, r3, #48
 2304              		.loc 1 840 16
 2305 011c 092B     		cmp	r3, #9
 2306 011e 05D8     		bhi	.L161
 2307              		.loc 1 840 45 discriminator 1
 2308 0120 3B1D     		adds	r3, r7, #4
 2309 0122 1846     		mov	r0, r3
 2310 0124 FFF7FEFF 		bl	skip_atoi
 2311 0128 7861     		str	r0, [r7, #20]
 2312 012a 0BE0     		b	.L162
 2313              	.L161:
 841:./rt_thread/src/kservice.c ****             else if (*fmt == '*')
 2314              		.loc 1 841 22
 2315 012c 7B68     		ldr	r3, [r7, #4]
 2316 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2317              		.loc 1 841 21
 2318 0130 2A2B     		cmp	r3, #42
 2319 0132 07D1     		bne	.L162
 842:./rt_thread/src/kservice.c ****             {
 843:./rt_thread/src/kservice.c ****                 ++ fmt;
 2320              		.loc 1 843 17
 2321 0134 7B68     		ldr	r3, [r7, #4]
 2322 0136 0133     		adds	r3, r3, #1
 2323 0138 7B60     		str	r3, [r7, #4]
 844:./rt_thread/src/kservice.c ****                 /* it's the next argument */
 845:./rt_thread/src/kservice.c ****                 precision = va_arg(args, int);
 2324              		.loc 1 845 27
 2325 013a 3B68     		ldr	r3, [r7]
 2326 013c 1A1D     		adds	r2, r3, #4
 2327 013e 3A60     		str	r2, [r7]
 2328 0140 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 57


 2329 0142 7B61     		str	r3, [r7, #20]
 2330              	.L162:
 846:./rt_thread/src/kservice.c ****             }
 847:./rt_thread/src/kservice.c ****             if (precision < 0) precision = 0;
 2331              		.loc 1 847 16
 2332 0144 7B69     		ldr	r3, [r7, #20]
 2333 0146 002B     		cmp	r3, #0
 2334 0148 01DA     		bge	.L160
 2335              		.loc 1 847 42 discriminator 1
 2336 014a 0023     		movs	r3, #0
 2337 014c 7B61     		str	r3, [r7, #20]
 2338              	.L160:
 848:./rt_thread/src/kservice.c ****         }
 849:./rt_thread/src/kservice.c **** #endif
 850:./rt_thread/src/kservice.c ****         /* get the conversion qualifier */
 851:./rt_thread/src/kservice.c ****         qualifier = 0;
 2339              		.loc 1 851 19
 2340 014e 0023     		movs	r3, #0
 2341 0150 7B77     		strb	r3, [r7, #29]
 852:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 853:./rt_thread/src/kservice.c ****         if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L')
 854:./rt_thread/src/kservice.c **** #else
 855:./rt_thread/src/kservice.c ****         if (*fmt == 'h' || *fmt == 'l')
 2342              		.loc 1 855 13
 2343 0152 7B68     		ldr	r3, [r7, #4]
 2344 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2345              		.loc 1 855 12
 2346 0156 682B     		cmp	r3, #104
 2347 0158 03D0     		beq	.L163
 2348              		.loc 1 855 28 discriminator 1
 2349 015a 7B68     		ldr	r3, [r7, #4]
 2350 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2351              		.loc 1 855 25 discriminator 1
 2352 015e 6C2B     		cmp	r3, #108
 2353 0160 05D1     		bne	.L164
 2354              	.L163:
 856:./rt_thread/src/kservice.c **** #endif
 857:./rt_thread/src/kservice.c ****         {
 858:./rt_thread/src/kservice.c ****             qualifier = *fmt;
 2355              		.loc 1 858 25
 2356 0162 7B68     		ldr	r3, [r7, #4]
 2357              		.loc 1 858 23
 2358 0164 1B78     		ldrb	r3, [r3]
 2359 0166 7B77     		strb	r3, [r7, #29]
 859:./rt_thread/src/kservice.c ****             ++ fmt;
 2360              		.loc 1 859 13
 2361 0168 7B68     		ldr	r3, [r7, #4]
 2362 016a 0133     		adds	r3, r3, #1
 2363 016c 7B60     		str	r3, [r7, #4]
 2364              	.L164:
 860:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 861:./rt_thread/src/kservice.c ****             if (qualifier == 'l' && *fmt == 'l')
 862:./rt_thread/src/kservice.c ****             {
 863:./rt_thread/src/kservice.c ****                 qualifier = 'L';
 864:./rt_thread/src/kservice.c ****                 ++ fmt;
 865:./rt_thread/src/kservice.c ****             }
 866:./rt_thread/src/kservice.c **** #endif
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 58


 867:./rt_thread/src/kservice.c ****         }
 868:./rt_thread/src/kservice.c **** 
 869:./rt_thread/src/kservice.c ****         /* the default base */
 870:./rt_thread/src/kservice.c ****         base = 10;
 2365              		.loc 1 870 14
 2366 016e 0A23     		movs	r3, #10
 2367 0170 FB77     		strb	r3, [r7, #31]
 871:./rt_thread/src/kservice.c **** 
 872:./rt_thread/src/kservice.c ****         switch (*fmt)
 2368              		.loc 1 872 17
 2369 0172 7B68     		ldr	r3, [r7, #4]
 2370 0174 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2371              		.loc 1 872 9
 2372 0176 252B     		cmp	r3, #37
 2373 0178 00F00881 		beq	.L165
 2374 017c 252B     		cmp	r3, #37
 2375 017e C0F21F81 		blt	.L166
 2376 0182 782B     		cmp	r3, #120
 2377 0184 00F31C81 		bgt	.L166
 2378 0188 582B     		cmp	r3, #88
 2379 018a C0F21981 		blt	.L166
 2380 018e 583B     		subs	r3, r3, #88
 2381 0190 202B     		cmp	r3, #32
 2382 0192 00F21581 		bhi	.L166
 2383 0196 01A2     		adr	r2, .L168
 2384 0198 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2385              		.p2align 2
 2386              	.L168:
 2387 019c A9030000 		.word	.L175+1
 2388 01a0 C1030000 		.word	.L166+1
 2389 01a4 C1030000 		.word	.L166+1
 2390 01a8 C1030000 		.word	.L166+1
 2391 01ac C1030000 		.word	.L166+1
 2392 01b0 C1030000 		.word	.L166+1
 2393 01b4 C1030000 		.word	.L166+1
 2394 01b8 C1030000 		.word	.L166+1
 2395 01bc C1030000 		.word	.L166+1
 2396 01c0 C1030000 		.word	.L166+1
 2397 01c4 C1030000 		.word	.L166+1
 2398 01c8 21020000 		.word	.L174+1
 2399 01cc B7030000 		.word	.L173+1
 2400 01d0 C1030000 		.word	.L166+1
 2401 01d4 C1030000 		.word	.L166+1
 2402 01d8 C1030000 		.word	.L166+1
 2403 01dc C1030000 		.word	.L166+1
 2404 01e0 B7030000 		.word	.L173+1
 2405 01e4 C1030000 		.word	.L166+1
 2406 01e8 C1030000 		.word	.L166+1
 2407 01ec C1030000 		.word	.L166+1
 2408 01f0 C1030000 		.word	.L166+1
 2409 01f4 C1030000 		.word	.L166+1
 2410 01f8 A3030000 		.word	.L172+1
 2411 01fc 55030000 		.word	.L171+1
 2412 0200 C1030000 		.word	.L166+1
 2413 0204 C1030000 		.word	.L166+1
 2414 0208 8F020000 		.word	.L170+1
 2415 020c C1030000 		.word	.L166+1
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 59


 2416 0210 FD030000 		.word	.L214+1
 2417 0214 C1030000 		.word	.L166+1
 2418 0218 C1030000 		.word	.L166+1
 2419 021c B1030000 		.word	.L167+1
 2420              		.p2align 1
 2421              	.L174:
 873:./rt_thread/src/kservice.c ****         {
 874:./rt_thread/src/kservice.c ****         case 'c':
 875:./rt_thread/src/kservice.c ****             if (!(flags & LEFT))
 2422              		.loc 1 875 25
 2423 0220 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2424 0222 03F01003 		and	r3, r3, #16
 2425              		.loc 1 875 16
 2426 0226 002B     		cmp	r3, #0
 2427 0228 10D1     		bne	.L176
 876:./rt_thread/src/kservice.c ****             {
 877:./rt_thread/src/kservice.c ****                 while (--field_width > 0)
 2428              		.loc 1 877 23
 2429 022a 09E0     		b	.L177
 2430              	.L179:
 878:./rt_thread/src/kservice.c ****                 {
 879:./rt_thread/src/kservice.c ****                     if (str < end) *str = ' ';
 2431              		.loc 1 879 24
 2432 022c BA6A     		ldr	r2, [r7, #40]
 2433 022e 7B6A     		ldr	r3, [r7, #36]
 2434 0230 9A42     		cmp	r2, r3
 2435 0232 02D2     		bcs	.L178
 2436              		.loc 1 879 41 discriminator 1
 2437 0234 BB6A     		ldr	r3, [r7, #40]
 2438 0236 2022     		movs	r2, #32
 2439 0238 1A70     		strb	r2, [r3]
 2440              	.L178:
 880:./rt_thread/src/kservice.c ****                     ++ str;
 2441              		.loc 1 880 21
 2442 023a BB6A     		ldr	r3, [r7, #40]
 2443 023c 0133     		adds	r3, r3, #1
 2444 023e BB62     		str	r3, [r7, #40]
 2445              	.L177:
 877:./rt_thread/src/kservice.c ****                 {
 2446              		.loc 1 877 23
 2447 0240 BB69     		ldr	r3, [r7, #24]
 2448 0242 013B     		subs	r3, r3, #1
 2449 0244 BB61     		str	r3, [r7, #24]
 2450 0246 BB69     		ldr	r3, [r7, #24]
 2451 0248 002B     		cmp	r3, #0
 2452 024a EFDC     		bgt	.L179
 2453              	.L176:
 881:./rt_thread/src/kservice.c ****                 }
 882:./rt_thread/src/kservice.c ****             }
 883:./rt_thread/src/kservice.c **** 
 884:./rt_thread/src/kservice.c ****             /* get character */
 885:./rt_thread/src/kservice.c ****             c = (rt_uint8_t)va_arg(args, int);
 2454              		.loc 1 885 29
 2455 024c 3B68     		ldr	r3, [r7]
 2456 024e 1A1D     		adds	r2, r3, #4
 2457 0250 3A60     		str	r2, [r7]
 2458 0252 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 60


 2459              		.loc 1 885 15
 2460 0254 FB74     		strb	r3, [r7, #19]
 886:./rt_thread/src/kservice.c ****             if (str < end) *str = c;
 2461              		.loc 1 886 16
 2462 0256 BA6A     		ldr	r2, [r7, #40]
 2463 0258 7B6A     		ldr	r3, [r7, #36]
 2464 025a 9A42     		cmp	r2, r3
 2465 025c 02D2     		bcs	.L180
 2466              		.loc 1 886 33 discriminator 1
 2467 025e BB6A     		ldr	r3, [r7, #40]
 2468 0260 FA7C     		ldrb	r2, [r7, #19]
 2469 0262 1A70     		strb	r2, [r3]
 2470              	.L180:
 887:./rt_thread/src/kservice.c ****             ++ str;
 2471              		.loc 1 887 13
 2472 0264 BB6A     		ldr	r3, [r7, #40]
 2473 0266 0133     		adds	r3, r3, #1
 2474 0268 BB62     		str	r3, [r7, #40]
 888:./rt_thread/src/kservice.c **** 
 889:./rt_thread/src/kservice.c ****             /* put width */
 890:./rt_thread/src/kservice.c ****             while (--field_width > 0)
 2475              		.loc 1 890 19
 2476 026a 09E0     		b	.L181
 2477              	.L183:
 891:./rt_thread/src/kservice.c ****             {
 892:./rt_thread/src/kservice.c ****                 if (str < end) *str = ' ';
 2478              		.loc 1 892 20
 2479 026c BA6A     		ldr	r2, [r7, #40]
 2480 026e 7B6A     		ldr	r3, [r7, #36]
 2481 0270 9A42     		cmp	r2, r3
 2482 0272 02D2     		bcs	.L182
 2483              		.loc 1 892 37 discriminator 1
 2484 0274 BB6A     		ldr	r3, [r7, #40]
 2485 0276 2022     		movs	r2, #32
 2486 0278 1A70     		strb	r2, [r3]
 2487              	.L182:
 893:./rt_thread/src/kservice.c ****                 ++ str;
 2488              		.loc 1 893 17
 2489 027a BB6A     		ldr	r3, [r7, #40]
 2490 027c 0133     		adds	r3, r3, #1
 2491 027e BB62     		str	r3, [r7, #40]
 2492              	.L181:
 890:./rt_thread/src/kservice.c ****             {
 2493              		.loc 1 890 19
 2494 0280 BB69     		ldr	r3, [r7, #24]
 2495 0282 013B     		subs	r3, r3, #1
 2496 0284 BB61     		str	r3, [r7, #24]
 2497 0286 BB69     		ldr	r3, [r7, #24]
 2498 0288 002B     		cmp	r3, #0
 2499 028a EFDC     		bgt	.L183
 894:./rt_thread/src/kservice.c ****             }
 895:./rt_thread/src/kservice.c ****             continue;
 2500              		.loc 1 895 13
 2501 028c EDE0     		b	.L149
 2502              	.L170:
 896:./rt_thread/src/kservice.c **** 
 897:./rt_thread/src/kservice.c ****         case 's':
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 61


 898:./rt_thread/src/kservice.c ****             s = va_arg(args, char *);
 2503              		.loc 1 898 15
 2504 028e 3B68     		ldr	r3, [r7]
 2505 0290 1A1D     		adds	r2, r3, #4
 2506 0292 3A60     		str	r2, [r7]
 2507 0294 1B68     		ldr	r3, [r3]
 2508 0296 3B62     		str	r3, [r7, #32]
 899:./rt_thread/src/kservice.c ****             if (!s) s = "(NULL)";
 2509              		.loc 1 899 16
 2510 0298 3B6A     		ldr	r3, [r7, #32]
 2511 029a 002B     		cmp	r3, #0
 2512 029c 01D1     		bne	.L184
 2513              		.loc 1 899 23 discriminator 1
 2514 029e 824B     		ldr	r3, .L215
 2515 02a0 3B62     		str	r3, [r7, #32]
 2516              	.L184:
 900:./rt_thread/src/kservice.c **** 
 901:./rt_thread/src/kservice.c ****             for (len = 0; (len != field_width) && (s[len] != '\0'); len++);
 2517              		.loc 1 901 22
 2518 02a2 0023     		movs	r3, #0
 2519 02a4 FB62     		str	r3, [r7, #44]
 2520              		.loc 1 901 13
 2521 02a6 02E0     		b	.L185
 2522              	.L187:
 2523              		.loc 1 901 72 discriminator 4
 2524 02a8 FB6A     		ldr	r3, [r7, #44]
 2525 02aa 0133     		adds	r3, r3, #1
 2526 02ac FB62     		str	r3, [r7, #44]
 2527              	.L185:
 2528              		.loc 1 901 13 discriminator 1
 2529 02ae FA6A     		ldr	r2, [r7, #44]
 2530 02b0 BB69     		ldr	r3, [r7, #24]
 2531 02b2 9A42     		cmp	r2, r3
 2532 02b4 05D0     		beq	.L186
 2533              		.loc 1 901 53 discriminator 3
 2534 02b6 FB6A     		ldr	r3, [r7, #44]
 2535 02b8 3A6A     		ldr	r2, [r7, #32]
 2536 02ba 1344     		add	r3, r3, r2
 2537 02bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2538              		.loc 1 901 48 discriminator 3
 2539 02be 002B     		cmp	r3, #0
 2540 02c0 F2D1     		bne	.L187
 2541              	.L186:
 902:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 903:./rt_thread/src/kservice.c ****             if (precision > 0 && len > precision) len = precision;
 2542              		.loc 1 903 16
 2543 02c2 7B69     		ldr	r3, [r7, #20]
 2544 02c4 002B     		cmp	r3, #0
 2545 02c6 05DD     		ble	.L188
 2546              		.loc 1 903 31 discriminator 1
 2547 02c8 FA6A     		ldr	r2, [r7, #44]
 2548 02ca 7B69     		ldr	r3, [r7, #20]
 2549 02cc 9A42     		cmp	r2, r3
 2550 02ce 01DD     		ble	.L188
 2551              		.loc 1 903 55 discriminator 2
 2552 02d0 7B69     		ldr	r3, [r7, #20]
 2553 02d2 FB62     		str	r3, [r7, #44]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 62


 2554              	.L188:
 904:./rt_thread/src/kservice.c **** #endif
 905:./rt_thread/src/kservice.c **** 
 906:./rt_thread/src/kservice.c ****             if (!(flags & LEFT))
 2555              		.loc 1 906 25
 2556 02d4 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2557 02d6 03F01003 		and	r3, r3, #16
 2558              		.loc 1 906 16
 2559 02da 002B     		cmp	r3, #0
 2560 02dc 10D1     		bne	.L189
 907:./rt_thread/src/kservice.c ****             {
 908:./rt_thread/src/kservice.c ****                 while (len < field_width--)
 2561              		.loc 1 908 23
 2562 02de 09E0     		b	.L190
 2563              	.L192:
 909:./rt_thread/src/kservice.c ****                 {
 910:./rt_thread/src/kservice.c ****                     if (str < end) *str = ' ';
 2564              		.loc 1 910 24
 2565 02e0 BA6A     		ldr	r2, [r7, #40]
 2566 02e2 7B6A     		ldr	r3, [r7, #36]
 2567 02e4 9A42     		cmp	r2, r3
 2568 02e6 02D2     		bcs	.L191
 2569              		.loc 1 910 41 discriminator 1
 2570 02e8 BB6A     		ldr	r3, [r7, #40]
 2571 02ea 2022     		movs	r2, #32
 2572 02ec 1A70     		strb	r2, [r3]
 2573              	.L191:
 911:./rt_thread/src/kservice.c ****                     ++ str;
 2574              		.loc 1 911 21
 2575 02ee BB6A     		ldr	r3, [r7, #40]
 2576 02f0 0133     		adds	r3, r3, #1
 2577 02f2 BB62     		str	r3, [r7, #40]
 2578              	.L190:
 908:./rt_thread/src/kservice.c ****                 {
 2579              		.loc 1 908 41
 2580 02f4 BB69     		ldr	r3, [r7, #24]
 2581 02f6 5A1E     		subs	r2, r3, #1
 2582 02f8 BA61     		str	r2, [r7, #24]
 908:./rt_thread/src/kservice.c ****                 {
 2583              		.loc 1 908 23
 2584 02fa FA6A     		ldr	r2, [r7, #44]
 2585 02fc 9A42     		cmp	r2, r3
 2586 02fe EFDB     		blt	.L192
 2587              	.L189:
 912:./rt_thread/src/kservice.c ****                 }
 913:./rt_thread/src/kservice.c ****             }
 914:./rt_thread/src/kservice.c **** 
 915:./rt_thread/src/kservice.c ****             for (i = 0; i < len; ++i)
 2588              		.loc 1 915 20
 2589 0300 0023     		movs	r3, #0
 2590 0302 3B63     		str	r3, [r7, #48]
 2591              		.loc 1 915 13
 2592 0304 10E0     		b	.L193
 2593              	.L195:
 916:./rt_thread/src/kservice.c ****             {
 917:./rt_thread/src/kservice.c ****                 if (str < end) *str = *s;
 2594              		.loc 1 917 20
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 63


 2595 0306 BA6A     		ldr	r2, [r7, #40]
 2596 0308 7B6A     		ldr	r3, [r7, #36]
 2597 030a 9A42     		cmp	r2, r3
 2598 030c 03D2     		bcs	.L194
 2599              		.loc 1 917 39 discriminator 1
 2600 030e 3B6A     		ldr	r3, [r7, #32]
 2601 0310 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2602              		.loc 1 917 37 discriminator 1
 2603 0312 BB6A     		ldr	r3, [r7, #40]
 2604 0314 1A70     		strb	r2, [r3]
 2605              	.L194:
 918:./rt_thread/src/kservice.c ****                 ++ str;
 2606              		.loc 1 918 17 discriminator 2
 2607 0316 BB6A     		ldr	r3, [r7, #40]
 2608 0318 0133     		adds	r3, r3, #1
 2609 031a BB62     		str	r3, [r7, #40]
 919:./rt_thread/src/kservice.c ****                 ++ s;
 2610              		.loc 1 919 17 discriminator 2
 2611 031c 3B6A     		ldr	r3, [r7, #32]
 2612 031e 0133     		adds	r3, r3, #1
 2613 0320 3B62     		str	r3, [r7, #32]
 915:./rt_thread/src/kservice.c ****             {
 2614              		.loc 1 915 34 discriminator 2
 2615 0322 3B6B     		ldr	r3, [r7, #48]
 2616 0324 0133     		adds	r3, r3, #1
 2617 0326 3B63     		str	r3, [r7, #48]
 2618              	.L193:
 915:./rt_thread/src/kservice.c ****             {
 2619              		.loc 1 915 13 discriminator 1
 2620 0328 3A6B     		ldr	r2, [r7, #48]
 2621 032a FB6A     		ldr	r3, [r7, #44]
 2622 032c 9A42     		cmp	r2, r3
 2623 032e EADB     		blt	.L195
 920:./rt_thread/src/kservice.c ****             }
 921:./rt_thread/src/kservice.c **** 
 922:./rt_thread/src/kservice.c ****             while (len < field_width--)
 2624              		.loc 1 922 19
 2625 0330 09E0     		b	.L196
 2626              	.L198:
 923:./rt_thread/src/kservice.c ****             {
 924:./rt_thread/src/kservice.c ****                 if (str < end) *str = ' ';
 2627              		.loc 1 924 20
 2628 0332 BA6A     		ldr	r2, [r7, #40]
 2629 0334 7B6A     		ldr	r3, [r7, #36]
 2630 0336 9A42     		cmp	r2, r3
 2631 0338 02D2     		bcs	.L197
 2632              		.loc 1 924 37 discriminator 1
 2633 033a BB6A     		ldr	r3, [r7, #40]
 2634 033c 2022     		movs	r2, #32
 2635 033e 1A70     		strb	r2, [r3]
 2636              	.L197:
 925:./rt_thread/src/kservice.c ****                 ++ str;
 2637              		.loc 1 925 17
 2638 0340 BB6A     		ldr	r3, [r7, #40]
 2639 0342 0133     		adds	r3, r3, #1
 2640 0344 BB62     		str	r3, [r7, #40]
 2641              	.L196:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 64


 922:./rt_thread/src/kservice.c ****             {
 2642              		.loc 1 922 37
 2643 0346 BB69     		ldr	r3, [r7, #24]
 2644 0348 5A1E     		subs	r2, r3, #1
 2645 034a BA61     		str	r2, [r7, #24]
 922:./rt_thread/src/kservice.c ****             {
 2646              		.loc 1 922 19
 2647 034c FA6A     		ldr	r2, [r7, #44]
 2648 034e 9A42     		cmp	r2, r3
 2649 0350 EFDB     		blt	.L198
 926:./rt_thread/src/kservice.c ****             }
 927:./rt_thread/src/kservice.c ****             continue;
 2650              		.loc 1 927 13
 2651 0352 8AE0     		b	.L149
 2652              	.L171:
 928:./rt_thread/src/kservice.c **** 
 929:./rt_thread/src/kservice.c ****         case 'p':
 930:./rt_thread/src/kservice.c ****             if (field_width == -1)
 2653              		.loc 1 930 16
 2654 0354 BB69     		ldr	r3, [r7, #24]
 2655 0356 B3F1FF3F 		cmp	r3, #-1
 2656 035a 05D1     		bne	.L199
 931:./rt_thread/src/kservice.c ****             {
 932:./rt_thread/src/kservice.c ****                 field_width = sizeof(void *) << 1;
 2657              		.loc 1 932 29
 2658 035c 0823     		movs	r3, #8
 2659 035e BB61     		str	r3, [r7, #24]
 933:./rt_thread/src/kservice.c ****                 flags |= ZEROPAD;
 2660              		.loc 1 933 23
 2661 0360 BB7F     		ldrb	r3, [r7, #30]
 2662 0362 43F00103 		orr	r3, r3, #1
 2663 0366 BB77     		strb	r3, [r7, #30]
 2664              	.L199:
 934:./rt_thread/src/kservice.c ****             }
 935:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
 936:./rt_thread/src/kservice.c ****             str = print_number(str, end,
 937:./rt_thread/src/kservice.c ****                                (long)va_arg(args, void *),
 2665              		.loc 1 937 38
 2666 0368 3B68     		ldr	r3, [r7]
 2667 036a 1A1D     		adds	r2, r3, #4
 2668 036c 3A60     		str	r2, [r7]
 2669 036e 1B68     		ldr	r3, [r3]
 936:./rt_thread/src/kservice.c ****                                (long)va_arg(args, void *),
 2670              		.loc 1 936 19
 2671 0370 1A46     		mov	r2, r3
 2672 0372 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2673 0374 0293     		str	r3, [sp, #8]
 2674 0376 7B69     		ldr	r3, [r7, #20]
 2675 0378 0193     		str	r3, [sp, #4]
 2676 037a BB69     		ldr	r3, [r7, #24]
 2677 037c 0093     		str	r3, [sp]
 2678 037e 1023     		movs	r3, #16
 2679 0380 796A     		ldr	r1, [r7, #36]
 2680 0382 B86A     		ldr	r0, [r7, #40]
 2681 0384 FFF7FEFF 		bl	print_number
 2682 0388 B862     		str	r0, [r7, #40]
 938:./rt_thread/src/kservice.c ****                                16, field_width, precision, flags);
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 65


 939:./rt_thread/src/kservice.c **** #else
 940:./rt_thread/src/kservice.c ****             str = print_number(str, end,
 941:./rt_thread/src/kservice.c ****                                (long)va_arg(args, void *),
 942:./rt_thread/src/kservice.c ****                                16, field_width, flags);
 943:./rt_thread/src/kservice.c **** #endif
 944:./rt_thread/src/kservice.c ****             continue;
 2683              		.loc 1 944 13
 2684 038a 6EE0     		b	.L149
 2685              	.L165:
 945:./rt_thread/src/kservice.c **** 
 946:./rt_thread/src/kservice.c ****         case '%':
 947:./rt_thread/src/kservice.c ****             if (str < end) *str = '%';
 2686              		.loc 1 947 16
 2687 038c BA6A     		ldr	r2, [r7, #40]
 2688 038e 7B6A     		ldr	r3, [r7, #36]
 2689 0390 9A42     		cmp	r2, r3
 2690 0392 02D2     		bcs	.L200
 2691              		.loc 1 947 33 discriminator 1
 2692 0394 BB6A     		ldr	r3, [r7, #40]
 2693 0396 2522     		movs	r2, #37
 2694 0398 1A70     		strb	r2, [r3]
 2695              	.L200:
 948:./rt_thread/src/kservice.c ****             ++ str;
 2696              		.loc 1 948 13
 2697 039a BB6A     		ldr	r3, [r7, #40]
 2698 039c 0133     		adds	r3, r3, #1
 2699 039e BB62     		str	r3, [r7, #40]
 949:./rt_thread/src/kservice.c ****             continue;
 2700              		.loc 1 949 13
 2701 03a0 63E0     		b	.L149
 2702              	.L172:
 950:./rt_thread/src/kservice.c **** 
 951:./rt_thread/src/kservice.c ****         /* integer number formats - set up the flags and "break" */
 952:./rt_thread/src/kservice.c ****         case 'o':
 953:./rt_thread/src/kservice.c ****             base = 8;
 2703              		.loc 1 953 18
 2704 03a2 0823     		movs	r3, #8
 2705 03a4 FB77     		strb	r3, [r7, #31]
 954:./rt_thread/src/kservice.c ****             break;
 2706              		.loc 1 954 13
 2707 03a6 2AE0     		b	.L201
 2708              	.L175:
 955:./rt_thread/src/kservice.c **** 
 956:./rt_thread/src/kservice.c ****         case 'X':
 957:./rt_thread/src/kservice.c ****             flags |= LARGE;
 2709              		.loc 1 957 19
 2710 03a8 BB7F     		ldrb	r3, [r7, #30]
 2711 03aa 43F04003 		orr	r3, r3, #64
 2712 03ae BB77     		strb	r3, [r7, #30]
 2713              	.L167:
 958:./rt_thread/src/kservice.c ****         case 'x':
 959:./rt_thread/src/kservice.c ****             base = 16;
 2714              		.loc 1 959 18
 2715 03b0 1023     		movs	r3, #16
 2716 03b2 FB77     		strb	r3, [r7, #31]
 960:./rt_thread/src/kservice.c ****             break;
 2717              		.loc 1 960 13
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 66


 2718 03b4 23E0     		b	.L201
 2719              	.L173:
 961:./rt_thread/src/kservice.c **** 
 962:./rt_thread/src/kservice.c ****         case 'd':
 963:./rt_thread/src/kservice.c ****         case 'i':
 964:./rt_thread/src/kservice.c ****             flags |= SIGN;
 2720              		.loc 1 964 19
 2721 03b6 BB7F     		ldrb	r3, [r7, #30]
 2722 03b8 43F00203 		orr	r3, r3, #2
 2723 03bc BB77     		strb	r3, [r7, #30]
 965:./rt_thread/src/kservice.c ****         case 'u':
 966:./rt_thread/src/kservice.c ****             break;
 2724              		.loc 1 966 13
 2725 03be 1DE0     		b	.L214
 2726              	.L166:
 967:./rt_thread/src/kservice.c **** 
 968:./rt_thread/src/kservice.c ****         default:
 969:./rt_thread/src/kservice.c ****             if (str < end) *str = '%';
 2727              		.loc 1 969 16
 2728 03c0 BA6A     		ldr	r2, [r7, #40]
 2729 03c2 7B6A     		ldr	r3, [r7, #36]
 2730 03c4 9A42     		cmp	r2, r3
 2731 03c6 02D2     		bcs	.L202
 2732              		.loc 1 969 33 discriminator 1
 2733 03c8 BB6A     		ldr	r3, [r7, #40]
 2734 03ca 2522     		movs	r2, #37
 2735 03cc 1A70     		strb	r2, [r3]
 2736              	.L202:
 970:./rt_thread/src/kservice.c ****             ++ str;
 2737              		.loc 1 970 13
 2738 03ce BB6A     		ldr	r3, [r7, #40]
 2739 03d0 0133     		adds	r3, r3, #1
 2740 03d2 BB62     		str	r3, [r7, #40]
 971:./rt_thread/src/kservice.c **** 
 972:./rt_thread/src/kservice.c ****             if (*fmt)
 2741              		.loc 1 972 17
 2742 03d4 7B68     		ldr	r3, [r7, #4]
 2743 03d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2744              		.loc 1 972 16
 2745 03d8 002B     		cmp	r3, #0
 2746 03da 0BD0     		beq	.L203
 973:./rt_thread/src/kservice.c ****             {
 974:./rt_thread/src/kservice.c ****                 if (str < end) *str = *fmt;
 2747              		.loc 1 974 20
 2748 03dc BA6A     		ldr	r2, [r7, #40]
 2749 03de 7B6A     		ldr	r3, [r7, #36]
 2750 03e0 9A42     		cmp	r2, r3
 2751 03e2 03D2     		bcs	.L204
 2752              		.loc 1 974 39 discriminator 1
 2753 03e4 7B68     		ldr	r3, [r7, #4]
 2754 03e6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2755              		.loc 1 974 37 discriminator 1
 2756 03e8 BB6A     		ldr	r3, [r7, #40]
 2757 03ea 1A70     		strb	r2, [r3]
 2758              	.L204:
 975:./rt_thread/src/kservice.c ****                 ++ str;
 2759              		.loc 1 975 17
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 67


 2760 03ec BB6A     		ldr	r3, [r7, #40]
 2761 03ee 0133     		adds	r3, r3, #1
 2762 03f0 BB62     		str	r3, [r7, #40]
 976:./rt_thread/src/kservice.c ****             }
 977:./rt_thread/src/kservice.c ****             else
 978:./rt_thread/src/kservice.c ****             {
 979:./rt_thread/src/kservice.c ****                 -- fmt;
 980:./rt_thread/src/kservice.c ****             }
 981:./rt_thread/src/kservice.c ****             continue;
 2763              		.loc 1 981 13
 2764 03f2 3AE0     		b	.L149
 2765              	.L203:
 979:./rt_thread/src/kservice.c ****             }
 2766              		.loc 1 979 17
 2767 03f4 7B68     		ldr	r3, [r7, #4]
 2768 03f6 013B     		subs	r3, r3, #1
 2769 03f8 7B60     		str	r3, [r7, #4]
 2770              		.loc 1 981 13
 2771 03fa 36E0     		b	.L149
 2772              	.L214:
 966:./rt_thread/src/kservice.c **** 
 2773              		.loc 1 966 13
 2774 03fc 00BF     		nop
 2775              	.L201:
 982:./rt_thread/src/kservice.c ****         }
 983:./rt_thread/src/kservice.c **** 
 984:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_LONGLONG
 985:./rt_thread/src/kservice.c ****         if (qualifier == 'L') num = va_arg(args, long long);
 986:./rt_thread/src/kservice.c ****         else if (qualifier == 'l')
 987:./rt_thread/src/kservice.c **** #else
 988:./rt_thread/src/kservice.c ****         if (qualifier == 'l')
 2776              		.loc 1 988 12
 2777 03fe 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 2778 0400 6C2B     		cmp	r3, #108
 2779 0402 09D1     		bne	.L206
 989:./rt_thread/src/kservice.c **** #endif
 990:./rt_thread/src/kservice.c ****         {
 991:./rt_thread/src/kservice.c ****             num = va_arg(args, rt_uint32_t);
 2780              		.loc 1 991 17
 2781 0404 3B68     		ldr	r3, [r7]
 2782 0406 1A1D     		adds	r2, r3, #4
 2783 0408 3A60     		str	r2, [r7]
 2784 040a 1B68     		ldr	r3, [r3]
 2785 040c 7B63     		str	r3, [r7, #52]
 992:./rt_thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
 2786              		.loc 1 992 23
 2787 040e BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2788 0410 03F00203 		and	r3, r3, #2
 2789              		.loc 1 992 16
 2790 0414 002B     		cmp	r3, #0
 2791 0416 1AE0     		b	.L207
 2792              	.L206:
 993:./rt_thread/src/kservice.c ****         }
 994:./rt_thread/src/kservice.c ****         else if (qualifier == 'h')
 2793              		.loc 1 994 17
 2794 0418 7B7F     		ldrb	r3, [r7, #29]	@ zero_extendqisi2
 2795 041a 682B     		cmp	r3, #104
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 68


 2796 041c 0ED1     		bne	.L208
 995:./rt_thread/src/kservice.c ****         {
 996:./rt_thread/src/kservice.c ****             num = (rt_uint16_t)va_arg(args, rt_int32_t);
 2797              		.loc 1 996 32
 2798 041e 3B68     		ldr	r3, [r7]
 2799 0420 1A1D     		adds	r2, r3, #4
 2800 0422 3A60     		str	r2, [r7]
 2801 0424 1B68     		ldr	r3, [r3]
 2802              		.loc 1 996 19
 2803 0426 9BB2     		uxth	r3, r3
 2804              		.loc 1 996 17
 2805 0428 7B63     		str	r3, [r7, #52]
 997:./rt_thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int16_t)num;
 2806              		.loc 1 997 23
 2807 042a BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2808 042c 03F00203 		and	r3, r3, #2
 2809              		.loc 1 997 16
 2810 0430 002B     		cmp	r3, #0
 2811 0432 0CD0     		beq	.L207
 2812              		.loc 1 997 37 discriminator 1
 2813 0434 7B6B     		ldr	r3, [r7, #52]
 2814 0436 1BB2     		sxth	r3, r3
 2815              		.loc 1 997 35 discriminator 1
 2816 0438 7B63     		str	r3, [r7, #52]
 2817 043a 08E0     		b	.L207
 2818              	.L208:
 998:./rt_thread/src/kservice.c ****         }
 999:./rt_thread/src/kservice.c ****         else
1000:./rt_thread/src/kservice.c ****         {
1001:./rt_thread/src/kservice.c ****             num = va_arg(args, rt_uint32_t);
 2819              		.loc 1 1001 17
 2820 043c 3B68     		ldr	r3, [r7]
 2821 043e 1A1D     		adds	r2, r3, #4
 2822 0440 3A60     		str	r2, [r7]
 2823 0442 1B68     		ldr	r3, [r3]
 2824 0444 7B63     		str	r3, [r7, #52]
1002:./rt_thread/src/kservice.c ****             if (flags & SIGN) num = (rt_int32_t)num;
 2825              		.loc 1 1002 23
 2826 0446 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2827 0448 03F00203 		and	r3, r3, #2
 2828              		.loc 1 1002 16
 2829 044c 002B     		cmp	r3, #0
 2830              	.L207:
1003:./rt_thread/src/kservice.c ****         }
1004:./rt_thread/src/kservice.c **** #ifdef RT_PRINTF_PRECISION
1005:./rt_thread/src/kservice.c ****         str = print_number(str, end, num, base, field_width, precision, flags);
 2831              		.loc 1 1005 15
 2832 044e 7A6B     		ldr	r2, [r7, #52]
 2833 0450 F97F     		ldrb	r1, [r7, #31]	@ zero_extendqisi2
 2834 0452 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2835 0454 0293     		str	r3, [sp, #8]
 2836 0456 7B69     		ldr	r3, [r7, #20]
 2837 0458 0193     		str	r3, [sp, #4]
 2838 045a BB69     		ldr	r3, [r7, #24]
 2839 045c 0093     		str	r3, [sp]
 2840 045e 0B46     		mov	r3, r1
 2841 0460 796A     		ldr	r1, [r7, #36]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 69


 2842 0462 B86A     		ldr	r0, [r7, #40]
 2843 0464 FFF7FEFF 		bl	print_number
 2844 0468 B862     		str	r0, [r7, #40]
 2845              	.L149:
 794:./rt_thread/src/kservice.c ****     {
 2846              		.loc 1 794 19
 2847 046a 7B68     		ldr	r3, [r7, #4]
 2848 046c 0133     		adds	r3, r3, #1
 2849 046e 7B60     		str	r3, [r7, #4]
 2850              	.L146:
 794:./rt_thread/src/kservice.c ****     {
 2851              		.loc 1 794 12 discriminator 1
 2852 0470 7B68     		ldr	r3, [r7, #4]
 2853 0472 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 794:./rt_thread/src/kservice.c ****     {
 2854              		.loc 1 794 5 discriminator 1
 2855 0474 002B     		cmp	r3, #0
 2856 0476 7FF4DDAD 		bne	.L209
1006:./rt_thread/src/kservice.c **** #else
1007:./rt_thread/src/kservice.c ****         str = print_number(str, end, num, base, field_width, flags);
1008:./rt_thread/src/kservice.c **** #endif
1009:./rt_thread/src/kservice.c ****     }
1010:./rt_thread/src/kservice.c **** 
1011:./rt_thread/src/kservice.c ****     if (size > 0)
 2857              		.loc 1 1011 8
 2858 047a BB68     		ldr	r3, [r7, #8]
 2859 047c 002B     		cmp	r3, #0
 2860 047e 0BD0     		beq	.L210
1012:./rt_thread/src/kservice.c ****     {
1013:./rt_thread/src/kservice.c ****         if (str < end) *str = '\0';
 2861              		.loc 1 1013 12
 2862 0480 BA6A     		ldr	r2, [r7, #40]
 2863 0482 7B6A     		ldr	r3, [r7, #36]
 2864 0484 9A42     		cmp	r2, r3
 2865 0486 03D2     		bcs	.L211
 2866              		.loc 1 1013 29 discriminator 1
 2867 0488 BB6A     		ldr	r3, [r7, #40]
 2868 048a 0022     		movs	r2, #0
 2869 048c 1A70     		strb	r2, [r3]
 2870 048e 03E0     		b	.L210
 2871              	.L211:
1014:./rt_thread/src/kservice.c ****         else
1015:./rt_thread/src/kservice.c ****         {
1016:./rt_thread/src/kservice.c ****             end[-1] = '\0';
 2872              		.loc 1 1016 16
 2873 0490 7B6A     		ldr	r3, [r7, #36]
 2874 0492 013B     		subs	r3, r3, #1
 2875              		.loc 1 1016 21
 2876 0494 0022     		movs	r2, #0
 2877 0496 1A70     		strb	r2, [r3]
 2878              	.L210:
1017:./rt_thread/src/kservice.c ****         }
1018:./rt_thread/src/kservice.c ****     }
1019:./rt_thread/src/kservice.c **** 
1020:./rt_thread/src/kservice.c ****     /* the trailing null byte doesn't count towards the total
1021:./rt_thread/src/kservice.c ****     * ++str;
1022:./rt_thread/src/kservice.c ****     */
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 70


1023:./rt_thread/src/kservice.c ****     return str - buf;
 2879              		.loc 1 1023 16
 2880 0498 BA6A     		ldr	r2, [r7, #40]
 2881 049a FB68     		ldr	r3, [r7, #12]
 2882 049c D31A     		subs	r3, r2, r3
1024:./rt_thread/src/kservice.c **** }
 2883              		.loc 1 1024 1
 2884 049e 1846     		mov	r0, r3
 2885 04a0 3837     		adds	r7, r7, #56
 2886              	.LCFI109:
 2887              		.cfi_def_cfa_offset 8
 2888 04a2 BD46     		mov	sp, r7
 2889              	.LCFI110:
 2890              		.cfi_def_cfa_register 13
 2891              		@ sp needed
 2892 04a4 80BD     		pop	{r7, pc}
 2893              	.L216:
 2894 04a6 00BF     		.align	2
 2895              	.L215:
 2896 04a8 88000000 		.word	.LC5
 2897              		.cfi_endproc
 2898              	.LFE34:
 2900              		.section	.text.rt_snprintf,"ax",%progbits
 2901              		.align	1
 2902              		.global	rt_snprintf
 2903              		.syntax unified
 2904              		.thumb
 2905              		.thumb_func
 2907              	rt_snprintf:
 2908              	.LFB35:
1025:./rt_thread/src/kservice.c **** 
1026:./rt_thread/src/kservice.c **** /**
1027:./rt_thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1028:./rt_thread/src/kservice.c ****  *
1029:./rt_thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1030:./rt_thread/src/kservice.c ****  * @param size the size of buffer
1031:./rt_thread/src/kservice.c ****  * @param fmt the format
1032:./rt_thread/src/kservice.c ****  */
1033:./rt_thread/src/kservice.c **** rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *fmt, ...)
1034:./rt_thread/src/kservice.c **** {
 2909              		.loc 1 1034 1
 2910              		.cfi_startproc
 2911              		@ args = 4, pretend = 8, frame = 16
 2912              		@ frame_needed = 1, uses_anonymous_args = 1
 2913 0000 0CB4     		push	{r2, r3}
 2914              	.LCFI111:
 2915              		.cfi_def_cfa_offset 8
 2916              		.cfi_offset 2, -8
 2917              		.cfi_offset 3, -4
 2918 0002 80B5     		push	{r7, lr}
 2919              	.LCFI112:
 2920              		.cfi_def_cfa_offset 16
 2921              		.cfi_offset 7, -16
 2922              		.cfi_offset 14, -12
 2923 0004 84B0     		sub	sp, sp, #16
 2924              	.LCFI113:
 2925              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 71


 2926 0006 00AF     		add	r7, sp, #0
 2927              	.LCFI114:
 2928              		.cfi_def_cfa_register 7
 2929 0008 7860     		str	r0, [r7, #4]
 2930 000a 3960     		str	r1, [r7]
1035:./rt_thread/src/kservice.c ****     rt_int32_t n;
1036:./rt_thread/src/kservice.c ****     va_list args;
1037:./rt_thread/src/kservice.c **** 
1038:./rt_thread/src/kservice.c ****     va_start(args, fmt);
 2931              		.loc 1 1038 5
 2932 000c 07F11C03 		add	r3, r7, #28
 2933 0010 BB60     		str	r3, [r7, #8]
1039:./rt_thread/src/kservice.c ****     n = rt_vsnprintf(buf, size, fmt, args);
 2934              		.loc 1 1039 9
 2935 0012 BB68     		ldr	r3, [r7, #8]
 2936 0014 BA69     		ldr	r2, [r7, #24]
 2937 0016 3968     		ldr	r1, [r7]
 2938 0018 7868     		ldr	r0, [r7, #4]
 2939 001a FFF7FEFF 		bl	rt_vsnprintf
 2940 001e F860     		str	r0, [r7, #12]
1040:./rt_thread/src/kservice.c ****     va_end(args);
1041:./rt_thread/src/kservice.c **** 
1042:./rt_thread/src/kservice.c ****     return n;
 2941              		.loc 1 1042 12
 2942 0020 FB68     		ldr	r3, [r7, #12]
1043:./rt_thread/src/kservice.c **** }
 2943              		.loc 1 1043 1
 2944 0022 1846     		mov	r0, r3
 2945 0024 1037     		adds	r7, r7, #16
 2946              	.LCFI115:
 2947              		.cfi_def_cfa_offset 16
 2948 0026 BD46     		mov	sp, r7
 2949              	.LCFI116:
 2950              		.cfi_def_cfa_register 13
 2951              		@ sp needed
 2952 0028 BDE88040 		pop	{r7, lr}
 2953              	.LCFI117:
 2954              		.cfi_restore 14
 2955              		.cfi_restore 7
 2956              		.cfi_def_cfa_offset 8
 2957 002c 02B0     		add	sp, sp, #8
 2958              	.LCFI118:
 2959              		.cfi_restore 3
 2960              		.cfi_restore 2
 2961              		.cfi_def_cfa_offset 0
 2962 002e 7047     		bx	lr
 2963              		.cfi_endproc
 2964              	.LFE35:
 2966              		.section	.text.rt_vsprintf,"ax",%progbits
 2967              		.align	1
 2968              		.global	rt_vsprintf
 2969              		.syntax unified
 2970              		.thumb
 2971              		.thumb_func
 2973              	rt_vsprintf:
 2974              	.LFB36:
1044:./rt_thread/src/kservice.c **** 
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 72


1045:./rt_thread/src/kservice.c **** /**
1046:./rt_thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1047:./rt_thread/src/kservice.c ****  *
1048:./rt_thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1049:./rt_thread/src/kservice.c ****  * @param arg_ptr the arg_ptr
1050:./rt_thread/src/kservice.c ****  * @param format the format
1051:./rt_thread/src/kservice.c ****  */
1052:./rt_thread/src/kservice.c **** rt_int32_t rt_vsprintf(char *buf, const char *format, va_list arg_ptr)
1053:./rt_thread/src/kservice.c **** {
 2975              		.loc 1 1053 1
 2976              		.cfi_startproc
 2977              		@ args = 0, pretend = 0, frame = 16
 2978              		@ frame_needed = 1, uses_anonymous_args = 0
 2979 0000 80B5     		push	{r7, lr}
 2980              	.LCFI119:
 2981              		.cfi_def_cfa_offset 8
 2982              		.cfi_offset 7, -8
 2983              		.cfi_offset 14, -4
 2984 0002 84B0     		sub	sp, sp, #16
 2985              	.LCFI120:
 2986              		.cfi_def_cfa_offset 24
 2987 0004 00AF     		add	r7, sp, #0
 2988              	.LCFI121:
 2989              		.cfi_def_cfa_register 7
 2990 0006 F860     		str	r0, [r7, #12]
 2991 0008 B960     		str	r1, [r7, #8]
 2992 000a 7A60     		str	r2, [r7, #4]
1054:./rt_thread/src/kservice.c ****     return rt_vsnprintf(buf, (rt_size_t) - 1, format, arg_ptr);
 2993              		.loc 1 1054 12
 2994 000c 7B68     		ldr	r3, [r7, #4]
 2995 000e BA68     		ldr	r2, [r7, #8]
 2996 0010 4FF0FF31 		mov	r1, #-1
 2997 0014 F868     		ldr	r0, [r7, #12]
 2998 0016 FFF7FEFF 		bl	rt_vsnprintf
 2999 001a 0346     		mov	r3, r0
1055:./rt_thread/src/kservice.c **** }
 3000              		.loc 1 1055 1
 3001 001c 1846     		mov	r0, r3
 3002 001e 1037     		adds	r7, r7, #16
 3003              	.LCFI122:
 3004              		.cfi_def_cfa_offset 8
 3005 0020 BD46     		mov	sp, r7
 3006              	.LCFI123:
 3007              		.cfi_def_cfa_register 13
 3008              		@ sp needed
 3009 0022 80BD     		pop	{r7, pc}
 3010              		.cfi_endproc
 3011              	.LFE36:
 3013              		.section	.text.rt_sprintf,"ax",%progbits
 3014              		.align	1
 3015              		.global	rt_sprintf
 3016              		.syntax unified
 3017              		.thumb
 3018              		.thumb_func
 3020              	rt_sprintf:
 3021              	.LFB37:
1056:./rt_thread/src/kservice.c **** 
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 73


1057:./rt_thread/src/kservice.c **** /**
1058:./rt_thread/src/kservice.c ****  * This function will fill a formatted string to buffer
1059:./rt_thread/src/kservice.c ****  *
1060:./rt_thread/src/kservice.c ****  * @param buf the buffer to save formatted string
1061:./rt_thread/src/kservice.c ****  * @param format the format
1062:./rt_thread/src/kservice.c ****  */
1063:./rt_thread/src/kservice.c **** rt_int32_t rt_sprintf(char *buf, const char *format, ...)
1064:./rt_thread/src/kservice.c **** {
 3022              		.loc 1 1064 1
 3023              		.cfi_startproc
 3024              		@ args = 4, pretend = 12, frame = 16
 3025              		@ frame_needed = 1, uses_anonymous_args = 1
 3026 0000 0EB4     		push	{r1, r2, r3}
 3027              	.LCFI124:
 3028              		.cfi_def_cfa_offset 12
 3029              		.cfi_offset 1, -12
 3030              		.cfi_offset 2, -8
 3031              		.cfi_offset 3, -4
 3032 0002 80B5     		push	{r7, lr}
 3033              	.LCFI125:
 3034              		.cfi_def_cfa_offset 20
 3035              		.cfi_offset 7, -20
 3036              		.cfi_offset 14, -16
 3037 0004 85B0     		sub	sp, sp, #20
 3038              	.LCFI126:
 3039              		.cfi_def_cfa_offset 40
 3040 0006 00AF     		add	r7, sp, #0
 3041              	.LCFI127:
 3042              		.cfi_def_cfa_register 7
 3043 0008 7860     		str	r0, [r7, #4]
1065:./rt_thread/src/kservice.c ****     rt_int32_t n;
1066:./rt_thread/src/kservice.c ****     va_list arg_ptr;
1067:./rt_thread/src/kservice.c **** 
1068:./rt_thread/src/kservice.c ****     va_start(arg_ptr, format);
 3044              		.loc 1 1068 5
 3045 000a 07F12003 		add	r3, r7, #32
 3046 000e BB60     		str	r3, [r7, #8]
1069:./rt_thread/src/kservice.c ****     n = rt_vsprintf(buf, format, arg_ptr);
 3047              		.loc 1 1069 9
 3048 0010 BA68     		ldr	r2, [r7, #8]
 3049 0012 F969     		ldr	r1, [r7, #28]
 3050 0014 7868     		ldr	r0, [r7, #4]
 3051 0016 FFF7FEFF 		bl	rt_vsprintf
 3052 001a F860     		str	r0, [r7, #12]
1070:./rt_thread/src/kservice.c ****     va_end(arg_ptr);
1071:./rt_thread/src/kservice.c **** 
1072:./rt_thread/src/kservice.c ****     return n;
 3053              		.loc 1 1072 12
 3054 001c FB68     		ldr	r3, [r7, #12]
1073:./rt_thread/src/kservice.c **** }
 3055              		.loc 1 1073 1
 3056 001e 1846     		mov	r0, r3
 3057 0020 1437     		adds	r7, r7, #20
 3058              	.LCFI128:
 3059              		.cfi_def_cfa_offset 20
 3060 0022 BD46     		mov	sp, r7
 3061              	.LCFI129:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 74


 3062              		.cfi_def_cfa_register 13
 3063              		@ sp needed
 3064 0024 BDE88040 		pop	{r7, lr}
 3065              	.LCFI130:
 3066              		.cfi_restore 14
 3067              		.cfi_restore 7
 3068              		.cfi_def_cfa_offset 12
 3069 0028 03B0     		add	sp, sp, #12
 3070              	.LCFI131:
 3071              		.cfi_restore 3
 3072              		.cfi_restore 2
 3073              		.cfi_restore 1
 3074              		.cfi_def_cfa_offset 0
 3075 002a 7047     		bx	lr
 3076              		.cfi_endproc
 3077              	.LFE37:
 3079              		.section	.text.rt_hw_console_output,"ax",%progbits
 3080              		.align	1
 3081              		.weak	rt_hw_console_output
 3082              		.syntax unified
 3083              		.thumb
 3084              		.thumb_func
 3086              	rt_hw_console_output:
 3087              	.LFB38:
1074:./rt_thread/src/kservice.c **** 
1075:./rt_thread/src/kservice.c **** #ifdef RT_USING_CONSOLE
1076:./rt_thread/src/kservice.c **** 
1077:./rt_thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1078:./rt_thread/src/kservice.c **** /**
1079:./rt_thread/src/kservice.c ****  * This function returns the device using in console.
1080:./rt_thread/src/kservice.c ****  *
1081:./rt_thread/src/kservice.c ****  * @return the device using in console or RT_NULL
1082:./rt_thread/src/kservice.c ****  */
1083:./rt_thread/src/kservice.c **** rt_device_t rt_console_get_device(void)
1084:./rt_thread/src/kservice.c **** {
1085:./rt_thread/src/kservice.c ****     return _console_device;
1086:./rt_thread/src/kservice.c **** }
1087:./rt_thread/src/kservice.c **** 
1088:./rt_thread/src/kservice.c **** /**
1089:./rt_thread/src/kservice.c ****  * This function will set a device as console device.
1090:./rt_thread/src/kservice.c ****  * After set a device to console, all output of rt_kprintf will be
1091:./rt_thread/src/kservice.c ****  * redirected to this new device.
1092:./rt_thread/src/kservice.c ****  *
1093:./rt_thread/src/kservice.c ****  * @param name the name of new console device
1094:./rt_thread/src/kservice.c ****  *
1095:./rt_thread/src/kservice.c ****  * @return the old console device handler on successful, or RT_NULL on failure.
1096:./rt_thread/src/kservice.c ****  */
1097:./rt_thread/src/kservice.c **** rt_device_t rt_console_set_device(const char *name)
1098:./rt_thread/src/kservice.c **** {
1099:./rt_thread/src/kservice.c ****     rt_device_t new_device, old_device;
1100:./rt_thread/src/kservice.c **** 
1101:./rt_thread/src/kservice.c ****     /* save old device */
1102:./rt_thread/src/kservice.c ****     old_device = _console_device;
1103:./rt_thread/src/kservice.c **** 
1104:./rt_thread/src/kservice.c ****     /* find new console device */
1105:./rt_thread/src/kservice.c ****     new_device = rt_device_find(name);
1106:./rt_thread/src/kservice.c **** 
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 75


1107:./rt_thread/src/kservice.c ****     /* check whether it's a same device */
1108:./rt_thread/src/kservice.c ****     if (new_device == old_device) return RT_NULL;
1109:./rt_thread/src/kservice.c **** 
1110:./rt_thread/src/kservice.c ****     if (new_device != RT_NULL)
1111:./rt_thread/src/kservice.c ****     {
1112:./rt_thread/src/kservice.c ****         if (_console_device != RT_NULL)
1113:./rt_thread/src/kservice.c ****         {
1114:./rt_thread/src/kservice.c ****             /* close old console device */
1115:./rt_thread/src/kservice.c ****             rt_device_close(_console_device);
1116:./rt_thread/src/kservice.c ****         }
1117:./rt_thread/src/kservice.c **** 
1118:./rt_thread/src/kservice.c ****         /* set new console device */
1119:./rt_thread/src/kservice.c ****         rt_device_open(new_device, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM);
1120:./rt_thread/src/kservice.c ****         _console_device = new_device;
1121:./rt_thread/src/kservice.c ****     }
1122:./rt_thread/src/kservice.c **** 
1123:./rt_thread/src/kservice.c ****     return old_device;
1124:./rt_thread/src/kservice.c **** }
1125:./rt_thread/src/kservice.c **** #endif
1126:./rt_thread/src/kservice.c **** 
1127:./rt_thread/src/kservice.c **** RT_WEAK void rt_hw_console_output(const char *str)
1128:./rt_thread/src/kservice.c **** {
 3088              		.loc 1 1128 1
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 8
 3091              		@ frame_needed = 1, uses_anonymous_args = 0
 3092              		@ link register save eliminated.
 3093 0000 80B4     		push	{r7}
 3094              	.LCFI132:
 3095              		.cfi_def_cfa_offset 4
 3096              		.cfi_offset 7, -4
 3097 0002 83B0     		sub	sp, sp, #12
 3098              	.LCFI133:
 3099              		.cfi_def_cfa_offset 16
 3100 0004 00AF     		add	r7, sp, #0
 3101              	.LCFI134:
 3102              		.cfi_def_cfa_register 7
 3103 0006 7860     		str	r0, [r7, #4]
1129:./rt_thread/src/kservice.c ****     /* empty console output */
1130:./rt_thread/src/kservice.c **** }
 3104              		.loc 1 1130 1
 3105 0008 00BF     		nop
 3106 000a 0C37     		adds	r7, r7, #12
 3107              	.LCFI135:
 3108              		.cfi_def_cfa_offset 4
 3109 000c BD46     		mov	sp, r7
 3110              	.LCFI136:
 3111              		.cfi_def_cfa_register 13
 3112              		@ sp needed
 3113 000e 80BC     		pop	{r7}
 3114              	.LCFI137:
 3115              		.cfi_restore 7
 3116              		.cfi_def_cfa_offset 0
 3117 0010 7047     		bx	lr
 3118              		.cfi_endproc
 3119              	.LFE38:
 3121              		.section	.text.rt_kputs,"ax",%progbits
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 76


 3122              		.align	1
 3123              		.global	rt_kputs
 3124              		.syntax unified
 3125              		.thumb
 3126              		.thumb_func
 3128              	rt_kputs:
 3129              	.LFB39:
1131:./rt_thread/src/kservice.c **** 
1132:./rt_thread/src/kservice.c **** /**
1133:./rt_thread/src/kservice.c ****  * This function will put string to the console.
1134:./rt_thread/src/kservice.c ****  *
1135:./rt_thread/src/kservice.c ****  * @param str the string output to the console.
1136:./rt_thread/src/kservice.c ****  */
1137:./rt_thread/src/kservice.c **** void rt_kputs(const char *str)
1138:./rt_thread/src/kservice.c **** {
 3130              		.loc 1 1138 1
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 8
 3133              		@ frame_needed = 1, uses_anonymous_args = 0
 3134 0000 80B5     		push	{r7, lr}
 3135              	.LCFI138:
 3136              		.cfi_def_cfa_offset 8
 3137              		.cfi_offset 7, -8
 3138              		.cfi_offset 14, -4
 3139 0002 82B0     		sub	sp, sp, #8
 3140              	.LCFI139:
 3141              		.cfi_def_cfa_offset 16
 3142 0004 00AF     		add	r7, sp, #0
 3143              	.LCFI140:
 3144              		.cfi_def_cfa_register 7
 3145 0006 7860     		str	r0, [r7, #4]
1139:./rt_thread/src/kservice.c ****     if (!str) return;
 3146              		.loc 1 1139 8
 3147 0008 7B68     		ldr	r3, [r7, #4]
 3148 000a 002B     		cmp	r3, #0
 3149 000c 03D0     		beq	.L227
1140:./rt_thread/src/kservice.c **** 
1141:./rt_thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1142:./rt_thread/src/kservice.c ****     if (_console_device == RT_NULL)
1143:./rt_thread/src/kservice.c ****     {
1144:./rt_thread/src/kservice.c ****         rt_hw_console_output(str);
1145:./rt_thread/src/kservice.c ****     }
1146:./rt_thread/src/kservice.c ****     else
1147:./rt_thread/src/kservice.c ****     {
1148:./rt_thread/src/kservice.c ****         rt_uint16_t old_flag = _console_device->open_flag;
1149:./rt_thread/src/kservice.c **** 
1150:./rt_thread/src/kservice.c ****         _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
1151:./rt_thread/src/kservice.c ****         rt_device_write(_console_device, 0, str, rt_strlen(str));
1152:./rt_thread/src/kservice.c ****         _console_device->open_flag = old_flag;
1153:./rt_thread/src/kservice.c ****     }
1154:./rt_thread/src/kservice.c **** #else
1155:./rt_thread/src/kservice.c ****     rt_hw_console_output(str);
 3150              		.loc 1 1155 5
 3151 000e 7868     		ldr	r0, [r7, #4]
 3152 0010 FFF7FEFF 		bl	rt_hw_console_output
 3153 0014 00E0     		b	.L224
 3154              	.L227:
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 77


1139:./rt_thread/src/kservice.c ****     if (!str) return;
 3155              		.loc 1 1139 15
 3156 0016 00BF     		nop
 3157              	.L224:
1156:./rt_thread/src/kservice.c **** #endif
1157:./rt_thread/src/kservice.c **** }
 3158              		.loc 1 1157 1
 3159 0018 0837     		adds	r7, r7, #8
 3160              	.LCFI141:
 3161              		.cfi_def_cfa_offset 8
 3162 001a BD46     		mov	sp, r7
 3163              	.LCFI142:
 3164              		.cfi_def_cfa_register 13
 3165              		@ sp needed
 3166 001c 80BD     		pop	{r7, pc}
 3167              		.cfi_endproc
 3168              	.LFE39:
 3170              		.section	.text.rt_kprintf,"ax",%progbits
 3171              		.align	1
 3172              		.global	rt_kprintf
 3173              		.syntax unified
 3174              		.thumb
 3175              		.thumb_func
 3177              	rt_kprintf:
 3178              	.LFB40:
1158:./rt_thread/src/kservice.c **** 
1159:./rt_thread/src/kservice.c **** /**
1160:./rt_thread/src/kservice.c ****  * This function will print a formatted string on system console
1161:./rt_thread/src/kservice.c ****  *
1162:./rt_thread/src/kservice.c ****  * @param fmt the format
1163:./rt_thread/src/kservice.c ****  */
1164:./rt_thread/src/kservice.c **** void rt_kprintf(const char *fmt, ...)
1165:./rt_thread/src/kservice.c **** {
 3179              		.loc 1 1165 1
 3180              		.cfi_startproc
 3181              		@ args = 4, pretend = 16, frame = 8
 3182              		@ frame_needed = 1, uses_anonymous_args = 1
 3183 0000 0FB4     		push	{r0, r1, r2, r3}
 3184              	.LCFI143:
 3185              		.cfi_def_cfa_offset 16
 3186              		.cfi_offset 0, -16
 3187              		.cfi_offset 1, -12
 3188              		.cfi_offset 2, -8
 3189              		.cfi_offset 3, -4
 3190 0002 80B5     		push	{r7, lr}
 3191              	.LCFI144:
 3192              		.cfi_def_cfa_offset 24
 3193              		.cfi_offset 7, -24
 3194              		.cfi_offset 14, -20
 3195 0004 82B0     		sub	sp, sp, #8
 3196              	.LCFI145:
 3197              		.cfi_def_cfa_offset 32
 3198 0006 00AF     		add	r7, sp, #0
 3199              	.LCFI146:
 3200              		.cfi_def_cfa_register 7
1166:./rt_thread/src/kservice.c ****     va_list args;
1167:./rt_thread/src/kservice.c ****     rt_size_t length;
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 78


1168:./rt_thread/src/kservice.c ****     static char rt_log_buf[RT_CONSOLEBUF_SIZE];
1169:./rt_thread/src/kservice.c **** 
1170:./rt_thread/src/kservice.c ****     va_start(args, fmt);
 3201              		.loc 1 1170 5
 3202 0008 07F11403 		add	r3, r7, #20
 3203 000c 3B60     		str	r3, [r7]
1171:./rt_thread/src/kservice.c ****     /* the return value of vsnprintf is the number of bytes that would be
1172:./rt_thread/src/kservice.c ****      * written to buffer had if the size of the buffer been sufficiently
1173:./rt_thread/src/kservice.c ****      * large excluding the terminating null byte. If the output string
1174:./rt_thread/src/kservice.c ****      * would be larger than the rt_log_buf, we have to adjust the output
1175:./rt_thread/src/kservice.c ****      * length. */
1176:./rt_thread/src/kservice.c ****     length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 3204              		.loc 1 1176 14
 3205 000e 3B68     		ldr	r3, [r7]
 3206 0010 3A69     		ldr	r2, [r7, #16]
 3207 0012 7F21     		movs	r1, #127
 3208 0014 0948     		ldr	r0, .L230
 3209 0016 FFF7FEFF 		bl	rt_vsnprintf
 3210 001a 0346     		mov	r3, r0
 3211              		.loc 1 1176 12
 3212 001c 7B60     		str	r3, [r7, #4]
1177:./rt_thread/src/kservice.c ****     if (length > RT_CONSOLEBUF_SIZE - 1)
 3213              		.loc 1 1177 8
 3214 001e 7B68     		ldr	r3, [r7, #4]
 3215 0020 7F2B     		cmp	r3, #127
 3216 0022 01D9     		bls	.L229
1178:./rt_thread/src/kservice.c ****         length = RT_CONSOLEBUF_SIZE - 1;
 3217              		.loc 1 1178 16
 3218 0024 7F23     		movs	r3, #127
 3219 0026 7B60     		str	r3, [r7, #4]
 3220              	.L229:
1179:./rt_thread/src/kservice.c **** #ifdef RT_USING_DEVICE
1180:./rt_thread/src/kservice.c ****     if (_console_device == RT_NULL)
1181:./rt_thread/src/kservice.c ****     {
1182:./rt_thread/src/kservice.c ****         rt_hw_console_output(rt_log_buf);
1183:./rt_thread/src/kservice.c ****     }
1184:./rt_thread/src/kservice.c ****     else
1185:./rt_thread/src/kservice.c ****     {
1186:./rt_thread/src/kservice.c ****         rt_uint16_t old_flag = _console_device->open_flag;
1187:./rt_thread/src/kservice.c **** 
1188:./rt_thread/src/kservice.c ****         _console_device->open_flag |= RT_DEVICE_FLAG_STREAM;
1189:./rt_thread/src/kservice.c ****         rt_device_write(_console_device, 0, rt_log_buf, length);
1190:./rt_thread/src/kservice.c ****         _console_device->open_flag = old_flag;
1191:./rt_thread/src/kservice.c ****     }
1192:./rt_thread/src/kservice.c **** #else
1193:./rt_thread/src/kservice.c ****     rt_hw_console_output(rt_log_buf);
 3221              		.loc 1 1193 5
 3222 0028 0448     		ldr	r0, .L230
 3223 002a FFF7FEFF 		bl	rt_hw_console_output
1194:./rt_thread/src/kservice.c **** #endif
1195:./rt_thread/src/kservice.c ****     va_end(args);
1196:./rt_thread/src/kservice.c **** }
 3224              		.loc 1 1196 1
 3225 002e 00BF     		nop
 3226 0030 0837     		adds	r7, r7, #8
 3227              	.LCFI147:
 3228              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 79


 3229 0032 BD46     		mov	sp, r7
 3230              	.LCFI148:
 3231              		.cfi_def_cfa_register 13
 3232              		@ sp needed
 3233 0034 BDE88040 		pop	{r7, lr}
 3234              	.LCFI149:
 3235              		.cfi_restore 14
 3236              		.cfi_restore 7
 3237              		.cfi_def_cfa_offset 16
 3238 0038 04B0     		add	sp, sp, #16
 3239              	.LCFI150:
 3240              		.cfi_restore 3
 3241              		.cfi_restore 2
 3242              		.cfi_restore 1
 3243              		.cfi_restore 0
 3244              		.cfi_def_cfa_offset 0
 3245 003a 7047     		bx	lr
 3246              	.L231:
 3247              		.align	2
 3248              	.L230:
 3249 003c 00000000 		.word	rt_log_buf.0
 3250              		.cfi_endproc
 3251              	.LFE40:
 3253              		.section	.text.rt_malloc_align,"ax",%progbits
 3254              		.align	1
 3255              		.global	rt_malloc_align
 3256              		.syntax unified
 3257              		.thumb
 3258              		.thumb_func
 3260              	rt_malloc_align:
 3261              	.LFB41:
1197:./rt_thread/src/kservice.c **** #endif
1198:./rt_thread/src/kservice.c **** 
1199:./rt_thread/src/kservice.c **** #ifdef RT_USING_HEAP
1200:./rt_thread/src/kservice.c **** /**
1201:./rt_thread/src/kservice.c ****  * This function allocates a memory block, which address is aligned to the
1202:./rt_thread/src/kservice.c ****  * specified alignment size.
1203:./rt_thread/src/kservice.c ****  *
1204:./rt_thread/src/kservice.c ****  * @param size the allocated memory block size
1205:./rt_thread/src/kservice.c ****  * @param align the alignment size
1206:./rt_thread/src/kservice.c ****  *
1207:./rt_thread/src/kservice.c ****  * @return the allocated memory block on successful, otherwise returns RT_NULL
1208:./rt_thread/src/kservice.c ****  */
1209:./rt_thread/src/kservice.c **** void *rt_malloc_align(rt_size_t size, rt_size_t align)
1210:./rt_thread/src/kservice.c **** {
 3262              		.loc 1 1210 1
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 24
 3265              		@ frame_needed = 1, uses_anonymous_args = 0
 3266 0000 80B5     		push	{r7, lr}
 3267              	.LCFI151:
 3268              		.cfi_def_cfa_offset 8
 3269              		.cfi_offset 7, -8
 3270              		.cfi_offset 14, -4
 3271 0002 86B0     		sub	sp, sp, #24
 3272              	.LCFI152:
 3273              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 80


 3274 0004 00AF     		add	r7, sp, #0
 3275              	.LCFI153:
 3276              		.cfi_def_cfa_register 7
 3277 0006 7860     		str	r0, [r7, #4]
 3278 0008 3960     		str	r1, [r7]
1211:./rt_thread/src/kservice.c ****     void *ptr;
1212:./rt_thread/src/kservice.c ****     void *align_ptr;
1213:./rt_thread/src/kservice.c ****     int uintptr_size;
1214:./rt_thread/src/kservice.c ****     rt_size_t align_size;
1215:./rt_thread/src/kservice.c **** 
1216:./rt_thread/src/kservice.c ****     /* sizeof pointer */
1217:./rt_thread/src/kservice.c ****     uintptr_size = sizeof(void*);
 3279              		.loc 1 1217 18
 3280 000a 0423     		movs	r3, #4
 3281 000c FB60     		str	r3, [r7, #12]
1218:./rt_thread/src/kservice.c ****     uintptr_size -= 1;
 3282              		.loc 1 1218 18
 3283 000e FB68     		ldr	r3, [r7, #12]
 3284 0010 013B     		subs	r3, r3, #1
 3285 0012 FB60     		str	r3, [r7, #12]
1219:./rt_thread/src/kservice.c **** 
1220:./rt_thread/src/kservice.c ****     /* align the alignment size to uintptr size byte */
1221:./rt_thread/src/kservice.c ****     align = ((align + uintptr_size) & ~uintptr_size);
 3286              		.loc 1 1221 21
 3287 0014 FA68     		ldr	r2, [r7, #12]
 3288 0016 3B68     		ldr	r3, [r7]
 3289 0018 1344     		add	r3, r3, r2
 3290              		.loc 1 1221 39
 3291 001a FA68     		ldr	r2, [r7, #12]
 3292 001c D243     		mvns	r2, r2
 3293              		.loc 1 1221 11
 3294 001e 1340     		ands	r3, r3, r2
 3295 0020 3B60     		str	r3, [r7]
1222:./rt_thread/src/kservice.c **** 
1223:./rt_thread/src/kservice.c ****     /* get total aligned size */
1224:./rt_thread/src/kservice.c ****     align_size = ((size + uintptr_size) & ~uintptr_size) + align;
 3296              		.loc 1 1224 25
 3297 0022 FA68     		ldr	r2, [r7, #12]
 3298 0024 7B68     		ldr	r3, [r7, #4]
 3299 0026 1344     		add	r3, r3, r2
 3300              		.loc 1 1224 43
 3301 0028 FA68     		ldr	r2, [r7, #12]
 3302 002a D243     		mvns	r2, r2
 3303              		.loc 1 1224 41
 3304 002c 1340     		ands	r3, r3, r2
 3305              		.loc 1 1224 16
 3306 002e 3A68     		ldr	r2, [r7]
 3307 0030 1344     		add	r3, r3, r2
 3308 0032 BB60     		str	r3, [r7, #8]
1225:./rt_thread/src/kservice.c ****     /* allocate memory block from heap */
1226:./rt_thread/src/kservice.c ****     ptr = rt_malloc(align_size);
 3309              		.loc 1 1226 11
 3310 0034 B868     		ldr	r0, [r7, #8]
 3311 0036 FFF7FEFF 		bl	rt_malloc
 3312 003a 7861     		str	r0, [r7, #20]
1227:./rt_thread/src/kservice.c ****     if (ptr != RT_NULL)
 3313              		.loc 1 1227 8
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 81


 3314 003c 7B69     		ldr	r3, [r7, #20]
 3315 003e 002B     		cmp	r3, #0
 3316 0040 19D0     		beq	.L233
1228:./rt_thread/src/kservice.c ****     {
1229:./rt_thread/src/kservice.c ****         /* the allocated memory block is aligned */
1230:./rt_thread/src/kservice.c ****         if (((rt_ubase_t)ptr & (align - 1)) == 0)
 3317              		.loc 1 1230 39
 3318 0042 3B68     		ldr	r3, [r7]
 3319 0044 5A1E     		subs	r2, r3, #1
 3320              		.loc 1 1230 14
 3321 0046 7B69     		ldr	r3, [r7, #20]
 3322              		.loc 1 1230 30
 3323 0048 1340     		ands	r3, r3, r2
 3324              		.loc 1 1230 12
 3325 004a 002B     		cmp	r3, #0
 3326 004c 04D1     		bne	.L234
1231:./rt_thread/src/kservice.c ****         {
1232:./rt_thread/src/kservice.c ****             align_ptr = (void *)((rt_ubase_t)ptr + align);
 3327              		.loc 1 1232 34
 3328 004e 7A69     		ldr	r2, [r7, #20]
 3329              		.loc 1 1232 50
 3330 0050 3B68     		ldr	r3, [r7]
 3331 0052 1344     		add	r3, r3, r2
 3332              		.loc 1 1232 23
 3333 0054 3B61     		str	r3, [r7, #16]
 3334 0056 07E0     		b	.L235
 3335              	.L234:
1233:./rt_thread/src/kservice.c ****         }
1234:./rt_thread/src/kservice.c ****         else
1235:./rt_thread/src/kservice.c ****         {
1236:./rt_thread/src/kservice.c ****             align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
 3336              		.loc 1 1236 51
 3337 0058 7A69     		ldr	r2, [r7, #20]
 3338 005a 3B68     		ldr	r3, [r7]
 3339 005c 1344     		add	r3, r3, r2
 3340 005e 5A1E     		subs	r2, r3, #1
 3341              		.loc 1 1236 68
 3342 0060 3B68     		ldr	r3, [r7]
 3343 0062 5B42     		rsbs	r3, r3, #0
 3344              		.loc 1 1236 66
 3345 0064 1340     		ands	r3, r3, r2
 3346              		.loc 1 1236 23
 3347 0066 3B61     		str	r3, [r7, #16]
 3348              	.L235:
1237:./rt_thread/src/kservice.c ****         }
1238:./rt_thread/src/kservice.c **** 
1239:./rt_thread/src/kservice.c ****         /* set the pointer before alignment pointer to the real pointer */
1240:./rt_thread/src/kservice.c ****         *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
 3349              		.loc 1 1240 26
 3350 0068 3B69     		ldr	r3, [r7, #16]
 3351              		.loc 1 1240 48
 3352 006a 043B     		subs	r3, r3, #4
 3353              		.loc 1 1240 11
 3354 006c 1A46     		mov	r2, r3
 3355              		.loc 1 1240 69
 3356 006e 7B69     		ldr	r3, [r7, #20]
 3357              		.loc 1 1240 67
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 82


 3358 0070 1360     		str	r3, [r2]
1241:./rt_thread/src/kservice.c **** 
1242:./rt_thread/src/kservice.c ****         ptr = align_ptr;
 3359              		.loc 1 1242 13
 3360 0072 3B69     		ldr	r3, [r7, #16]
 3361 0074 7B61     		str	r3, [r7, #20]
 3362              	.L233:
1243:./rt_thread/src/kservice.c ****     }
1244:./rt_thread/src/kservice.c **** 
1245:./rt_thread/src/kservice.c ****     return ptr;
 3363              		.loc 1 1245 12
 3364 0076 7B69     		ldr	r3, [r7, #20]
1246:./rt_thread/src/kservice.c **** }
 3365              		.loc 1 1246 1
 3366 0078 1846     		mov	r0, r3
 3367 007a 1837     		adds	r7, r7, #24
 3368              	.LCFI154:
 3369              		.cfi_def_cfa_offset 8
 3370 007c BD46     		mov	sp, r7
 3371              	.LCFI155:
 3372              		.cfi_def_cfa_register 13
 3373              		@ sp needed
 3374 007e 80BD     		pop	{r7, pc}
 3375              		.cfi_endproc
 3376              	.LFE41:
 3378              		.section	.text.rt_free_align,"ax",%progbits
 3379              		.align	1
 3380              		.global	rt_free_align
 3381              		.syntax unified
 3382              		.thumb
 3383              		.thumb_func
 3385              	rt_free_align:
 3386              	.LFB42:
1247:./rt_thread/src/kservice.c **** 
1248:./rt_thread/src/kservice.c **** /**
1249:./rt_thread/src/kservice.c ****  * This function release the memory block, which is allocated by
1250:./rt_thread/src/kservice.c ****  * rt_malloc_align function and address is aligned.
1251:./rt_thread/src/kservice.c ****  *
1252:./rt_thread/src/kservice.c ****  * @param ptr the memory block pointer
1253:./rt_thread/src/kservice.c ****  */
1254:./rt_thread/src/kservice.c **** void rt_free_align(void *ptr)
1255:./rt_thread/src/kservice.c **** {
 3387              		.loc 1 1255 1
 3388              		.cfi_startproc
 3389              		@ args = 0, pretend = 0, frame = 16
 3390              		@ frame_needed = 1, uses_anonymous_args = 0
 3391 0000 80B5     		push	{r7, lr}
 3392              	.LCFI156:
 3393              		.cfi_def_cfa_offset 8
 3394              		.cfi_offset 7, -8
 3395              		.cfi_offset 14, -4
 3396 0002 84B0     		sub	sp, sp, #16
 3397              	.LCFI157:
 3398              		.cfi_def_cfa_offset 24
 3399 0004 00AF     		add	r7, sp, #0
 3400              	.LCFI158:
 3401              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 83


 3402 0006 7860     		str	r0, [r7, #4]
1256:./rt_thread/src/kservice.c ****     void *real_ptr;
1257:./rt_thread/src/kservice.c **** 
1258:./rt_thread/src/kservice.c ****     real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
 3403              		.loc 1 1258 42
 3404 0008 7B68     		ldr	r3, [r7, #4]
 3405              		.loc 1 1258 58
 3406 000a 043B     		subs	r3, r3, #4
 3407              		.loc 1 1258 25
 3408 000c 1B68     		ldr	r3, [r3]
 3409              		.loc 1 1258 14
 3410 000e FB60     		str	r3, [r7, #12]
1259:./rt_thread/src/kservice.c ****     rt_free(real_ptr);
 3411              		.loc 1 1259 5
 3412 0010 F868     		ldr	r0, [r7, #12]
 3413 0012 FFF7FEFF 		bl	rt_free
1260:./rt_thread/src/kservice.c **** }
 3414              		.loc 1 1260 1
 3415 0016 00BF     		nop
 3416 0018 1037     		adds	r7, r7, #16
 3417              	.LCFI159:
 3418              		.cfi_def_cfa_offset 8
 3419 001a BD46     		mov	sp, r7
 3420              	.LCFI160:
 3421              		.cfi_def_cfa_register 13
 3422              		@ sp needed
 3423 001c 80BD     		pop	{r7, pc}
 3424              		.cfi_endproc
 3425              	.LFE42:
 3427              		.global	__lowest_bit_bitmap
 3428              		.section	.rodata.__lowest_bit_bitmap,"a"
 3429              		.align	2
 3432              	__lowest_bit_bitmap:
 3433 0000 00000100 		.ascii	"\000\000\001\000\002\000\001\000\003\000\001\000\002"
 3433      02000100 
 3433      03000100 
 3433      02
 3434 000d 00010004 		.ascii	"\000\001\000\004\000\001\000\002\000\001\000\003\000"
 3434      00010002 
 3434      00010003 
 3434      00
 3435 001a 01000200 		.ascii	"\001\000\002\000\001\000\005\000\001\000\002\000\001"
 3435      01000500 
 3435      01000200 
 3435      01
 3436 0027 00030001 		.ascii	"\000\003\000\001\000\002\000\001\000\004\000\001\000"
 3436      00020001 
 3436      00040001 
 3436      00
 3437 0034 02000100 		.ascii	"\002\000\001\000\003\000\001\000\002\000\001\000\006"
 3437      03000100 
 3437      02000100 
 3437      06
 3438 0041 00010002 		.ascii	"\000\001\000\002\000\001\000\003\000\001\000\002\000"
 3438      00010003 
 3438      00010002 
 3438      00
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 84


 3439 004e 01000400 		.ascii	"\001\000\004\000\001\000\002\000\001\000\003\000\001"
 3439      01000200 
 3439      01000300 
 3439      01
 3440 005b 00020001 		.ascii	"\000\002\000\001\000\005\000\001\000\002\000\001\000"
 3440      00050001 
 3440      00020001 
 3440      00
 3441 0068 03000100 		.ascii	"\003\000\001\000\002\000\001\000\004\000\001\000\002"
 3441      02000100 
 3441      04000100 
 3441      02
 3442 0075 00010003 		.ascii	"\000\001\000\003\000\001\000\002\000\001\000\007\000"
 3442      00010002 
 3442      00010007 
 3442      00
 3443 0082 01000200 		.ascii	"\001\000\002\000\001\000\003\000\001\000\002\000\001"
 3443      01000300 
 3443      01000200 
 3443      01
 3444 008f 00040001 		.ascii	"\000\004\000\001\000\002\000\001\000\003\000\001\000"
 3444      00020001 
 3444      00030001 
 3444      00
 3445 009c 02000100 		.ascii	"\002\000\001\000\005\000\001\000\002\000\001\000\003"
 3445      05000100 
 3445      02000100 
 3445      03
 3446 00a9 00010002 		.ascii	"\000\001\000\002\000\001\000\004\000\001\000\002\000"
 3446      00010004 
 3446      00010002 
 3446      00
 3447 00b6 01000300 		.ascii	"\001\000\003\000\001\000\002\000\001\000\006\000\001"
 3447      01000200 
 3447      01000600 
 3447      01
 3448 00c3 00020001 		.ascii	"\000\002\000\001\000\003\000\001\000\002\000\001\000"
 3448      00030001 
 3448      00020001 
 3448      00
 3449 00d0 04000100 		.ascii	"\004\000\001\000\002\000\001\000\003\000\001\000\002"
 3449      02000100 
 3449      03000100 
 3449      02
 3450 00dd 00010005 		.ascii	"\000\001\000\005\000\001\000\002\000\001\000\003\000"
 3450      00010002 
 3450      00010003 
 3450      00
 3451 00ea 01000200 		.ascii	"\001\000\002\000\001\000\004\000\001\000\002\000\001"
 3451      01000400 
 3451      01000200 
 3451      01
 3452 00f7 00030001 		.ascii	"\000\003\000\001\000\002\000\001\000"
 3452      00020001 
 3452      00
 3453              		.section	.text.__rt_ffs,"ax",%progbits
 3454              		.align	1
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 85


 3455              		.global	__rt_ffs
 3456              		.syntax unified
 3457              		.thumb
 3458              		.thumb_func
 3460              	__rt_ffs:
 3461              	.LFB43:
1261:./rt_thread/src/kservice.c **** #endif
1262:./rt_thread/src/kservice.c **** 
1263:./rt_thread/src/kservice.c **** #ifndef RT_USING_CPU_FFS
1264:./rt_thread/src/kservice.c **** const rt_uint8_t __lowest_bit_bitmap[] =
1265:./rt_thread/src/kservice.c **** {
1266:./rt_thread/src/kservice.c ****     /* 00 */ 0, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1267:./rt_thread/src/kservice.c ****     /* 10 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1268:./rt_thread/src/kservice.c ****     /* 20 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1269:./rt_thread/src/kservice.c ****     /* 30 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1270:./rt_thread/src/kservice.c ****     /* 40 */ 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1271:./rt_thread/src/kservice.c ****     /* 50 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1272:./rt_thread/src/kservice.c ****     /* 60 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1273:./rt_thread/src/kservice.c ****     /* 70 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1274:./rt_thread/src/kservice.c ****     /* 80 */ 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1275:./rt_thread/src/kservice.c ****     /* 90 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1276:./rt_thread/src/kservice.c ****     /* A0 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1277:./rt_thread/src/kservice.c ****     /* B0 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1278:./rt_thread/src/kservice.c ****     /* C0 */ 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1279:./rt_thread/src/kservice.c ****     /* D0 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1280:./rt_thread/src/kservice.c ****     /* E0 */ 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0,
1281:./rt_thread/src/kservice.c ****     /* F0 */ 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0
1282:./rt_thread/src/kservice.c **** };
1283:./rt_thread/src/kservice.c **** 
1284:./rt_thread/src/kservice.c **** /**
1285:./rt_thread/src/kservice.c ****  * This function finds the first bit set (beginning with the least significant bit)
1286:./rt_thread/src/kservice.c ****  * in value and return the index of that bit.
1287:./rt_thread/src/kservice.c ****  *
1288:./rt_thread/src/kservice.c ****  * Bits are numbered starting at 1 (the least significant bit).  A return value of
1289:./rt_thread/src/kservice.c ****  * zero from any of these functions means that the argument was zero.
1290:./rt_thread/src/kservice.c ****  *
1291:./rt_thread/src/kservice.c ****  * @return return the index of the first bit set. If value is 0, then this function
1292:./rt_thread/src/kservice.c ****  * shall return 0.
1293:./rt_thread/src/kservice.c ****  */
1294:./rt_thread/src/kservice.c **** int __rt_ffs(int value)
1295:./rt_thread/src/kservice.c **** {
 3462              		.loc 1 1295 1
 3463              		.cfi_startproc
 3464              		@ args = 0, pretend = 0, frame = 8
 3465              		@ frame_needed = 1, uses_anonymous_args = 0
 3466              		@ link register save eliminated.
 3467 0000 80B4     		push	{r7}
 3468              	.LCFI161:
 3469              		.cfi_def_cfa_offset 4
 3470              		.cfi_offset 7, -4
 3471 0002 83B0     		sub	sp, sp, #12
 3472              	.LCFI162:
 3473              		.cfi_def_cfa_offset 16
 3474 0004 00AF     		add	r7, sp, #0
 3475              	.LCFI163:
 3476              		.cfi_def_cfa_register 7
 3477 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 86


1296:./rt_thread/src/kservice.c ****     if (value == 0) return 0;
 3478              		.loc 1 1296 8
 3479 0008 7B68     		ldr	r3, [r7, #4]
 3480 000a 002B     		cmp	r3, #0
 3481 000c 01D1     		bne	.L239
 3482              		.loc 1 1296 28 discriminator 1
 3483 000e 0023     		movs	r3, #0
 3484 0010 26E0     		b	.L240
 3485              	.L239:
1297:./rt_thread/src/kservice.c **** 
1298:./rt_thread/src/kservice.c ****     if (value & 0xff)
 3486              		.loc 1 1298 15
 3487 0012 7B68     		ldr	r3, [r7, #4]
 3488 0014 DBB2     		uxtb	r3, r3
 3489              		.loc 1 1298 8
 3490 0016 002B     		cmp	r3, #0
 3491 0018 05D0     		beq	.L241
1299:./rt_thread/src/kservice.c ****         return __lowest_bit_bitmap[value & 0xff] + 1;
 3492              		.loc 1 1299 42
 3493 001a 7B68     		ldr	r3, [r7, #4]
 3494 001c DBB2     		uxtb	r3, r3
 3495              		.loc 1 1299 35
 3496 001e 134A     		ldr	r2, .L244
 3497 0020 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3498              		.loc 1 1299 50
 3499 0022 0133     		adds	r3, r3, #1
 3500 0024 1CE0     		b	.L240
 3501              	.L241:
1300:./rt_thread/src/kservice.c **** 
1301:./rt_thread/src/kservice.c ****     if (value & 0xff00)
 3502              		.loc 1 1301 15
 3503 0026 7B68     		ldr	r3, [r7, #4]
 3504 0028 03F47F43 		and	r3, r3, #65280
 3505              		.loc 1 1301 8
 3506 002c 002B     		cmp	r3, #0
 3507 002e 06D0     		beq	.L242
1302:./rt_thread/src/kservice.c ****         return __lowest_bit_bitmap[(value & 0xff00) >> 8] + 9;
 3508              		.loc 1 1302 53
 3509 0030 7B68     		ldr	r3, [r7, #4]
 3510 0032 1B12     		asrs	r3, r3, #8
 3511 0034 DBB2     		uxtb	r3, r3
 3512              		.loc 1 1302 35
 3513 0036 0D4A     		ldr	r2, .L244
 3514 0038 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3515              		.loc 1 1302 59
 3516 003a 0933     		adds	r3, r3, #9
 3517 003c 10E0     		b	.L240
 3518              	.L242:
1303:./rt_thread/src/kservice.c **** 
1304:./rt_thread/src/kservice.c ****     if (value & 0xff0000)
 3519              		.loc 1 1304 15
 3520 003e 7B68     		ldr	r3, [r7, #4]
 3521 0040 03F47F03 		and	r3, r3, #16711680
 3522              		.loc 1 1304 8
 3523 0044 002B     		cmp	r3, #0
 3524 0046 06D0     		beq	.L243
1305:./rt_thread/src/kservice.c ****         return __lowest_bit_bitmap[(value & 0xff0000) >> 16] + 17;
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 87


 3525              		.loc 1 1305 55
 3526 0048 7B68     		ldr	r3, [r7, #4]
 3527 004a 1B14     		asrs	r3, r3, #16
 3528 004c DBB2     		uxtb	r3, r3
 3529              		.loc 1 1305 35
 3530 004e 074A     		ldr	r2, .L244
 3531 0050 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3532              		.loc 1 1305 62
 3533 0052 1133     		adds	r3, r3, #17
 3534 0054 04E0     		b	.L240
 3535              	.L243:
1306:./rt_thread/src/kservice.c **** 
1307:./rt_thread/src/kservice.c ****     return __lowest_bit_bitmap[(value & 0xff000000) >> 24] + 25;
 3536              		.loc 1 1307 53
 3537 0056 7B68     		ldr	r3, [r7, #4]
 3538 0058 1B0E     		lsrs	r3, r3, #24
 3539              		.loc 1 1307 31
 3540 005a 044A     		ldr	r2, .L244
 3541 005c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 3542              		.loc 1 1307 60
 3543 005e 1933     		adds	r3, r3, #25
 3544              	.L240:
1308:./rt_thread/src/kservice.c **** }
 3545              		.loc 1 1308 1
 3546 0060 1846     		mov	r0, r3
 3547 0062 0C37     		adds	r7, r7, #12
 3548              	.LCFI164:
 3549              		.cfi_def_cfa_offset 4
 3550 0064 BD46     		mov	sp, r7
 3551              	.LCFI165:
 3552              		.cfi_def_cfa_register 13
 3553              		@ sp needed
 3554 0066 80BC     		pop	{r7}
 3555              	.LCFI166:
 3556              		.cfi_restore 7
 3557              		.cfi_def_cfa_offset 0
 3558 0068 7047     		bx	lr
 3559              	.L245:
 3560 006a 00BF     		.align	2
 3561              	.L244:
 3562 006c 00000000 		.word	__lowest_bit_bitmap
 3563              		.cfi_endproc
 3564              	.LFE43:
 3566              		.section	.rodata.large_digits.2,"a"
 3567              		.align	2
 3570              	large_digits.2:
 3571 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 3571      34353637 
 3571      38394142 
 3571      43444546 
 3571      00
 3572              		.section	.rodata.small_digits.1,"a"
 3573              		.align	2
 3576              	small_digits.1:
 3577 0000 30313233 		.ascii	"0123456789abcdef\000"
 3577      34353637 
 3577      38396162 
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 88


 3577      63646566 
 3577      00
 3578              		.section	.bss.rt_log_buf.0,"aw",%nobits
 3579              		.align	2
 3582              	rt_log_buf.0:
 3583 0000 00000000 		.space	128
 3583      00000000 
 3583      00000000 
 3583      00000000 
 3583      00000000 
 3584              		.text
 3585              	.Letext0:
 3586              		.file 2 "./rt_thread/include/rtdef.h"
 3587              		.file 3 "<built-in>"
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 89


DEFINED SYMBOLS
                            *ABS*:00000000 kservice.c
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:18     .bss.__rt_errno:00000000 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:21     .bss.__rt_errno:00000000 __rt_errno
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:24     .text.rt_get_errno:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:30     .text.rt_get_errno:00000000 rt_get_errno
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:88     .text.rt_get_errno:00000034 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:93     .text.rt_set_errno:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:99     .text.rt_set_errno:00000000 rt_set_errno
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:161    .text.rt_set_errno:0000003c $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:166    .text._rt_errno:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:172    .text._rt_errno:00000000 _rt_errno
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:227    .text._rt_errno:00000030 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:232    .text.rt_memset:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:238    .text.rt_memset:00000000 rt_memset
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:395    .text.rt_memcpy:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:401    .text.rt_memcpy:00000000 rt_memcpy
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:584    .text.rt_memmove:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:590    .text.rt_memmove:00000000 rt_memmove
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:707    .text.rt_memcmp:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:713    .text.rt_memcmp:00000000 rt_memcmp
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:801    .text.rt_strstr:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:807    .text.rt_strstr:00000000 rt_strstr
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1349   .text.rt_strlen:00000000 rt_strlen
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:894    .text.rt_strcasecmp:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:900    .text.rt_strcasecmp:00000000 rt_strcasecmp
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:994    .text.rt_strncpy:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1000   .text.rt_strncpy:00000000 rt_strncpy
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1099   .text.rt_strncmp:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1105   .text.rt_strncmp:00000000 rt_strncmp
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1188   .text.rt_strcmp:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1194   .text.rt_strcmp:00000000 rt_strcmp
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1268   .text.rt_strnlen:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1274   .text.rt_strnlen:00000000 rt_strnlen
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1343   .text.rt_strlen:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1406   .text.rt_strdup:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1412   .text.rt_strdup:00000000 rt_strdup
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1471   .rodata:00000000 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1487   .text.rt_show_version:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1493   .text.rt_show_version:00000000 rt_show_version
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3177   .text.rt_kprintf:00000000 rt_kprintf
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1537   .text.rt_show_version:00000030 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1546   .text.divide:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1551   .text.divide:00000000 divide
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1642   .text.divide:00000064 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1647   .text.skip_atoi:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1652   .text.skip_atoi:00000000 skip_atoi
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1725   .text.print_number:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:1730   .text.print_number:00000000 print_number
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2083   .text.print_number:000001d0 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3570   .rodata.large_digits.2:00000000 large_digits.2
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3576   .rodata.small_digits.1:00000000 small_digits.1
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2093   .text.rt_vsnprintf:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2099   .text.rt_vsnprintf:00000000 rt_vsnprintf
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2387   .text.rt_vsnprintf:0000019c $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2420   .text.rt_vsnprintf:00000220 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2896   .text.rt_vsnprintf:000004a8 $d
ARM GAS  C:\Users\hao\AppData\Local\Temp\ccqSV67d.s 			page 90


C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2901   .text.rt_snprintf:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2907   .text.rt_snprintf:00000000 rt_snprintf
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2967   .text.rt_vsprintf:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:2973   .text.rt_vsprintf:00000000 rt_vsprintf
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3014   .text.rt_sprintf:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3020   .text.rt_sprintf:00000000 rt_sprintf
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3080   .text.rt_hw_console_output:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3086   .text.rt_hw_console_output:00000000 rt_hw_console_output
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3122   .text.rt_kputs:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3128   .text.rt_kputs:00000000 rt_kputs
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3171   .text.rt_kprintf:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3249   .text.rt_kprintf:0000003c $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3582   .bss.rt_log_buf.0:00000000 rt_log_buf.0
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3254   .text.rt_malloc_align:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3260   .text.rt_malloc_align:00000000 rt_malloc_align
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3379   .text.rt_free_align:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3385   .text.rt_free_align:00000000 rt_free_align
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3432   .rodata.__lowest_bit_bitmap:00000000 __lowest_bit_bitmap
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3429   .rodata.__lowest_bit_bitmap:00000000 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3454   .text.__rt_ffs:00000000 $t
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3460   .text.__rt_ffs:00000000 __rt_ffs
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3562   .text.__rt_ffs:0000006c $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3567   .rodata.large_digits.2:00000000 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3573   .rodata.small_digits.1:00000000 $d
C:\Users\hao\AppData\Local\Temp\ccqSV67d.s:3579   .bss.rt_log_buf.0:00000000 $d

UNDEFINED SYMBOLS
rt_interrupt_get_nest
rt_thread_self
rt_malloc
rt_free
