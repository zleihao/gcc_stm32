##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.15.2] date: [Wed Mar 16 09:23:14 CST 2022]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = Hao

SYS_DIR = -I./Hardware
SYS_SOURCE = ./Hardware
######################################

# 若添加新的文件在目录Hardware下，只需在“USER_INC”添加即可，若不是需要在“USER_SOURCE”添加.c文件的路径
# user_include 添加.h文件所在路径
USER_INC = \
$(SYS_DIR)/usart \
$(SYS_DIR)/led

# user_Source 添加.c文件
USER_SOURCE = \
$(wildcard $(SYS_SOURCE)/*/*.c) \

# rt-thread源码
RTT_SOURCE = \
	$(wildcard ./rt_thread/components/finsh/*.c)  \
	$(wildcard ./rt_thread/libcpu/cortex-m3/*.c)  \
	$(wildcard ./rt_thread/src/*.c)

######################################
#openocd路径配置 
OPENOCD_DOWN_PATH = C:/openocd/scripts/interface/cmsis-dap.cfg
OPENOCD_CHIP_PATH = C:/openocd/scripts/target/stm32f1x.cfg

######################################
#芯片flash大小选择
# High_density : 是 STM32F101xx 和 STM32F103xx 微控制器，其中闪存密度范围在 256KB 和 512 KB 之间。
# Medium_density:是 STM32F101xx、STM32F102xx 和 STM32F103xx微控制器，其中闪存密度范围在 32KB 和 128 KB 之间。
FLASH_SIZE = High_density

######################################
# 启动文件选择
#startup_stm32f10x_cl.s         互联型的器件，STM32F105xx，STM32F107xx
#startup_stm32f10x_hd.s         大容量的STM32F101xx，STM32F102xx，STM32F103xx
#startup_stm32f10x_hd_vl.s      大容量的STM32F100xx
#startup_stm32f10x_ld.s         小容量的STM32F101xx，STM32F102xx，STM32F103xx
#startup_stm32f10x_ld_vl.s      小容量的STM32F100xx
#startup_stm32f10x_md.s         中容量的STM32F101xx，STM32F102xx，STM32F103xx
#startup_stm32f10x_md_vl.s      中容量的STM32F100xx
#startup_stm32f10x_xl.s         FLASH在512K到1024K字节的STM32F101xx，STM32F102xx，STM32F103xx

#STM32F103C8T6型号使用 md
STARTUP = startup_stm32f10x_hd.s
#全局宏定义选择
DEFINE = STM32F10X_HD 

######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -O0


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
./User/Src/main.c \
./User/Src/stm32f10x_it.c \
./User/Src/board.c \
$(USER_SOURCE) \
./Libraries/CMSIS/system_stm32f10x.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/misc.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_adc.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_bkp.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_can.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_cec.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_crc.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dac.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dbgmcu.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_dma.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_exti.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_flash.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_fsmc.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_gpio.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_i2c.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_iwdg.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_pwr.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rcc.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_rtc.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_sdio.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_spi.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_tim.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_usart.c \
./Libraries/STM32F10x_StdPeriph_Driver/src/stm32f10x_wwdg.c  \
$(RTT_SOURCE)

# ASM sources
ASM_SOURCES =  \
Libraries/CMSIS/startup/$(STARTUP)  \
./rt_thread/libcpu/cortex-m3/context_gcc.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m3

# fpu
# NONE for Cortex-M0/M0+/M3

# float-abi


# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_STDPERIPH_DRIVER  \
-D$(DEFINE)


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-I./User/Inc \
-I./Libraries/CMSIS \
-I./Libraries/STM32F10x_StdPeriph_Driver/inc \
$(USER_INC)  \
-I./rt_thread/include \
-I./rt_thread/libc    \
-I./rt_thread/components/finsh  

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = ./Libraries/CMSIS/Link/$(FLASH_SIZE)/stm32_flash.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -lc -lrdimon -u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
#根据自己的系统选择
#windows
clean:
	rm -rf $(BUILD_DIR)
#linux
# clean:
# 	rm -rf $(BUILD_DIR)

download:
	openocd -f $(OPENOCD_DOWN_PATH) -f $(OPENOCD_CHIP_PATH)  -c init -c halt -c "flash write_image erase ./build/$(TARGET).hex" -c reset -c halt -c shutdown

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
