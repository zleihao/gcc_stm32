ARM GAS  /tmp/ccQvkfbu.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvResetNextTaskUnblockTime:
  26              	.LFB166:
  27              		.file 1 "./FreeRtos/src/tasks.c"
   1:./FreeRtos/src/tasks.c **** /*
   2:./FreeRtos/src/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./FreeRtos/src/tasks.c ****     All rights reserved
   4:./FreeRtos/src/tasks.c **** 
   5:./FreeRtos/src/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./FreeRtos/src/tasks.c **** 
   7:./FreeRtos/src/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:./FreeRtos/src/tasks.c **** 
   9:./FreeRtos/src/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./FreeRtos/src/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./FreeRtos/src/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./FreeRtos/src/tasks.c **** 
  13:./FreeRtos/src/tasks.c ****     ***************************************************************************
  14:./FreeRtos/src/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./FreeRtos/src/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./FreeRtos/src/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./FreeRtos/src/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./FreeRtos/src/tasks.c ****     ***************************************************************************
  19:./FreeRtos/src/tasks.c **** 
  20:./FreeRtos/src/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./FreeRtos/src/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./FreeRtos/src/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./FreeRtos/src/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:./FreeRtos/src/tasks.c **** 
  25:./FreeRtos/src/tasks.c ****     ***************************************************************************
  26:./FreeRtos/src/tasks.c ****      *                                                                       *
  27:./FreeRtos/src/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./FreeRtos/src/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./FreeRtos/src/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:./FreeRtos/src/tasks.c ****      *    is the industry's de facto standard.                               *
  31:./FreeRtos/src/tasks.c ****      *                                                                       *
ARM GAS  /tmp/ccQvkfbu.s 			page 2


  32:./FreeRtos/src/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./FreeRtos/src/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./FreeRtos/src/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:./FreeRtos/src/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./FreeRtos/src/tasks.c ****      *                                                                       *
  37:./FreeRtos/src/tasks.c ****     ***************************************************************************
  38:./FreeRtos/src/tasks.c **** 
  39:./FreeRtos/src/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./FreeRtos/src/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./FreeRtos/src/tasks.c ****     defined configASSERT()?
  42:./FreeRtos/src/tasks.c **** 
  43:./FreeRtos/src/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./FreeRtos/src/tasks.c ****     embedded software for free we request you assist our global community by
  45:./FreeRtos/src/tasks.c ****     participating in the support forum.
  46:./FreeRtos/src/tasks.c **** 
  47:./FreeRtos/src/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./FreeRtos/src/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./FreeRtos/src/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./FreeRtos/src/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./FreeRtos/src/tasks.c **** 
  52:./FreeRtos/src/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./FreeRtos/src/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./FreeRtos/src/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./FreeRtos/src/tasks.c **** 
  56:./FreeRtos/src/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./FreeRtos/src/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./FreeRtos/src/tasks.c **** 
  59:./FreeRtos/src/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./FreeRtos/src/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./FreeRtos/src/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./FreeRtos/src/tasks.c **** 
  63:./FreeRtos/src/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./FreeRtos/src/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./FreeRtos/src/tasks.c ****     mission critical applications that require provable dependability.
  66:./FreeRtos/src/tasks.c **** 
  67:./FreeRtos/src/tasks.c ****     1 tab == 4 spaces!
  68:./FreeRtos/src/tasks.c **** */
  69:./FreeRtos/src/tasks.c **** 
  70:./FreeRtos/src/tasks.c **** /* Standard includes. */
  71:./FreeRtos/src/tasks.c **** #include <stdlib.h>
  72:./FreeRtos/src/tasks.c **** #include <string.h>
  73:./FreeRtos/src/tasks.c **** 
  74:./FreeRtos/src/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:./FreeRtos/src/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:./FreeRtos/src/tasks.c **** task.h is included from an application file. */
  77:./FreeRtos/src/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:./FreeRtos/src/tasks.c **** 
  79:./FreeRtos/src/tasks.c **** /* FreeRTOS includes. */
  80:./FreeRtos/src/tasks.c **** #include "FreeRTOS.h"
  81:./FreeRtos/src/tasks.c **** #include "task.h"
  82:./FreeRtos/src/tasks.c **** #include "timers.h"
  83:./FreeRtos/src/tasks.c **** #include "StackMacros.h"
  84:./FreeRtos/src/tasks.c **** 
  85:./FreeRtos/src/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:./FreeRtos/src/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:./FreeRtos/src/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:./FreeRtos/src/tasks.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  /tmp/ccQvkfbu.s 			page 3


  89:./FreeRtos/src/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:./FreeRtos/src/tasks.c **** 
  91:./FreeRtos/src/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:./FreeRtos/src/tasks.c **** functions but without including stdio.h here. */
  93:./FreeRtos/src/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:./FreeRtos/src/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:./FreeRtos/src/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:./FreeRtos/src/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:./FreeRtos/src/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:./FreeRtos/src/tasks.c **** 	#include <stdio.h>
  99:./FreeRtos/src/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:./FreeRtos/src/tasks.c **** 
 101:./FreeRtos/src/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:./FreeRtos/src/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:./FreeRtos/src/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:./FreeRtos/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:./FreeRtos/src/tasks.c **** #else
 106:./FreeRtos/src/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:./FreeRtos/src/tasks.c **** #endif
 108:./FreeRtos/src/tasks.c **** 
 109:./FreeRtos/src/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:./FreeRtos/src/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:./FreeRtos/src/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:./FreeRtos/src/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:./FreeRtos/src/tasks.c **** 
 114:./FreeRtos/src/tasks.c **** /*
 115:./FreeRtos/src/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:./FreeRtos/src/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:./FreeRtos/src/tasks.c ****  */
 118:./FreeRtos/src/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:./FreeRtos/src/tasks.c **** 
 120:./FreeRtos/src/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:./FreeRtos/src/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:./FreeRtos/src/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:./FreeRtos/src/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:./FreeRtos/src/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:./FreeRtos/src/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:./FreeRtos/src/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:./FreeRtos/src/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:./FreeRtos/src/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:./FreeRtos/src/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:./FreeRtos/src/tasks.c **** made to free the RAM that was allocated statically.
 131:./FreeRtos/src/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:./FreeRtos/src/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:./FreeRtos/src/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:./FreeRtos/src/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:./FreeRtos/src/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:./FreeRtos/src/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:./FreeRtos/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:./FreeRtos/src/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:./FreeRtos/src/tasks.c **** 
 140:./FreeRtos/src/tasks.c **** /*
 141:./FreeRtos/src/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:./FreeRtos/src/tasks.c ****  */
 143:./FreeRtos/src/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:./FreeRtos/src/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:./FreeRtos/src/tasks.c **** #define tskDELETED_CHAR		( 'D' )
ARM GAS  /tmp/ccQvkfbu.s 			page 4


 146:./FreeRtos/src/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:./FreeRtos/src/tasks.c **** 
 148:./FreeRtos/src/tasks.c **** /*
 149:./FreeRtos/src/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:./FreeRtos/src/tasks.c ****  * global, rather than file scope.
 151:./FreeRtos/src/tasks.c ****  */
 152:./FreeRtos/src/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:./FreeRtos/src/tasks.c **** 	#define static
 154:./FreeRtos/src/tasks.c **** #endif
 155:./FreeRtos/src/tasks.c **** 
 156:./FreeRtos/src/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:./FreeRtos/src/tasks.c **** 
 158:./FreeRtos/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:./FreeRtos/src/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:./FreeRtos/src/tasks.c **** 	microcontroller architecture. */
 161:./FreeRtos/src/tasks.c **** 
 162:./FreeRtos/src/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:./FreeRtos/src/tasks.c **** 	state task. */
 164:./FreeRtos/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:./FreeRtos/src/tasks.c **** 	{																									\
 166:./FreeRtos/src/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:./FreeRtos/src/tasks.c **** 		{																								\
 168:./FreeRtos/src/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:./FreeRtos/src/tasks.c **** 		}																								\
 170:./FreeRtos/src/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:./FreeRtos/src/tasks.c **** 
 172:./FreeRtos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 173:./FreeRtos/src/tasks.c **** 
 174:./FreeRtos/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:./FreeRtos/src/tasks.c **** 	{																									\
 176:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:./FreeRtos/src/tasks.c **** 																										\
 178:./FreeRtos/src/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:./FreeRtos/src/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:./FreeRtos/src/tasks.c **** 		{																								\
 181:./FreeRtos/src/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:./FreeRtos/src/tasks.c **** 			--uxTopPriority;																			\
 183:./FreeRtos/src/tasks.c **** 		}																								\
 184:./FreeRtos/src/tasks.c **** 																										\
 185:./FreeRtos/src/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:./FreeRtos/src/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:./FreeRtos/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:./FreeRtos/src/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:./FreeRtos/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:./FreeRtos/src/tasks.c **** 
 191:./FreeRtos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 192:./FreeRtos/src/tasks.c **** 
 193:./FreeRtos/src/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:./FreeRtos/src/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:./FreeRtos/src/tasks.c **** 	being used. */
 196:./FreeRtos/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:./FreeRtos/src/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:./FreeRtos/src/tasks.c **** 
 199:./FreeRtos/src/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:./FreeRtos/src/tasks.c **** 
 201:./FreeRtos/src/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:./FreeRtos/src/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
ARM GAS  /tmp/ccQvkfbu.s 			page 5


 203:./FreeRtos/src/tasks.c **** 	architecture being used. */
 204:./FreeRtos/src/tasks.c **** 
 205:./FreeRtos/src/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:./FreeRtos/src/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:./FreeRtos/src/tasks.c **** 
 208:./FreeRtos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 209:./FreeRtos/src/tasks.c **** 
 210:./FreeRtos/src/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:./FreeRtos/src/tasks.c **** 	{																								\
 212:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:./FreeRtos/src/tasks.c **** 																									\
 214:./FreeRtos/src/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:./FreeRtos/src/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:./FreeRtos/src/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:./FreeRtos/src/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:./FreeRtos/src/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:./FreeRtos/src/tasks.c **** 
 220:./FreeRtos/src/tasks.c **** 	/*-----------------------------------------------------------*/
 221:./FreeRtos/src/tasks.c **** 
 222:./FreeRtos/src/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:./FreeRtos/src/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:./FreeRtos/src/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:./FreeRtos/src/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:./FreeRtos/src/tasks.c **** 	{																									\
 227:./FreeRtos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:./FreeRtos/src/tasks.c **** 		{																								\
 229:./FreeRtos/src/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:./FreeRtos/src/tasks.c **** 		}																								\
 231:./FreeRtos/src/tasks.c **** 	}
 232:./FreeRtos/src/tasks.c **** 
 233:./FreeRtos/src/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:./FreeRtos/src/tasks.c **** 
 235:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 236:./FreeRtos/src/tasks.c **** 
 237:./FreeRtos/src/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:./FreeRtos/src/tasks.c **** count overflows. */
 239:./FreeRtos/src/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:./FreeRtos/src/tasks.c **** {																									\
 241:./FreeRtos/src/tasks.c **** 	List_t *pxTemp;																					\
 242:./FreeRtos/src/tasks.c **** 																									\
 243:./FreeRtos/src/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:./FreeRtos/src/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:./FreeRtos/src/tasks.c **** 																									\
 246:./FreeRtos/src/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:./FreeRtos/src/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:./FreeRtos/src/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:./FreeRtos/src/tasks.c **** 	xNumOfOverflows++;																				\
 250:./FreeRtos/src/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:./FreeRtos/src/tasks.c **** }
 252:./FreeRtos/src/tasks.c **** 
 253:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 254:./FreeRtos/src/tasks.c **** 
 255:./FreeRtos/src/tasks.c **** /*
 256:./FreeRtos/src/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:./FreeRtos/src/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:./FreeRtos/src/tasks.c ****  */
 259:./FreeRtos/src/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
ARM GAS  /tmp/ccQvkfbu.s 			page 6


 260:./FreeRtos/src/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:./FreeRtos/src/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:./FreeRtos/src/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:./FreeRtos/src/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 265:./FreeRtos/src/tasks.c **** 
 266:./FreeRtos/src/tasks.c **** /*
 267:./FreeRtos/src/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:./FreeRtos/src/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:./FreeRtos/src/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:./FreeRtos/src/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:./FreeRtos/src/tasks.c ****  */
 272:./FreeRtos/src/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:./FreeRtos/src/tasks.c **** 
 274:./FreeRtos/src/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:./FreeRtos/src/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:./FreeRtos/src/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:./FreeRtos/src/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:./FreeRtos/src/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:./FreeRtos/src/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:./FreeRtos/src/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:./FreeRtos/src/tasks.c **** to its original value when it is released. */
 282:./FreeRtos/src/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:./FreeRtos/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:./FreeRtos/src/tasks.c **** #else
 285:./FreeRtos/src/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:./FreeRtos/src/tasks.c **** #endif
 287:./FreeRtos/src/tasks.c **** 
 288:./FreeRtos/src/tasks.c **** /*
 289:./FreeRtos/src/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:./FreeRtos/src/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:./FreeRtos/src/tasks.c ****  * (the task's run time environment, including register values)
 292:./FreeRtos/src/tasks.c ****  */
 293:./FreeRtos/src/tasks.c **** typedef struct tskTaskControlBlock
 294:./FreeRtos/src/tasks.c **** {
 295:./FreeRtos/src/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:./FreeRtos/src/tasks.c **** 
 297:./FreeRtos/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:./FreeRtos/src/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:./FreeRtos/src/tasks.c **** 	#endif
 300:./FreeRtos/src/tasks.c **** 
 301:./FreeRtos/src/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:./FreeRtos/src/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:./FreeRtos/src/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:./FreeRtos/src/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:./FreeRtos/src/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:./FreeRtos/src/tasks.c **** 
 307:./FreeRtos/src/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:./FreeRtos/src/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:./FreeRtos/src/tasks.c **** 	#endif
 310:./FreeRtos/src/tasks.c **** 
 311:./FreeRtos/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:./FreeRtos/src/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:./FreeRtos/src/tasks.c **** 	#endif
 314:./FreeRtos/src/tasks.c **** 
 315:./FreeRtos/src/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:./FreeRtos/src/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
ARM GAS  /tmp/ccQvkfbu.s 			page 7


 317:./FreeRtos/src/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:./FreeRtos/src/tasks.c **** 	#endif
 319:./FreeRtos/src/tasks.c **** 
 320:./FreeRtos/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:./FreeRtos/src/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:./FreeRtos/src/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:./FreeRtos/src/tasks.c **** 	#endif
 324:./FreeRtos/src/tasks.c **** 
 325:./FreeRtos/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:./FreeRtos/src/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:./FreeRtos/src/tasks.c **** 	#endif
 328:./FreeRtos/src/tasks.c **** 
 329:./FreeRtos/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:./FreeRtos/src/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:./FreeRtos/src/tasks.c **** 	#endif
 332:./FreeRtos/src/tasks.c **** 
 333:./FreeRtos/src/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:./FreeRtos/src/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:./FreeRtos/src/tasks.c **** 	#endif
 336:./FreeRtos/src/tasks.c **** 
 337:./FreeRtos/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:./FreeRtos/src/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:./FreeRtos/src/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:./FreeRtos/src/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:./FreeRtos/src/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:./FreeRtos/src/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:./FreeRtos/src/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:./FreeRtos/src/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:./FreeRtos/src/tasks.c **** 		struct	_reent xNewLib_reent;
 346:./FreeRtos/src/tasks.c **** 	#endif
 347:./FreeRtos/src/tasks.c **** 
 348:./FreeRtos/src/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:./FreeRtos/src/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:./FreeRtos/src/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:./FreeRtos/src/tasks.c **** 	#endif
 352:./FreeRtos/src/tasks.c **** 
 353:./FreeRtos/src/tasks.c **** 	/* See the comments above the definition of
 354:./FreeRtos/src/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:./FreeRtos/src/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:./FreeRtos/src/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:./FreeRtos/src/tasks.c **** 	#endif
 358:./FreeRtos/src/tasks.c **** 
 359:./FreeRtos/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:./FreeRtos/src/tasks.c **** 		uint8_t ucDelayAborted;
 361:./FreeRtos/src/tasks.c **** 	#endif
 362:./FreeRtos/src/tasks.c **** 
 363:./FreeRtos/src/tasks.c **** } tskTCB;
 364:./FreeRtos/src/tasks.c **** 
 365:./FreeRtos/src/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:./FreeRtos/src/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:./FreeRtos/src/tasks.c **** typedef tskTCB TCB_t;
 368:./FreeRtos/src/tasks.c **** 
 369:./FreeRtos/src/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:./FreeRtos/src/tasks.c **** static variables must be declared volatile. */
 371:./FreeRtos/src/tasks.c **** 
 372:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 8


 374:./FreeRtos/src/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:./FreeRtos/src/tasks.c **** 
 382:./FreeRtos/src/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:./FreeRtos/src/tasks.c **** 
 384:./FreeRtos/src/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:./FreeRtos/src/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:./FreeRtos/src/tasks.c **** 
 387:./FreeRtos/src/tasks.c **** #endif
 388:./FreeRtos/src/tasks.c **** 
 389:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:./FreeRtos/src/tasks.c **** 
 391:./FreeRtos/src/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:./FreeRtos/src/tasks.c **** 
 393:./FreeRtos/src/tasks.c **** #endif
 394:./FreeRtos/src/tasks.c **** 
 395:./FreeRtos/src/tasks.c **** /* Other file private variables. --------------------------------*/
 396:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:./FreeRtos/src/tasks.c **** 
 407:./FreeRtos/src/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:./FreeRtos/src/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:./FreeRtos/src/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:./FreeRtos/src/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:./FreeRtos/src/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:./FreeRtos/src/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:./FreeRtos/src/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:./FreeRtos/src/tasks.c **** accessed from a critical section. */
 415:./FreeRtos/src/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:./FreeRtos/src/tasks.c **** 
 417:./FreeRtos/src/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:./FreeRtos/src/tasks.c **** 
 419:./FreeRtos/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:./FreeRtos/src/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:./FreeRtos/src/tasks.c **** 
 422:./FreeRtos/src/tasks.c **** #endif
 423:./FreeRtos/src/tasks.c **** 
 424:./FreeRtos/src/tasks.c **** /*lint +e956 */
 425:./FreeRtos/src/tasks.c **** 
 426:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 427:./FreeRtos/src/tasks.c **** 
 428:./FreeRtos/src/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:./FreeRtos/src/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:./FreeRtos/src/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
ARM GAS  /tmp/ccQvkfbu.s 			page 9


 431:./FreeRtos/src/tasks.c **** #endif
 432:./FreeRtos/src/tasks.c **** 
 433:./FreeRtos/src/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:./FreeRtos/src/tasks.c **** 	extern void vApplicationTickHook( void );
 435:./FreeRtos/src/tasks.c **** #endif
 436:./FreeRtos/src/tasks.c **** 
 437:./FreeRtos/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:./FreeRtos/src/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:./FreeRtos/src/tasks.c **** #endif
 440:./FreeRtos/src/tasks.c **** 
 441:./FreeRtos/src/tasks.c **** /* File private functions. --------------------------------*/
 442:./FreeRtos/src/tasks.c **** 
 443:./FreeRtos/src/tasks.c **** /**
 444:./FreeRtos/src/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:./FreeRtos/src/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:./FreeRtos/src/tasks.c ****  * is in any other state.
 447:./FreeRtos/src/tasks.c ****  */
 448:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:./FreeRtos/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:./FreeRtos/src/tasks.c **** 
 452:./FreeRtos/src/tasks.c **** /*
 453:./FreeRtos/src/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:./FreeRtos/src/tasks.c ****  * automatically upon the creation of the first task.
 455:./FreeRtos/src/tasks.c ****  */
 456:./FreeRtos/src/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:./FreeRtos/src/tasks.c **** 
 458:./FreeRtos/src/tasks.c **** /*
 459:./FreeRtos/src/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:./FreeRtos/src/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:./FreeRtos/src/tasks.c ****  * creation of the first user task.
 462:./FreeRtos/src/tasks.c ****  *
 463:./FreeRtos/src/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:./FreeRtos/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:./FreeRtos/src/tasks.c ****  *
 466:./FreeRtos/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:./FreeRtos/src/tasks.c ****  *
 468:./FreeRtos/src/tasks.c ****  */
 469:./FreeRtos/src/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:./FreeRtos/src/tasks.c **** 
 471:./FreeRtos/src/tasks.c **** /*
 472:./FreeRtos/src/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:./FreeRtos/src/tasks.c ****  * including the stack pointed to by the TCB.
 474:./FreeRtos/src/tasks.c ****  *
 475:./FreeRtos/src/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:./FreeRtos/src/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:./FreeRtos/src/tasks.c ****  */
 478:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:./FreeRtos/src/tasks.c **** 
 480:./FreeRtos/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:./FreeRtos/src/tasks.c **** 
 482:./FreeRtos/src/tasks.c **** #endif
 483:./FreeRtos/src/tasks.c **** 
 484:./FreeRtos/src/tasks.c **** /*
 485:./FreeRtos/src/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:./FreeRtos/src/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:./FreeRtos/src/tasks.c ****  * and its TCB deleted.
ARM GAS  /tmp/ccQvkfbu.s 			page 10


 488:./FreeRtos/src/tasks.c ****  */
 489:./FreeRtos/src/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:./FreeRtos/src/tasks.c **** 
 491:./FreeRtos/src/tasks.c **** /*
 492:./FreeRtos/src/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:./FreeRtos/src/tasks.c ****  * either the current or the overflow delayed task list.
 494:./FreeRtos/src/tasks.c ****  */
 495:./FreeRtos/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:./FreeRtos/src/tasks.c **** 
 497:./FreeRtos/src/tasks.c **** /*
 498:./FreeRtos/src/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:./FreeRtos/src/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:./FreeRtos/src/tasks.c ****  * a suspended list, etc.).
 501:./FreeRtos/src/tasks.c ****  *
 502:./FreeRtos/src/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:./FreeRtos/src/tasks.c ****  * NORMAL APPLICATION CODE.
 504:./FreeRtos/src/tasks.c ****  */
 505:./FreeRtos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:./FreeRtos/src/tasks.c **** 
 507:./FreeRtos/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:./FreeRtos/src/tasks.c **** 
 509:./FreeRtos/src/tasks.c **** #endif
 510:./FreeRtos/src/tasks.c **** 
 511:./FreeRtos/src/tasks.c **** /*
 512:./FreeRtos/src/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:./FreeRtos/src/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:./FreeRtos/src/tasks.c ****  */
 515:./FreeRtos/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:./FreeRtos/src/tasks.c **** 
 517:./FreeRtos/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:./FreeRtos/src/tasks.c **** 
 519:./FreeRtos/src/tasks.c **** #endif
 520:./FreeRtos/src/tasks.c **** 
 521:./FreeRtos/src/tasks.c **** /*
 522:./FreeRtos/src/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:./FreeRtos/src/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:./FreeRtos/src/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:./FreeRtos/src/tasks.c ****  */
 526:./FreeRtos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:./FreeRtos/src/tasks.c **** 
 528:./FreeRtos/src/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:./FreeRtos/src/tasks.c **** 
 530:./FreeRtos/src/tasks.c **** #endif
 531:./FreeRtos/src/tasks.c **** 
 532:./FreeRtos/src/tasks.c **** /*
 533:./FreeRtos/src/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:./FreeRtos/src/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:./FreeRtos/src/tasks.c ****  *
 536:./FreeRtos/src/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:./FreeRtos/src/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:./FreeRtos/src/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:./FreeRtos/src/tasks.c ****  * set to a value other than 1.
 540:./FreeRtos/src/tasks.c ****  */
 541:./FreeRtos/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:./FreeRtos/src/tasks.c **** 
 543:./FreeRtos/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 11


 545:./FreeRtos/src/tasks.c **** #endif
 546:./FreeRtos/src/tasks.c **** 
 547:./FreeRtos/src/tasks.c **** /*
 548:./FreeRtos/src/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:./FreeRtos/src/tasks.c ****  * will exit the Blocked state.
 550:./FreeRtos/src/tasks.c ****  */
 551:./FreeRtos/src/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:./FreeRtos/src/tasks.c **** 
 553:./FreeRtos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:./FreeRtos/src/tasks.c **** 
 555:./FreeRtos/src/tasks.c **** 	/*
 556:./FreeRtos/src/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:./FreeRtos/src/tasks.c **** 	 * human readable tables of task information.
 558:./FreeRtos/src/tasks.c **** 	 */
 559:./FreeRtos/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:./FreeRtos/src/tasks.c **** 
 561:./FreeRtos/src/tasks.c **** #endif
 562:./FreeRtos/src/tasks.c **** 
 563:./FreeRtos/src/tasks.c **** /*
 564:./FreeRtos/src/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:./FreeRtos/src/tasks.c ****  * dynamically to fill in the structure's members.
 566:./FreeRtos/src/tasks.c ****  */
 567:./FreeRtos/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:./FreeRtos/src/tasks.c **** 									const char * const pcName,
 569:./FreeRtos/src/tasks.c **** 									const uint32_t ulStackDepth,
 570:./FreeRtos/src/tasks.c **** 									void * const pvParameters,
 571:./FreeRtos/src/tasks.c **** 									UBaseType_t uxPriority,
 572:./FreeRtos/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:./FreeRtos/src/tasks.c **** 									TCB_t *pxNewTCB,
 574:./FreeRtos/src/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:./FreeRtos/src/tasks.c **** 
 576:./FreeRtos/src/tasks.c **** /*
 577:./FreeRtos/src/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:./FreeRtos/src/tasks.c ****  * under the control of the scheduler.
 579:./FreeRtos/src/tasks.c ****  */
 580:./FreeRtos/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:./FreeRtos/src/tasks.c **** 
 582:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 583:./FreeRtos/src/tasks.c **** 
 584:./FreeRtos/src/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:./FreeRtos/src/tasks.c **** 
 586:./FreeRtos/src/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:./FreeRtos/src/tasks.c **** 									const char * const pcName,
 588:./FreeRtos/src/tasks.c **** 									const uint32_t ulStackDepth,
 589:./FreeRtos/src/tasks.c **** 									void * const pvParameters,
 590:./FreeRtos/src/tasks.c **** 									UBaseType_t uxPriority,
 591:./FreeRtos/src/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:./FreeRtos/src/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:./FreeRtos/src/tasks.c **** 	{
 594:./FreeRtos/src/tasks.c **** 	TCB_t *pxNewTCB;
 595:./FreeRtos/src/tasks.c **** 	TaskHandle_t xReturn;
 596:./FreeRtos/src/tasks.c **** 
 597:./FreeRtos/src/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:./FreeRtos/src/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:./FreeRtos/src/tasks.c **** 
 600:./FreeRtos/src/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:./FreeRtos/src/tasks.c **** 		{
ARM GAS  /tmp/ccQvkfbu.s 			page 12


 602:./FreeRtos/src/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:./FreeRtos/src/tasks.c **** 			function - use them. */
 604:./FreeRtos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:./FreeRtos/src/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:./FreeRtos/src/tasks.c **** 
 607:./FreeRtos/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:./FreeRtos/src/tasks.c **** 			{
 609:./FreeRtos/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:./FreeRtos/src/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:./FreeRtos/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:./FreeRtos/src/tasks.c **** 			}
 613:./FreeRtos/src/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:./FreeRtos/src/tasks.c **** 
 615:./FreeRtos/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:./FreeRtos/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:./FreeRtos/src/tasks.c **** 		}
 618:./FreeRtos/src/tasks.c **** 		else
 619:./FreeRtos/src/tasks.c **** 		{
 620:./FreeRtos/src/tasks.c **** 			xReturn = NULL;
 621:./FreeRtos/src/tasks.c **** 		}
 622:./FreeRtos/src/tasks.c **** 
 623:./FreeRtos/src/tasks.c **** 		return xReturn;
 624:./FreeRtos/src/tasks.c **** 	}
 625:./FreeRtos/src/tasks.c **** 
 626:./FreeRtos/src/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 628:./FreeRtos/src/tasks.c **** 
 629:./FreeRtos/src/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:./FreeRtos/src/tasks.c **** 
 631:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:./FreeRtos/src/tasks.c **** 	{
 633:./FreeRtos/src/tasks.c **** 	TCB_t *pxNewTCB;
 634:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:./FreeRtos/src/tasks.c **** 
 636:./FreeRtos/src/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:./FreeRtos/src/tasks.c **** 
 638:./FreeRtos/src/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:./FreeRtos/src/tasks.c **** 		{
 640:./FreeRtos/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:./FreeRtos/src/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:./FreeRtos/src/tasks.c **** 			not static allocation is being used. */
 643:./FreeRtos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:./FreeRtos/src/tasks.c **** 
 645:./FreeRtos/src/tasks.c **** 			if( pxNewTCB != NULL )
 646:./FreeRtos/src/tasks.c **** 			{
 647:./FreeRtos/src/tasks.c **** 				/* Store the stack location in the TCB. */
 648:./FreeRtos/src/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:./FreeRtos/src/tasks.c **** 
 650:./FreeRtos/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:./FreeRtos/src/tasks.c **** 				this task had a statically allocated stack in case it is
 652:./FreeRtos/src/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:./FreeRtos/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:./FreeRtos/src/tasks.c **** 
 655:./FreeRtos/src/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:./FreeRtos/src/tasks.c **** 										pxTaskDefinition->pcName,
 657:./FreeRtos/src/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:./FreeRtos/src/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  /tmp/ccQvkfbu.s 			page 13


 659:./FreeRtos/src/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:./FreeRtos/src/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:./FreeRtos/src/tasks.c **** 										pxTaskDefinition->xRegions );
 662:./FreeRtos/src/tasks.c **** 
 663:./FreeRtos/src/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:./FreeRtos/src/tasks.c **** 				xReturn = pdPASS;
 665:./FreeRtos/src/tasks.c **** 			}
 666:./FreeRtos/src/tasks.c **** 		}
 667:./FreeRtos/src/tasks.c **** 
 668:./FreeRtos/src/tasks.c **** 		return xReturn;
 669:./FreeRtos/src/tasks.c **** 	}
 670:./FreeRtos/src/tasks.c **** 
 671:./FreeRtos/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 673:./FreeRtos/src/tasks.c **** 
 674:./FreeRtos/src/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:./FreeRtos/src/tasks.c **** 
 676:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:./FreeRtos/src/tasks.c **** 							const char * const pcName,
 678:./FreeRtos/src/tasks.c **** 							const uint16_t usStackDepth,
 679:./FreeRtos/src/tasks.c **** 							void * const pvParameters,
 680:./FreeRtos/src/tasks.c **** 							UBaseType_t uxPriority,
 681:./FreeRtos/src/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:./FreeRtos/src/tasks.c **** 	{
 683:./FreeRtos/src/tasks.c **** 	TCB_t *pxNewTCB;
 684:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
 685:./FreeRtos/src/tasks.c **** 
 686:./FreeRtos/src/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:./FreeRtos/src/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:./FreeRtos/src/tasks.c **** 		the TCB then the stack. */
 689:./FreeRtos/src/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:./FreeRtos/src/tasks.c **** 		{
 691:./FreeRtos/src/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:./FreeRtos/src/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:./FreeRtos/src/tasks.c **** 			allocation is being used. */
 694:./FreeRtos/src/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:./FreeRtos/src/tasks.c **** 
 696:./FreeRtos/src/tasks.c **** 			if( pxNewTCB != NULL )
 697:./FreeRtos/src/tasks.c **** 			{
 698:./FreeRtos/src/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:./FreeRtos/src/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:./FreeRtos/src/tasks.c **** 				be deleted later if required. */
 701:./FreeRtos/src/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:./FreeRtos/src/tasks.c **** 
 703:./FreeRtos/src/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:./FreeRtos/src/tasks.c **** 				{
 705:./FreeRtos/src/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:./FreeRtos/src/tasks.c **** 					vPortFree( pxNewTCB );
 707:./FreeRtos/src/tasks.c **** 					pxNewTCB = NULL;
 708:./FreeRtos/src/tasks.c **** 				}
 709:./FreeRtos/src/tasks.c **** 			}
 710:./FreeRtos/src/tasks.c **** 		}
 711:./FreeRtos/src/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:./FreeRtos/src/tasks.c **** 		{
 713:./FreeRtos/src/tasks.c **** 		StackType_t *pxStack;
 714:./FreeRtos/src/tasks.c **** 
 715:./FreeRtos/src/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  /tmp/ccQvkfbu.s 			page 14


 716:./FreeRtos/src/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:./FreeRtos/src/tasks.c **** 
 718:./FreeRtos/src/tasks.c **** 			if( pxStack != NULL )
 719:./FreeRtos/src/tasks.c **** 			{
 720:./FreeRtos/src/tasks.c **** 				/* Allocate space for the TCB. */
 721:./FreeRtos/src/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:./FreeRtos/src/tasks.c **** 
 723:./FreeRtos/src/tasks.c **** 				if( pxNewTCB != NULL )
 724:./FreeRtos/src/tasks.c **** 				{
 725:./FreeRtos/src/tasks.c **** 					/* Store the stack location in the TCB. */
 726:./FreeRtos/src/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:./FreeRtos/src/tasks.c **** 				}
 728:./FreeRtos/src/tasks.c **** 				else
 729:./FreeRtos/src/tasks.c **** 				{
 730:./FreeRtos/src/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:./FreeRtos/src/tasks.c **** 					it again. */
 732:./FreeRtos/src/tasks.c **** 					vPortFree( pxStack );
 733:./FreeRtos/src/tasks.c **** 				}
 734:./FreeRtos/src/tasks.c **** 			}
 735:./FreeRtos/src/tasks.c **** 			else
 736:./FreeRtos/src/tasks.c **** 			{
 737:./FreeRtos/src/tasks.c **** 				pxNewTCB = NULL;
 738:./FreeRtos/src/tasks.c **** 			}
 739:./FreeRtos/src/tasks.c **** 		}
 740:./FreeRtos/src/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:./FreeRtos/src/tasks.c **** 
 742:./FreeRtos/src/tasks.c **** 		if( pxNewTCB != NULL )
 743:./FreeRtos/src/tasks.c **** 		{
 744:./FreeRtos/src/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:./FreeRtos/src/tasks.c **** 			{
 746:./FreeRtos/src/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:./FreeRtos/src/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:./FreeRtos/src/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:./FreeRtos/src/tasks.c **** 			}
 750:./FreeRtos/src/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:./FreeRtos/src/tasks.c **** 
 752:./FreeRtos/src/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:./FreeRtos/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:./FreeRtos/src/tasks.c **** 			xReturn = pdPASS;
 755:./FreeRtos/src/tasks.c **** 		}
 756:./FreeRtos/src/tasks.c **** 		else
 757:./FreeRtos/src/tasks.c **** 		{
 758:./FreeRtos/src/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:./FreeRtos/src/tasks.c **** 		}
 760:./FreeRtos/src/tasks.c **** 
 761:./FreeRtos/src/tasks.c **** 		return xReturn;
 762:./FreeRtos/src/tasks.c **** 	}
 763:./FreeRtos/src/tasks.c **** 
 764:./FreeRtos/src/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 766:./FreeRtos/src/tasks.c **** 
 767:./FreeRtos/src/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:./FreeRtos/src/tasks.c **** 									const char * const pcName,
 769:./FreeRtos/src/tasks.c **** 									const uint32_t ulStackDepth,
 770:./FreeRtos/src/tasks.c **** 									void * const pvParameters,
 771:./FreeRtos/src/tasks.c **** 									UBaseType_t uxPriority,
 772:./FreeRtos/src/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  /tmp/ccQvkfbu.s 			page 15


 773:./FreeRtos/src/tasks.c **** 									TCB_t *pxNewTCB,
 774:./FreeRtos/src/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:./FreeRtos/src/tasks.c **** {
 776:./FreeRtos/src/tasks.c **** StackType_t *pxTopOfStack;
 777:./FreeRtos/src/tasks.c **** UBaseType_t x;
 778:./FreeRtos/src/tasks.c **** 
 779:./FreeRtos/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:./FreeRtos/src/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:./FreeRtos/src/tasks.c **** 		BaseType_t xRunPrivileged;
 782:./FreeRtos/src/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:./FreeRtos/src/tasks.c **** 		{
 784:./FreeRtos/src/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:./FreeRtos/src/tasks.c **** 		}
 786:./FreeRtos/src/tasks.c **** 		else
 787:./FreeRtos/src/tasks.c **** 		{
 788:./FreeRtos/src/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:./FreeRtos/src/tasks.c **** 		}
 790:./FreeRtos/src/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:./FreeRtos/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:./FreeRtos/src/tasks.c **** 
 793:./FreeRtos/src/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:./FreeRtos/src/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:./FreeRtos/src/tasks.c **** 	{
 796:./FreeRtos/src/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:./FreeRtos/src/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:./FreeRtos/src/tasks.c **** 	}
 799:./FreeRtos/src/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:./FreeRtos/src/tasks.c **** 
 801:./FreeRtos/src/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:./FreeRtos/src/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:./FreeRtos/src/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:./FreeRtos/src/tasks.c **** 	by the port. */
 805:./FreeRtos/src/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:./FreeRtos/src/tasks.c **** 	{
 807:./FreeRtos/src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:./FreeRtos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:./FreeRtos/src/tasks.c **** 
 810:./FreeRtos/src/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:./FreeRtos/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:./FreeRtos/src/tasks.c **** 	}
 813:./FreeRtos/src/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:./FreeRtos/src/tasks.c **** 	{
 815:./FreeRtos/src/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:./FreeRtos/src/tasks.c **** 
 817:./FreeRtos/src/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:./FreeRtos/src/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:./FreeRtos/src/tasks.c **** 
 820:./FreeRtos/src/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:./FreeRtos/src/tasks.c **** 		performed. */
 822:./FreeRtos/src/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:./FreeRtos/src/tasks.c **** 	}
 824:./FreeRtos/src/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:./FreeRtos/src/tasks.c **** 
 826:./FreeRtos/src/tasks.c **** 	/* Store the task name in the TCB. */
 827:./FreeRtos/src/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:./FreeRtos/src/tasks.c **** 	{
 829:./FreeRtos/src/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/ccQvkfbu.s 			page 16


 830:./FreeRtos/src/tasks.c **** 
 831:./FreeRtos/src/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:./FreeRtos/src/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:./FreeRtos/src/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:./FreeRtos/src/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:./FreeRtos/src/tasks.c **** 		{
 836:./FreeRtos/src/tasks.c **** 			break;
 837:./FreeRtos/src/tasks.c **** 		}
 838:./FreeRtos/src/tasks.c **** 		else
 839:./FreeRtos/src/tasks.c **** 		{
 840:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:./FreeRtos/src/tasks.c **** 		}
 842:./FreeRtos/src/tasks.c **** 	}
 843:./FreeRtos/src/tasks.c **** 
 844:./FreeRtos/src/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:./FreeRtos/src/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:./FreeRtos/src/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:./FreeRtos/src/tasks.c **** 
 848:./FreeRtos/src/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:./FreeRtos/src/tasks.c **** 	remove the privilege bit if one is present. */
 850:./FreeRtos/src/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:./FreeRtos/src/tasks.c **** 	{
 852:./FreeRtos/src/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:./FreeRtos/src/tasks.c **** 	}
 854:./FreeRtos/src/tasks.c **** 	else
 855:./FreeRtos/src/tasks.c **** 	{
 856:./FreeRtos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:./FreeRtos/src/tasks.c **** 	}
 858:./FreeRtos/src/tasks.c **** 
 859:./FreeRtos/src/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:./FreeRtos/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:./FreeRtos/src/tasks.c **** 	{
 862:./FreeRtos/src/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:./FreeRtos/src/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:./FreeRtos/src/tasks.c **** 	}
 865:./FreeRtos/src/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:./FreeRtos/src/tasks.c **** 
 867:./FreeRtos/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:./FreeRtos/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:./FreeRtos/src/tasks.c **** 
 870:./FreeRtos/src/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:./FreeRtos/src/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:./FreeRtos/src/tasks.c **** 
 874:./FreeRtos/src/tasks.c **** 	/* Event lists are always in priority order. */
 875:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:./FreeRtos/src/tasks.c **** 
 878:./FreeRtos/src/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:./FreeRtos/src/tasks.c **** 	{
 880:./FreeRtos/src/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:./FreeRtos/src/tasks.c **** 	}
 882:./FreeRtos/src/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:./FreeRtos/src/tasks.c **** 
 884:./FreeRtos/src/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:./FreeRtos/src/tasks.c **** 	{
 886:./FreeRtos/src/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/ccQvkfbu.s 			page 17


 887:./FreeRtos/src/tasks.c **** 	}
 888:./FreeRtos/src/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:./FreeRtos/src/tasks.c **** 
 890:./FreeRtos/src/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:./FreeRtos/src/tasks.c **** 	{
 892:./FreeRtos/src/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:./FreeRtos/src/tasks.c **** 	}
 894:./FreeRtos/src/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:./FreeRtos/src/tasks.c **** 
 896:./FreeRtos/src/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:./FreeRtos/src/tasks.c **** 	{
 898:./FreeRtos/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:./FreeRtos/src/tasks.c **** 	}
 900:./FreeRtos/src/tasks.c **** 	#else
 901:./FreeRtos/src/tasks.c **** 	{
 902:./FreeRtos/src/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:./FreeRtos/src/tasks.c **** 		( void ) xRegions;
 904:./FreeRtos/src/tasks.c **** 	}
 905:./FreeRtos/src/tasks.c **** 	#endif
 906:./FreeRtos/src/tasks.c **** 
 907:./FreeRtos/src/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:./FreeRtos/src/tasks.c **** 	{
 909:./FreeRtos/src/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:./FreeRtos/src/tasks.c **** 		{
 911:./FreeRtos/src/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:./FreeRtos/src/tasks.c **** 		}
 913:./FreeRtos/src/tasks.c **** 	}
 914:./FreeRtos/src/tasks.c **** 	#endif
 915:./FreeRtos/src/tasks.c **** 
 916:./FreeRtos/src/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:./FreeRtos/src/tasks.c **** 	{
 918:./FreeRtos/src/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:./FreeRtos/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:./FreeRtos/src/tasks.c **** 	}
 921:./FreeRtos/src/tasks.c **** 	#endif
 922:./FreeRtos/src/tasks.c **** 
 923:./FreeRtos/src/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:./FreeRtos/src/tasks.c **** 	{
 925:./FreeRtos/src/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:./FreeRtos/src/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:./FreeRtos/src/tasks.c **** 	}
 928:./FreeRtos/src/tasks.c **** 	#endif
 929:./FreeRtos/src/tasks.c **** 
 930:./FreeRtos/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:./FreeRtos/src/tasks.c **** 	{
 932:./FreeRtos/src/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:./FreeRtos/src/tasks.c **** 	}
 934:./FreeRtos/src/tasks.c **** 	#endif
 935:./FreeRtos/src/tasks.c **** 
 936:./FreeRtos/src/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:./FreeRtos/src/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:./FreeRtos/src/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:./FreeRtos/src/tasks.c **** 	the	top of stack variable is updated. */
 940:./FreeRtos/src/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:./FreeRtos/src/tasks.c **** 	{
 942:./FreeRtos/src/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:./FreeRtos/src/tasks.c **** 	}
ARM GAS  /tmp/ccQvkfbu.s 			page 18


 944:./FreeRtos/src/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:./FreeRtos/src/tasks.c **** 	{
 946:./FreeRtos/src/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:./FreeRtos/src/tasks.c **** 	}
 948:./FreeRtos/src/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:./FreeRtos/src/tasks.c **** 
 950:./FreeRtos/src/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:./FreeRtos/src/tasks.c **** 	{
 952:./FreeRtos/src/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:./FreeRtos/src/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:./FreeRtos/src/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:./FreeRtos/src/tasks.c **** 	}
 956:./FreeRtos/src/tasks.c **** 	else
 957:./FreeRtos/src/tasks.c **** 	{
 958:./FreeRtos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:./FreeRtos/src/tasks.c **** 	}
 960:./FreeRtos/src/tasks.c **** }
 961:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 962:./FreeRtos/src/tasks.c **** 
 963:./FreeRtos/src/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:./FreeRtos/src/tasks.c **** {
 965:./FreeRtos/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:./FreeRtos/src/tasks.c **** 	updated. */
 967:./FreeRtos/src/tasks.c **** 	taskENTER_CRITICAL();
 968:./FreeRtos/src/tasks.c **** 	{
 969:./FreeRtos/src/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:./FreeRtos/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:./FreeRtos/src/tasks.c **** 		{
 972:./FreeRtos/src/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:./FreeRtos/src/tasks.c **** 			the suspended state - make this the current task. */
 974:./FreeRtos/src/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:./FreeRtos/src/tasks.c **** 
 976:./FreeRtos/src/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:./FreeRtos/src/tasks.c **** 			{
 978:./FreeRtos/src/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:./FreeRtos/src/tasks.c **** 				initialisation required.  We will not recover if this call
 980:./FreeRtos/src/tasks.c **** 				fails, but we will report the failure. */
 981:./FreeRtos/src/tasks.c **** 				prvInitialiseTaskLists();
 982:./FreeRtos/src/tasks.c **** 			}
 983:./FreeRtos/src/tasks.c **** 			else
 984:./FreeRtos/src/tasks.c **** 			{
 985:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:./FreeRtos/src/tasks.c **** 			}
 987:./FreeRtos/src/tasks.c **** 		}
 988:./FreeRtos/src/tasks.c **** 		else
 989:./FreeRtos/src/tasks.c **** 		{
 990:./FreeRtos/src/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:./FreeRtos/src/tasks.c **** 			current task if it is the highest priority task to be created
 992:./FreeRtos/src/tasks.c **** 			so far. */
 993:./FreeRtos/src/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:./FreeRtos/src/tasks.c **** 			{
 995:./FreeRtos/src/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:./FreeRtos/src/tasks.c **** 				{
 997:./FreeRtos/src/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:./FreeRtos/src/tasks.c **** 				}
 999:./FreeRtos/src/tasks.c **** 				else
1000:./FreeRtos/src/tasks.c **** 				{
ARM GAS  /tmp/ccQvkfbu.s 			page 19


1001:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:./FreeRtos/src/tasks.c **** 				}
1003:./FreeRtos/src/tasks.c **** 			}
1004:./FreeRtos/src/tasks.c **** 			else
1005:./FreeRtos/src/tasks.c **** 			{
1006:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:./FreeRtos/src/tasks.c **** 			}
1008:./FreeRtos/src/tasks.c **** 		}
1009:./FreeRtos/src/tasks.c **** 
1010:./FreeRtos/src/tasks.c **** 		uxTaskNumber++;
1011:./FreeRtos/src/tasks.c **** 
1012:./FreeRtos/src/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:./FreeRtos/src/tasks.c **** 		{
1014:./FreeRtos/src/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:./FreeRtos/src/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:./FreeRtos/src/tasks.c **** 		}
1017:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:./FreeRtos/src/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:./FreeRtos/src/tasks.c **** 
1020:./FreeRtos/src/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:./FreeRtos/src/tasks.c **** 
1022:./FreeRtos/src/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:./FreeRtos/src/tasks.c **** 	}
1024:./FreeRtos/src/tasks.c **** 	taskEXIT_CRITICAL();
1025:./FreeRtos/src/tasks.c **** 
1026:./FreeRtos/src/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:./FreeRtos/src/tasks.c **** 	{
1028:./FreeRtos/src/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:./FreeRtos/src/tasks.c **** 		then it should run now. */
1030:./FreeRtos/src/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:./FreeRtos/src/tasks.c **** 		{
1032:./FreeRtos/src/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:./FreeRtos/src/tasks.c **** 		}
1034:./FreeRtos/src/tasks.c **** 		else
1035:./FreeRtos/src/tasks.c **** 		{
1036:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:./FreeRtos/src/tasks.c **** 		}
1038:./FreeRtos/src/tasks.c **** 	}
1039:./FreeRtos/src/tasks.c **** 	else
1040:./FreeRtos/src/tasks.c **** 	{
1041:./FreeRtos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:./FreeRtos/src/tasks.c **** 	}
1043:./FreeRtos/src/tasks.c **** }
1044:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1045:./FreeRtos/src/tasks.c **** 
1046:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:./FreeRtos/src/tasks.c **** 
1048:./FreeRtos/src/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:./FreeRtos/src/tasks.c **** 	{
1050:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
1051:./FreeRtos/src/tasks.c **** 
1052:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
1053:./FreeRtos/src/tasks.c **** 		{
1054:./FreeRtos/src/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:./FreeRtos/src/tasks.c **** 			being deleted. */
1056:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 20


1058:./FreeRtos/src/tasks.c **** 			/* Remove task from the ready list. */
1059:./FreeRtos/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:./FreeRtos/src/tasks.c **** 			{
1061:./FreeRtos/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:./FreeRtos/src/tasks.c **** 			}
1063:./FreeRtos/src/tasks.c **** 			else
1064:./FreeRtos/src/tasks.c **** 			{
1065:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:./FreeRtos/src/tasks.c **** 			}
1067:./FreeRtos/src/tasks.c **** 
1068:./FreeRtos/src/tasks.c **** 			/* Is the task waiting on an event also? */
1069:./FreeRtos/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:./FreeRtos/src/tasks.c **** 			{
1071:./FreeRtos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:./FreeRtos/src/tasks.c **** 			}
1073:./FreeRtos/src/tasks.c **** 			else
1074:./FreeRtos/src/tasks.c **** 			{
1075:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:./FreeRtos/src/tasks.c **** 			}
1077:./FreeRtos/src/tasks.c **** 
1078:./FreeRtos/src/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:./FreeRtos/src/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:./FreeRtos/src/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:./FreeRtos/src/tasks.c **** 			not return. */
1082:./FreeRtos/src/tasks.c **** 			uxTaskNumber++;
1083:./FreeRtos/src/tasks.c **** 
1084:./FreeRtos/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:./FreeRtos/src/tasks.c **** 			{
1086:./FreeRtos/src/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:./FreeRtos/src/tasks.c **** 				task itself, as a context switch to another task is required.
1088:./FreeRtos/src/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:./FreeRtos/src/tasks.c **** 				check the termination list and free up any memory allocated by
1090:./FreeRtos/src/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:./FreeRtos/src/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:./FreeRtos/src/tasks.c **** 
1093:./FreeRtos/src/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:./FreeRtos/src/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:./FreeRtos/src/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:./FreeRtos/src/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:./FreeRtos/src/tasks.c **** 
1098:./FreeRtos/src/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:./FreeRtos/src/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:./FreeRtos/src/tasks.c **** 				after which it is not possible to yield away from this task -
1101:./FreeRtos/src/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:./FreeRtos/src/tasks.c **** 				required. */
1103:./FreeRtos/src/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:./FreeRtos/src/tasks.c **** 			}
1105:./FreeRtos/src/tasks.c **** 			else
1106:./FreeRtos/src/tasks.c **** 			{
1107:./FreeRtos/src/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:./FreeRtos/src/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:./FreeRtos/src/tasks.c **** 
1110:./FreeRtos/src/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:./FreeRtos/src/tasks.c **** 				the task that has just been deleted. */
1112:./FreeRtos/src/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:./FreeRtos/src/tasks.c **** 			}
1114:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 21


1115:./FreeRtos/src/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:./FreeRtos/src/tasks.c **** 		}
1117:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
1118:./FreeRtos/src/tasks.c **** 
1119:./FreeRtos/src/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:./FreeRtos/src/tasks.c **** 		been deleted. */
1121:./FreeRtos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:./FreeRtos/src/tasks.c **** 		{
1123:./FreeRtos/src/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:./FreeRtos/src/tasks.c **** 			{
1125:./FreeRtos/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:./FreeRtos/src/tasks.c **** 				portYIELD_WITHIN_API();
1127:./FreeRtos/src/tasks.c **** 			}
1128:./FreeRtos/src/tasks.c **** 			else
1129:./FreeRtos/src/tasks.c **** 			{
1130:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:./FreeRtos/src/tasks.c **** 			}
1132:./FreeRtos/src/tasks.c **** 		}
1133:./FreeRtos/src/tasks.c **** 	}
1134:./FreeRtos/src/tasks.c **** 
1135:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1137:./FreeRtos/src/tasks.c **** 
1138:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:./FreeRtos/src/tasks.c **** 
1140:./FreeRtos/src/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:./FreeRtos/src/tasks.c **** 	{
1142:./FreeRtos/src/tasks.c **** 	TickType_t xTimeToWake;
1143:./FreeRtos/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:./FreeRtos/src/tasks.c **** 
1145:./FreeRtos/src/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:./FreeRtos/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:./FreeRtos/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:./FreeRtos/src/tasks.c **** 
1149:./FreeRtos/src/tasks.c **** 		vTaskSuspendAll();
1150:./FreeRtos/src/tasks.c **** 		{
1151:./FreeRtos/src/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:./FreeRtos/src/tasks.c **** 			block. */
1153:./FreeRtos/src/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:./FreeRtos/src/tasks.c **** 
1155:./FreeRtos/src/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:./FreeRtos/src/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:./FreeRtos/src/tasks.c **** 
1158:./FreeRtos/src/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:./FreeRtos/src/tasks.c **** 			{
1160:./FreeRtos/src/tasks.c **** 				/* The tick count has overflowed since this function was
1161:./FreeRtos/src/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:./FreeRtos/src/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:./FreeRtos/src/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:./FreeRtos/src/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:./FreeRtos/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:./FreeRtos/src/tasks.c **** 				{
1167:./FreeRtos/src/tasks.c **** 					xShouldDelay = pdTRUE;
1168:./FreeRtos/src/tasks.c **** 				}
1169:./FreeRtos/src/tasks.c **** 				else
1170:./FreeRtos/src/tasks.c **** 				{
1171:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccQvkfbu.s 			page 22


1172:./FreeRtos/src/tasks.c **** 				}
1173:./FreeRtos/src/tasks.c **** 			}
1174:./FreeRtos/src/tasks.c **** 			else
1175:./FreeRtos/src/tasks.c **** 			{
1176:./FreeRtos/src/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:./FreeRtos/src/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:./FreeRtos/src/tasks.c **** 				tick time is less than the wake time. */
1179:./FreeRtos/src/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:./FreeRtos/src/tasks.c **** 				{
1181:./FreeRtos/src/tasks.c **** 					xShouldDelay = pdTRUE;
1182:./FreeRtos/src/tasks.c **** 				}
1183:./FreeRtos/src/tasks.c **** 				else
1184:./FreeRtos/src/tasks.c **** 				{
1185:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:./FreeRtos/src/tasks.c **** 				}
1187:./FreeRtos/src/tasks.c **** 			}
1188:./FreeRtos/src/tasks.c **** 
1189:./FreeRtos/src/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:./FreeRtos/src/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:./FreeRtos/src/tasks.c **** 
1192:./FreeRtos/src/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:./FreeRtos/src/tasks.c **** 			{
1194:./FreeRtos/src/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:./FreeRtos/src/tasks.c **** 
1196:./FreeRtos/src/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:./FreeRtos/src/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:./FreeRtos/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:./FreeRtos/src/tasks.c **** 			}
1200:./FreeRtos/src/tasks.c **** 			else
1201:./FreeRtos/src/tasks.c **** 			{
1202:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:./FreeRtos/src/tasks.c **** 			}
1204:./FreeRtos/src/tasks.c **** 		}
1205:./FreeRtos/src/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:./FreeRtos/src/tasks.c **** 
1207:./FreeRtos/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:./FreeRtos/src/tasks.c **** 		have put ourselves to sleep. */
1209:./FreeRtos/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:./FreeRtos/src/tasks.c **** 		{
1211:./FreeRtos/src/tasks.c **** 			portYIELD_WITHIN_API();
1212:./FreeRtos/src/tasks.c **** 		}
1213:./FreeRtos/src/tasks.c **** 		else
1214:./FreeRtos/src/tasks.c **** 		{
1215:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:./FreeRtos/src/tasks.c **** 		}
1217:./FreeRtos/src/tasks.c **** 	}
1218:./FreeRtos/src/tasks.c **** 
1219:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1221:./FreeRtos/src/tasks.c **** 
1222:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:./FreeRtos/src/tasks.c **** 
1224:./FreeRtos/src/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:./FreeRtos/src/tasks.c **** 	{
1226:./FreeRtos/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:./FreeRtos/src/tasks.c **** 
1228:./FreeRtos/src/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/ccQvkfbu.s 			page 23


1229:./FreeRtos/src/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:./FreeRtos/src/tasks.c **** 		{
1231:./FreeRtos/src/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:./FreeRtos/src/tasks.c **** 			vTaskSuspendAll();
1233:./FreeRtos/src/tasks.c **** 			{
1234:./FreeRtos/src/tasks.c **** 				traceTASK_DELAY();
1235:./FreeRtos/src/tasks.c **** 
1236:./FreeRtos/src/tasks.c **** 				/* A task that is removed from the event list while the
1237:./FreeRtos/src/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:./FreeRtos/src/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:./FreeRtos/src/tasks.c **** 				is resumed.
1240:./FreeRtos/src/tasks.c **** 
1241:./FreeRtos/src/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:./FreeRtos/src/tasks.c **** 				executing task. */
1243:./FreeRtos/src/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:./FreeRtos/src/tasks.c **** 			}
1245:./FreeRtos/src/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:./FreeRtos/src/tasks.c **** 		}
1247:./FreeRtos/src/tasks.c **** 		else
1248:./FreeRtos/src/tasks.c **** 		{
1249:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:./FreeRtos/src/tasks.c **** 		}
1251:./FreeRtos/src/tasks.c **** 
1252:./FreeRtos/src/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:./FreeRtos/src/tasks.c **** 		have put ourselves to sleep. */
1254:./FreeRtos/src/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:./FreeRtos/src/tasks.c **** 		{
1256:./FreeRtos/src/tasks.c **** 			portYIELD_WITHIN_API();
1257:./FreeRtos/src/tasks.c **** 		}
1258:./FreeRtos/src/tasks.c **** 		else
1259:./FreeRtos/src/tasks.c **** 		{
1260:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:./FreeRtos/src/tasks.c **** 		}
1262:./FreeRtos/src/tasks.c **** 	}
1263:./FreeRtos/src/tasks.c **** 
1264:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1266:./FreeRtos/src/tasks.c **** 
1267:./FreeRtos/src/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:./FreeRtos/src/tasks.c **** 
1269:./FreeRtos/src/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:./FreeRtos/src/tasks.c **** 	{
1271:./FreeRtos/src/tasks.c **** 	eTaskState eReturn;
1272:./FreeRtos/src/tasks.c **** 	List_t *pxStateList;
1273:./FreeRtos/src/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:./FreeRtos/src/tasks.c **** 
1275:./FreeRtos/src/tasks.c **** 		configASSERT( pxTCB );
1276:./FreeRtos/src/tasks.c **** 
1277:./FreeRtos/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:./FreeRtos/src/tasks.c **** 		{
1279:./FreeRtos/src/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:./FreeRtos/src/tasks.c **** 			eReturn = eRunning;
1281:./FreeRtos/src/tasks.c **** 		}
1282:./FreeRtos/src/tasks.c **** 		else
1283:./FreeRtos/src/tasks.c **** 		{
1284:./FreeRtos/src/tasks.c **** 			taskENTER_CRITICAL();
1285:./FreeRtos/src/tasks.c **** 			{
ARM GAS  /tmp/ccQvkfbu.s 			page 24


1286:./FreeRtos/src/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:./FreeRtos/src/tasks.c **** 			}
1288:./FreeRtos/src/tasks.c **** 			taskEXIT_CRITICAL();
1289:./FreeRtos/src/tasks.c **** 
1290:./FreeRtos/src/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:./FreeRtos/src/tasks.c **** 			{
1292:./FreeRtos/src/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:./FreeRtos/src/tasks.c **** 				lists. */
1294:./FreeRtos/src/tasks.c **** 				eReturn = eBlocked;
1295:./FreeRtos/src/tasks.c **** 			}
1296:./FreeRtos/src/tasks.c **** 
1297:./FreeRtos/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:./FreeRtos/src/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:./FreeRtos/src/tasks.c **** 				{
1300:./FreeRtos/src/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:./FreeRtos/src/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:./FreeRtos/src/tasks.c **** 					indefinitely? */
1303:./FreeRtos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:./FreeRtos/src/tasks.c **** 					{
1305:./FreeRtos/src/tasks.c **** 						eReturn = eSuspended;
1306:./FreeRtos/src/tasks.c **** 					}
1307:./FreeRtos/src/tasks.c **** 					else
1308:./FreeRtos/src/tasks.c **** 					{
1309:./FreeRtos/src/tasks.c **** 						eReturn = eBlocked;
1310:./FreeRtos/src/tasks.c **** 					}
1311:./FreeRtos/src/tasks.c **** 				}
1312:./FreeRtos/src/tasks.c **** 			#endif
1313:./FreeRtos/src/tasks.c **** 
1314:./FreeRtos/src/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:./FreeRtos/src/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:./FreeRtos/src/tasks.c **** 				{
1317:./FreeRtos/src/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:./FreeRtos/src/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:./FreeRtos/src/tasks.c **** 					all. */
1320:./FreeRtos/src/tasks.c **** 					eReturn = eDeleted;
1321:./FreeRtos/src/tasks.c **** 				}
1322:./FreeRtos/src/tasks.c **** 			#endif
1323:./FreeRtos/src/tasks.c **** 
1324:./FreeRtos/src/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:./FreeRtos/src/tasks.c **** 			{
1326:./FreeRtos/src/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:./FreeRtos/src/tasks.c **** 				Ready (including pending ready) state. */
1328:./FreeRtos/src/tasks.c **** 				eReturn = eReady;
1329:./FreeRtos/src/tasks.c **** 			}
1330:./FreeRtos/src/tasks.c **** 		}
1331:./FreeRtos/src/tasks.c **** 
1332:./FreeRtos/src/tasks.c **** 		return eReturn;
1333:./FreeRtos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:./FreeRtos/src/tasks.c **** 
1335:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1337:./FreeRtos/src/tasks.c **** 
1338:./FreeRtos/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:./FreeRtos/src/tasks.c **** 
1340:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:./FreeRtos/src/tasks.c **** 	{
1342:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccQvkfbu.s 			page 25


1343:./FreeRtos/src/tasks.c **** 	UBaseType_t uxReturn;
1344:./FreeRtos/src/tasks.c **** 
1345:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
1346:./FreeRtos/src/tasks.c **** 		{
1347:./FreeRtos/src/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:./FreeRtos/src/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:./FreeRtos/src/tasks.c **** 		}
1352:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
1353:./FreeRtos/src/tasks.c **** 
1354:./FreeRtos/src/tasks.c **** 		return uxReturn;
1355:./FreeRtos/src/tasks.c **** 	}
1356:./FreeRtos/src/tasks.c **** 
1357:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1359:./FreeRtos/src/tasks.c **** 
1360:./FreeRtos/src/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:./FreeRtos/src/tasks.c **** 
1362:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:./FreeRtos/src/tasks.c **** 	{
1364:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
1365:./FreeRtos/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:./FreeRtos/src/tasks.c **** 
1367:./FreeRtos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:./FreeRtos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:./FreeRtos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:./FreeRtos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:./FreeRtos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:./FreeRtos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:./FreeRtos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:./FreeRtos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:./FreeRtos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:./FreeRtos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:./FreeRtos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:./FreeRtos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:./FreeRtos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:./FreeRtos/src/tasks.c **** 		provided on the following link:
1382:./FreeRtos/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:./FreeRtos/src/tasks.c **** 
1385:./FreeRtos/src/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:./FreeRtos/src/tasks.c **** 		{
1387:./FreeRtos/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:./FreeRtos/src/tasks.c **** 			task that is being queried. */
1389:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:./FreeRtos/src/tasks.c **** 		}
1392:./FreeRtos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:./FreeRtos/src/tasks.c **** 
1394:./FreeRtos/src/tasks.c **** 		return uxReturn;
1395:./FreeRtos/src/tasks.c **** 	}
1396:./FreeRtos/src/tasks.c **** 
1397:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1399:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 26


1400:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:./FreeRtos/src/tasks.c **** 
1402:./FreeRtos/src/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:./FreeRtos/src/tasks.c **** 	{
1404:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
1405:./FreeRtos/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:./FreeRtos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:./FreeRtos/src/tasks.c **** 
1408:./FreeRtos/src/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:./FreeRtos/src/tasks.c **** 
1410:./FreeRtos/src/tasks.c **** 		/* Ensure the new priority is valid. */
1411:./FreeRtos/src/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:./FreeRtos/src/tasks.c **** 		{
1413:./FreeRtos/src/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:./FreeRtos/src/tasks.c **** 		}
1415:./FreeRtos/src/tasks.c **** 		else
1416:./FreeRtos/src/tasks.c **** 		{
1417:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:./FreeRtos/src/tasks.c **** 		}
1419:./FreeRtos/src/tasks.c **** 
1420:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
1421:./FreeRtos/src/tasks.c **** 		{
1422:./FreeRtos/src/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:./FreeRtos/src/tasks.c **** 			task that is being changed. */
1424:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:./FreeRtos/src/tasks.c **** 
1426:./FreeRtos/src/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:./FreeRtos/src/tasks.c **** 
1428:./FreeRtos/src/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:./FreeRtos/src/tasks.c **** 			{
1430:./FreeRtos/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:./FreeRtos/src/tasks.c **** 			}
1432:./FreeRtos/src/tasks.c **** 			#else
1433:./FreeRtos/src/tasks.c **** 			{
1434:./FreeRtos/src/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:./FreeRtos/src/tasks.c **** 			}
1436:./FreeRtos/src/tasks.c **** 			#endif
1437:./FreeRtos/src/tasks.c **** 
1438:./FreeRtos/src/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:./FreeRtos/src/tasks.c **** 			{
1440:./FreeRtos/src/tasks.c **** 				/* The priority change may have readied a task of higher
1441:./FreeRtos/src/tasks.c **** 				priority than the calling task. */
1442:./FreeRtos/src/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:./FreeRtos/src/tasks.c **** 				{
1444:./FreeRtos/src/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:./FreeRtos/src/tasks.c **** 					{
1446:./FreeRtos/src/tasks.c **** 						/* The priority of a task other than the currently
1447:./FreeRtos/src/tasks.c **** 						running task is being raised.  Is the priority being
1448:./FreeRtos/src/tasks.c **** 						raised above that of the running task? */
1449:./FreeRtos/src/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:./FreeRtos/src/tasks.c **** 						{
1451:./FreeRtos/src/tasks.c **** 							xYieldRequired = pdTRUE;
1452:./FreeRtos/src/tasks.c **** 						}
1453:./FreeRtos/src/tasks.c **** 						else
1454:./FreeRtos/src/tasks.c **** 						{
1455:./FreeRtos/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:./FreeRtos/src/tasks.c **** 						}
ARM GAS  /tmp/ccQvkfbu.s 			page 27


1457:./FreeRtos/src/tasks.c **** 					}
1458:./FreeRtos/src/tasks.c **** 					else
1459:./FreeRtos/src/tasks.c **** 					{
1460:./FreeRtos/src/tasks.c **** 						/* The priority of the running task is being raised,
1461:./FreeRtos/src/tasks.c **** 						but the running task must already be the highest
1462:./FreeRtos/src/tasks.c **** 						priority task able to run so no yield is required. */
1463:./FreeRtos/src/tasks.c **** 					}
1464:./FreeRtos/src/tasks.c **** 				}
1465:./FreeRtos/src/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:./FreeRtos/src/tasks.c **** 				{
1467:./FreeRtos/src/tasks.c **** 					/* Setting the priority of the running task down means
1468:./FreeRtos/src/tasks.c **** 					there may now be another task of higher priority that
1469:./FreeRtos/src/tasks.c **** 					is ready to execute. */
1470:./FreeRtos/src/tasks.c **** 					xYieldRequired = pdTRUE;
1471:./FreeRtos/src/tasks.c **** 				}
1472:./FreeRtos/src/tasks.c **** 				else
1473:./FreeRtos/src/tasks.c **** 				{
1474:./FreeRtos/src/tasks.c **** 					/* Setting the priority of any other task down does not
1475:./FreeRtos/src/tasks.c **** 					require a yield as the running task must be above the
1476:./FreeRtos/src/tasks.c **** 					new priority of the task being modified. */
1477:./FreeRtos/src/tasks.c **** 				}
1478:./FreeRtos/src/tasks.c **** 
1479:./FreeRtos/src/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:./FreeRtos/src/tasks.c **** 				before its uxPriority member is changed so the
1481:./FreeRtos/src/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:./FreeRtos/src/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:./FreeRtos/src/tasks.c **** 
1484:./FreeRtos/src/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:./FreeRtos/src/tasks.c **** 				{
1486:./FreeRtos/src/tasks.c **** 					/* Only change the priority being used if the task is not
1487:./FreeRtos/src/tasks.c **** 					currently using an inherited priority. */
1488:./FreeRtos/src/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:./FreeRtos/src/tasks.c **** 					{
1490:./FreeRtos/src/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:./FreeRtos/src/tasks.c **** 					}
1492:./FreeRtos/src/tasks.c **** 					else
1493:./FreeRtos/src/tasks.c **** 					{
1494:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:./FreeRtos/src/tasks.c **** 					}
1496:./FreeRtos/src/tasks.c **** 
1497:./FreeRtos/src/tasks.c **** 					/* The base priority gets set whatever. */
1498:./FreeRtos/src/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:./FreeRtos/src/tasks.c **** 				}
1500:./FreeRtos/src/tasks.c **** 				#else
1501:./FreeRtos/src/tasks.c **** 				{
1502:./FreeRtos/src/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:./FreeRtos/src/tasks.c **** 				}
1504:./FreeRtos/src/tasks.c **** 				#endif
1505:./FreeRtos/src/tasks.c **** 
1506:./FreeRtos/src/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:./FreeRtos/src/tasks.c **** 				being used for anything else. */
1508:./FreeRtos/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:./FreeRtos/src/tasks.c **** 				{
1510:./FreeRtos/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:./FreeRtos/src/tasks.c **** 				}
1512:./FreeRtos/src/tasks.c **** 				else
1513:./FreeRtos/src/tasks.c **** 				{
ARM GAS  /tmp/ccQvkfbu.s 			page 28


1514:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:./FreeRtos/src/tasks.c **** 				}
1516:./FreeRtos/src/tasks.c **** 
1517:./FreeRtos/src/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:./FreeRtos/src/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:./FreeRtos/src/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:./FreeRtos/src/tasks.c **** 				in the list appropriate to its new priority. */
1521:./FreeRtos/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:./FreeRtos/src/tasks.c **** 				{
1523:./FreeRtos/src/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:./FreeRtos/src/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:./FreeRtos/src/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:./FreeRtos/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:./FreeRtos/src/tasks.c **** 					{
1528:./FreeRtos/src/tasks.c **** 						/* It is known that the task is in its ready list so
1529:./FreeRtos/src/tasks.c **** 						there is no need to check again and the port level
1530:./FreeRtos/src/tasks.c **** 						reset macro can be called directly. */
1531:./FreeRtos/src/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:./FreeRtos/src/tasks.c **** 					}
1533:./FreeRtos/src/tasks.c **** 					else
1534:./FreeRtos/src/tasks.c **** 					{
1535:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:./FreeRtos/src/tasks.c **** 					}
1537:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:./FreeRtos/src/tasks.c **** 				}
1539:./FreeRtos/src/tasks.c **** 				else
1540:./FreeRtos/src/tasks.c **** 				{
1541:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:./FreeRtos/src/tasks.c **** 				}
1543:./FreeRtos/src/tasks.c **** 
1544:./FreeRtos/src/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:./FreeRtos/src/tasks.c **** 				{
1546:./FreeRtos/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:./FreeRtos/src/tasks.c **** 				}
1548:./FreeRtos/src/tasks.c **** 				else
1549:./FreeRtos/src/tasks.c **** 				{
1550:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:./FreeRtos/src/tasks.c **** 				}
1552:./FreeRtos/src/tasks.c **** 
1553:./FreeRtos/src/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:./FreeRtos/src/tasks.c **** 				optimised task selection is not being used. */
1555:./FreeRtos/src/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:./FreeRtos/src/tasks.c **** 			}
1557:./FreeRtos/src/tasks.c **** 		}
1558:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
1559:./FreeRtos/src/tasks.c **** 	}
1560:./FreeRtos/src/tasks.c **** 
1561:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1563:./FreeRtos/src/tasks.c **** 
1564:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:./FreeRtos/src/tasks.c **** 
1566:./FreeRtos/src/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:./FreeRtos/src/tasks.c **** 	{
1568:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
1569:./FreeRtos/src/tasks.c **** 
1570:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccQvkfbu.s 			page 29


1571:./FreeRtos/src/tasks.c **** 		{
1572:./FreeRtos/src/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:./FreeRtos/src/tasks.c **** 			being suspended. */
1574:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:./FreeRtos/src/tasks.c **** 
1576:./FreeRtos/src/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:./FreeRtos/src/tasks.c **** 
1578:./FreeRtos/src/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:./FreeRtos/src/tasks.c **** 			suspended list. */
1580:./FreeRtos/src/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:./FreeRtos/src/tasks.c **** 			{
1582:./FreeRtos/src/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:./FreeRtos/src/tasks.c **** 			}
1584:./FreeRtos/src/tasks.c **** 			else
1585:./FreeRtos/src/tasks.c **** 			{
1586:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:./FreeRtos/src/tasks.c **** 			}
1588:./FreeRtos/src/tasks.c **** 
1589:./FreeRtos/src/tasks.c **** 			/* Is the task waiting on an event also? */
1590:./FreeRtos/src/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:./FreeRtos/src/tasks.c **** 			{
1592:./FreeRtos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:./FreeRtos/src/tasks.c **** 			}
1594:./FreeRtos/src/tasks.c **** 			else
1595:./FreeRtos/src/tasks.c **** 			{
1596:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:./FreeRtos/src/tasks.c **** 			}
1598:./FreeRtos/src/tasks.c **** 
1599:./FreeRtos/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:./FreeRtos/src/tasks.c **** 		}
1601:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
1602:./FreeRtos/src/tasks.c **** 
1603:./FreeRtos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:./FreeRtos/src/tasks.c **** 		{
1605:./FreeRtos/src/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:./FreeRtos/src/tasks.c **** 			task that is now in the Suspended state. */
1607:./FreeRtos/src/tasks.c **** 			taskENTER_CRITICAL();
1608:./FreeRtos/src/tasks.c **** 			{
1609:./FreeRtos/src/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:./FreeRtos/src/tasks.c **** 			}
1611:./FreeRtos/src/tasks.c **** 			taskEXIT_CRITICAL();
1612:./FreeRtos/src/tasks.c **** 		}
1613:./FreeRtos/src/tasks.c **** 		else
1614:./FreeRtos/src/tasks.c **** 		{
1615:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:./FreeRtos/src/tasks.c **** 		}
1617:./FreeRtos/src/tasks.c **** 
1618:./FreeRtos/src/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:./FreeRtos/src/tasks.c **** 		{
1620:./FreeRtos/src/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:./FreeRtos/src/tasks.c **** 			{
1622:./FreeRtos/src/tasks.c **** 				/* The current task has just been suspended. */
1623:./FreeRtos/src/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:./FreeRtos/src/tasks.c **** 				portYIELD_WITHIN_API();
1625:./FreeRtos/src/tasks.c **** 			}
1626:./FreeRtos/src/tasks.c **** 			else
1627:./FreeRtos/src/tasks.c **** 			{
ARM GAS  /tmp/ccQvkfbu.s 			page 30


1628:./FreeRtos/src/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:./FreeRtos/src/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:./FreeRtos/src/tasks.c **** 				must be adjusted to point to a different task. */
1631:./FreeRtos/src/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:./FreeRtos/src/tasks.c **** 				{
1633:./FreeRtos/src/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:./FreeRtos/src/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:./FreeRtos/src/tasks.c **** 					be set to point to it no matter what its relative priority
1636:./FreeRtos/src/tasks.c **** 					is. */
1637:./FreeRtos/src/tasks.c **** 					pxCurrentTCB = NULL;
1638:./FreeRtos/src/tasks.c **** 				}
1639:./FreeRtos/src/tasks.c **** 				else
1640:./FreeRtos/src/tasks.c **** 				{
1641:./FreeRtos/src/tasks.c **** 					vTaskSwitchContext();
1642:./FreeRtos/src/tasks.c **** 				}
1643:./FreeRtos/src/tasks.c **** 			}
1644:./FreeRtos/src/tasks.c **** 		}
1645:./FreeRtos/src/tasks.c **** 		else
1646:./FreeRtos/src/tasks.c **** 		{
1647:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:./FreeRtos/src/tasks.c **** 		}
1649:./FreeRtos/src/tasks.c **** 	}
1650:./FreeRtos/src/tasks.c **** 
1651:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1653:./FreeRtos/src/tasks.c **** 
1654:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:./FreeRtos/src/tasks.c **** 
1656:./FreeRtos/src/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:./FreeRtos/src/tasks.c **** 	{
1658:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:./FreeRtos/src/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:./FreeRtos/src/tasks.c **** 
1661:./FreeRtos/src/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:./FreeRtos/src/tasks.c **** 		section. */
1663:./FreeRtos/src/tasks.c **** 
1664:./FreeRtos/src/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:./FreeRtos/src/tasks.c **** 		configASSERT( xTask );
1666:./FreeRtos/src/tasks.c **** 
1667:./FreeRtos/src/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:./FreeRtos/src/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
1669:./FreeRtos/src/tasks.c **** 		{
1670:./FreeRtos/src/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:./FreeRtos/src/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
1672:./FreeRtos/src/tasks.c **** 			{
1673:./FreeRtos/src/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:./FreeRtos/src/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:./FreeRtos/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
1676:./FreeRtos/src/tasks.c **** 				{
1677:./FreeRtos/src/tasks.c **** 					xReturn = pdTRUE;
1678:./FreeRtos/src/tasks.c **** 				}
1679:./FreeRtos/src/tasks.c **** 				else
1680:./FreeRtos/src/tasks.c **** 				{
1681:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:./FreeRtos/src/tasks.c **** 				}
1683:./FreeRtos/src/tasks.c **** 			}
1684:./FreeRtos/src/tasks.c **** 			else
ARM GAS  /tmp/ccQvkfbu.s 			page 31


1685:./FreeRtos/src/tasks.c **** 			{
1686:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:./FreeRtos/src/tasks.c **** 			}
1688:./FreeRtos/src/tasks.c **** 		}
1689:./FreeRtos/src/tasks.c **** 		else
1690:./FreeRtos/src/tasks.c **** 		{
1691:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:./FreeRtos/src/tasks.c **** 		}
1693:./FreeRtos/src/tasks.c **** 
1694:./FreeRtos/src/tasks.c **** 		return xReturn;
1695:./FreeRtos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1696:./FreeRtos/src/tasks.c **** 
1697:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1699:./FreeRtos/src/tasks.c **** 
1700:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:./FreeRtos/src/tasks.c **** 
1702:./FreeRtos/src/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:./FreeRtos/src/tasks.c **** 	{
1704:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:./FreeRtos/src/tasks.c **** 
1706:./FreeRtos/src/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:./FreeRtos/src/tasks.c **** 		configASSERT( xTaskToResume );
1708:./FreeRtos/src/tasks.c **** 
1709:./FreeRtos/src/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:./FreeRtos/src/tasks.c **** 		currently executing task. */
1711:./FreeRtos/src/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:./FreeRtos/src/tasks.c **** 		{
1713:./FreeRtos/src/tasks.c **** 			taskENTER_CRITICAL();
1714:./FreeRtos/src/tasks.c **** 			{
1715:./FreeRtos/src/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:./FreeRtos/src/tasks.c **** 				{
1717:./FreeRtos/src/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:./FreeRtos/src/tasks.c **** 
1719:./FreeRtos/src/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:./FreeRtos/src/tasks.c **** 					lists even if the scheduler is suspended. */
1721:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:./FreeRtos/src/tasks.c **** 
1724:./FreeRtos/src/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:./FreeRtos/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:./FreeRtos/src/tasks.c **** 					{
1727:./FreeRtos/src/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:./FreeRtos/src/tasks.c **** 						but will leave the lists in the correct state for the
1729:./FreeRtos/src/tasks.c **** 						next yield. */
1730:./FreeRtos/src/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:./FreeRtos/src/tasks.c **** 					}
1732:./FreeRtos/src/tasks.c **** 					else
1733:./FreeRtos/src/tasks.c **** 					{
1734:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:./FreeRtos/src/tasks.c **** 					}
1736:./FreeRtos/src/tasks.c **** 				}
1737:./FreeRtos/src/tasks.c **** 				else
1738:./FreeRtos/src/tasks.c **** 				{
1739:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:./FreeRtos/src/tasks.c **** 				}
1741:./FreeRtos/src/tasks.c **** 			}
ARM GAS  /tmp/ccQvkfbu.s 			page 32


1742:./FreeRtos/src/tasks.c **** 			taskEXIT_CRITICAL();
1743:./FreeRtos/src/tasks.c **** 		}
1744:./FreeRtos/src/tasks.c **** 		else
1745:./FreeRtos/src/tasks.c **** 		{
1746:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:./FreeRtos/src/tasks.c **** 		}
1748:./FreeRtos/src/tasks.c **** 	}
1749:./FreeRtos/src/tasks.c **** 
1750:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:./FreeRtos/src/tasks.c **** 
1752:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1753:./FreeRtos/src/tasks.c **** 
1754:./FreeRtos/src/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:./FreeRtos/src/tasks.c **** 
1756:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:./FreeRtos/src/tasks.c **** 	{
1758:./FreeRtos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1761:./FreeRtos/src/tasks.c **** 
1762:./FreeRtos/src/tasks.c **** 		configASSERT( xTaskToResume );
1763:./FreeRtos/src/tasks.c **** 
1764:./FreeRtos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:./FreeRtos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:./FreeRtos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:./FreeRtos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:./FreeRtos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:./FreeRtos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:./FreeRtos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:./FreeRtos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:./FreeRtos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:./FreeRtos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:./FreeRtos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:./FreeRtos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:./FreeRtos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:./FreeRtos/src/tasks.c **** 		provided on the following link:
1779:./FreeRtos/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:./FreeRtos/src/tasks.c **** 
1782:./FreeRtos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:./FreeRtos/src/tasks.c **** 		{
1784:./FreeRtos/src/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:./FreeRtos/src/tasks.c **** 			{
1786:./FreeRtos/src/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:./FreeRtos/src/tasks.c **** 
1788:./FreeRtos/src/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:./FreeRtos/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:./FreeRtos/src/tasks.c **** 				{
1791:./FreeRtos/src/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:./FreeRtos/src/tasks.c **** 					suspended list to the ready list directly. */
1793:./FreeRtos/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:./FreeRtos/src/tasks.c **** 					{
1795:./FreeRtos/src/tasks.c **** 						xYieldRequired = pdTRUE;
1796:./FreeRtos/src/tasks.c **** 					}
1797:./FreeRtos/src/tasks.c **** 					else
1798:./FreeRtos/src/tasks.c **** 					{
ARM GAS  /tmp/ccQvkfbu.s 			page 33


1799:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:./FreeRtos/src/tasks.c **** 					}
1801:./FreeRtos/src/tasks.c **** 
1802:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:./FreeRtos/src/tasks.c **** 				}
1805:./FreeRtos/src/tasks.c **** 				else
1806:./FreeRtos/src/tasks.c **** 				{
1807:./FreeRtos/src/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:./FreeRtos/src/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:./FreeRtos/src/tasks.c **** 					unsuspended. */
1810:./FreeRtos/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:./FreeRtos/src/tasks.c **** 				}
1812:./FreeRtos/src/tasks.c **** 			}
1813:./FreeRtos/src/tasks.c **** 			else
1814:./FreeRtos/src/tasks.c **** 			{
1815:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:./FreeRtos/src/tasks.c **** 			}
1817:./FreeRtos/src/tasks.c **** 		}
1818:./FreeRtos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:./FreeRtos/src/tasks.c **** 
1820:./FreeRtos/src/tasks.c **** 		return xYieldRequired;
1821:./FreeRtos/src/tasks.c **** 	}
1822:./FreeRtos/src/tasks.c **** 
1823:./FreeRtos/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1825:./FreeRtos/src/tasks.c **** 
1826:./FreeRtos/src/tasks.c **** void vTaskStartScheduler( void )
1827:./FreeRtos/src/tasks.c **** {
1828:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
1829:./FreeRtos/src/tasks.c **** 
1830:./FreeRtos/src/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:./FreeRtos/src/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:./FreeRtos/src/tasks.c **** 	{
1833:./FreeRtos/src/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:./FreeRtos/src/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:./FreeRtos/src/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:./FreeRtos/src/tasks.c **** 
1837:./FreeRtos/src/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:./FreeRtos/src/tasks.c **** 		address of the RAM then create the idle task. */
1839:./FreeRtos/src/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:./FreeRtos/src/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:./FreeRtos/src/tasks.c **** 												"IDLE",
1842:./FreeRtos/src/tasks.c **** 												ulIdleTaskStackSize,
1843:./FreeRtos/src/tasks.c **** 												( void * ) NULL,
1844:./FreeRtos/src/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:./FreeRtos/src/tasks.c **** 												pxIdleTaskStackBuffer,
1846:./FreeRtos/src/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:./FreeRtos/src/tasks.c **** 
1848:./FreeRtos/src/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:./FreeRtos/src/tasks.c **** 		{
1850:./FreeRtos/src/tasks.c **** 			xReturn = pdPASS;
1851:./FreeRtos/src/tasks.c **** 		}
1852:./FreeRtos/src/tasks.c **** 		else
1853:./FreeRtos/src/tasks.c **** 		{
1854:./FreeRtos/src/tasks.c **** 			xReturn = pdFAIL;
1855:./FreeRtos/src/tasks.c **** 		}
ARM GAS  /tmp/ccQvkfbu.s 			page 34


1856:./FreeRtos/src/tasks.c **** 	}
1857:./FreeRtos/src/tasks.c **** 	#else
1858:./FreeRtos/src/tasks.c **** 	{
1859:./FreeRtos/src/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:./FreeRtos/src/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:./FreeRtos/src/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:./FreeRtos/src/tasks.c **** 								( void * ) NULL,
1863:./FreeRtos/src/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:./FreeRtos/src/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:./FreeRtos/src/tasks.c **** 	}
1866:./FreeRtos/src/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:./FreeRtos/src/tasks.c **** 
1868:./FreeRtos/src/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:./FreeRtos/src/tasks.c **** 	{
1870:./FreeRtos/src/tasks.c **** 		if( xReturn == pdPASS )
1871:./FreeRtos/src/tasks.c **** 		{
1872:./FreeRtos/src/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:./FreeRtos/src/tasks.c **** 		}
1874:./FreeRtos/src/tasks.c **** 		else
1875:./FreeRtos/src/tasks.c **** 		{
1876:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:./FreeRtos/src/tasks.c **** 		}
1878:./FreeRtos/src/tasks.c **** 	}
1879:./FreeRtos/src/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:./FreeRtos/src/tasks.c **** 
1881:./FreeRtos/src/tasks.c **** 	if( xReturn == pdPASS )
1882:./FreeRtos/src/tasks.c **** 	{
1883:./FreeRtos/src/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:./FreeRtos/src/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:./FreeRtos/src/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:./FreeRtos/src/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:./FreeRtos/src/tasks.c **** 		starts to run. */
1888:./FreeRtos/src/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:./FreeRtos/src/tasks.c **** 
1890:./FreeRtos/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:./FreeRtos/src/tasks.c **** 		{
1892:./FreeRtos/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:./FreeRtos/src/tasks.c **** 			structure specific to the task that will run first. */
1894:./FreeRtos/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:./FreeRtos/src/tasks.c **** 		}
1896:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:./FreeRtos/src/tasks.c **** 
1898:./FreeRtos/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:./FreeRtos/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:./FreeRtos/src/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:./FreeRtos/src/tasks.c **** 
1902:./FreeRtos/src/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:./FreeRtos/src/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:./FreeRtos/src/tasks.c **** 		the run time counter time base. */
1905:./FreeRtos/src/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:./FreeRtos/src/tasks.c **** 
1907:./FreeRtos/src/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:./FreeRtos/src/tasks.c **** 		portable interface. */
1909:./FreeRtos/src/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:./FreeRtos/src/tasks.c **** 		{
1911:./FreeRtos/src/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:./FreeRtos/src/tasks.c **** 			function will not return. */
ARM GAS  /tmp/ccQvkfbu.s 			page 35


1913:./FreeRtos/src/tasks.c **** 		}
1914:./FreeRtos/src/tasks.c **** 		else
1915:./FreeRtos/src/tasks.c **** 		{
1916:./FreeRtos/src/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:./FreeRtos/src/tasks.c **** 		}
1918:./FreeRtos/src/tasks.c **** 	}
1919:./FreeRtos/src/tasks.c **** 	else
1920:./FreeRtos/src/tasks.c **** 	{
1921:./FreeRtos/src/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:./FreeRtos/src/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:./FreeRtos/src/tasks.c **** 		or the timer task. */
1924:./FreeRtos/src/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:./FreeRtos/src/tasks.c **** 	}
1926:./FreeRtos/src/tasks.c **** 
1927:./FreeRtos/src/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:./FreeRtos/src/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:./FreeRtos/src/tasks.c **** 	( void ) xIdleTaskHandle;
1930:./FreeRtos/src/tasks.c **** }
1931:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
1932:./FreeRtos/src/tasks.c **** 
1933:./FreeRtos/src/tasks.c **** void vTaskEndScheduler( void )
1934:./FreeRtos/src/tasks.c **** {
1935:./FreeRtos/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:./FreeRtos/src/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:./FreeRtos/src/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:./FreeRtos/src/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:./FreeRtos/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:./FreeRtos/src/tasks.c **** 	vPortEndScheduler();
1941:./FreeRtos/src/tasks.c **** }
1942:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
1943:./FreeRtos/src/tasks.c **** 
1944:./FreeRtos/src/tasks.c **** void vTaskSuspendAll( void )
1945:./FreeRtos/src/tasks.c **** {
1946:./FreeRtos/src/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:./FreeRtos/src/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:./FreeRtos/src/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:./FreeRtos/src/tasks.c **** 	http://goo.gl/wu4acr */
1950:./FreeRtos/src/tasks.c **** 	++uxSchedulerSuspended;
1951:./FreeRtos/src/tasks.c **** }
1952:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
1953:./FreeRtos/src/tasks.c **** 
1954:./FreeRtos/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:./FreeRtos/src/tasks.c **** 
1956:./FreeRtos/src/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:./FreeRtos/src/tasks.c **** 	{
1958:./FreeRtos/src/tasks.c **** 	TickType_t xReturn;
1959:./FreeRtos/src/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:./FreeRtos/src/tasks.c **** 
1961:./FreeRtos/src/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:./FreeRtos/src/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:./FreeRtos/src/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:./FreeRtos/src/tasks.c **** 		running. */
1965:./FreeRtos/src/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:./FreeRtos/src/tasks.c **** 		{
1967:./FreeRtos/src/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:./FreeRtos/src/tasks.c **** 			{
1969:./FreeRtos/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  /tmp/ccQvkfbu.s 			page 36


1970:./FreeRtos/src/tasks.c **** 			}
1971:./FreeRtos/src/tasks.c **** 		}
1972:./FreeRtos/src/tasks.c **** 		#else
1973:./FreeRtos/src/tasks.c **** 		{
1974:./FreeRtos/src/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:./FreeRtos/src/tasks.c **** 
1976:./FreeRtos/src/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:./FreeRtos/src/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:./FreeRtos/src/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:./FreeRtos/src/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:./FreeRtos/src/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:./FreeRtos/src/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:./FreeRtos/src/tasks.c **** 			{
1983:./FreeRtos/src/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:./FreeRtos/src/tasks.c **** 			}
1985:./FreeRtos/src/tasks.c **** 		}
1986:./FreeRtos/src/tasks.c **** 		#endif
1987:./FreeRtos/src/tasks.c **** 
1988:./FreeRtos/src/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
1989:./FreeRtos/src/tasks.c **** 		{
1990:./FreeRtos/src/tasks.c **** 			xReturn = 0;
1991:./FreeRtos/src/tasks.c **** 		}
1992:./FreeRtos/src/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:./FreeRtos/src/tasks.c **** 		{
1994:./FreeRtos/src/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:./FreeRtos/src/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:./FreeRtos/src/tasks.c **** 			processed. */
1997:./FreeRtos/src/tasks.c **** 			xReturn = 0;
1998:./FreeRtos/src/tasks.c **** 		}
1999:./FreeRtos/src/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:./FreeRtos/src/tasks.c **** 		{
2001:./FreeRtos/src/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:./FreeRtos/src/tasks.c **** 			idle priority.  This path can only be reached if
2003:./FreeRtos/src/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:./FreeRtos/src/tasks.c **** 			xReturn = 0;
2005:./FreeRtos/src/tasks.c **** 		}
2006:./FreeRtos/src/tasks.c **** 		else
2007:./FreeRtos/src/tasks.c **** 		{
2008:./FreeRtos/src/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:./FreeRtos/src/tasks.c **** 		}
2010:./FreeRtos/src/tasks.c **** 
2011:./FreeRtos/src/tasks.c **** 		return xReturn;
2012:./FreeRtos/src/tasks.c **** 	}
2013:./FreeRtos/src/tasks.c **** 
2014:./FreeRtos/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
2016:./FreeRtos/src/tasks.c **** 
2017:./FreeRtos/src/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:./FreeRtos/src/tasks.c **** {
2019:./FreeRtos/src/tasks.c **** TCB_t *pxTCB = NULL;
2020:./FreeRtos/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:./FreeRtos/src/tasks.c **** 
2022:./FreeRtos/src/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:./FreeRtos/src/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:./FreeRtos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:./FreeRtos/src/tasks.c **** 
2026:./FreeRtos/src/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
ARM GAS  /tmp/ccQvkfbu.s 			page 37


2027:./FreeRtos/src/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:./FreeRtos/src/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:./FreeRtos/src/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:./FreeRtos/src/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:./FreeRtos/src/tasks.c **** 	taskENTER_CRITICAL();
2032:./FreeRtos/src/tasks.c **** 	{
2033:./FreeRtos/src/tasks.c **** 		--uxSchedulerSuspended;
2034:./FreeRtos/src/tasks.c **** 
2035:./FreeRtos/src/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:./FreeRtos/src/tasks.c **** 		{
2037:./FreeRtos/src/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:./FreeRtos/src/tasks.c **** 			{
2039:./FreeRtos/src/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:./FreeRtos/src/tasks.c **** 				appropriate ready list. */
2041:./FreeRtos/src/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:./FreeRtos/src/tasks.c **** 				{
2043:./FreeRtos/src/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2046:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:./FreeRtos/src/tasks.c **** 
2048:./FreeRtos/src/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:./FreeRtos/src/tasks.c **** 					task then a yield must be performed. */
2050:./FreeRtos/src/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:./FreeRtos/src/tasks.c **** 					{
2052:./FreeRtos/src/tasks.c **** 						xYieldPending = pdTRUE;
2053:./FreeRtos/src/tasks.c **** 					}
2054:./FreeRtos/src/tasks.c **** 					else
2055:./FreeRtos/src/tasks.c **** 					{
2056:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:./FreeRtos/src/tasks.c **** 					}
2058:./FreeRtos/src/tasks.c **** 				}
2059:./FreeRtos/src/tasks.c **** 
2060:./FreeRtos/src/tasks.c **** 				if( pxTCB != NULL )
2061:./FreeRtos/src/tasks.c **** 				{
2062:./FreeRtos/src/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:./FreeRtos/src/tasks.c **** 					which may have prevented the next unblock time from being
2064:./FreeRtos/src/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:./FreeRtos/src/tasks.c **** 					important for low power tickless implementations, where
2066:./FreeRtos/src/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:./FreeRtos/src/tasks.c **** 					state. */
2068:./FreeRtos/src/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:./FreeRtos/src/tasks.c **** 				}
2070:./FreeRtos/src/tasks.c **** 
2071:./FreeRtos/src/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:./FreeRtos/src/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:./FreeRtos/src/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:./FreeRtos/src/tasks.c **** 				time. */
2075:./FreeRtos/src/tasks.c **** 				{
2076:./FreeRtos/src/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:./FreeRtos/src/tasks.c **** 
2078:./FreeRtos/src/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:./FreeRtos/src/tasks.c **** 					{
2080:./FreeRtos/src/tasks.c **** 						do
2081:./FreeRtos/src/tasks.c **** 						{
2082:./FreeRtos/src/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:./FreeRtos/src/tasks.c **** 							{
ARM GAS  /tmp/ccQvkfbu.s 			page 38


2084:./FreeRtos/src/tasks.c **** 								xYieldPending = pdTRUE;
2085:./FreeRtos/src/tasks.c **** 							}
2086:./FreeRtos/src/tasks.c **** 							else
2087:./FreeRtos/src/tasks.c **** 							{
2088:./FreeRtos/src/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:./FreeRtos/src/tasks.c **** 							}
2090:./FreeRtos/src/tasks.c **** 							--uxPendedCounts;
2091:./FreeRtos/src/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:./FreeRtos/src/tasks.c **** 
2093:./FreeRtos/src/tasks.c **** 						uxPendedTicks = 0;
2094:./FreeRtos/src/tasks.c **** 					}
2095:./FreeRtos/src/tasks.c **** 					else
2096:./FreeRtos/src/tasks.c **** 					{
2097:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:./FreeRtos/src/tasks.c **** 					}
2099:./FreeRtos/src/tasks.c **** 				}
2100:./FreeRtos/src/tasks.c **** 
2101:./FreeRtos/src/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:./FreeRtos/src/tasks.c **** 				{
2103:./FreeRtos/src/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:./FreeRtos/src/tasks.c **** 					{
2105:./FreeRtos/src/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:./FreeRtos/src/tasks.c **** 					}
2107:./FreeRtos/src/tasks.c **** 					#endif
2108:./FreeRtos/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:./FreeRtos/src/tasks.c **** 				}
2110:./FreeRtos/src/tasks.c **** 				else
2111:./FreeRtos/src/tasks.c **** 				{
2112:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:./FreeRtos/src/tasks.c **** 				}
2114:./FreeRtos/src/tasks.c **** 			}
2115:./FreeRtos/src/tasks.c **** 		}
2116:./FreeRtos/src/tasks.c **** 		else
2117:./FreeRtos/src/tasks.c **** 		{
2118:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:./FreeRtos/src/tasks.c **** 		}
2120:./FreeRtos/src/tasks.c **** 	}
2121:./FreeRtos/src/tasks.c **** 	taskEXIT_CRITICAL();
2122:./FreeRtos/src/tasks.c **** 
2123:./FreeRtos/src/tasks.c **** 	return xAlreadyYielded;
2124:./FreeRtos/src/tasks.c **** }
2125:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2126:./FreeRtos/src/tasks.c **** 
2127:./FreeRtos/src/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:./FreeRtos/src/tasks.c **** {
2129:./FreeRtos/src/tasks.c **** TickType_t xTicks;
2130:./FreeRtos/src/tasks.c **** 
2131:./FreeRtos/src/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:./FreeRtos/src/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:./FreeRtos/src/tasks.c **** 	{
2134:./FreeRtos/src/tasks.c **** 		xTicks = xTickCount;
2135:./FreeRtos/src/tasks.c **** 	}
2136:./FreeRtos/src/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:./FreeRtos/src/tasks.c **** 
2138:./FreeRtos/src/tasks.c **** 	return xTicks;
2139:./FreeRtos/src/tasks.c **** }
2140:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccQvkfbu.s 			page 39


2141:./FreeRtos/src/tasks.c **** 
2142:./FreeRtos/src/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:./FreeRtos/src/tasks.c **** {
2144:./FreeRtos/src/tasks.c **** TickType_t xReturn;
2145:./FreeRtos/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:./FreeRtos/src/tasks.c **** 
2147:./FreeRtos/src/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:./FreeRtos/src/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:./FreeRtos/src/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:./FreeRtos/src/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:./FreeRtos/src/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:./FreeRtos/src/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:./FreeRtos/src/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:./FreeRtos/src/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:./FreeRtos/src/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:./FreeRtos/src/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:./FreeRtos/src/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:./FreeRtos/src/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:./FreeRtos/src/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2160:./FreeRtos/src/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:./FreeRtos/src/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:./FreeRtos/src/tasks.c **** 
2163:./FreeRtos/src/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:./FreeRtos/src/tasks.c **** 	{
2165:./FreeRtos/src/tasks.c **** 		xReturn = xTickCount;
2166:./FreeRtos/src/tasks.c **** 	}
2167:./FreeRtos/src/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:./FreeRtos/src/tasks.c **** 
2169:./FreeRtos/src/tasks.c **** 	return xReturn;
2170:./FreeRtos/src/tasks.c **** }
2171:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2172:./FreeRtos/src/tasks.c **** 
2173:./FreeRtos/src/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:./FreeRtos/src/tasks.c **** {
2175:./FreeRtos/src/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:./FreeRtos/src/tasks.c **** 	BaseType_t. */
2177:./FreeRtos/src/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:./FreeRtos/src/tasks.c **** }
2179:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2180:./FreeRtos/src/tasks.c **** 
2181:./FreeRtos/src/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:./FreeRtos/src/tasks.c **** {
2183:./FreeRtos/src/tasks.c **** TCB_t *pxTCB;
2184:./FreeRtos/src/tasks.c **** 
2185:./FreeRtos/src/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:./FreeRtos/src/tasks.c **** 	queried. */
2187:./FreeRtos/src/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:./FreeRtos/src/tasks.c **** 	configASSERT( pxTCB );
2189:./FreeRtos/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:./FreeRtos/src/tasks.c **** }
2191:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2192:./FreeRtos/src/tasks.c **** 
2193:./FreeRtos/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:./FreeRtos/src/tasks.c **** 
2195:./FreeRtos/src/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:./FreeRtos/src/tasks.c **** 	{
2197:./FreeRtos/src/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
ARM GAS  /tmp/ccQvkfbu.s 			page 40


2198:./FreeRtos/src/tasks.c **** 	UBaseType_t x;
2199:./FreeRtos/src/tasks.c **** 	char cNextChar;
2200:./FreeRtos/src/tasks.c **** 
2201:./FreeRtos/src/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:./FreeRtos/src/tasks.c **** 
2203:./FreeRtos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:./FreeRtos/src/tasks.c **** 		{
2205:./FreeRtos/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:./FreeRtos/src/tasks.c **** 
2207:./FreeRtos/src/tasks.c **** 			do
2208:./FreeRtos/src/tasks.c **** 			{
2209:./FreeRtos/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:./FreeRtos/src/tasks.c **** 
2211:./FreeRtos/src/tasks.c **** 				/* Check each character in the name looking for a match or
2212:./FreeRtos/src/tasks.c **** 				mismatch. */
2213:./FreeRtos/src/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:./FreeRtos/src/tasks.c **** 				{
2215:./FreeRtos/src/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:./FreeRtos/src/tasks.c **** 
2217:./FreeRtos/src/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:./FreeRtos/src/tasks.c **** 					{
2219:./FreeRtos/src/tasks.c **** 						/* Characters didn't match. */
2220:./FreeRtos/src/tasks.c **** 						break;
2221:./FreeRtos/src/tasks.c **** 					}
2222:./FreeRtos/src/tasks.c **** 					else if( cNextChar == 0x00 )
2223:./FreeRtos/src/tasks.c **** 					{
2224:./FreeRtos/src/tasks.c **** 						/* Both strings terminated, a match must have been
2225:./FreeRtos/src/tasks.c **** 						found. */
2226:./FreeRtos/src/tasks.c **** 						pxReturn = pxNextTCB;
2227:./FreeRtos/src/tasks.c **** 						break;
2228:./FreeRtos/src/tasks.c **** 					}
2229:./FreeRtos/src/tasks.c **** 					else
2230:./FreeRtos/src/tasks.c **** 					{
2231:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:./FreeRtos/src/tasks.c **** 					}
2233:./FreeRtos/src/tasks.c **** 				}
2234:./FreeRtos/src/tasks.c **** 
2235:./FreeRtos/src/tasks.c **** 				if( pxReturn != NULL )
2236:./FreeRtos/src/tasks.c **** 				{
2237:./FreeRtos/src/tasks.c **** 					/* The handle has been found. */
2238:./FreeRtos/src/tasks.c **** 					break;
2239:./FreeRtos/src/tasks.c **** 				}
2240:./FreeRtos/src/tasks.c **** 
2241:./FreeRtos/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:./FreeRtos/src/tasks.c **** 		}
2243:./FreeRtos/src/tasks.c **** 		else
2244:./FreeRtos/src/tasks.c **** 		{
2245:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:./FreeRtos/src/tasks.c **** 		}
2247:./FreeRtos/src/tasks.c **** 
2248:./FreeRtos/src/tasks.c **** 		return pxReturn;
2249:./FreeRtos/src/tasks.c **** 	}
2250:./FreeRtos/src/tasks.c **** 
2251:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2253:./FreeRtos/src/tasks.c **** 
2254:./FreeRtos/src/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
ARM GAS  /tmp/ccQvkfbu.s 			page 41


2255:./FreeRtos/src/tasks.c **** 
2256:./FreeRtos/src/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:./FreeRtos/src/tasks.c **** 	{
2258:./FreeRtos/src/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:./FreeRtos/src/tasks.c **** 	TCB_t* pxTCB;
2260:./FreeRtos/src/tasks.c **** 
2261:./FreeRtos/src/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:./FreeRtos/src/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:./FreeRtos/src/tasks.c **** 
2264:./FreeRtos/src/tasks.c **** 		vTaskSuspendAll();
2265:./FreeRtos/src/tasks.c **** 		{
2266:./FreeRtos/src/tasks.c **** 			/* Search the ready lists. */
2267:./FreeRtos/src/tasks.c **** 			do
2268:./FreeRtos/src/tasks.c **** 			{
2269:./FreeRtos/src/tasks.c **** 				uxQueue--;
2270:./FreeRtos/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:./FreeRtos/src/tasks.c **** 
2272:./FreeRtos/src/tasks.c **** 				if( pxTCB != NULL )
2273:./FreeRtos/src/tasks.c **** 				{
2274:./FreeRtos/src/tasks.c **** 					/* Found the handle. */
2275:./FreeRtos/src/tasks.c **** 					break;
2276:./FreeRtos/src/tasks.c **** 				}
2277:./FreeRtos/src/tasks.c **** 
2278:./FreeRtos/src/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:./FreeRtos/src/tasks.c **** 
2280:./FreeRtos/src/tasks.c **** 			/* Search the delayed lists. */
2281:./FreeRtos/src/tasks.c **** 			if( pxTCB == NULL )
2282:./FreeRtos/src/tasks.c **** 			{
2283:./FreeRtos/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:./FreeRtos/src/tasks.c **** 			}
2285:./FreeRtos/src/tasks.c **** 
2286:./FreeRtos/src/tasks.c **** 			if( pxTCB == NULL )
2287:./FreeRtos/src/tasks.c **** 			{
2288:./FreeRtos/src/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:./FreeRtos/src/tasks.c **** 			}
2290:./FreeRtos/src/tasks.c **** 
2291:./FreeRtos/src/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:./FreeRtos/src/tasks.c **** 			{
2293:./FreeRtos/src/tasks.c **** 				if( pxTCB == NULL )
2294:./FreeRtos/src/tasks.c **** 				{
2295:./FreeRtos/src/tasks.c **** 					/* Search the suspended list. */
2296:./FreeRtos/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:./FreeRtos/src/tasks.c **** 				}
2298:./FreeRtos/src/tasks.c **** 			}
2299:./FreeRtos/src/tasks.c **** 			#endif
2300:./FreeRtos/src/tasks.c **** 
2301:./FreeRtos/src/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:./FreeRtos/src/tasks.c **** 			{
2303:./FreeRtos/src/tasks.c **** 				if( pxTCB == NULL )
2304:./FreeRtos/src/tasks.c **** 				{
2305:./FreeRtos/src/tasks.c **** 					/* Search the deleted list. */
2306:./FreeRtos/src/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:./FreeRtos/src/tasks.c **** 				}
2308:./FreeRtos/src/tasks.c **** 			}
2309:./FreeRtos/src/tasks.c **** 			#endif
2310:./FreeRtos/src/tasks.c **** 		}
2311:./FreeRtos/src/tasks.c **** 		( void ) xTaskResumeAll();
ARM GAS  /tmp/ccQvkfbu.s 			page 42


2312:./FreeRtos/src/tasks.c **** 
2313:./FreeRtos/src/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:./FreeRtos/src/tasks.c **** 	}
2315:./FreeRtos/src/tasks.c **** 
2316:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2318:./FreeRtos/src/tasks.c **** 
2319:./FreeRtos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:./FreeRtos/src/tasks.c **** 
2321:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:./FreeRtos/src/tasks.c **** 	{
2323:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:./FreeRtos/src/tasks.c **** 
2325:./FreeRtos/src/tasks.c **** 		vTaskSuspendAll();
2326:./FreeRtos/src/tasks.c **** 		{
2327:./FreeRtos/src/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:./FreeRtos/src/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:./FreeRtos/src/tasks.c **** 			{
2330:./FreeRtos/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2331:./FreeRtos/src/tasks.c **** 				task in the Ready state. */
2332:./FreeRtos/src/tasks.c **** 				do
2333:./FreeRtos/src/tasks.c **** 				{
2334:./FreeRtos/src/tasks.c **** 					uxQueue--;
2335:./FreeRtos/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:./FreeRtos/src/tasks.c **** 
2337:./FreeRtos/src/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:./FreeRtos/src/tasks.c **** 
2339:./FreeRtos/src/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:./FreeRtos/src/tasks.c **** 				task in the Blocked state. */
2341:./FreeRtos/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:./FreeRtos/src/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:./FreeRtos/src/tasks.c **** 
2344:./FreeRtos/src/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:./FreeRtos/src/tasks.c **** 				{
2346:./FreeRtos/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:./FreeRtos/src/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:./FreeRtos/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:./FreeRtos/src/tasks.c **** 				}
2350:./FreeRtos/src/tasks.c **** 				#endif
2351:./FreeRtos/src/tasks.c **** 
2352:./FreeRtos/src/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:./FreeRtos/src/tasks.c **** 				{
2354:./FreeRtos/src/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:./FreeRtos/src/tasks.c **** 					each task in the Suspended state. */
2356:./FreeRtos/src/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:./FreeRtos/src/tasks.c **** 				}
2358:./FreeRtos/src/tasks.c **** 				#endif
2359:./FreeRtos/src/tasks.c **** 
2360:./FreeRtos/src/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:./FreeRtos/src/tasks.c **** 				{
2362:./FreeRtos/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:./FreeRtos/src/tasks.c **** 					{
2364:./FreeRtos/src/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:./FreeRtos/src/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:./FreeRtos/src/tasks.c **** 						#else
2367:./FreeRtos/src/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:./FreeRtos/src/tasks.c **** 						#endif
ARM GAS  /tmp/ccQvkfbu.s 			page 43


2369:./FreeRtos/src/tasks.c **** 					}
2370:./FreeRtos/src/tasks.c **** 				}
2371:./FreeRtos/src/tasks.c **** 				#else
2372:./FreeRtos/src/tasks.c **** 				{
2373:./FreeRtos/src/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:./FreeRtos/src/tasks.c **** 					{
2375:./FreeRtos/src/tasks.c **** 						*pulTotalRunTime = 0;
2376:./FreeRtos/src/tasks.c **** 					}
2377:./FreeRtos/src/tasks.c **** 				}
2378:./FreeRtos/src/tasks.c **** 				#endif
2379:./FreeRtos/src/tasks.c **** 			}
2380:./FreeRtos/src/tasks.c **** 			else
2381:./FreeRtos/src/tasks.c **** 			{
2382:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:./FreeRtos/src/tasks.c **** 			}
2384:./FreeRtos/src/tasks.c **** 		}
2385:./FreeRtos/src/tasks.c **** 		( void ) xTaskResumeAll();
2386:./FreeRtos/src/tasks.c **** 
2387:./FreeRtos/src/tasks.c **** 		return uxTask;
2388:./FreeRtos/src/tasks.c **** 	}
2389:./FreeRtos/src/tasks.c **** 
2390:./FreeRtos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
2392:./FreeRtos/src/tasks.c **** 
2393:./FreeRtos/src/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:./FreeRtos/src/tasks.c **** 
2395:./FreeRtos/src/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:./FreeRtos/src/tasks.c **** 	{
2397:./FreeRtos/src/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:./FreeRtos/src/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:./FreeRtos/src/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:./FreeRtos/src/tasks.c **** 		return xIdleTaskHandle;
2401:./FreeRtos/src/tasks.c **** 	}
2402:./FreeRtos/src/tasks.c **** 
2403:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
2405:./FreeRtos/src/tasks.c **** 
2406:./FreeRtos/src/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:./FreeRtos/src/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:./FreeRtos/src/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:./FreeRtos/src/tasks.c **** 1. */
2410:./FreeRtos/src/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:./FreeRtos/src/tasks.c **** 
2412:./FreeRtos/src/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:./FreeRtos/src/tasks.c **** 	{
2414:./FreeRtos/src/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:./FreeRtos/src/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:./FreeRtos/src/tasks.c **** 		each stepped tick. */
2417:./FreeRtos/src/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:./FreeRtos/src/tasks.c **** 		xTickCount += xTicksToJump;
2419:./FreeRtos/src/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:./FreeRtos/src/tasks.c **** 	}
2421:./FreeRtos/src/tasks.c **** 
2422:./FreeRtos/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
2424:./FreeRtos/src/tasks.c **** 
2425:./FreeRtos/src/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
ARM GAS  /tmp/ccQvkfbu.s 			page 44


2426:./FreeRtos/src/tasks.c **** 
2427:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:./FreeRtos/src/tasks.c **** 	{
2429:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:./FreeRtos/src/tasks.c **** 
2432:./FreeRtos/src/tasks.c **** 		configASSERT( pxTCB );
2433:./FreeRtos/src/tasks.c **** 
2434:./FreeRtos/src/tasks.c **** 		vTaskSuspendAll();
2435:./FreeRtos/src/tasks.c **** 		{
2436:./FreeRtos/src/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:./FreeRtos/src/tasks.c **** 			it is actually in the Blocked state. */
2438:./FreeRtos/src/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:./FreeRtos/src/tasks.c **** 			{
2440:./FreeRtos/src/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:./FreeRtos/src/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:./FreeRtos/src/tasks.c **** 				scheduler is suspended. */
2443:./FreeRtos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:./FreeRtos/src/tasks.c **** 
2445:./FreeRtos/src/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:./FreeRtos/src/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:./FreeRtos/src/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:./FreeRtos/src/tasks.c **** 				is used. */
2449:./FreeRtos/src/tasks.c **** 				taskENTER_CRITICAL();
2450:./FreeRtos/src/tasks.c **** 				{
2451:./FreeRtos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:./FreeRtos/src/tasks.c **** 					{
2453:./FreeRtos/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:./FreeRtos/src/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:./FreeRtos/src/tasks.c **** 					}
2456:./FreeRtos/src/tasks.c **** 					else
2457:./FreeRtos/src/tasks.c **** 					{
2458:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:./FreeRtos/src/tasks.c **** 					}
2460:./FreeRtos/src/tasks.c **** 				}
2461:./FreeRtos/src/tasks.c **** 				taskEXIT_CRITICAL();
2462:./FreeRtos/src/tasks.c **** 
2463:./FreeRtos/src/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:./FreeRtos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:./FreeRtos/src/tasks.c **** 
2466:./FreeRtos/src/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:./FreeRtos/src/tasks.c **** 				switch if preemption is turned off. */
2468:./FreeRtos/src/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:./FreeRtos/src/tasks.c **** 				{
2470:./FreeRtos/src/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:./FreeRtos/src/tasks.c **** 					performed if the unblocked task has a priority that is
2472:./FreeRtos/src/tasks.c **** 					equal to or higher than the currently executing task. */
2473:./FreeRtos/src/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:./FreeRtos/src/tasks.c **** 					{
2475:./FreeRtos/src/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:./FreeRtos/src/tasks.c **** 						is unsuspended. */
2477:./FreeRtos/src/tasks.c **** 						xYieldPending = pdTRUE;
2478:./FreeRtos/src/tasks.c **** 					}
2479:./FreeRtos/src/tasks.c **** 					else
2480:./FreeRtos/src/tasks.c **** 					{
2481:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:./FreeRtos/src/tasks.c **** 					}
ARM GAS  /tmp/ccQvkfbu.s 			page 45


2483:./FreeRtos/src/tasks.c **** 				}
2484:./FreeRtos/src/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:./FreeRtos/src/tasks.c **** 			}
2486:./FreeRtos/src/tasks.c **** 			else
2487:./FreeRtos/src/tasks.c **** 			{
2488:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:./FreeRtos/src/tasks.c **** 			}
2490:./FreeRtos/src/tasks.c **** 		}
2491:./FreeRtos/src/tasks.c **** 		xTaskResumeAll();
2492:./FreeRtos/src/tasks.c **** 
2493:./FreeRtos/src/tasks.c **** 		return xReturn;
2494:./FreeRtos/src/tasks.c **** 	}
2495:./FreeRtos/src/tasks.c **** 
2496:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
2498:./FreeRtos/src/tasks.c **** 
2499:./FreeRtos/src/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:./FreeRtos/src/tasks.c **** {
2501:./FreeRtos/src/tasks.c **** TCB_t * pxTCB;
2502:./FreeRtos/src/tasks.c **** TickType_t xItemValue;
2503:./FreeRtos/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:./FreeRtos/src/tasks.c **** 
2505:./FreeRtos/src/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:./FreeRtos/src/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:./FreeRtos/src/tasks.c **** 	tasks to be unblocked. */
2508:./FreeRtos/src/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:./FreeRtos/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:./FreeRtos/src/tasks.c **** 	{
2511:./FreeRtos/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:./FreeRtos/src/tasks.c **** 		block. */
2513:./FreeRtos/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:./FreeRtos/src/tasks.c **** 
2515:./FreeRtos/src/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:./FreeRtos/src/tasks.c **** 		delayed lists if it wraps to 0. */
2517:./FreeRtos/src/tasks.c **** 		xTickCount = xConstTickCount;
2518:./FreeRtos/src/tasks.c **** 
2519:./FreeRtos/src/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:./FreeRtos/src/tasks.c **** 		{
2521:./FreeRtos/src/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:./FreeRtos/src/tasks.c **** 		}
2523:./FreeRtos/src/tasks.c **** 		else
2524:./FreeRtos/src/tasks.c **** 		{
2525:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:./FreeRtos/src/tasks.c **** 		}
2527:./FreeRtos/src/tasks.c **** 
2528:./FreeRtos/src/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:./FreeRtos/src/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:./FreeRtos/src/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:./FreeRtos/src/tasks.c **** 		look any further down the list. */
2532:./FreeRtos/src/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:./FreeRtos/src/tasks.c **** 		{
2534:./FreeRtos/src/tasks.c **** 			for( ;; )
2535:./FreeRtos/src/tasks.c **** 			{
2536:./FreeRtos/src/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:./FreeRtos/src/tasks.c **** 				{
2538:./FreeRtos/src/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:./FreeRtos/src/tasks.c **** 					to the maximum possible value so it is extremely
ARM GAS  /tmp/ccQvkfbu.s 			page 46


2540:./FreeRtos/src/tasks.c **** 					unlikely that the
2541:./FreeRtos/src/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:./FreeRtos/src/tasks.c **** 					next time through. */
2543:./FreeRtos/src/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:./FreeRtos/src/tasks.c **** 					break;
2545:./FreeRtos/src/tasks.c **** 				}
2546:./FreeRtos/src/tasks.c **** 				else
2547:./FreeRtos/src/tasks.c **** 				{
2548:./FreeRtos/src/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:./FreeRtos/src/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:./FreeRtos/src/tasks.c **** 					at which the task at the head of the delayed list must
2551:./FreeRtos/src/tasks.c **** 					be removed from the Blocked state. */
2552:./FreeRtos/src/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:./FreeRtos/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:./FreeRtos/src/tasks.c **** 
2555:./FreeRtos/src/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:./FreeRtos/src/tasks.c **** 					{
2557:./FreeRtos/src/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:./FreeRtos/src/tasks.c **** 						item value is the time at which the task at the head
2559:./FreeRtos/src/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:./FreeRtos/src/tasks.c **** 						state -	so record the item value in
2561:./FreeRtos/src/tasks.c **** 						xNextTaskUnblockTime. */
2562:./FreeRtos/src/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:./FreeRtos/src/tasks.c **** 						break;
2564:./FreeRtos/src/tasks.c **** 					}
2565:./FreeRtos/src/tasks.c **** 					else
2566:./FreeRtos/src/tasks.c **** 					{
2567:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:./FreeRtos/src/tasks.c **** 					}
2569:./FreeRtos/src/tasks.c **** 
2570:./FreeRtos/src/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:./FreeRtos/src/tasks.c **** 
2573:./FreeRtos/src/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:./FreeRtos/src/tasks.c **** 					it from the event list. */
2575:./FreeRtos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:./FreeRtos/src/tasks.c **** 					{
2577:./FreeRtos/src/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:./FreeRtos/src/tasks.c **** 					}
2579:./FreeRtos/src/tasks.c **** 					else
2580:./FreeRtos/src/tasks.c **** 					{
2581:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:./FreeRtos/src/tasks.c **** 					}
2583:./FreeRtos/src/tasks.c **** 
2584:./FreeRtos/src/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:./FreeRtos/src/tasks.c **** 					list. */
2586:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:./FreeRtos/src/tasks.c **** 
2588:./FreeRtos/src/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:./FreeRtos/src/tasks.c **** 					context switch if preemption is turned off. */
2590:./FreeRtos/src/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:./FreeRtos/src/tasks.c **** 					{
2592:./FreeRtos/src/tasks.c **** 						/* Preemption is on, but a context switch should
2593:./FreeRtos/src/tasks.c **** 						only be performed if the unblocked task has a
2594:./FreeRtos/src/tasks.c **** 						priority that is equal to or higher than the
2595:./FreeRtos/src/tasks.c **** 						currently executing task. */
2596:./FreeRtos/src/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccQvkfbu.s 			page 47


2597:./FreeRtos/src/tasks.c **** 						{
2598:./FreeRtos/src/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:./FreeRtos/src/tasks.c **** 						}
2600:./FreeRtos/src/tasks.c **** 						else
2601:./FreeRtos/src/tasks.c **** 						{
2602:./FreeRtos/src/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:./FreeRtos/src/tasks.c **** 						}
2604:./FreeRtos/src/tasks.c **** 					}
2605:./FreeRtos/src/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:./FreeRtos/src/tasks.c **** 				}
2607:./FreeRtos/src/tasks.c **** 			}
2608:./FreeRtos/src/tasks.c **** 		}
2609:./FreeRtos/src/tasks.c **** 
2610:./FreeRtos/src/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:./FreeRtos/src/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:./FreeRtos/src/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:./FreeRtos/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:./FreeRtos/src/tasks.c **** 		{
2615:./FreeRtos/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2616:./FreeRtos/src/tasks.c **** 			{
2617:./FreeRtos/src/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:./FreeRtos/src/tasks.c **** 			}
2619:./FreeRtos/src/tasks.c **** 			else
2620:./FreeRtos/src/tasks.c **** 			{
2621:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:./FreeRtos/src/tasks.c **** 			}
2623:./FreeRtos/src/tasks.c **** 		}
2624:./FreeRtos/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:./FreeRtos/src/tasks.c **** 
2626:./FreeRtos/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:./FreeRtos/src/tasks.c **** 		{
2628:./FreeRtos/src/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:./FreeRtos/src/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:./FreeRtos/src/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:./FreeRtos/src/tasks.c **** 			{
2632:./FreeRtos/src/tasks.c **** 				vApplicationTickHook();
2633:./FreeRtos/src/tasks.c **** 			}
2634:./FreeRtos/src/tasks.c **** 			else
2635:./FreeRtos/src/tasks.c **** 			{
2636:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:./FreeRtos/src/tasks.c **** 			}
2638:./FreeRtos/src/tasks.c **** 		}
2639:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:./FreeRtos/src/tasks.c **** 	}
2641:./FreeRtos/src/tasks.c **** 	else
2642:./FreeRtos/src/tasks.c **** 	{
2643:./FreeRtos/src/tasks.c **** 		++uxPendedTicks;
2644:./FreeRtos/src/tasks.c **** 
2645:./FreeRtos/src/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:./FreeRtos/src/tasks.c **** 		scheduler is locked. */
2647:./FreeRtos/src/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:./FreeRtos/src/tasks.c **** 		{
2649:./FreeRtos/src/tasks.c **** 			vApplicationTickHook();
2650:./FreeRtos/src/tasks.c **** 		}
2651:./FreeRtos/src/tasks.c **** 		#endif
2652:./FreeRtos/src/tasks.c **** 	}
2653:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 48


2654:./FreeRtos/src/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:./FreeRtos/src/tasks.c **** 	{
2656:./FreeRtos/src/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:./FreeRtos/src/tasks.c **** 		{
2658:./FreeRtos/src/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:./FreeRtos/src/tasks.c **** 		}
2660:./FreeRtos/src/tasks.c **** 		else
2661:./FreeRtos/src/tasks.c **** 		{
2662:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:./FreeRtos/src/tasks.c **** 		}
2664:./FreeRtos/src/tasks.c **** 	}
2665:./FreeRtos/src/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:./FreeRtos/src/tasks.c **** 
2667:./FreeRtos/src/tasks.c **** 	return xSwitchRequired;
2668:./FreeRtos/src/tasks.c **** }
2669:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2670:./FreeRtos/src/tasks.c **** 
2671:./FreeRtos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:./FreeRtos/src/tasks.c **** 
2673:./FreeRtos/src/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:./FreeRtos/src/tasks.c **** 	{
2675:./FreeRtos/src/tasks.c **** 	TCB_t *xTCB;
2676:./FreeRtos/src/tasks.c **** 
2677:./FreeRtos/src/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:./FreeRtos/src/tasks.c **** 		getting set. */
2679:./FreeRtos/src/tasks.c **** 		if( xTask == NULL )
2680:./FreeRtos/src/tasks.c **** 		{
2681:./FreeRtos/src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:./FreeRtos/src/tasks.c **** 		}
2683:./FreeRtos/src/tasks.c **** 		else
2684:./FreeRtos/src/tasks.c **** 		{
2685:./FreeRtos/src/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:./FreeRtos/src/tasks.c **** 		}
2687:./FreeRtos/src/tasks.c **** 
2688:./FreeRtos/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:./FreeRtos/src/tasks.c **** 		the value can be accessed from an interrupt. */
2690:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
2691:./FreeRtos/src/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
2693:./FreeRtos/src/tasks.c **** 	}
2694:./FreeRtos/src/tasks.c **** 
2695:./FreeRtos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2697:./FreeRtos/src/tasks.c **** 
2698:./FreeRtos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:./FreeRtos/src/tasks.c **** 
2700:./FreeRtos/src/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:./FreeRtos/src/tasks.c **** 	{
2702:./FreeRtos/src/tasks.c **** 	TCB_t *xTCB;
2703:./FreeRtos/src/tasks.c **** 	TaskHookFunction_t xReturn;
2704:./FreeRtos/src/tasks.c **** 
2705:./FreeRtos/src/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:./FreeRtos/src/tasks.c **** 		if( xTask == NULL )
2707:./FreeRtos/src/tasks.c **** 		{
2708:./FreeRtos/src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:./FreeRtos/src/tasks.c **** 		}
2710:./FreeRtos/src/tasks.c **** 		else
ARM GAS  /tmp/ccQvkfbu.s 			page 49


2711:./FreeRtos/src/tasks.c **** 		{
2712:./FreeRtos/src/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:./FreeRtos/src/tasks.c **** 		}
2714:./FreeRtos/src/tasks.c **** 
2715:./FreeRtos/src/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:./FreeRtos/src/tasks.c **** 		the value can be accessed from an interrupt. */
2717:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
2718:./FreeRtos/src/tasks.c **** 		{
2719:./FreeRtos/src/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:./FreeRtos/src/tasks.c **** 		}
2721:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
2722:./FreeRtos/src/tasks.c **** 
2723:./FreeRtos/src/tasks.c **** 		return xReturn;
2724:./FreeRtos/src/tasks.c **** 	}
2725:./FreeRtos/src/tasks.c **** 
2726:./FreeRtos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2728:./FreeRtos/src/tasks.c **** 
2729:./FreeRtos/src/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2730:./FreeRtos/src/tasks.c **** 
2731:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:./FreeRtos/src/tasks.c **** 	{
2733:./FreeRtos/src/tasks.c **** 	TCB_t *xTCB;
2734:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
2735:./FreeRtos/src/tasks.c **** 
2736:./FreeRtos/src/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:./FreeRtos/src/tasks.c **** 		if( xTask == NULL )
2738:./FreeRtos/src/tasks.c **** 		{
2739:./FreeRtos/src/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:./FreeRtos/src/tasks.c **** 		}
2741:./FreeRtos/src/tasks.c **** 		else
2742:./FreeRtos/src/tasks.c **** 		{
2743:./FreeRtos/src/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:./FreeRtos/src/tasks.c **** 		}
2745:./FreeRtos/src/tasks.c **** 
2746:./FreeRtos/src/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:./FreeRtos/src/tasks.c **** 		{
2748:./FreeRtos/src/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:./FreeRtos/src/tasks.c **** 		}
2750:./FreeRtos/src/tasks.c **** 		else
2751:./FreeRtos/src/tasks.c **** 		{
2752:./FreeRtos/src/tasks.c **** 			xReturn = pdFAIL;
2753:./FreeRtos/src/tasks.c **** 		}
2754:./FreeRtos/src/tasks.c **** 
2755:./FreeRtos/src/tasks.c **** 		return xReturn;
2756:./FreeRtos/src/tasks.c **** 	}
2757:./FreeRtos/src/tasks.c **** 
2758:./FreeRtos/src/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2760:./FreeRtos/src/tasks.c **** 
2761:./FreeRtos/src/tasks.c **** void vTaskSwitchContext( void )
2762:./FreeRtos/src/tasks.c **** {
2763:./FreeRtos/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:./FreeRtos/src/tasks.c **** 	{
2765:./FreeRtos/src/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:./FreeRtos/src/tasks.c **** 		switch. */
2767:./FreeRtos/src/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  /tmp/ccQvkfbu.s 			page 50


2768:./FreeRtos/src/tasks.c **** 	}
2769:./FreeRtos/src/tasks.c **** 	else
2770:./FreeRtos/src/tasks.c **** 	{
2771:./FreeRtos/src/tasks.c **** 		xYieldPending = pdFALSE;
2772:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:./FreeRtos/src/tasks.c **** 
2774:./FreeRtos/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:./FreeRtos/src/tasks.c **** 		{
2776:./FreeRtos/src/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:./FreeRtos/src/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:./FreeRtos/src/tasks.c **** 				#else
2779:./FreeRtos/src/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:./FreeRtos/src/tasks.c **** 				#endif
2781:./FreeRtos/src/tasks.c **** 
2782:./FreeRtos/src/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:./FreeRtos/src/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:./FreeRtos/src/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:./FreeRtos/src/tasks.c **** 				protection here so count values are only valid until the timer
2786:./FreeRtos/src/tasks.c **** 				overflows.  The guard against negative values is to protect
2787:./FreeRtos/src/tasks.c **** 				against suspect run time stat counter implementations - which
2788:./FreeRtos/src/tasks.c **** 				are provided by the application, not the kernel. */
2789:./FreeRtos/src/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:./FreeRtos/src/tasks.c **** 				{
2791:./FreeRtos/src/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:./FreeRtos/src/tasks.c **** 				}
2793:./FreeRtos/src/tasks.c **** 				else
2794:./FreeRtos/src/tasks.c **** 				{
2795:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:./FreeRtos/src/tasks.c **** 				}
2797:./FreeRtos/src/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:./FreeRtos/src/tasks.c **** 		}
2799:./FreeRtos/src/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:./FreeRtos/src/tasks.c **** 
2801:./FreeRtos/src/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:./FreeRtos/src/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:./FreeRtos/src/tasks.c **** 
2804:./FreeRtos/src/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:./FreeRtos/src/tasks.c **** 		optimised asm code. */
2806:./FreeRtos/src/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:./FreeRtos/src/tasks.c **** 
2809:./FreeRtos/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:./FreeRtos/src/tasks.c **** 		{
2811:./FreeRtos/src/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:./FreeRtos/src/tasks.c **** 			structure specific to this task. */
2813:./FreeRtos/src/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:./FreeRtos/src/tasks.c **** 		}
2815:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:./FreeRtos/src/tasks.c **** 	}
2817:./FreeRtos/src/tasks.c **** }
2818:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2819:./FreeRtos/src/tasks.c **** 
2820:./FreeRtos/src/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:./FreeRtos/src/tasks.c **** {
2822:./FreeRtos/src/tasks.c **** 	configASSERT( pxEventList );
2823:./FreeRtos/src/tasks.c **** 
2824:./FreeRtos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
ARM GAS  /tmp/ccQvkfbu.s 			page 51


2825:./FreeRtos/src/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:./FreeRtos/src/tasks.c **** 
2827:./FreeRtos/src/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:./FreeRtos/src/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:./FreeRtos/src/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:./FreeRtos/src/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:./FreeRtos/src/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:./FreeRtos/src/tasks.c **** 
2833:./FreeRtos/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:./FreeRtos/src/tasks.c **** }
2835:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2836:./FreeRtos/src/tasks.c **** 
2837:./FreeRtos/src/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:./FreeRtos/src/tasks.c **** {
2839:./FreeRtos/src/tasks.c **** 	configASSERT( pxEventList );
2840:./FreeRtos/src/tasks.c **** 
2841:./FreeRtos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:./FreeRtos/src/tasks.c **** 	the event groups implementation. */
2843:./FreeRtos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2844:./FreeRtos/src/tasks.c **** 
2845:./FreeRtos/src/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:./FreeRtos/src/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:./FreeRtos/src/tasks.c **** 	task that is not in the Blocked state. */
2848:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:./FreeRtos/src/tasks.c **** 
2850:./FreeRtos/src/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:./FreeRtos/src/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:./FreeRtos/src/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:./FreeRtos/src/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:./FreeRtos/src/tasks.c **** 	the task level). */
2855:./FreeRtos/src/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:./FreeRtos/src/tasks.c **** 
2857:./FreeRtos/src/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:./FreeRtos/src/tasks.c **** }
2859:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2860:./FreeRtos/src/tasks.c **** 
2861:./FreeRtos/src/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:./FreeRtos/src/tasks.c **** 
2863:./FreeRtos/src/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:./FreeRtos/src/tasks.c **** 	{
2865:./FreeRtos/src/tasks.c **** 		configASSERT( pxEventList );
2866:./FreeRtos/src/tasks.c **** 
2867:./FreeRtos/src/tasks.c **** 		/* This function should not be called by application code hence the
2868:./FreeRtos/src/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:./FreeRtos/src/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:./FreeRtos/src/tasks.c **** 		it should be called with the scheduler suspended. */
2871:./FreeRtos/src/tasks.c **** 
2872:./FreeRtos/src/tasks.c **** 
2873:./FreeRtos/src/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:./FreeRtos/src/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:./FreeRtos/src/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:./FreeRtos/src/tasks.c **** 		can be used in place of vListInsert. */
2877:./FreeRtos/src/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:./FreeRtos/src/tasks.c **** 
2879:./FreeRtos/src/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:./FreeRtos/src/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:./FreeRtos/src/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
ARM GAS  /tmp/ccQvkfbu.s 			page 52


2882:./FreeRtos/src/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:./FreeRtos/src/tasks.c **** 		{
2884:./FreeRtos/src/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:./FreeRtos/src/tasks.c **** 		}
2886:./FreeRtos/src/tasks.c **** 
2887:./FreeRtos/src/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:./FreeRtos/src/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:./FreeRtos/src/tasks.c **** 	}
2890:./FreeRtos/src/tasks.c **** 
2891:./FreeRtos/src/tasks.c **** #endif /* configUSE_TIMERS */
2892:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2893:./FreeRtos/src/tasks.c **** 
2894:./FreeRtos/src/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:./FreeRtos/src/tasks.c **** {
2896:./FreeRtos/src/tasks.c **** TCB_t *pxUnblockedTCB;
2897:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
2898:./FreeRtos/src/tasks.c **** 
2899:./FreeRtos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:./FreeRtos/src/tasks.c **** 	called from a critical section within an ISR. */
2901:./FreeRtos/src/tasks.c **** 
2902:./FreeRtos/src/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:./FreeRtos/src/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:./FreeRtos/src/tasks.c **** 	the delayed list, and add it to the ready list.
2905:./FreeRtos/src/tasks.c **** 
2906:./FreeRtos/src/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:./FreeRtos/src/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:./FreeRtos/src/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:./FreeRtos/src/tasks.c **** 
2910:./FreeRtos/src/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:./FreeRtos/src/tasks.c **** 	pxEventList is not empty. */
2912:./FreeRtos/src/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:./FreeRtos/src/tasks.c **** 
2916:./FreeRtos/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:./FreeRtos/src/tasks.c **** 	{
2918:./FreeRtos/src/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:./FreeRtos/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:./FreeRtos/src/tasks.c **** 	}
2921:./FreeRtos/src/tasks.c **** 	else
2922:./FreeRtos/src/tasks.c **** 	{
2923:./FreeRtos/src/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:./FreeRtos/src/tasks.c **** 		pending until the scheduler is resumed. */
2925:./FreeRtos/src/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:./FreeRtos/src/tasks.c **** 	}
2927:./FreeRtos/src/tasks.c **** 
2928:./FreeRtos/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:./FreeRtos/src/tasks.c **** 	{
2930:./FreeRtos/src/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:./FreeRtos/src/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:./FreeRtos/src/tasks.c **** 		it should force a context switch now. */
2933:./FreeRtos/src/tasks.c **** 		xReturn = pdTRUE;
2934:./FreeRtos/src/tasks.c **** 
2935:./FreeRtos/src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:./FreeRtos/src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:./FreeRtos/src/tasks.c **** 		xYieldPending = pdTRUE;
2938:./FreeRtos/src/tasks.c **** 	}
ARM GAS  /tmp/ccQvkfbu.s 			page 53


2939:./FreeRtos/src/tasks.c **** 	else
2940:./FreeRtos/src/tasks.c **** 	{
2941:./FreeRtos/src/tasks.c **** 		xReturn = pdFALSE;
2942:./FreeRtos/src/tasks.c **** 	}
2943:./FreeRtos/src/tasks.c **** 
2944:./FreeRtos/src/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:./FreeRtos/src/tasks.c **** 	{
2946:./FreeRtos/src/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:./FreeRtos/src/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:./FreeRtos/src/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:./FreeRtos/src/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:./FreeRtos/src/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:./FreeRtos/src/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:./FreeRtos/src/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:./FreeRtos/src/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:./FreeRtos/src/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:./FreeRtos/src/tasks.c **** 	}
2956:./FreeRtos/src/tasks.c **** 	#endif
2957:./FreeRtos/src/tasks.c **** 
2958:./FreeRtos/src/tasks.c **** 	return xReturn;
2959:./FreeRtos/src/tasks.c **** }
2960:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
2961:./FreeRtos/src/tasks.c **** 
2962:./FreeRtos/src/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:./FreeRtos/src/tasks.c **** {
2964:./FreeRtos/src/tasks.c **** TCB_t *pxUnblockedTCB;
2965:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
2966:./FreeRtos/src/tasks.c **** 
2967:./FreeRtos/src/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:./FreeRtos/src/tasks.c **** 	the event flags implementation. */
2969:./FreeRtos/src/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:./FreeRtos/src/tasks.c **** 
2971:./FreeRtos/src/tasks.c **** 	/* Store the new item value in the event list. */
2972:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:./FreeRtos/src/tasks.c **** 
2974:./FreeRtos/src/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:./FreeRtos/src/tasks.c **** 	event flags. */
2976:./FreeRtos/src/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:./FreeRtos/src/tasks.c **** 
2980:./FreeRtos/src/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:./FreeRtos/src/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:./FreeRtos/src/tasks.c **** 	lists. */
2983:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:./FreeRtos/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:./FreeRtos/src/tasks.c **** 
2986:./FreeRtos/src/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:./FreeRtos/src/tasks.c **** 	{
2988:./FreeRtos/src/tasks.c **** 		/* Return true if the task removed from the event list has
2989:./FreeRtos/src/tasks.c **** 		a higher priority than the calling task.  This allows
2990:./FreeRtos/src/tasks.c **** 		the calling task to know if it should force a context
2991:./FreeRtos/src/tasks.c **** 		switch now. */
2992:./FreeRtos/src/tasks.c **** 		xReturn = pdTRUE;
2993:./FreeRtos/src/tasks.c **** 
2994:./FreeRtos/src/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:./FreeRtos/src/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
ARM GAS  /tmp/ccQvkfbu.s 			page 54


2996:./FreeRtos/src/tasks.c **** 		xYieldPending = pdTRUE;
2997:./FreeRtos/src/tasks.c **** 	}
2998:./FreeRtos/src/tasks.c **** 	else
2999:./FreeRtos/src/tasks.c **** 	{
3000:./FreeRtos/src/tasks.c **** 		xReturn = pdFALSE;
3001:./FreeRtos/src/tasks.c **** 	}
3002:./FreeRtos/src/tasks.c **** 
3003:./FreeRtos/src/tasks.c **** 	return xReturn;
3004:./FreeRtos/src/tasks.c **** }
3005:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3006:./FreeRtos/src/tasks.c **** 
3007:./FreeRtos/src/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:./FreeRtos/src/tasks.c **** {
3009:./FreeRtos/src/tasks.c **** 	configASSERT( pxTimeOut );
3010:./FreeRtos/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:./FreeRtos/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:./FreeRtos/src/tasks.c **** }
3013:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3014:./FreeRtos/src/tasks.c **** 
3015:./FreeRtos/src/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:./FreeRtos/src/tasks.c **** {
3017:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
3018:./FreeRtos/src/tasks.c **** 
3019:./FreeRtos/src/tasks.c **** 	configASSERT( pxTimeOut );
3020:./FreeRtos/src/tasks.c **** 	configASSERT( pxTicksToWait );
3021:./FreeRtos/src/tasks.c **** 
3022:./FreeRtos/src/tasks.c **** 	taskENTER_CRITICAL();
3023:./FreeRtos/src/tasks.c **** 	{
3024:./FreeRtos/src/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:./FreeRtos/src/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:./FreeRtos/src/tasks.c **** 
3027:./FreeRtos/src/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:./FreeRtos/src/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:./FreeRtos/src/tasks.c **** 			{
3030:./FreeRtos/src/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:./FreeRtos/src/tasks.c **** 				but has the same result. */
3032:./FreeRtos/src/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:./FreeRtos/src/tasks.c **** 				xReturn = pdTRUE;
3034:./FreeRtos/src/tasks.c **** 			}
3035:./FreeRtos/src/tasks.c **** 			else
3036:./FreeRtos/src/tasks.c **** 		#endif
3037:./FreeRtos/src/tasks.c **** 
3038:./FreeRtos/src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:./FreeRtos/src/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:./FreeRtos/src/tasks.c **** 			{
3041:./FreeRtos/src/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:./FreeRtos/src/tasks.c **** 				specified is the maximum block time then the task should block
3043:./FreeRtos/src/tasks.c **** 				indefinitely, and therefore never time out. */
3044:./FreeRtos/src/tasks.c **** 				xReturn = pdFALSE;
3045:./FreeRtos/src/tasks.c **** 			}
3046:./FreeRtos/src/tasks.c **** 			else
3047:./FreeRtos/src/tasks.c **** 		#endif
3048:./FreeRtos/src/tasks.c **** 
3049:./FreeRtos/src/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:./FreeRtos/src/tasks.c **** 		{
3051:./FreeRtos/src/tasks.c **** 			/* The tick count is greater than the time at which
3052:./FreeRtos/src/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
ARM GAS  /tmp/ccQvkfbu.s 			page 55


3053:./FreeRtos/src/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:./FreeRtos/src/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:./FreeRtos/src/tasks.c **** 			was called. */
3056:./FreeRtos/src/tasks.c **** 			xReturn = pdTRUE;
3057:./FreeRtos/src/tasks.c **** 		}
3058:./FreeRtos/src/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:./FreeRtos/src/tasks.c **** 		{
3060:./FreeRtos/src/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:./FreeRtos/src/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:./FreeRtos/src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:./FreeRtos/src/tasks.c **** 			xReturn = pdFALSE;
3064:./FreeRtos/src/tasks.c **** 		}
3065:./FreeRtos/src/tasks.c **** 		else
3066:./FreeRtos/src/tasks.c **** 		{
3067:./FreeRtos/src/tasks.c **** 			xReturn = pdTRUE;
3068:./FreeRtos/src/tasks.c **** 		}
3069:./FreeRtos/src/tasks.c **** 	}
3070:./FreeRtos/src/tasks.c **** 	taskEXIT_CRITICAL();
3071:./FreeRtos/src/tasks.c **** 
3072:./FreeRtos/src/tasks.c **** 	return xReturn;
3073:./FreeRtos/src/tasks.c **** }
3074:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3075:./FreeRtos/src/tasks.c **** 
3076:./FreeRtos/src/tasks.c **** void vTaskMissedYield( void )
3077:./FreeRtos/src/tasks.c **** {
3078:./FreeRtos/src/tasks.c **** 	xYieldPending = pdTRUE;
3079:./FreeRtos/src/tasks.c **** }
3080:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3081:./FreeRtos/src/tasks.c **** 
3082:./FreeRtos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:./FreeRtos/src/tasks.c **** 
3084:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:./FreeRtos/src/tasks.c **** 	{
3086:./FreeRtos/src/tasks.c **** 	UBaseType_t uxReturn;
3087:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
3088:./FreeRtos/src/tasks.c **** 
3089:./FreeRtos/src/tasks.c **** 		if( xTask != NULL )
3090:./FreeRtos/src/tasks.c **** 		{
3091:./FreeRtos/src/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:./FreeRtos/src/tasks.c **** 		}
3094:./FreeRtos/src/tasks.c **** 		else
3095:./FreeRtos/src/tasks.c **** 		{
3096:./FreeRtos/src/tasks.c **** 			uxReturn = 0U;
3097:./FreeRtos/src/tasks.c **** 		}
3098:./FreeRtos/src/tasks.c **** 
3099:./FreeRtos/src/tasks.c **** 		return uxReturn;
3100:./FreeRtos/src/tasks.c **** 	}
3101:./FreeRtos/src/tasks.c **** 
3102:./FreeRtos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3104:./FreeRtos/src/tasks.c **** 
3105:./FreeRtos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:./FreeRtos/src/tasks.c **** 
3107:./FreeRtos/src/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:./FreeRtos/src/tasks.c **** 	{
3109:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccQvkfbu.s 			page 56


3110:./FreeRtos/src/tasks.c **** 
3111:./FreeRtos/src/tasks.c **** 		if( xTask != NULL )
3112:./FreeRtos/src/tasks.c **** 		{
3113:./FreeRtos/src/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:./FreeRtos/src/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:./FreeRtos/src/tasks.c **** 		}
3116:./FreeRtos/src/tasks.c **** 	}
3117:./FreeRtos/src/tasks.c **** 
3118:./FreeRtos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:./FreeRtos/src/tasks.c **** 
3120:./FreeRtos/src/tasks.c **** /*
3121:./FreeRtos/src/tasks.c ****  * -----------------------------------------------------------
3122:./FreeRtos/src/tasks.c ****  * The Idle task.
3123:./FreeRtos/src/tasks.c ****  * ----------------------------------------------------------
3124:./FreeRtos/src/tasks.c ****  *
3125:./FreeRtos/src/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:./FreeRtos/src/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:./FreeRtos/src/tasks.c ****  *
3128:./FreeRtos/src/tasks.c ****  * void prvIdleTask( void *pvParameters );
3129:./FreeRtos/src/tasks.c ****  *
3130:./FreeRtos/src/tasks.c ****  */
3131:./FreeRtos/src/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:./FreeRtos/src/tasks.c **** {
3133:./FreeRtos/src/tasks.c **** 	/* Stop warnings. */
3134:./FreeRtos/src/tasks.c **** 	( void ) pvParameters;
3135:./FreeRtos/src/tasks.c **** 
3136:./FreeRtos/src/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:./FreeRtos/src/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:./FreeRtos/src/tasks.c **** 
3139:./FreeRtos/src/tasks.c **** 	for( ;; )
3140:./FreeRtos/src/tasks.c **** 	{
3141:./FreeRtos/src/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:./FreeRtos/src/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:./FreeRtos/src/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:./FreeRtos/src/tasks.c **** 
3145:./FreeRtos/src/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:./FreeRtos/src/tasks.c **** 		{
3147:./FreeRtos/src/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:./FreeRtos/src/tasks.c **** 			see if any other task has become available.  If we are using
3149:./FreeRtos/src/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:./FreeRtos/src/tasks.c **** 			will automatically get the processor anyway. */
3151:./FreeRtos/src/tasks.c **** 			taskYIELD();
3152:./FreeRtos/src/tasks.c **** 		}
3153:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:./FreeRtos/src/tasks.c **** 
3155:./FreeRtos/src/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:./FreeRtos/src/tasks.c **** 		{
3157:./FreeRtos/src/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:./FreeRtos/src/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:./FreeRtos/src/tasks.c **** 			to run then the idle task should yield before the end of the
3160:./FreeRtos/src/tasks.c **** 			timeslice.
3161:./FreeRtos/src/tasks.c **** 
3162:./FreeRtos/src/tasks.c **** 			A critical region is not required here as we are just reading from
3163:./FreeRtos/src/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:./FreeRtos/src/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:./FreeRtos/src/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:./FreeRtos/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
ARM GAS  /tmp/ccQvkfbu.s 			page 57


3167:./FreeRtos/src/tasks.c **** 			{
3168:./FreeRtos/src/tasks.c **** 				taskYIELD();
3169:./FreeRtos/src/tasks.c **** 			}
3170:./FreeRtos/src/tasks.c **** 			else
3171:./FreeRtos/src/tasks.c **** 			{
3172:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:./FreeRtos/src/tasks.c **** 			}
3174:./FreeRtos/src/tasks.c **** 		}
3175:./FreeRtos/src/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:./FreeRtos/src/tasks.c **** 
3177:./FreeRtos/src/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:./FreeRtos/src/tasks.c **** 		{
3179:./FreeRtos/src/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:./FreeRtos/src/tasks.c **** 
3181:./FreeRtos/src/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:./FreeRtos/src/tasks.c **** 			allows the application designer to add background functionality
3183:./FreeRtos/src/tasks.c **** 			without the overhead of a separate task.
3184:./FreeRtos/src/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:./FreeRtos/src/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3186:./FreeRtos/src/tasks.c **** 			vApplicationIdleHook();
3187:./FreeRtos/src/tasks.c **** 		}
3188:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:./FreeRtos/src/tasks.c **** 
3190:./FreeRtos/src/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:./FreeRtos/src/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:./FreeRtos/src/tasks.c **** 		user defined low power mode	implementations require
3193:./FreeRtos/src/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:./FreeRtos/src/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:./FreeRtos/src/tasks.c **** 		{
3196:./FreeRtos/src/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:./FreeRtos/src/tasks.c **** 
3198:./FreeRtos/src/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:./FreeRtos/src/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:./FreeRtos/src/tasks.c **** 			test of the expected idle time is performed without the
3201:./FreeRtos/src/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:./FreeRtos/src/tasks.c **** 			valid. */
3203:./FreeRtos/src/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:./FreeRtos/src/tasks.c **** 
3205:./FreeRtos/src/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:./FreeRtos/src/tasks.c **** 			{
3207:./FreeRtos/src/tasks.c **** 				vTaskSuspendAll();
3208:./FreeRtos/src/tasks.c **** 				{
3209:./FreeRtos/src/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:./FreeRtos/src/tasks.c **** 					time can be sampled again, and this time its value can
3211:./FreeRtos/src/tasks.c **** 					be used. */
3212:./FreeRtos/src/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:./FreeRtos/src/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:./FreeRtos/src/tasks.c **** 
3215:./FreeRtos/src/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:./FreeRtos/src/tasks.c **** 					{
3217:./FreeRtos/src/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:./FreeRtos/src/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:./FreeRtos/src/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:./FreeRtos/src/tasks.c **** 					}
3221:./FreeRtos/src/tasks.c **** 					else
3222:./FreeRtos/src/tasks.c **** 					{
3223:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccQvkfbu.s 			page 58


3224:./FreeRtos/src/tasks.c **** 					}
3225:./FreeRtos/src/tasks.c **** 				}
3226:./FreeRtos/src/tasks.c **** 				( void ) xTaskResumeAll();
3227:./FreeRtos/src/tasks.c **** 			}
3228:./FreeRtos/src/tasks.c **** 			else
3229:./FreeRtos/src/tasks.c **** 			{
3230:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:./FreeRtos/src/tasks.c **** 			}
3232:./FreeRtos/src/tasks.c **** 		}
3233:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:./FreeRtos/src/tasks.c **** 	}
3235:./FreeRtos/src/tasks.c **** }
3236:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3237:./FreeRtos/src/tasks.c **** 
3238:./FreeRtos/src/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:./FreeRtos/src/tasks.c **** 
3240:./FreeRtos/src/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:./FreeRtos/src/tasks.c **** 	{
3242:./FreeRtos/src/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3243:./FreeRtos/src/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:./FreeRtos/src/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:./FreeRtos/src/tasks.c **** 
3246:./FreeRtos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:./FreeRtos/src/tasks.c **** 		{
3248:./FreeRtos/src/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:./FreeRtos/src/tasks.c **** 			eReturn = eAbortSleep;
3250:./FreeRtos/src/tasks.c **** 		}
3251:./FreeRtos/src/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:./FreeRtos/src/tasks.c **** 		{
3253:./FreeRtos/src/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:./FreeRtos/src/tasks.c **** 			eReturn = eAbortSleep;
3255:./FreeRtos/src/tasks.c **** 		}
3256:./FreeRtos/src/tasks.c **** 		else
3257:./FreeRtos/src/tasks.c **** 		{
3258:./FreeRtos/src/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:./FreeRtos/src/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:./FreeRtos/src/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:./FreeRtos/src/tasks.c **** 			interrupts. */
3262:./FreeRtos/src/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:./FreeRtos/src/tasks.c **** 			{
3264:./FreeRtos/src/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:./FreeRtos/src/tasks.c **** 			}
3266:./FreeRtos/src/tasks.c **** 			else
3267:./FreeRtos/src/tasks.c **** 			{
3268:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:./FreeRtos/src/tasks.c **** 			}
3270:./FreeRtos/src/tasks.c **** 		}
3271:./FreeRtos/src/tasks.c **** 
3272:./FreeRtos/src/tasks.c **** 		return eReturn;
3273:./FreeRtos/src/tasks.c **** 	}
3274:./FreeRtos/src/tasks.c **** 
3275:./FreeRtos/src/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3277:./FreeRtos/src/tasks.c **** 
3278:./FreeRtos/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:./FreeRtos/src/tasks.c **** 
3280:./FreeRtos/src/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
ARM GAS  /tmp/ccQvkfbu.s 			page 59


3281:./FreeRtos/src/tasks.c **** 	{
3282:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
3283:./FreeRtos/src/tasks.c **** 
3284:./FreeRtos/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:./FreeRtos/src/tasks.c **** 		{
3286:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:./FreeRtos/src/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:./FreeRtos/src/tasks.c **** 		}
3289:./FreeRtos/src/tasks.c **** 	}
3290:./FreeRtos/src/tasks.c **** 
3291:./FreeRtos/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3293:./FreeRtos/src/tasks.c **** 
3294:./FreeRtos/src/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:./FreeRtos/src/tasks.c **** 
3296:./FreeRtos/src/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:./FreeRtos/src/tasks.c **** 	{
3298:./FreeRtos/src/tasks.c **** 	void *pvReturn = NULL;
3299:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
3300:./FreeRtos/src/tasks.c **** 
3301:./FreeRtos/src/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:./FreeRtos/src/tasks.c **** 		{
3303:./FreeRtos/src/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:./FreeRtos/src/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:./FreeRtos/src/tasks.c **** 		}
3306:./FreeRtos/src/tasks.c **** 		else
3307:./FreeRtos/src/tasks.c **** 		{
3308:./FreeRtos/src/tasks.c **** 			pvReturn = NULL;
3309:./FreeRtos/src/tasks.c **** 		}
3310:./FreeRtos/src/tasks.c **** 
3311:./FreeRtos/src/tasks.c **** 		return pvReturn;
3312:./FreeRtos/src/tasks.c **** 	}
3313:./FreeRtos/src/tasks.c **** 
3314:./FreeRtos/src/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3316:./FreeRtos/src/tasks.c **** 
3317:./FreeRtos/src/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:./FreeRtos/src/tasks.c **** 
3319:./FreeRtos/src/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:./FreeRtos/src/tasks.c **** 	{
3321:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
3322:./FreeRtos/src/tasks.c **** 
3323:./FreeRtos/src/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:./FreeRtos/src/tasks.c **** 		the calling task. */
3325:./FreeRtos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:./FreeRtos/src/tasks.c **** 
3327:./FreeRtos/src/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:./FreeRtos/src/tasks.c **** 	}
3329:./FreeRtos/src/tasks.c **** 
3330:./FreeRtos/src/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3332:./FreeRtos/src/tasks.c **** 
3333:./FreeRtos/src/tasks.c **** static void prvInitialiseTaskLists( void )
3334:./FreeRtos/src/tasks.c **** {
3335:./FreeRtos/src/tasks.c **** UBaseType_t uxPriority;
3336:./FreeRtos/src/tasks.c **** 
3337:./FreeRtos/src/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
ARM GAS  /tmp/ccQvkfbu.s 			page 60


3338:./FreeRtos/src/tasks.c **** 	{
3339:./FreeRtos/src/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:./FreeRtos/src/tasks.c **** 	}
3341:./FreeRtos/src/tasks.c **** 
3342:./FreeRtos/src/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:./FreeRtos/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:./FreeRtos/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:./FreeRtos/src/tasks.c **** 
3346:./FreeRtos/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:./FreeRtos/src/tasks.c **** 	{
3348:./FreeRtos/src/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:./FreeRtos/src/tasks.c **** 	}
3350:./FreeRtos/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:./FreeRtos/src/tasks.c **** 
3352:./FreeRtos/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:./FreeRtos/src/tasks.c **** 	{
3354:./FreeRtos/src/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:./FreeRtos/src/tasks.c **** 	}
3356:./FreeRtos/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3357:./FreeRtos/src/tasks.c **** 
3358:./FreeRtos/src/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:./FreeRtos/src/tasks.c **** 	using list2. */
3360:./FreeRtos/src/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:./FreeRtos/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:./FreeRtos/src/tasks.c **** }
3363:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3364:./FreeRtos/src/tasks.c **** 
3365:./FreeRtos/src/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:./FreeRtos/src/tasks.c **** {
3367:./FreeRtos/src/tasks.c **** 
3368:./FreeRtos/src/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:./FreeRtos/src/tasks.c **** 
3370:./FreeRtos/src/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:./FreeRtos/src/tasks.c **** 	{
3372:./FreeRtos/src/tasks.c **** 		BaseType_t xListIsEmpty;
3373:./FreeRtos/src/tasks.c **** 
3374:./FreeRtos/src/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:./FreeRtos/src/tasks.c **** 		too often in the idle task. */
3376:./FreeRtos/src/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:./FreeRtos/src/tasks.c **** 		{
3378:./FreeRtos/src/tasks.c **** 			vTaskSuspendAll();
3379:./FreeRtos/src/tasks.c **** 			{
3380:./FreeRtos/src/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:./FreeRtos/src/tasks.c **** 			}
3382:./FreeRtos/src/tasks.c **** 			( void ) xTaskResumeAll();
3383:./FreeRtos/src/tasks.c **** 
3384:./FreeRtos/src/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:./FreeRtos/src/tasks.c **** 			{
3386:./FreeRtos/src/tasks.c **** 				TCB_t *pxTCB;
3387:./FreeRtos/src/tasks.c **** 
3388:./FreeRtos/src/tasks.c **** 				taskENTER_CRITICAL();
3389:./FreeRtos/src/tasks.c **** 				{
3390:./FreeRtos/src/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:./FreeRtos/src/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:./FreeRtos/src/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:./FreeRtos/src/tasks.c **** 				}
ARM GAS  /tmp/ccQvkfbu.s 			page 61


3395:./FreeRtos/src/tasks.c **** 				taskEXIT_CRITICAL();
3396:./FreeRtos/src/tasks.c **** 
3397:./FreeRtos/src/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:./FreeRtos/src/tasks.c **** 			}
3399:./FreeRtos/src/tasks.c **** 			else
3400:./FreeRtos/src/tasks.c **** 			{
3401:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:./FreeRtos/src/tasks.c **** 			}
3403:./FreeRtos/src/tasks.c **** 		}
3404:./FreeRtos/src/tasks.c **** 	}
3405:./FreeRtos/src/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:./FreeRtos/src/tasks.c **** }
3407:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3408:./FreeRtos/src/tasks.c **** 
3409:./FreeRtos/src/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:./FreeRtos/src/tasks.c **** 
3411:./FreeRtos/src/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:./FreeRtos/src/tasks.c **** 	{
3413:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
3414:./FreeRtos/src/tasks.c **** 
3415:./FreeRtos/src/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:./FreeRtos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:./FreeRtos/src/tasks.c **** 
3418:./FreeRtos/src/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:./FreeRtos/src/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:./FreeRtos/src/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:./FreeRtos/src/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:./FreeRtos/src/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:./FreeRtos/src/tasks.c **** 
3424:./FreeRtos/src/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:./FreeRtos/src/tasks.c **** 		{
3426:./FreeRtos/src/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:./FreeRtos/src/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:./FreeRtos/src/tasks.c **** 			being in the Blocked state. */
3429:./FreeRtos/src/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:./FreeRtos/src/tasks.c **** 			{
3431:./FreeRtos/src/tasks.c **** 				vTaskSuspendAll();
3432:./FreeRtos/src/tasks.c **** 				{
3433:./FreeRtos/src/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:./FreeRtos/src/tasks.c **** 					{
3435:./FreeRtos/src/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:./FreeRtos/src/tasks.c **** 					}
3437:./FreeRtos/src/tasks.c **** 				}
3438:./FreeRtos/src/tasks.c **** 				xTaskResumeAll();
3439:./FreeRtos/src/tasks.c **** 			}
3440:./FreeRtos/src/tasks.c **** 		}
3441:./FreeRtos/src/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:./FreeRtos/src/tasks.c **** 
3443:./FreeRtos/src/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:./FreeRtos/src/tasks.c **** 		{
3445:./FreeRtos/src/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:./FreeRtos/src/tasks.c **** 		}
3447:./FreeRtos/src/tasks.c **** 		#else
3448:./FreeRtos/src/tasks.c **** 		{
3449:./FreeRtos/src/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:./FreeRtos/src/tasks.c **** 		}
3451:./FreeRtos/src/tasks.c **** 		#endif
ARM GAS  /tmp/ccQvkfbu.s 			page 62


3452:./FreeRtos/src/tasks.c **** 
3453:./FreeRtos/src/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:./FreeRtos/src/tasks.c **** 		{
3455:./FreeRtos/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:./FreeRtos/src/tasks.c **** 		}
3457:./FreeRtos/src/tasks.c **** 		#else
3458:./FreeRtos/src/tasks.c **** 		{
3459:./FreeRtos/src/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:./FreeRtos/src/tasks.c **** 		}
3461:./FreeRtos/src/tasks.c **** 		#endif
3462:./FreeRtos/src/tasks.c **** 
3463:./FreeRtos/src/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:./FreeRtos/src/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:./FreeRtos/src/tasks.c **** 		just set to whatever is passed in. */
3466:./FreeRtos/src/tasks.c **** 		if( eState != eInvalid )
3467:./FreeRtos/src/tasks.c **** 		{
3468:./FreeRtos/src/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:./FreeRtos/src/tasks.c **** 		}
3470:./FreeRtos/src/tasks.c **** 		else
3471:./FreeRtos/src/tasks.c **** 		{
3472:./FreeRtos/src/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:./FreeRtos/src/tasks.c **** 		}
3474:./FreeRtos/src/tasks.c **** 
3475:./FreeRtos/src/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:./FreeRtos/src/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:./FreeRtos/src/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:./FreeRtos/src/tasks.c **** 		{
3479:./FreeRtos/src/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:./FreeRtos/src/tasks.c **** 			{
3481:./FreeRtos/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:./FreeRtos/src/tasks.c **** 			}
3483:./FreeRtos/src/tasks.c **** 			#else
3484:./FreeRtos/src/tasks.c **** 			{
3485:./FreeRtos/src/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:./FreeRtos/src/tasks.c **** 			}
3487:./FreeRtos/src/tasks.c **** 			#endif
3488:./FreeRtos/src/tasks.c **** 		}
3489:./FreeRtos/src/tasks.c **** 		else
3490:./FreeRtos/src/tasks.c **** 		{
3491:./FreeRtos/src/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:./FreeRtos/src/tasks.c **** 		}
3493:./FreeRtos/src/tasks.c **** 	}
3494:./FreeRtos/src/tasks.c **** 
3495:./FreeRtos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3497:./FreeRtos/src/tasks.c **** 
3498:./FreeRtos/src/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:./FreeRtos/src/tasks.c **** 
3500:./FreeRtos/src/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:./FreeRtos/src/tasks.c **** 	{
3502:./FreeRtos/src/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTask = 0;
3504:./FreeRtos/src/tasks.c **** 
3505:./FreeRtos/src/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:./FreeRtos/src/tasks.c **** 		{
3507:./FreeRtos/src/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 63


3509:./FreeRtos/src/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:./FreeRtos/src/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:./FreeRtos/src/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:./FreeRtos/src/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:./FreeRtos/src/tasks.c **** 			do
3514:./FreeRtos/src/tasks.c **** 			{
3515:./FreeRtos/src/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:./FreeRtos/src/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:./FreeRtos/src/tasks.c **** 				uxTask++;
3518:./FreeRtos/src/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:./FreeRtos/src/tasks.c **** 		}
3520:./FreeRtos/src/tasks.c **** 		else
3521:./FreeRtos/src/tasks.c **** 		{
3522:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:./FreeRtos/src/tasks.c **** 		}
3524:./FreeRtos/src/tasks.c **** 
3525:./FreeRtos/src/tasks.c **** 		return uxTask;
3526:./FreeRtos/src/tasks.c **** 	}
3527:./FreeRtos/src/tasks.c **** 
3528:./FreeRtos/src/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3530:./FreeRtos/src/tasks.c **** 
3531:./FreeRtos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:./FreeRtos/src/tasks.c **** 
3533:./FreeRtos/src/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:./FreeRtos/src/tasks.c **** 	{
3535:./FreeRtos/src/tasks.c **** 	uint32_t ulCount = 0U;
3536:./FreeRtos/src/tasks.c **** 
3537:./FreeRtos/src/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:./FreeRtos/src/tasks.c **** 		{
3539:./FreeRtos/src/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:./FreeRtos/src/tasks.c **** 			ulCount++;
3541:./FreeRtos/src/tasks.c **** 		}
3542:./FreeRtos/src/tasks.c **** 
3543:./FreeRtos/src/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:./FreeRtos/src/tasks.c **** 
3545:./FreeRtos/src/tasks.c **** 		return ( uint16_t ) ulCount;
3546:./FreeRtos/src/tasks.c **** 	}
3547:./FreeRtos/src/tasks.c **** 
3548:./FreeRtos/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3550:./FreeRtos/src/tasks.c **** 
3551:./FreeRtos/src/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:./FreeRtos/src/tasks.c **** 
3553:./FreeRtos/src/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:./FreeRtos/src/tasks.c **** 	{
3555:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
3556:./FreeRtos/src/tasks.c **** 	uint8_t *pucEndOfStack;
3557:./FreeRtos/src/tasks.c **** 	UBaseType_t uxReturn;
3558:./FreeRtos/src/tasks.c **** 
3559:./FreeRtos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:./FreeRtos/src/tasks.c **** 
3561:./FreeRtos/src/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:./FreeRtos/src/tasks.c **** 		{
3563:./FreeRtos/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:./FreeRtos/src/tasks.c **** 		}
3565:./FreeRtos/src/tasks.c **** 		#else
ARM GAS  /tmp/ccQvkfbu.s 			page 64


3566:./FreeRtos/src/tasks.c **** 		{
3567:./FreeRtos/src/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:./FreeRtos/src/tasks.c **** 		}
3569:./FreeRtos/src/tasks.c **** 		#endif
3570:./FreeRtos/src/tasks.c **** 
3571:./FreeRtos/src/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:./FreeRtos/src/tasks.c **** 
3573:./FreeRtos/src/tasks.c **** 		return uxReturn;
3574:./FreeRtos/src/tasks.c **** 	}
3575:./FreeRtos/src/tasks.c **** 
3576:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3578:./FreeRtos/src/tasks.c **** 
3579:./FreeRtos/src/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:./FreeRtos/src/tasks.c **** 
3581:./FreeRtos/src/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:./FreeRtos/src/tasks.c **** 	{
3583:./FreeRtos/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:./FreeRtos/src/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3585:./FreeRtos/src/tasks.c **** 		want to allocate and clean RAM statically. */
3586:./FreeRtos/src/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:./FreeRtos/src/tasks.c **** 
3588:./FreeRtos/src/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:./FreeRtos/src/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:./FreeRtos/src/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:./FreeRtos/src/tasks.c **** 		{
3592:./FreeRtos/src/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:./FreeRtos/src/tasks.c **** 		}
3594:./FreeRtos/src/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:./FreeRtos/src/tasks.c **** 
3596:./FreeRtos/src/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:./FreeRtos/src/tasks.c **** 		{
3598:./FreeRtos/src/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:./FreeRtos/src/tasks.c **** 			the stack and TCB. */
3600:./FreeRtos/src/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:./FreeRtos/src/tasks.c **** 			vPortFree( pxTCB );
3602:./FreeRtos/src/tasks.c **** 		}
3603:./FreeRtos/src/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:./FreeRtos/src/tasks.c **** 		{
3605:./FreeRtos/src/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:./FreeRtos/src/tasks.c **** 			check what was statically allocated before trying to free the
3607:./FreeRtos/src/tasks.c **** 			memory. */
3608:./FreeRtos/src/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:./FreeRtos/src/tasks.c **** 			{
3610:./FreeRtos/src/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:./FreeRtos/src/tasks.c **** 				must be freed. */
3612:./FreeRtos/src/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:./FreeRtos/src/tasks.c **** 				vPortFree( pxTCB );
3614:./FreeRtos/src/tasks.c **** 			}
3615:./FreeRtos/src/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:./FreeRtos/src/tasks.c **** 			{
3617:./FreeRtos/src/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:./FreeRtos/src/tasks.c **** 				only memory that must be freed. */
3619:./FreeRtos/src/tasks.c **** 				vPortFree( pxTCB );
3620:./FreeRtos/src/tasks.c **** 			}
3621:./FreeRtos/src/tasks.c **** 			else
3622:./FreeRtos/src/tasks.c **** 			{
ARM GAS  /tmp/ccQvkfbu.s 			page 65


3623:./FreeRtos/src/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:./FreeRtos/src/tasks.c **** 				nothing needs to be freed. */
3625:./FreeRtos/src/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:./FreeRtos/src/tasks.c **** 			}
3628:./FreeRtos/src/tasks.c **** 		}
3629:./FreeRtos/src/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:./FreeRtos/src/tasks.c **** 	}
3631:./FreeRtos/src/tasks.c **** 
3632:./FreeRtos/src/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3634:./FreeRtos/src/tasks.c **** 
3635:./FreeRtos/src/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:./FreeRtos/src/tasks.c **** {
  28              		.loc 1 3636 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
3637:./FreeRtos/src/tasks.c **** TCB_t *pxTCB;
  33              		.loc 1 3637 1 view .LVU1
3638:./FreeRtos/src/tasks.c **** 
3639:./FreeRtos/src/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  34              		.loc 1 3639 2 view .LVU2
  35              		.loc 1 3639 6 is_stmt 0 view .LVU3
  36 0000 084B     		ldr	r3, .L4
  37 0002 1B68     		ldr	r3, [r3]
  38 0004 1B68     		ldr	r3, [r3]
  39              		.loc 1 3639 45 view .LVU4
  40 0006 23B9     		cbnz	r3, .L2
3640:./FreeRtos/src/tasks.c **** 	{
3641:./FreeRtos/src/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:./FreeRtos/src/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:./FreeRtos/src/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:./FreeRtos/src/tasks.c **** 		there is an item in the delayed list. */
3645:./FreeRtos/src/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
  41              		.loc 1 3645 3 is_stmt 1 view .LVU5
  42              		.loc 1 3645 24 is_stmt 0 view .LVU6
  43 0008 074B     		ldr	r3, .L4+4
  44 000a 4FF0FF32 		mov	r2, #-1
  45 000e 1A60     		str	r2, [r3]
  46 0010 7047     		bx	lr
  47              	.L2:
3646:./FreeRtos/src/tasks.c **** 	}
3647:./FreeRtos/src/tasks.c **** 	else
3648:./FreeRtos/src/tasks.c **** 	{
3649:./FreeRtos/src/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:./FreeRtos/src/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:./FreeRtos/src/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:./FreeRtos/src/tasks.c **** 		from the Blocked state. */
3653:./FreeRtos/src/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  48              		.loc 1 3653 3 is_stmt 1 view .LVU7
  49              		.loc 1 3653 27 is_stmt 0 view .LVU8
  50 0012 044B     		ldr	r3, .L4
  51 0014 1B68     		ldr	r3, [r3]
  52 0016 DB68     		ldr	r3, [r3, #12]
  53              		.loc 1 3653 13 view .LVU9
ARM GAS  /tmp/ccQvkfbu.s 			page 66


  54 0018 DB68     		ldr	r3, [r3, #12]
  55              	.LVL0:
3654:./FreeRtos/src/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  56              		.loc 1 3654 3 is_stmt 1 view .LVU10
  57              		.loc 1 3654 26 is_stmt 0 view .LVU11
  58 001a 5A68     		ldr	r2, [r3, #4]
  59              		.loc 1 3654 24 view .LVU12
  60 001c 024B     		ldr	r3, .L4+4
  61              	.LVL1:
  62              		.loc 1 3654 24 view .LVU13
  63 001e 1A60     		str	r2, [r3]
3655:./FreeRtos/src/tasks.c **** 	}
3656:./FreeRtos/src/tasks.c **** }
  64              		.loc 1 3656 1 view .LVU14
  65 0020 7047     		bx	lr
  66              	.L5:
  67 0022 00BF     		.align	2
  68              	.L4:
  69 0024 00000000 		.word	.LANCHOR0
  70 0028 00000000 		.word	.LANCHOR1
  71              		.cfi_endproc
  72              	.LFE166:
  74              		.section	.text.prvDeleteTCB,"ax",%progbits
  75              		.align	1
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu fpv4-sp-d16
  81              	prvDeleteTCB:
  82              	.LVL2:
  83              	.LFB165:
3582:./FreeRtos/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
  84              		.loc 1 3582 2 is_stmt 1 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
3582:./FreeRtos/src/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
  88              		.loc 1 3582 2 is_stmt 0 view .LVU16
  89 0000 10B5     		push	{r4, lr}
  90              	.LCFI0:
  91              		.cfi_def_cfa_offset 8
  92              		.cfi_offset 4, -8
  93              		.cfi_offset 14, -4
  94 0002 0446     		mov	r4, r0
3586:./FreeRtos/src/tasks.c **** 
  95              		.loc 1 3586 3 is_stmt 1 view .LVU17
3600:./FreeRtos/src/tasks.c **** 			vPortFree( pxTCB );
  96              		.loc 1 3600 4 view .LVU18
  97 0004 006B     		ldr	r0, [r0, #48]
  98              	.LVL3:
3600:./FreeRtos/src/tasks.c **** 			vPortFree( pxTCB );
  99              		.loc 1 3600 4 is_stmt 0 view .LVU19
 100 0006 FFF7FEFF 		bl	vPortFree
 101              	.LVL4:
3601:./FreeRtos/src/tasks.c **** 		}
 102              		.loc 1 3601 4 is_stmt 1 view .LVU20
 103 000a 2046     		mov	r0, r4
ARM GAS  /tmp/ccQvkfbu.s 			page 67


 104 000c FFF7FEFF 		bl	vPortFree
 105              	.LVL5:
3630:./FreeRtos/src/tasks.c **** 
 106              		.loc 1 3630 2 is_stmt 0 view .LVU21
 107 0010 10BD     		pop	{r4, pc}
3630:./FreeRtos/src/tasks.c **** 
 108              		.loc 1 3630 2 view .LVU22
 109              		.cfi_endproc
 110              	.LFE165:
 112              		.section	.rodata.prvTaskIsTaskSuspended.str1.4,"aMS",%progbits,1
 113              		.align	2
 114              	.LC0:
 115 0000 2E2F4672 		.ascii	"./FreeRtos/src/tasks.c\000"
 115      65655274 
 115      6F732F73 
 115      72632F74 
 115      61736B73 
 116 0017 00       		.align	2
 117              	.LC1:
 118 0018 4572726F 		.ascii	"Error:%s,%d\015\012\000"
 118      723A2573 
 118      2C25640D 
 118      0A00
 119              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv4-sp-d16
 126              	prvTaskIsTaskSuspended:
 127              	.LVL6:
 128              	.LFB142:
1657:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 129              		.loc 1 1657 2 is_stmt 1 view -0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
1657:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 133              		.loc 1 1657 2 is_stmt 0 view .LVU24
 134 0000 10B5     		push	{r4, lr}
 135              	.LCFI1:
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 4, -8
 138              		.cfi_offset 14, -4
1658:./FreeRtos/src/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 139              		.loc 1 1658 2 is_stmt 1 view .LVU25
 140              	.LVL7:
1659:./FreeRtos/src/tasks.c **** 
 141              		.loc 1 1659 2 view .LVU26
1665:./FreeRtos/src/tasks.c **** 
 142              		.loc 1 1665 3 view .LVU27
 143 0002 0446     		mov	r4, r0
 144 0004 28B1     		cbz	r0, .L15
 145              	.LVL8:
 146              	.L9:
1668:./FreeRtos/src/tasks.c **** 		{
 147              		.loc 1 1668 3 view .LVU28
ARM GAS  /tmp/ccQvkfbu.s 			page 68


1668:./FreeRtos/src/tasks.c **** 		{
 148              		.loc 1 1668 7 is_stmt 0 view .LVU29
 149 0006 6269     		ldr	r2, [r4, #20]
1668:./FreeRtos/src/tasks.c **** 		{
 150              		.loc 1 1668 82 view .LVU30
 151 0008 0B4B     		ldr	r3, .L17
 152 000a 9A42     		cmp	r2, r3
 153 000c 08D0     		beq	.L16
1658:./FreeRtos/src/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 154              		.loc 1 1658 13 view .LVU31
 155 000e 0020     		movs	r0, #0
 156              	.LVL9:
 157              	.L8:
1695:./FreeRtos/src/tasks.c **** 
 158              		.loc 1 1695 2 view .LVU32
 159 0010 10BD     		pop	{r4, pc}
 160              	.LVL10:
 161              	.L15:
1665:./FreeRtos/src/tasks.c **** 
 162              		.loc 1 1665 3 is_stmt 1 discriminator 1 view .LVU33
 163 0012 40F28162 		movw	r2, #1665
 164 0016 0949     		ldr	r1, .L17+4
 165 0018 0948     		ldr	r0, .L17+8
 166              	.LVL11:
1665:./FreeRtos/src/tasks.c **** 
 167              		.loc 1 1665 3 is_stmt 0 discriminator 1 view .LVU34
 168 001a FFF7FEFF 		bl	printf
 169              	.LVL12:
 170 001e F2E7     		b	.L9
 171              	.L16:
1671:./FreeRtos/src/tasks.c **** 			{
 172              		.loc 1 1671 4 is_stmt 1 view .LVU35
1671:./FreeRtos/src/tasks.c **** 			{
 173              		.loc 1 1671 8 is_stmt 0 view .LVU36
 174 0020 A36A     		ldr	r3, [r4, #40]
1671:./FreeRtos/src/tasks.c **** 			{
 175              		.loc 1 1671 6 view .LVU37
 176 0022 084A     		ldr	r2, .L17+12
 177 0024 9342     		cmp	r3, r2
 178 0026 02D0     		beq	.L12
1675:./FreeRtos/src/tasks.c **** 				{
 179              		.loc 1 1675 5 is_stmt 1 view .LVU38
1675:./FreeRtos/src/tasks.c **** 				{
 180              		.loc 1 1675 69 is_stmt 0 view .LVU39
 181 0028 1BB1     		cbz	r3, .L13
1658:./FreeRtos/src/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 182              		.loc 1 1658 13 view .LVU40
 183 002a 0020     		movs	r0, #0
 184 002c F0E7     		b	.L8
 185              	.L12:
 186 002e 0020     		movs	r0, #0
 187 0030 EEE7     		b	.L8
 188              	.L13:
1677:./FreeRtos/src/tasks.c **** 				}
 189              		.loc 1 1677 14 view .LVU41
 190 0032 0120     		movs	r0, #1
 191              	.LVL13:
ARM GAS  /tmp/ccQvkfbu.s 			page 69


1691:./FreeRtos/src/tasks.c **** 		}
 192              		.loc 1 1691 28 is_stmt 1 view .LVU42
1694:./FreeRtos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 193              		.loc 1 1694 3 view .LVU43
1694:./FreeRtos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 194              		.loc 1 1694 10 is_stmt 0 view .LVU44
 195 0034 ECE7     		b	.L8
 196              	.L18:
 197 0036 00BF     		.align	2
 198              	.L17:
 199 0038 00000000 		.word	.LANCHOR2
 200 003c 00000000 		.word	.LC0
 201 0040 18000000 		.word	.LC1
 202 0044 00000000 		.word	.LANCHOR3
 203              		.cfi_endproc
 204              	.LFE142:
 206              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 207              		.align	1
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv4-sp-d16
 213              	prvInitialiseNewTask:
 214              	.LVL14:
 215              	.LFB132:
 775:./FreeRtos/src/tasks.c **** StackType_t *pxTopOfStack;
 216              		.loc 1 775 1 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 16, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 775:./FreeRtos/src/tasks.c **** StackType_t *pxTopOfStack;
 220              		.loc 1 775 1 is_stmt 0 view .LVU46
 221 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 222              	.LCFI2:
 223              		.cfi_def_cfa_offset 32
 224              		.cfi_offset 3, -32
 225              		.cfi_offset 4, -28
 226              		.cfi_offset 5, -24
 227              		.cfi_offset 6, -20
 228              		.cfi_offset 7, -16
 229              		.cfi_offset 8, -12
 230              		.cfi_offset 9, -8
 231              		.cfi_offset 14, -4
 232 0004 0746     		mov	r7, r0
 233 0006 9846     		mov	r8, r3
 234 0008 089D     		ldr	r5, [sp, #32]
 235 000a DDF82490 		ldr	r9, [sp, #36]
 236 000e 0A9C     		ldr	r4, [sp, #40]
 776:./FreeRtos/src/tasks.c **** UBaseType_t x;
 237              		.loc 1 776 1 is_stmt 1 view .LVU47
 777:./FreeRtos/src/tasks.c **** 
 238              		.loc 1 777 1 view .LVU48
 807:./FreeRtos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 239              		.loc 1 807 3 view .LVU49
 807:./FreeRtos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 240              		.loc 1 807 26 is_stmt 0 view .LVU50
 241 0010 266B     		ldr	r6, [r4, #48]
ARM GAS  /tmp/ccQvkfbu.s 			page 70


 807:./FreeRtos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 242              		.loc 1 807 36 view .LVU51
 243 0012 02F18042 		add	r2, r2, #1073741824
 244              	.LVL15:
 807:./FreeRtos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 245              		.loc 1 807 36 view .LVU52
 246 0016 013A     		subs	r2, r2, #1
 247              	.LVL16:
 807:./FreeRtos/src/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 248              		.loc 1 807 16 view .LVU53
 249 0018 06EB8206 		add	r6, r6, r2, lsl #2
 250              	.LVL17:
 808:./FreeRtos/src/tasks.c **** 
 251              		.loc 1 808 3 is_stmt 1 view .LVU54
 808:./FreeRtos/src/tasks.c **** 
 252              		.loc 1 808 81 is_stmt 0 view .LVU55
 253 001c 26F00706 		bic	r6, r6, #7
 254              	.LVL18:
 811:./FreeRtos/src/tasks.c **** 	}
 255              		.loc 1 811 3 is_stmt 1 view .LVU56
 827:./FreeRtos/src/tasks.c **** 	{
 256              		.loc 1 827 2 view .LVU57
 827:./FreeRtos/src/tasks.c **** 	{
 257              		.loc 1 827 9 is_stmt 0 view .LVU58
 258 0020 4FF0000C 		mov	ip, #0
 259              	.LVL19:
 260              	.L20:
 827:./FreeRtos/src/tasks.c **** 	{
 261              		.loc 1 827 30 is_stmt 1 discriminator 1 view .LVU59
 827:./FreeRtos/src/tasks.c **** 	{
 262              		.loc 1 827 2 is_stmt 0 discriminator 1 view .LVU60
 263 0024 BCF10F0F 		cmp	ip, #15
 264 0028 0BD8     		bhi	.L21
 829:./FreeRtos/src/tasks.c **** 
 265              		.loc 1 829 3 is_stmt 1 view .LVU61
 829:./FreeRtos/src/tasks.c **** 
 266              		.loc 1 829 37 is_stmt 0 view .LVU62
 267 002a 11F80C20 		ldrb	r2, [r1, ip]	@ zero_extendqisi2
 829:./FreeRtos/src/tasks.c **** 
 268              		.loc 1 829 29 view .LVU63
 269 002e 04EB0C03 		add	r3, r4, ip
 270 0032 83F83420 		strb	r2, [r3, #52]
 834:./FreeRtos/src/tasks.c **** 		{
 271              		.loc 1 834 3 is_stmt 1 view .LVU64
 834:./FreeRtos/src/tasks.c **** 		{
 272              		.loc 1 834 13 is_stmt 0 view .LVU65
 273 0036 11F80C30 		ldrb	r3, [r1, ip]	@ zero_extendqisi2
 834:./FreeRtos/src/tasks.c **** 		{
 274              		.loc 1 834 5 view .LVU66
 275 003a 13B1     		cbz	r3, .L21
 840:./FreeRtos/src/tasks.c **** 		}
 276              		.loc 1 840 28 is_stmt 1 discriminator 2 view .LVU67
 827:./FreeRtos/src/tasks.c **** 	{
 277              		.loc 1 827 75 discriminator 2 view .LVU68
 827:./FreeRtos/src/tasks.c **** 	{
 278              		.loc 1 827 76 is_stmt 0 discriminator 2 view .LVU69
 279 003c 0CF1010C 		add	ip, ip, #1
ARM GAS  /tmp/ccQvkfbu.s 			page 71


 280              	.LVL20:
 827:./FreeRtos/src/tasks.c **** 	{
 281              		.loc 1 827 76 discriminator 2 view .LVU70
 282 0040 F0E7     		b	.L20
 283              	.L21:
 846:./FreeRtos/src/tasks.c **** 
 284              		.loc 1 846 2 is_stmt 1 view .LVU71
 846:./FreeRtos/src/tasks.c **** 
 285              		.loc 1 846 54 is_stmt 0 view .LVU72
 286 0042 0023     		movs	r3, #0
 287 0044 84F84330 		strb	r3, [r4, #67]
 850:./FreeRtos/src/tasks.c **** 	{
 288              		.loc 1 850 2 is_stmt 1 view .LVU73
 850:./FreeRtos/src/tasks.c **** 	{
 289              		.loc 1 850 4 is_stmt 0 view .LVU74
 290 0048 1F2D     		cmp	r5, #31
 291 004a 00D9     		bls	.L23
 852:./FreeRtos/src/tasks.c **** 	}
 292              		.loc 1 852 14 view .LVU75
 293 004c 1F25     		movs	r5, #31
 294              	.L23:
 295              	.LVL21:
 856:./FreeRtos/src/tasks.c **** 	}
 296              		.loc 1 856 27 is_stmt 1 view .LVU76
 859:./FreeRtos/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297              		.loc 1 859 2 view .LVU77
 859:./FreeRtos/src/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 298              		.loc 1 859 23 is_stmt 0 view .LVU78
 299 004e E562     		str	r5, [r4, #44]
 867:./FreeRtos/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 300              		.loc 1 867 2 is_stmt 1 view .LVU79
 301 0050 201D     		adds	r0, r4, #4
 302              	.LVL22:
 867:./FreeRtos/src/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 303              		.loc 1 867 2 is_stmt 0 view .LVU80
 304 0052 FFF7FEFF 		bl	vListInitialiseItem
 305              	.LVL23:
 868:./FreeRtos/src/tasks.c **** 
 306              		.loc 1 868 2 is_stmt 1 view .LVU81
 307 0056 04F11800 		add	r0, r4, #24
 308 005a FFF7FEFF 		bl	vListInitialiseItem
 309              	.LVL24:
 872:./FreeRtos/src/tasks.c **** 
 310              		.loc 1 872 2 view .LVU82
 311 005e 2461     		str	r4, [r4, #16]
 875:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 312              		.loc 1 875 2 view .LVU83
 313 0060 C5F12005 		rsb	r5, r5, #32
 314              	.LVL25:
 875:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 315              		.loc 1 875 2 is_stmt 0 view .LVU84
 316 0064 A561     		str	r5, [r4, #24]
 876:./FreeRtos/src/tasks.c **** 
 317              		.loc 1 876 2 is_stmt 1 view .LVU85
 318 0066 6462     		str	r4, [r4, #36]
 903:./FreeRtos/src/tasks.c **** 	}
 319              		.loc 1 903 3 view .LVU86
ARM GAS  /tmp/ccQvkfbu.s 			page 72


 918:./FreeRtos/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 320              		.loc 1 918 3 view .LVU87
 918:./FreeRtos/src/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 321              		.loc 1 918 29 is_stmt 0 view .LVU88
 322 0068 0023     		movs	r3, #0
 323 006a 6364     		str	r3, [r4, #68]
 919:./FreeRtos/src/tasks.c **** 	}
 324              		.loc 1 919 3 is_stmt 1 view .LVU89
 919:./FreeRtos/src/tasks.c **** 	}
 325              		.loc 1 919 27 is_stmt 0 view .LVU90
 326 006c 84F84830 		strb	r3, [r4, #72]
 946:./FreeRtos/src/tasks.c **** 	}
 327              		.loc 1 946 3 is_stmt 1 view .LVU91
 946:./FreeRtos/src/tasks.c **** 	}
 328              		.loc 1 946 28 is_stmt 0 view .LVU92
 329 0070 4246     		mov	r2, r8
 330 0072 3946     		mov	r1, r7
 331 0074 3046     		mov	r0, r6
 332 0076 FFF7FEFF 		bl	pxPortInitialiseStack
 333              	.LVL26:
 946:./FreeRtos/src/tasks.c **** 	}
 334              		.loc 1 946 26 view .LVU93
 335 007a 2060     		str	r0, [r4]
 950:./FreeRtos/src/tasks.c **** 	{
 336              		.loc 1 950 2 is_stmt 1 view .LVU94
 950:./FreeRtos/src/tasks.c **** 	{
 337              		.loc 1 950 4 is_stmt 0 view .LVU95
 338 007c B9F1000F 		cmp	r9, #0
 339 0080 01D0     		beq	.L19
 954:./FreeRtos/src/tasks.c **** 	}
 340              		.loc 1 954 3 is_stmt 1 view .LVU96
 954:./FreeRtos/src/tasks.c **** 	}
 341              		.loc 1 954 18 is_stmt 0 view .LVU97
 342 0082 C9F80040 		str	r4, [r9]
 958:./FreeRtos/src/tasks.c **** 	}
 343              		.loc 1 958 27 is_stmt 1 view .LVU98
 344              	.L19:
 960:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 345              		.loc 1 960 1 is_stmt 0 view .LVU99
 346 0086 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 960:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 347              		.loc 1 960 1 view .LVU100
 348              		.cfi_endproc
 349              	.LFE132:
 351              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 352              		.align	1
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv4-sp-d16
 358              	prvInitialiseTaskLists:
 359              	.LFB163:
3334:./FreeRtos/src/tasks.c **** UBaseType_t uxPriority;
 360              		.loc 1 3334 1 is_stmt 1 view -0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQvkfbu.s 			page 73


 364 0000 38B5     		push	{r3, r4, r5, lr}
 365              	.LCFI3:
 366              		.cfi_def_cfa_offset 16
 367              		.cfi_offset 3, -16
 368              		.cfi_offset 4, -12
 369              		.cfi_offset 5, -8
 370              		.cfi_offset 14, -4
3335:./FreeRtos/src/tasks.c **** 
 371              		.loc 1 3335 1 view .LVU102
3337:./FreeRtos/src/tasks.c **** 	{
 372              		.loc 1 3337 2 view .LVU103
 373              	.LVL27:
3337:./FreeRtos/src/tasks.c **** 	{
 374              		.loc 1 3337 18 is_stmt 0 view .LVU104
 375 0002 0024     		movs	r4, #0
3337:./FreeRtos/src/tasks.c **** 	{
 376              		.loc 1 3337 2 view .LVU105
 377 0004 07E0     		b	.L28
 378              	.LVL28:
 379              	.L29:
3339:./FreeRtos/src/tasks.c **** 	}
 380              		.loc 1 3339 3 is_stmt 1 discriminator 3 view .LVU106
 381 0006 04EB8402 		add	r2, r4, r4, lsl #2
 382 000a 9300     		lsls	r3, r2, #2
 383 000c 0E48     		ldr	r0, .L31
 384 000e 1844     		add	r0, r0, r3
 385 0010 FFF7FEFF 		bl	vListInitialise
 386              	.LVL29:
3337:./FreeRtos/src/tasks.c **** 	{
 387              		.loc 1 3337 91 discriminator 3 view .LVU107
3337:./FreeRtos/src/tasks.c **** 	{
 388              		.loc 1 3337 101 is_stmt 0 discriminator 3 view .LVU108
 389 0014 0134     		adds	r4, r4, #1
 390              	.LVL30:
 391              	.L28:
3337:./FreeRtos/src/tasks.c **** 	{
 392              		.loc 1 3337 40 is_stmt 1 discriminator 1 view .LVU109
3337:./FreeRtos/src/tasks.c **** 	{
 393              		.loc 1 3337 2 is_stmt 0 discriminator 1 view .LVU110
 394 0016 1F2C     		cmp	r4, #31
 395 0018 F5D9     		bls	.L29
3342:./FreeRtos/src/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 396              		.loc 1 3342 2 is_stmt 1 view .LVU111
 397 001a 0C4D     		ldr	r5, .L31+4
 398 001c 2846     		mov	r0, r5
 399 001e FFF7FEFF 		bl	vListInitialise
 400              	.LVL31:
3343:./FreeRtos/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 401              		.loc 1 3343 2 view .LVU112
 402 0022 0B4C     		ldr	r4, .L31+8
 403              	.LVL32:
3343:./FreeRtos/src/tasks.c **** 	vListInitialise( &xPendingReadyList );
 404              		.loc 1 3343 2 is_stmt 0 view .LVU113
 405 0024 2046     		mov	r0, r4
 406 0026 FFF7FEFF 		bl	vListInitialise
 407              	.LVL33:
3344:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 74


 408              		.loc 1 3344 2 is_stmt 1 view .LVU114
 409 002a 0A48     		ldr	r0, .L31+12
 410 002c FFF7FEFF 		bl	vListInitialise
 411              	.LVL34:
3348:./FreeRtos/src/tasks.c **** 	}
 412              		.loc 1 3348 3 view .LVU115
 413 0030 0948     		ldr	r0, .L31+16
 414 0032 FFF7FEFF 		bl	vListInitialise
 415              	.LVL35:
3354:./FreeRtos/src/tasks.c **** 	}
 416              		.loc 1 3354 3 view .LVU116
 417 0036 0948     		ldr	r0, .L31+20
 418 0038 FFF7FEFF 		bl	vListInitialise
 419              	.LVL36:
3360:./FreeRtos/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 420              		.loc 1 3360 2 view .LVU117
3360:./FreeRtos/src/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 421              		.loc 1 3360 20 is_stmt 0 view .LVU118
 422 003c 084B     		ldr	r3, .L31+24
 423 003e 1D60     		str	r5, [r3]
3361:./FreeRtos/src/tasks.c **** }
 424              		.loc 1 3361 2 is_stmt 1 view .LVU119
3361:./FreeRtos/src/tasks.c **** }
 425              		.loc 1 3361 28 is_stmt 0 view .LVU120
 426 0040 084B     		ldr	r3, .L31+28
 427 0042 1C60     		str	r4, [r3]
3362:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 428              		.loc 1 3362 1 view .LVU121
 429 0044 38BD     		pop	{r3, r4, r5, pc}
 430              	.L32:
 431 0046 00BF     		.align	2
 432              	.L31:
 433 0048 00000000 		.word	.LANCHOR4
 434 004c 00000000 		.word	.LANCHOR5
 435 0050 00000000 		.word	.LANCHOR6
 436 0054 00000000 		.word	.LANCHOR3
 437 0058 00000000 		.word	.LANCHOR7
 438 005c 00000000 		.word	.LANCHOR2
 439 0060 00000000 		.word	.LANCHOR0
 440 0064 00000000 		.word	.LANCHOR8
 441              		.cfi_endproc
 442              	.LFE163:
 444              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 445              		.align	1
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu fpv4-sp-d16
 451              	prvAddNewTaskToReadyList:
 452              	.LVL37:
 453              	.LFB133:
 964:./FreeRtos/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 454              		.loc 1 964 1 is_stmt 1 view -0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 964:./FreeRtos/src/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
ARM GAS  /tmp/ccQvkfbu.s 			page 75


 458              		.loc 1 964 1 is_stmt 0 view .LVU123
 459 0000 10B5     		push	{r4, lr}
 460              	.LCFI4:
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 4, -8
 463              		.cfi_offset 14, -4
 464 0002 0446     		mov	r4, r0
 967:./FreeRtos/src/tasks.c **** 	{
 465              		.loc 1 967 2 is_stmt 1 view .LVU124
 466 0004 FFF7FEFF 		bl	vPortEnterCritical
 467              	.LVL38:
 969:./FreeRtos/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 468              		.loc 1 969 3 view .LVU125
 969:./FreeRtos/src/tasks.c **** 		if( pxCurrentTCB == NULL )
 469              		.loc 1 969 25 is_stmt 0 view .LVU126
 470 0008 214A     		ldr	r2, .L40
 471 000a 1368     		ldr	r3, [r2]
 472 000c 0133     		adds	r3, r3, #1
 473 000e 1360     		str	r3, [r2]
 970:./FreeRtos/src/tasks.c **** 		{
 474              		.loc 1 970 3 is_stmt 1 view .LVU127
 970:./FreeRtos/src/tasks.c **** 		{
 475              		.loc 1 970 20 is_stmt 0 view .LVU128
 476 0010 204B     		ldr	r3, .L40+4
 477 0012 1B68     		ldr	r3, [r3]
 970:./FreeRtos/src/tasks.c **** 		{
 478              		.loc 1 970 5 view .LVU129
 479 0014 5BB1     		cbz	r3, .L38
 993:./FreeRtos/src/tasks.c **** 			{
 480              		.loc 1 993 4 is_stmt 1 view .LVU130
 993:./FreeRtos/src/tasks.c **** 			{
 481              		.loc 1 993 26 is_stmt 0 view .LVU131
 482 0016 204B     		ldr	r3, .L40+8
 483 0018 1B68     		ldr	r3, [r3]
 993:./FreeRtos/src/tasks.c **** 			{
 484              		.loc 1 993 6 view .LVU132
 485 001a 6BB9     		cbnz	r3, .L35
 995:./FreeRtos/src/tasks.c **** 				{
 486              		.loc 1 995 5 is_stmt 1 view .LVU133
 995:./FreeRtos/src/tasks.c **** 				{
 487              		.loc 1 995 21 is_stmt 0 view .LVU134
 488 001c 1D4B     		ldr	r3, .L40+4
 489 001e 1B68     		ldr	r3, [r3]
 490 0020 DA6A     		ldr	r2, [r3, #44]
 995:./FreeRtos/src/tasks.c **** 				{
 491              		.loc 1 995 45 view .LVU135
 492 0022 E36A     		ldr	r3, [r4, #44]
 995:./FreeRtos/src/tasks.c **** 				{
 493              		.loc 1 995 7 view .LVU136
 494 0024 9A42     		cmp	r2, r3
 495 0026 07D8     		bhi	.L35
 997:./FreeRtos/src/tasks.c **** 				}
 496              		.loc 1 997 6 is_stmt 1 view .LVU137
 997:./FreeRtos/src/tasks.c **** 				}
 497              		.loc 1 997 19 is_stmt 0 view .LVU138
 498 0028 1A4B     		ldr	r3, .L40+4
 499 002a 1C60     		str	r4, [r3]
ARM GAS  /tmp/ccQvkfbu.s 			page 76


 500 002c 04E0     		b	.L35
 501              	.L38:
 974:./FreeRtos/src/tasks.c **** 
 502              		.loc 1 974 4 is_stmt 1 view .LVU139
 974:./FreeRtos/src/tasks.c **** 
 503              		.loc 1 974 17 is_stmt 0 view .LVU140
 504 002e 194B     		ldr	r3, .L40+4
 505 0030 1C60     		str	r4, [r3]
 976:./FreeRtos/src/tasks.c **** 			{
 506              		.loc 1 976 4 is_stmt 1 view .LVU141
 976:./FreeRtos/src/tasks.c **** 			{
 507              		.loc 1 976 31 is_stmt 0 view .LVU142
 508 0032 1368     		ldr	r3, [r2]
 976:./FreeRtos/src/tasks.c **** 			{
 509              		.loc 1 976 6 view .LVU143
 510 0034 012B     		cmp	r3, #1
 511 0036 28D0     		beq	.L39
 512              	.L35:
1006:./FreeRtos/src/tasks.c **** 			}
 513              		.loc 1 1006 29 is_stmt 1 view .LVU144
1010:./FreeRtos/src/tasks.c **** 
 514              		.loc 1 1010 3 view .LVU145
1010:./FreeRtos/src/tasks.c **** 
 515              		.loc 1 1010 15 is_stmt 0 view .LVU146
 516 0038 184A     		ldr	r2, .L40+12
 517 003a 1368     		ldr	r3, [r2]
 518 003c 0133     		adds	r3, r3, #1
 519 003e 1360     		str	r3, [r2]
1018:./FreeRtos/src/tasks.c **** 
 520              		.loc 1 1018 31 is_stmt 1 view .LVU147
1020:./FreeRtos/src/tasks.c **** 
 521              		.loc 1 1020 3 view .LVU148
1020:./FreeRtos/src/tasks.c **** 
 522              		.loc 1 1020 3 view .LVU149
 523 0040 E06A     		ldr	r0, [r4, #44]
 524 0042 0123     		movs	r3, #1
 525 0044 8340     		lsls	r3, r3, r0
 526 0046 164A     		ldr	r2, .L40+16
 527 0048 1168     		ldr	r1, [r2]
 528 004a 0B43     		orrs	r3, r3, r1
 529 004c 1360     		str	r3, [r2]
1020:./FreeRtos/src/tasks.c **** 
 530              		.loc 1 1020 3 view .LVU150
 531 004e 00EB8000 		add	r0, r0, r0, lsl #2
 532 0052 211D     		adds	r1, r4, #4
 533 0054 134B     		ldr	r3, .L40+20
 534 0056 03EB8000 		add	r0, r3, r0, lsl #2
 535 005a FFF7FEFF 		bl	vListInsertEnd
 536              	.LVL39:
1020:./FreeRtos/src/tasks.c **** 
 537              		.loc 1 1020 36 view .LVU151
1022:./FreeRtos/src/tasks.c **** 	}
 538              		.loc 1 1022 3 view .LVU152
1024:./FreeRtos/src/tasks.c **** 
 539              		.loc 1 1024 2 view .LVU153
 540 005e FFF7FEFF 		bl	vPortExitCritical
 541              	.LVL40:
ARM GAS  /tmp/ccQvkfbu.s 			page 77


1026:./FreeRtos/src/tasks.c **** 	{
 542              		.loc 1 1026 2 view .LVU154
1026:./FreeRtos/src/tasks.c **** 	{
 543              		.loc 1 1026 24 is_stmt 0 view .LVU155
 544 0062 0D4B     		ldr	r3, .L40+8
 545 0064 1B68     		ldr	r3, [r3]
1026:./FreeRtos/src/tasks.c **** 	{
 546              		.loc 1 1026 4 view .LVU156
 547 0066 7BB1     		cbz	r3, .L33
1030:./FreeRtos/src/tasks.c **** 		{
 548              		.loc 1 1030 3 is_stmt 1 view .LVU157
1030:./FreeRtos/src/tasks.c **** 		{
 549              		.loc 1 1030 19 is_stmt 0 view .LVU158
 550 0068 0A4B     		ldr	r3, .L40+4
 551 006a 1B68     		ldr	r3, [r3]
 552 006c DA6A     		ldr	r2, [r3, #44]
1030:./FreeRtos/src/tasks.c **** 		{
 553              		.loc 1 1030 42 view .LVU159
 554 006e E36A     		ldr	r3, [r4, #44]
1030:./FreeRtos/src/tasks.c **** 		{
 555              		.loc 1 1030 5 view .LVU160
 556 0070 9A42     		cmp	r2, r3
 557 0072 09D2     		bcs	.L33
1032:./FreeRtos/src/tasks.c **** 		}
 558              		.loc 1 1032 4 is_stmt 1 view .LVU161
 559 0074 4FF0E023 		mov	r3, #-536813568
 560 0078 4FF08052 		mov	r2, #268435456
 561 007c C3F8042D 		str	r2, [r3, #3332]
1032:./FreeRtos/src/tasks.c **** 		}
 562              		.loc 1 1032 4 view .LVU162
 563              		.syntax unified
 564              	@ 1032 "./FreeRtos/src/tasks.c" 1
 565 0080 BFF34F8F 		dsb
 566              	@ 0 "" 2
1032:./FreeRtos/src/tasks.c **** 		}
 567              		.loc 1 1032 4 view .LVU163
 568              	@ 1032 "./FreeRtos/src/tasks.c" 1
 569 0084 BFF36F8F 		isb
 570              	@ 0 "" 2
1032:./FreeRtos/src/tasks.c **** 		}
 571              		.loc 1 1032 35 view .LVU164
1041:./FreeRtos/src/tasks.c **** 	}
 572              		.loc 1 1041 27 view .LVU165
 573              		.thumb
 574              		.syntax unified
 575              	.L33:
1043:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 576              		.loc 1 1043 1 is_stmt 0 view .LVU166
 577 0088 10BD     		pop	{r4, pc}
 578              	.LVL41:
 579              	.L39:
 981:./FreeRtos/src/tasks.c **** 			}
 580              		.loc 1 981 5 is_stmt 1 view .LVU167
 581 008a FFF7FEFF 		bl	prvInitialiseTaskLists
 582              	.LVL42:
 583 008e D3E7     		b	.L35
 584              	.L41:
ARM GAS  /tmp/ccQvkfbu.s 			page 78


 585              		.align	2
 586              	.L40:
 587 0090 00000000 		.word	.LANCHOR9
 588 0094 00000000 		.word	.LANCHOR10
 589 0098 00000000 		.word	.LANCHOR11
 590 009c 00000000 		.word	.LANCHOR12
 591 00a0 00000000 		.word	.LANCHOR13
 592 00a4 00000000 		.word	.LANCHOR4
 593              		.cfi_endproc
 594              	.LFE133:
 596              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 597              		.align	1
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	prvAddCurrentTaskToDelayedList:
 604              	.LVL43:
 605              	.LFB175:
3657:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3658:./FreeRtos/src/tasks.c **** 
3659:./FreeRtos/src/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:./FreeRtos/src/tasks.c **** 
3661:./FreeRtos/src/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:./FreeRtos/src/tasks.c **** 	{
3663:./FreeRtos/src/tasks.c **** 	TaskHandle_t xReturn;
3664:./FreeRtos/src/tasks.c **** 
3665:./FreeRtos/src/tasks.c **** 		/* A critical section is not required as this is not called from
3666:./FreeRtos/src/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:./FreeRtos/src/tasks.c **** 		individual execution thread. */
3668:./FreeRtos/src/tasks.c **** 		xReturn = pxCurrentTCB;
3669:./FreeRtos/src/tasks.c **** 
3670:./FreeRtos/src/tasks.c **** 		return xReturn;
3671:./FreeRtos/src/tasks.c **** 	}
3672:./FreeRtos/src/tasks.c **** 
3673:./FreeRtos/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3675:./FreeRtos/src/tasks.c **** 
3676:./FreeRtos/src/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:./FreeRtos/src/tasks.c **** 
3678:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:./FreeRtos/src/tasks.c **** 	{
3680:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
3681:./FreeRtos/src/tasks.c **** 
3682:./FreeRtos/src/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:./FreeRtos/src/tasks.c **** 		{
3684:./FreeRtos/src/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:./FreeRtos/src/tasks.c **** 		}
3686:./FreeRtos/src/tasks.c **** 		else
3687:./FreeRtos/src/tasks.c **** 		{
3688:./FreeRtos/src/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:./FreeRtos/src/tasks.c **** 			{
3690:./FreeRtos/src/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:./FreeRtos/src/tasks.c **** 			}
3692:./FreeRtos/src/tasks.c **** 			else
3693:./FreeRtos/src/tasks.c **** 			{
3694:./FreeRtos/src/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
ARM GAS  /tmp/ccQvkfbu.s 			page 79


3695:./FreeRtos/src/tasks.c **** 			}
3696:./FreeRtos/src/tasks.c **** 		}
3697:./FreeRtos/src/tasks.c **** 
3698:./FreeRtos/src/tasks.c **** 		return xReturn;
3699:./FreeRtos/src/tasks.c **** 	}
3700:./FreeRtos/src/tasks.c **** 
3701:./FreeRtos/src/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3703:./FreeRtos/src/tasks.c **** 
3704:./FreeRtos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:./FreeRtos/src/tasks.c **** 
3706:./FreeRtos/src/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:./FreeRtos/src/tasks.c **** 	{
3708:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:./FreeRtos/src/tasks.c **** 
3710:./FreeRtos/src/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:./FreeRtos/src/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:./FreeRtos/src/tasks.c **** 		if( pxMutexHolder != NULL )
3713:./FreeRtos/src/tasks.c **** 		{
3714:./FreeRtos/src/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3715:./FreeRtos/src/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:./FreeRtos/src/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:./FreeRtos/src/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:./FreeRtos/src/tasks.c **** 			{
3719:./FreeRtos/src/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:./FreeRtos/src/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:./FreeRtos/src/tasks.c **** 				not	being used for anything else. */
3722:./FreeRtos/src/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:./FreeRtos/src/tasks.c **** 				{
3724:./FreeRtos/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:./FreeRtos/src/tasks.c **** 				}
3726:./FreeRtos/src/tasks.c **** 				else
3727:./FreeRtos/src/tasks.c **** 				{
3728:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:./FreeRtos/src/tasks.c **** 				}
3730:./FreeRtos/src/tasks.c **** 
3731:./FreeRtos/src/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:./FreeRtos/src/tasks.c **** 				to be moved into a new list. */
3733:./FreeRtos/src/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:./FreeRtos/src/tasks.c **** 				{
3735:./FreeRtos/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:./FreeRtos/src/tasks.c **** 					{
3737:./FreeRtos/src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:./FreeRtos/src/tasks.c **** 					}
3739:./FreeRtos/src/tasks.c **** 					else
3740:./FreeRtos/src/tasks.c **** 					{
3741:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:./FreeRtos/src/tasks.c **** 					}
3743:./FreeRtos/src/tasks.c **** 
3744:./FreeRtos/src/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:./FreeRtos/src/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:./FreeRtos/src/tasks.c **** 				}
3748:./FreeRtos/src/tasks.c **** 				else
3749:./FreeRtos/src/tasks.c **** 				{
3750:./FreeRtos/src/tasks.c **** 					/* Just inherit the priority. */
3751:./FreeRtos/src/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
ARM GAS  /tmp/ccQvkfbu.s 			page 80


3752:./FreeRtos/src/tasks.c **** 				}
3753:./FreeRtos/src/tasks.c **** 
3754:./FreeRtos/src/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:./FreeRtos/src/tasks.c **** 			}
3756:./FreeRtos/src/tasks.c **** 			else
3757:./FreeRtos/src/tasks.c **** 			{
3758:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:./FreeRtos/src/tasks.c **** 			}
3760:./FreeRtos/src/tasks.c **** 		}
3761:./FreeRtos/src/tasks.c **** 		else
3762:./FreeRtos/src/tasks.c **** 		{
3763:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:./FreeRtos/src/tasks.c **** 		}
3765:./FreeRtos/src/tasks.c **** 	}
3766:./FreeRtos/src/tasks.c **** 
3767:./FreeRtos/src/tasks.c **** #endif /* configUSE_MUTEXES */
3768:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3769:./FreeRtos/src/tasks.c **** 
3770:./FreeRtos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:./FreeRtos/src/tasks.c **** 
3772:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:./FreeRtos/src/tasks.c **** 	{
3774:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:./FreeRtos/src/tasks.c **** 
3777:./FreeRtos/src/tasks.c **** 		if( pxMutexHolder != NULL )
3778:./FreeRtos/src/tasks.c **** 		{
3779:./FreeRtos/src/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:./FreeRtos/src/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:./FreeRtos/src/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:./FreeRtos/src/tasks.c **** 			be the running state task. */
3783:./FreeRtos/src/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:./FreeRtos/src/tasks.c **** 
3785:./FreeRtos/src/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:./FreeRtos/src/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:./FreeRtos/src/tasks.c **** 
3788:./FreeRtos/src/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:./FreeRtos/src/tasks.c **** 			task? */
3790:./FreeRtos/src/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:./FreeRtos/src/tasks.c **** 			{
3792:./FreeRtos/src/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:./FreeRtos/src/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:./FreeRtos/src/tasks.c **** 				{
3795:./FreeRtos/src/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:./FreeRtos/src/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:./FreeRtos/src/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:./FreeRtos/src/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:./FreeRtos/src/tasks.c **** 					the	holding task from the ready	list. */
3800:./FreeRtos/src/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:./FreeRtos/src/tasks.c **** 					{
3802:./FreeRtos/src/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:./FreeRtos/src/tasks.c **** 					}
3804:./FreeRtos/src/tasks.c **** 					else
3805:./FreeRtos/src/tasks.c **** 					{
3806:./FreeRtos/src/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:./FreeRtos/src/tasks.c **** 					}
3808:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 81


3809:./FreeRtos/src/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:./FreeRtos/src/tasks.c **** 					new	ready list. */
3811:./FreeRtos/src/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:./FreeRtos/src/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:./FreeRtos/src/tasks.c **** 
3814:./FreeRtos/src/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:./FreeRtos/src/tasks.c **** 					any other purpose if this task is running, and it must be
3816:./FreeRtos/src/tasks.c **** 					running to give back the mutex. */
3817:./FreeRtos/src/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:./FreeRtos/src/tasks.c **** 
3820:./FreeRtos/src/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:./FreeRtos/src/tasks.c **** 					This is only actually required in the corner case whereby
3822:./FreeRtos/src/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:./FreeRtos/src/tasks.c **** 					in an order different to that in which they were taken.
3824:./FreeRtos/src/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:./FreeRtos/src/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:./FreeRtos/src/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:./FreeRtos/src/tasks.c **** 					a task is waiting on it or not. */
3828:./FreeRtos/src/tasks.c **** 					xReturn = pdTRUE;
3829:./FreeRtos/src/tasks.c **** 				}
3830:./FreeRtos/src/tasks.c **** 				else
3831:./FreeRtos/src/tasks.c **** 				{
3832:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:./FreeRtos/src/tasks.c **** 				}
3834:./FreeRtos/src/tasks.c **** 			}
3835:./FreeRtos/src/tasks.c **** 			else
3836:./FreeRtos/src/tasks.c **** 			{
3837:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:./FreeRtos/src/tasks.c **** 			}
3839:./FreeRtos/src/tasks.c **** 		}
3840:./FreeRtos/src/tasks.c **** 		else
3841:./FreeRtos/src/tasks.c **** 		{
3842:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:./FreeRtos/src/tasks.c **** 		}
3844:./FreeRtos/src/tasks.c **** 
3845:./FreeRtos/src/tasks.c **** 		return xReturn;
3846:./FreeRtos/src/tasks.c **** 	}
3847:./FreeRtos/src/tasks.c **** 
3848:./FreeRtos/src/tasks.c **** #endif /* configUSE_MUTEXES */
3849:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3850:./FreeRtos/src/tasks.c **** 
3851:./FreeRtos/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:./FreeRtos/src/tasks.c **** 
3853:./FreeRtos/src/tasks.c **** 	void vTaskEnterCritical( void )
3854:./FreeRtos/src/tasks.c **** 	{
3855:./FreeRtos/src/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:./FreeRtos/src/tasks.c **** 
3857:./FreeRtos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:./FreeRtos/src/tasks.c **** 		{
3859:./FreeRtos/src/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:./FreeRtos/src/tasks.c **** 
3861:./FreeRtos/src/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:./FreeRtos/src/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:./FreeRtos/src/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:./FreeRtos/src/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:./FreeRtos/src/tasks.c **** 			protect against recursive calls if the assert function also uses a
ARM GAS  /tmp/ccQvkfbu.s 			page 82


3866:./FreeRtos/src/tasks.c **** 			critical section. */
3867:./FreeRtos/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:./FreeRtos/src/tasks.c **** 			{
3869:./FreeRtos/src/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:./FreeRtos/src/tasks.c **** 			}
3871:./FreeRtos/src/tasks.c **** 		}
3872:./FreeRtos/src/tasks.c **** 		else
3873:./FreeRtos/src/tasks.c **** 		{
3874:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:./FreeRtos/src/tasks.c **** 		}
3876:./FreeRtos/src/tasks.c **** 	}
3877:./FreeRtos/src/tasks.c **** 
3878:./FreeRtos/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3880:./FreeRtos/src/tasks.c **** 
3881:./FreeRtos/src/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:./FreeRtos/src/tasks.c **** 
3883:./FreeRtos/src/tasks.c **** 	void vTaskExitCritical( void )
3884:./FreeRtos/src/tasks.c **** 	{
3885:./FreeRtos/src/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3886:./FreeRtos/src/tasks.c **** 		{
3887:./FreeRtos/src/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:./FreeRtos/src/tasks.c **** 			{
3889:./FreeRtos/src/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:./FreeRtos/src/tasks.c **** 
3891:./FreeRtos/src/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:./FreeRtos/src/tasks.c **** 				{
3893:./FreeRtos/src/tasks.c **** 					portENABLE_INTERRUPTS();
3894:./FreeRtos/src/tasks.c **** 				}
3895:./FreeRtos/src/tasks.c **** 				else
3896:./FreeRtos/src/tasks.c **** 				{
3897:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:./FreeRtos/src/tasks.c **** 				}
3899:./FreeRtos/src/tasks.c **** 			}
3900:./FreeRtos/src/tasks.c **** 			else
3901:./FreeRtos/src/tasks.c **** 			{
3902:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:./FreeRtos/src/tasks.c **** 			}
3904:./FreeRtos/src/tasks.c **** 		}
3905:./FreeRtos/src/tasks.c **** 		else
3906:./FreeRtos/src/tasks.c **** 		{
3907:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:./FreeRtos/src/tasks.c **** 		}
3909:./FreeRtos/src/tasks.c **** 	}
3910:./FreeRtos/src/tasks.c **** 
3911:./FreeRtos/src/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3913:./FreeRtos/src/tasks.c **** 
3914:./FreeRtos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:./FreeRtos/src/tasks.c **** 
3916:./FreeRtos/src/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:./FreeRtos/src/tasks.c **** 	{
3918:./FreeRtos/src/tasks.c **** 	size_t x;
3919:./FreeRtos/src/tasks.c **** 
3920:./FreeRtos/src/tasks.c **** 		/* Start by copying the entire string. */
3921:./FreeRtos/src/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 83


3923:./FreeRtos/src/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:./FreeRtos/src/tasks.c **** 		printed out. */
3925:./FreeRtos/src/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:./FreeRtos/src/tasks.c **** 		{
3927:./FreeRtos/src/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:./FreeRtos/src/tasks.c **** 		}
3929:./FreeRtos/src/tasks.c **** 
3930:./FreeRtos/src/tasks.c **** 		/* Terminate. */
3931:./FreeRtos/src/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:./FreeRtos/src/tasks.c **** 
3933:./FreeRtos/src/tasks.c **** 		/* Return the new end of string. */
3934:./FreeRtos/src/tasks.c **** 		return &( pcBuffer[ x ] );
3935:./FreeRtos/src/tasks.c **** 	}
3936:./FreeRtos/src/tasks.c **** 
3937:./FreeRtos/src/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
3939:./FreeRtos/src/tasks.c **** 
3940:./FreeRtos/src/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:./FreeRtos/src/tasks.c **** 
3942:./FreeRtos/src/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
3943:./FreeRtos/src/tasks.c **** 	{
3944:./FreeRtos/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:./FreeRtos/src/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:./FreeRtos/src/tasks.c **** 	char cStatus;
3947:./FreeRtos/src/tasks.c **** 
3948:./FreeRtos/src/tasks.c **** 		/*
3949:./FreeRtos/src/tasks.c **** 		 * PLEASE NOTE:
3950:./FreeRtos/src/tasks.c **** 		 *
3951:./FreeRtos/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:./FreeRtos/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:./FreeRtos/src/tasks.c **** 		 * scheduler.
3954:./FreeRtos/src/tasks.c **** 		 *
3955:./FreeRtos/src/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:./FreeRtos/src/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:./FreeRtos/src/tasks.c **** 		 * displays task names, states and stack usage.
3958:./FreeRtos/src/tasks.c **** 		 *
3959:./FreeRtos/src/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:./FreeRtos/src/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:./FreeRtos/src/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:./FreeRtos/src/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:./FreeRtos/src/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:./FreeRtos/src/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:./FreeRtos/src/tasks.c **** 		 * snprintf() implementation!).
3966:./FreeRtos/src/tasks.c **** 		 *
3967:./FreeRtos/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:./FreeRtos/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:./FreeRtos/src/tasks.c **** 		 * through a call to vTaskList().
3970:./FreeRtos/src/tasks.c **** 		 */
3971:./FreeRtos/src/tasks.c **** 
3972:./FreeRtos/src/tasks.c **** 
3973:./FreeRtos/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:./FreeRtos/src/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:./FreeRtos/src/tasks.c **** 
3976:./FreeRtos/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:./FreeRtos/src/tasks.c **** 		function is executing. */
3978:./FreeRtos/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 84


3980:./FreeRtos/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:./FreeRtos/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:./FreeRtos/src/tasks.c **** 		equate to NULL. */
3983:./FreeRtos/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:./FreeRtos/src/tasks.c **** 
3985:./FreeRtos/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:./FreeRtos/src/tasks.c **** 		{
3987:./FreeRtos/src/tasks.c **** 			/* Generate the (binary) data. */
3988:./FreeRtos/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:./FreeRtos/src/tasks.c **** 
3990:./FreeRtos/src/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:./FreeRtos/src/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:./FreeRtos/src/tasks.c **** 			{
3993:./FreeRtos/src/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:./FreeRtos/src/tasks.c **** 				{
3995:./FreeRtos/src/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:./FreeRtos/src/tasks.c **** 										break;
3997:./FreeRtos/src/tasks.c **** 
3998:./FreeRtos/src/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:./FreeRtos/src/tasks.c **** 										break;
4000:./FreeRtos/src/tasks.c **** 
4001:./FreeRtos/src/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:./FreeRtos/src/tasks.c **** 										break;
4003:./FreeRtos/src/tasks.c **** 
4004:./FreeRtos/src/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:./FreeRtos/src/tasks.c **** 										break;
4006:./FreeRtos/src/tasks.c **** 
4007:./FreeRtos/src/tasks.c **** 					default:			/* Should not get here, but it is included
4008:./FreeRtos/src/tasks.c **** 										to prevent static checking errors. */
4009:./FreeRtos/src/tasks.c **** 										cStatus = 0x00;
4010:./FreeRtos/src/tasks.c **** 										break;
4011:./FreeRtos/src/tasks.c **** 				}
4012:./FreeRtos/src/tasks.c **** 
4013:./FreeRtos/src/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:./FreeRtos/src/tasks.c **** 				can be printed in tabular form more easily. */
4015:./FreeRtos/src/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:./FreeRtos/src/tasks.c **** 
4017:./FreeRtos/src/tasks.c **** 				/* Write the rest of the string. */
4018:./FreeRtos/src/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:./FreeRtos/src/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:./FreeRtos/src/tasks.c **** 			}
4021:./FreeRtos/src/tasks.c **** 
4022:./FreeRtos/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:./FreeRtos/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:./FreeRtos/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:./FreeRtos/src/tasks.c **** 		}
4026:./FreeRtos/src/tasks.c **** 		else
4027:./FreeRtos/src/tasks.c **** 		{
4028:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:./FreeRtos/src/tasks.c **** 		}
4030:./FreeRtos/src/tasks.c **** 	}
4031:./FreeRtos/src/tasks.c **** 
4032:./FreeRtos/src/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
4034:./FreeRtos/src/tasks.c **** 
4035:./FreeRtos/src/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 85


4037:./FreeRtos/src/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:./FreeRtos/src/tasks.c **** 	{
4039:./FreeRtos/src/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:./FreeRtos/src/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:./FreeRtos/src/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:./FreeRtos/src/tasks.c **** 
4043:./FreeRtos/src/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:./FreeRtos/src/tasks.c **** 		{
4045:./FreeRtos/src/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:./FreeRtos/src/tasks.c **** 		}
4047:./FreeRtos/src/tasks.c **** 		#endif
4048:./FreeRtos/src/tasks.c **** 
4049:./FreeRtos/src/tasks.c **** 		/*
4050:./FreeRtos/src/tasks.c **** 		 * PLEASE NOTE:
4051:./FreeRtos/src/tasks.c **** 		 *
4052:./FreeRtos/src/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:./FreeRtos/src/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:./FreeRtos/src/tasks.c **** 		 * scheduler.
4055:./FreeRtos/src/tasks.c **** 		 *
4056:./FreeRtos/src/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4057:./FreeRtos/src/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:./FreeRtos/src/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:./FreeRtos/src/tasks.c **** 		 * in both absolute and percentage terms.
4060:./FreeRtos/src/tasks.c **** 		 *
4061:./FreeRtos/src/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:./FreeRtos/src/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:./FreeRtos/src/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:./FreeRtos/src/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:./FreeRtos/src/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:./FreeRtos/src/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:./FreeRtos/src/tasks.c **** 		 * a full snprintf() implementation!).
4068:./FreeRtos/src/tasks.c **** 		 *
4069:./FreeRtos/src/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:./FreeRtos/src/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:./FreeRtos/src/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:./FreeRtos/src/tasks.c **** 		 */
4073:./FreeRtos/src/tasks.c **** 
4074:./FreeRtos/src/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:./FreeRtos/src/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:./FreeRtos/src/tasks.c **** 
4077:./FreeRtos/src/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:./FreeRtos/src/tasks.c **** 		function is executing. */
4079:./FreeRtos/src/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:./FreeRtos/src/tasks.c **** 
4081:./FreeRtos/src/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:./FreeRtos/src/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:./FreeRtos/src/tasks.c **** 		equate to NULL. */
4084:./FreeRtos/src/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:./FreeRtos/src/tasks.c **** 
4086:./FreeRtos/src/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:./FreeRtos/src/tasks.c **** 		{
4088:./FreeRtos/src/tasks.c **** 			/* Generate the (binary) data. */
4089:./FreeRtos/src/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:./FreeRtos/src/tasks.c **** 
4091:./FreeRtos/src/tasks.c **** 			/* For percentage calculations. */
4092:./FreeRtos/src/tasks.c **** 			ulTotalTime /= 100UL;
4093:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 86


4094:./FreeRtos/src/tasks.c **** 			/* Avoid divide by zero errors. */
4095:./FreeRtos/src/tasks.c **** 			if( ulTotalTime > 0 )
4096:./FreeRtos/src/tasks.c **** 			{
4097:./FreeRtos/src/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:./FreeRtos/src/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:./FreeRtos/src/tasks.c **** 				{
4100:./FreeRtos/src/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:./FreeRtos/src/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:./FreeRtos/src/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:./FreeRtos/src/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:./FreeRtos/src/tasks.c **** 
4105:./FreeRtos/src/tasks.c **** 					/* Write the task name to the string, padding with
4106:./FreeRtos/src/tasks.c **** 					spaces so it can be printed in tabular form more
4107:./FreeRtos/src/tasks.c **** 					easily. */
4108:./FreeRtos/src/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:./FreeRtos/src/tasks.c **** 
4110:./FreeRtos/src/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:./FreeRtos/src/tasks.c **** 					{
4112:./FreeRtos/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:./FreeRtos/src/tasks.c **** 						{
4114:./FreeRtos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:./FreeRtos/src/tasks.c **** 						}
4116:./FreeRtos/src/tasks.c **** 						#else
4117:./FreeRtos/src/tasks.c **** 						{
4118:./FreeRtos/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:./FreeRtos/src/tasks.c **** 							printf() library can be used. */
4120:./FreeRtos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:./FreeRtos/src/tasks.c **** 						}
4122:./FreeRtos/src/tasks.c **** 						#endif
4123:./FreeRtos/src/tasks.c **** 					}
4124:./FreeRtos/src/tasks.c **** 					else
4125:./FreeRtos/src/tasks.c **** 					{
4126:./FreeRtos/src/tasks.c **** 						/* If the percentage is zero here then the task has
4127:./FreeRtos/src/tasks.c **** 						consumed less than 1% of the total run time. */
4128:./FreeRtos/src/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:./FreeRtos/src/tasks.c **** 						{
4130:./FreeRtos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:./FreeRtos/src/tasks.c **** 						}
4132:./FreeRtos/src/tasks.c **** 						#else
4133:./FreeRtos/src/tasks.c **** 						{
4134:./FreeRtos/src/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:./FreeRtos/src/tasks.c **** 							printf() library can be used. */
4136:./FreeRtos/src/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:./FreeRtos/src/tasks.c **** 						}
4138:./FreeRtos/src/tasks.c **** 						#endif
4139:./FreeRtos/src/tasks.c **** 					}
4140:./FreeRtos/src/tasks.c **** 
4141:./FreeRtos/src/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:./FreeRtos/src/tasks.c **** 				}
4143:./FreeRtos/src/tasks.c **** 			}
4144:./FreeRtos/src/tasks.c **** 			else
4145:./FreeRtos/src/tasks.c **** 			{
4146:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:./FreeRtos/src/tasks.c **** 			}
4148:./FreeRtos/src/tasks.c **** 
4149:./FreeRtos/src/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:./FreeRtos/src/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
ARM GAS  /tmp/ccQvkfbu.s 			page 87


4151:./FreeRtos/src/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:./FreeRtos/src/tasks.c **** 		}
4153:./FreeRtos/src/tasks.c **** 		else
4154:./FreeRtos/src/tasks.c **** 		{
4155:./FreeRtos/src/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:./FreeRtos/src/tasks.c **** 		}
4157:./FreeRtos/src/tasks.c **** 	}
4158:./FreeRtos/src/tasks.c **** 
4159:./FreeRtos/src/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4161:./FreeRtos/src/tasks.c **** 
4162:./FreeRtos/src/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:./FreeRtos/src/tasks.c **** {
4164:./FreeRtos/src/tasks.c **** TickType_t uxReturn;
4165:./FreeRtos/src/tasks.c **** 
4166:./FreeRtos/src/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:./FreeRtos/src/tasks.c **** 
4168:./FreeRtos/src/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:./FreeRtos/src/tasks.c **** 	queues and semaphores. */
4170:./FreeRtos/src/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4171:./FreeRtos/src/tasks.c **** 
4172:./FreeRtos/src/tasks.c **** 	return uxReturn;
4173:./FreeRtos/src/tasks.c **** }
4174:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4175:./FreeRtos/src/tasks.c **** 
4176:./FreeRtos/src/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:./FreeRtos/src/tasks.c **** 
4178:./FreeRtos/src/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:./FreeRtos/src/tasks.c **** 	{
4180:./FreeRtos/src/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:./FreeRtos/src/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:./FreeRtos/src/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:./FreeRtos/src/tasks.c **** 		{
4184:./FreeRtos/src/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:./FreeRtos/src/tasks.c **** 		}
4186:./FreeRtos/src/tasks.c **** 
4187:./FreeRtos/src/tasks.c **** 		return pxCurrentTCB;
4188:./FreeRtos/src/tasks.c **** 	}
4189:./FreeRtos/src/tasks.c **** 
4190:./FreeRtos/src/tasks.c **** #endif /* configUSE_MUTEXES */
4191:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4192:./FreeRtos/src/tasks.c **** 
4193:./FreeRtos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:./FreeRtos/src/tasks.c **** 
4195:./FreeRtos/src/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:./FreeRtos/src/tasks.c **** 	{
4197:./FreeRtos/src/tasks.c **** 	uint32_t ulReturn;
4198:./FreeRtos/src/tasks.c **** 
4199:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
4200:./FreeRtos/src/tasks.c **** 		{
4201:./FreeRtos/src/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:./FreeRtos/src/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:./FreeRtos/src/tasks.c **** 			{
4204:./FreeRtos/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:./FreeRtos/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:./FreeRtos/src/tasks.c **** 
4207:./FreeRtos/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
ARM GAS  /tmp/ccQvkfbu.s 			page 88


4208:./FreeRtos/src/tasks.c **** 				{
4209:./FreeRtos/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:./FreeRtos/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:./FreeRtos/src/tasks.c **** 
4212:./FreeRtos/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:./FreeRtos/src/tasks.c **** 					section (some will yield immediately, others wait until the
4214:./FreeRtos/src/tasks.c **** 					critical section exits) - but it is not something that
4215:./FreeRtos/src/tasks.c **** 					application code should ever do. */
4216:./FreeRtos/src/tasks.c **** 					portYIELD_WITHIN_API();
4217:./FreeRtos/src/tasks.c **** 				}
4218:./FreeRtos/src/tasks.c **** 				else
4219:./FreeRtos/src/tasks.c **** 				{
4220:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:./FreeRtos/src/tasks.c **** 				}
4222:./FreeRtos/src/tasks.c **** 			}
4223:./FreeRtos/src/tasks.c **** 			else
4224:./FreeRtos/src/tasks.c **** 			{
4225:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:./FreeRtos/src/tasks.c **** 			}
4227:./FreeRtos/src/tasks.c **** 		}
4228:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
4229:./FreeRtos/src/tasks.c **** 
4230:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
4231:./FreeRtos/src/tasks.c **** 		{
4232:./FreeRtos/src/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:./FreeRtos/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:./FreeRtos/src/tasks.c **** 
4235:./FreeRtos/src/tasks.c **** 			if( ulReturn != 0UL )
4236:./FreeRtos/src/tasks.c **** 			{
4237:./FreeRtos/src/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:./FreeRtos/src/tasks.c **** 				{
4239:./FreeRtos/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:./FreeRtos/src/tasks.c **** 				}
4241:./FreeRtos/src/tasks.c **** 				else
4242:./FreeRtos/src/tasks.c **** 				{
4243:./FreeRtos/src/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:./FreeRtos/src/tasks.c **** 				}
4245:./FreeRtos/src/tasks.c **** 			}
4246:./FreeRtos/src/tasks.c **** 			else
4247:./FreeRtos/src/tasks.c **** 			{
4248:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:./FreeRtos/src/tasks.c **** 			}
4250:./FreeRtos/src/tasks.c **** 
4251:./FreeRtos/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:./FreeRtos/src/tasks.c **** 		}
4253:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
4254:./FreeRtos/src/tasks.c **** 
4255:./FreeRtos/src/tasks.c **** 		return ulReturn;
4256:./FreeRtos/src/tasks.c **** 	}
4257:./FreeRtos/src/tasks.c **** 
4258:./FreeRtos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4260:./FreeRtos/src/tasks.c **** 
4261:./FreeRtos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:./FreeRtos/src/tasks.c **** 
4263:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:./FreeRtos/src/tasks.c **** 	{
ARM GAS  /tmp/ccQvkfbu.s 			page 89


4265:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
4266:./FreeRtos/src/tasks.c **** 
4267:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
4268:./FreeRtos/src/tasks.c **** 		{
4269:./FreeRtos/src/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:./FreeRtos/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:./FreeRtos/src/tasks.c **** 			{
4272:./FreeRtos/src/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:./FreeRtos/src/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:./FreeRtos/src/tasks.c **** 				clear the value to zero. */
4275:./FreeRtos/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:./FreeRtos/src/tasks.c **** 
4277:./FreeRtos/src/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:./FreeRtos/src/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:./FreeRtos/src/tasks.c **** 
4280:./FreeRtos/src/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:./FreeRtos/src/tasks.c **** 				{
4282:./FreeRtos/src/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:./FreeRtos/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:./FreeRtos/src/tasks.c **** 
4285:./FreeRtos/src/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:./FreeRtos/src/tasks.c **** 					section (some will yield immediately, others wait until the
4287:./FreeRtos/src/tasks.c **** 					critical section exits) - but it is not something that
4288:./FreeRtos/src/tasks.c **** 					application code should ever do. */
4289:./FreeRtos/src/tasks.c **** 					portYIELD_WITHIN_API();
4290:./FreeRtos/src/tasks.c **** 				}
4291:./FreeRtos/src/tasks.c **** 				else
4292:./FreeRtos/src/tasks.c **** 				{
4293:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:./FreeRtos/src/tasks.c **** 				}
4295:./FreeRtos/src/tasks.c **** 			}
4296:./FreeRtos/src/tasks.c **** 			else
4297:./FreeRtos/src/tasks.c **** 			{
4298:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:./FreeRtos/src/tasks.c **** 			}
4300:./FreeRtos/src/tasks.c **** 		}
4301:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
4302:./FreeRtos/src/tasks.c **** 
4303:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
4304:./FreeRtos/src/tasks.c **** 		{
4305:./FreeRtos/src/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:./FreeRtos/src/tasks.c **** 
4307:./FreeRtos/src/tasks.c **** 			if( pulNotificationValue != NULL )
4308:./FreeRtos/src/tasks.c **** 			{
4309:./FreeRtos/src/tasks.c **** 				/* Output the current notification value, which may or may not
4310:./FreeRtos/src/tasks.c **** 				have changed. */
4311:./FreeRtos/src/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:./FreeRtos/src/tasks.c **** 			}
4313:./FreeRtos/src/tasks.c **** 
4314:./FreeRtos/src/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:./FreeRtos/src/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:./FreeRtos/src/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:./FreeRtos/src/tasks.c **** 			unblocked because of a timeout. */
4318:./FreeRtos/src/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:./FreeRtos/src/tasks.c **** 			{
4320:./FreeRtos/src/tasks.c **** 				/* A notification was not received. */
4321:./FreeRtos/src/tasks.c **** 				xReturn = pdFALSE;
ARM GAS  /tmp/ccQvkfbu.s 			page 90


4322:./FreeRtos/src/tasks.c **** 			}
4323:./FreeRtos/src/tasks.c **** 			else
4324:./FreeRtos/src/tasks.c **** 			{
4325:./FreeRtos/src/tasks.c **** 				/* A notification was already pending or a notification was
4326:./FreeRtos/src/tasks.c **** 				received while the task was waiting. */
4327:./FreeRtos/src/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:./FreeRtos/src/tasks.c **** 				xReturn = pdTRUE;
4329:./FreeRtos/src/tasks.c **** 			}
4330:./FreeRtos/src/tasks.c **** 
4331:./FreeRtos/src/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:./FreeRtos/src/tasks.c **** 		}
4333:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
4334:./FreeRtos/src/tasks.c **** 
4335:./FreeRtos/src/tasks.c **** 		return xReturn;
4336:./FreeRtos/src/tasks.c **** 	}
4337:./FreeRtos/src/tasks.c **** 
4338:./FreeRtos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4340:./FreeRtos/src/tasks.c **** 
4341:./FreeRtos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4342:./FreeRtos/src/tasks.c **** 
4343:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:./FreeRtos/src/tasks.c **** 	{
4345:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
4346:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:./FreeRtos/src/tasks.c **** 
4349:./FreeRtos/src/tasks.c **** 		configASSERT( xTaskToNotify );
4350:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:./FreeRtos/src/tasks.c **** 
4352:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
4353:./FreeRtos/src/tasks.c **** 		{
4354:./FreeRtos/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:./FreeRtos/src/tasks.c **** 			{
4356:./FreeRtos/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:./FreeRtos/src/tasks.c **** 			}
4358:./FreeRtos/src/tasks.c **** 
4359:./FreeRtos/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:./FreeRtos/src/tasks.c **** 
4361:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:./FreeRtos/src/tasks.c **** 
4363:./FreeRtos/src/tasks.c **** 			switch( eAction )
4364:./FreeRtos/src/tasks.c **** 			{
4365:./FreeRtos/src/tasks.c **** 				case eSetBits	:
4366:./FreeRtos/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:./FreeRtos/src/tasks.c **** 					break;
4368:./FreeRtos/src/tasks.c **** 
4369:./FreeRtos/src/tasks.c **** 				case eIncrement	:
4370:./FreeRtos/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:./FreeRtos/src/tasks.c **** 					break;
4372:./FreeRtos/src/tasks.c **** 
4373:./FreeRtos/src/tasks.c **** 				case eSetValueWithOverwrite	:
4374:./FreeRtos/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:./FreeRtos/src/tasks.c **** 					break;
4376:./FreeRtos/src/tasks.c **** 
4377:./FreeRtos/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:./FreeRtos/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
ARM GAS  /tmp/ccQvkfbu.s 			page 91


4379:./FreeRtos/src/tasks.c **** 					{
4380:./FreeRtos/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:./FreeRtos/src/tasks.c **** 					}
4382:./FreeRtos/src/tasks.c **** 					else
4383:./FreeRtos/src/tasks.c **** 					{
4384:./FreeRtos/src/tasks.c **** 						/* The value could not be written to the task. */
4385:./FreeRtos/src/tasks.c **** 						xReturn = pdFAIL;
4386:./FreeRtos/src/tasks.c **** 					}
4387:./FreeRtos/src/tasks.c **** 					break;
4388:./FreeRtos/src/tasks.c **** 
4389:./FreeRtos/src/tasks.c **** 				case eNoAction:
4390:./FreeRtos/src/tasks.c **** 					/* The task is being notified without its notify value being
4391:./FreeRtos/src/tasks.c **** 					updated. */
4392:./FreeRtos/src/tasks.c **** 					break;
4393:./FreeRtos/src/tasks.c **** 			}
4394:./FreeRtos/src/tasks.c **** 
4395:./FreeRtos/src/tasks.c **** 			traceTASK_NOTIFY();
4396:./FreeRtos/src/tasks.c **** 
4397:./FreeRtos/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:./FreeRtos/src/tasks.c **** 			notification then unblock it now. */
4399:./FreeRtos/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:./FreeRtos/src/tasks.c **** 			{
4401:./FreeRtos/src/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:./FreeRtos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:./FreeRtos/src/tasks.c **** 
4404:./FreeRtos/src/tasks.c **** 				/* The task should not have been on an event list. */
4405:./FreeRtos/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:./FreeRtos/src/tasks.c **** 
4407:./FreeRtos/src/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:./FreeRtos/src/tasks.c **** 				{
4409:./FreeRtos/src/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:./FreeRtos/src/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:./FreeRtos/src/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:./FreeRtos/src/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:./FreeRtos/src/tasks.c **** 					because it will automatically get reset to a new value when
4414:./FreeRtos/src/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:./FreeRtos/src/tasks.c **** 					tickless idling is used it might be more important to enter
4416:./FreeRtos/src/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:./FreeRtos/src/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:./FreeRtos/src/tasks.c **** 					earliest possible time. */
4419:./FreeRtos/src/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:./FreeRtos/src/tasks.c **** 				}
4421:./FreeRtos/src/tasks.c **** 				#endif
4422:./FreeRtos/src/tasks.c **** 
4423:./FreeRtos/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:./FreeRtos/src/tasks.c **** 				{
4425:./FreeRtos/src/tasks.c **** 					/* The notified task has a priority above the currently
4426:./FreeRtos/src/tasks.c **** 					executing task so a yield is required. */
4427:./FreeRtos/src/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:./FreeRtos/src/tasks.c **** 				}
4429:./FreeRtos/src/tasks.c **** 				else
4430:./FreeRtos/src/tasks.c **** 				{
4431:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:./FreeRtos/src/tasks.c **** 				}
4433:./FreeRtos/src/tasks.c **** 			}
4434:./FreeRtos/src/tasks.c **** 			else
4435:./FreeRtos/src/tasks.c **** 			{
ARM GAS  /tmp/ccQvkfbu.s 			page 92


4436:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:./FreeRtos/src/tasks.c **** 			}
4438:./FreeRtos/src/tasks.c **** 		}
4439:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
4440:./FreeRtos/src/tasks.c **** 
4441:./FreeRtos/src/tasks.c **** 		return xReturn;
4442:./FreeRtos/src/tasks.c **** 	}
4443:./FreeRtos/src/tasks.c **** 
4444:./FreeRtos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4446:./FreeRtos/src/tasks.c **** 
4447:./FreeRtos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:./FreeRtos/src/tasks.c **** 
4449:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:./FreeRtos/src/tasks.c **** 	{
4451:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
4452:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:./FreeRtos/src/tasks.c **** 
4456:./FreeRtos/src/tasks.c **** 		configASSERT( xTaskToNotify );
4457:./FreeRtos/src/tasks.c **** 
4458:./FreeRtos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:./FreeRtos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:./FreeRtos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:./FreeRtos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:./FreeRtos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:./FreeRtos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:./FreeRtos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:./FreeRtos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:./FreeRtos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:./FreeRtos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:./FreeRtos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:./FreeRtos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:./FreeRtos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:./FreeRtos/src/tasks.c **** 		provided on the following link:
4473:./FreeRtos/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:./FreeRtos/src/tasks.c **** 
4476:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:./FreeRtos/src/tasks.c **** 
4478:./FreeRtos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:./FreeRtos/src/tasks.c **** 		{
4480:./FreeRtos/src/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:./FreeRtos/src/tasks.c **** 			{
4482:./FreeRtos/src/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:./FreeRtos/src/tasks.c **** 			}
4484:./FreeRtos/src/tasks.c **** 
4485:./FreeRtos/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:./FreeRtos/src/tasks.c **** 
4488:./FreeRtos/src/tasks.c **** 			switch( eAction )
4489:./FreeRtos/src/tasks.c **** 			{
4490:./FreeRtos/src/tasks.c **** 				case eSetBits	:
4491:./FreeRtos/src/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:./FreeRtos/src/tasks.c **** 					break;
ARM GAS  /tmp/ccQvkfbu.s 			page 93


4493:./FreeRtos/src/tasks.c **** 
4494:./FreeRtos/src/tasks.c **** 				case eIncrement	:
4495:./FreeRtos/src/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:./FreeRtos/src/tasks.c **** 					break;
4497:./FreeRtos/src/tasks.c **** 
4498:./FreeRtos/src/tasks.c **** 				case eSetValueWithOverwrite	:
4499:./FreeRtos/src/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:./FreeRtos/src/tasks.c **** 					break;
4501:./FreeRtos/src/tasks.c **** 
4502:./FreeRtos/src/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:./FreeRtos/src/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:./FreeRtos/src/tasks.c **** 					{
4505:./FreeRtos/src/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:./FreeRtos/src/tasks.c **** 					}
4507:./FreeRtos/src/tasks.c **** 					else
4508:./FreeRtos/src/tasks.c **** 					{
4509:./FreeRtos/src/tasks.c **** 						/* The value could not be written to the task. */
4510:./FreeRtos/src/tasks.c **** 						xReturn = pdFAIL;
4511:./FreeRtos/src/tasks.c **** 					}
4512:./FreeRtos/src/tasks.c **** 					break;
4513:./FreeRtos/src/tasks.c **** 
4514:./FreeRtos/src/tasks.c **** 				case eNoAction :
4515:./FreeRtos/src/tasks.c **** 					/* The task is being notified without its notify value being
4516:./FreeRtos/src/tasks.c **** 					updated. */
4517:./FreeRtos/src/tasks.c **** 					break;
4518:./FreeRtos/src/tasks.c **** 			}
4519:./FreeRtos/src/tasks.c **** 
4520:./FreeRtos/src/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:./FreeRtos/src/tasks.c **** 
4522:./FreeRtos/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:./FreeRtos/src/tasks.c **** 			notification then unblock it now. */
4524:./FreeRtos/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:./FreeRtos/src/tasks.c **** 			{
4526:./FreeRtos/src/tasks.c **** 				/* The task should not have been on an event list. */
4527:./FreeRtos/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:./FreeRtos/src/tasks.c **** 
4529:./FreeRtos/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:./FreeRtos/src/tasks.c **** 				{
4531:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:./FreeRtos/src/tasks.c **** 				}
4534:./FreeRtos/src/tasks.c **** 				else
4535:./FreeRtos/src/tasks.c **** 				{
4536:./FreeRtos/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:./FreeRtos/src/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:./FreeRtos/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:./FreeRtos/src/tasks.c **** 				}
4540:./FreeRtos/src/tasks.c **** 
4541:./FreeRtos/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:./FreeRtos/src/tasks.c **** 				{
4543:./FreeRtos/src/tasks.c **** 					/* The notified task has a priority above the currently
4544:./FreeRtos/src/tasks.c **** 					executing task so a yield is required. */
4545:./FreeRtos/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:./FreeRtos/src/tasks.c **** 					{
4547:./FreeRtos/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:./FreeRtos/src/tasks.c **** 					}
4549:./FreeRtos/src/tasks.c **** 					else
ARM GAS  /tmp/ccQvkfbu.s 			page 94


4550:./FreeRtos/src/tasks.c **** 					{
4551:./FreeRtos/src/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:./FreeRtos/src/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:./FreeRtos/src/tasks.c **** 						safe FreeRTOS function. */
4554:./FreeRtos/src/tasks.c **** 						xYieldPending = pdTRUE;
4555:./FreeRtos/src/tasks.c **** 					}
4556:./FreeRtos/src/tasks.c **** 				}
4557:./FreeRtos/src/tasks.c **** 				else
4558:./FreeRtos/src/tasks.c **** 				{
4559:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:./FreeRtos/src/tasks.c **** 				}
4561:./FreeRtos/src/tasks.c **** 			}
4562:./FreeRtos/src/tasks.c **** 		}
4563:./FreeRtos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:./FreeRtos/src/tasks.c **** 
4565:./FreeRtos/src/tasks.c **** 		return xReturn;
4566:./FreeRtos/src/tasks.c **** 	}
4567:./FreeRtos/src/tasks.c **** 
4568:./FreeRtos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4570:./FreeRtos/src/tasks.c **** 
4571:./FreeRtos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:./FreeRtos/src/tasks.c **** 
4573:./FreeRtos/src/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:./FreeRtos/src/tasks.c **** 	{
4575:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
4576:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:./FreeRtos/src/tasks.c **** 
4579:./FreeRtos/src/tasks.c **** 		configASSERT( xTaskToNotify );
4580:./FreeRtos/src/tasks.c **** 
4581:./FreeRtos/src/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:./FreeRtos/src/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:./FreeRtos/src/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:./FreeRtos/src/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:./FreeRtos/src/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:./FreeRtos/src/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:./FreeRtos/src/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:./FreeRtos/src/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:./FreeRtos/src/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:./FreeRtos/src/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:./FreeRtos/src/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:./FreeRtos/src/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:./FreeRtos/src/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:./FreeRtos/src/tasks.c **** 		provided on the following link:
4596:./FreeRtos/src/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:./FreeRtos/src/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:./FreeRtos/src/tasks.c **** 
4599:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:./FreeRtos/src/tasks.c **** 
4601:./FreeRtos/src/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:./FreeRtos/src/tasks.c **** 		{
4603:./FreeRtos/src/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:./FreeRtos/src/tasks.c **** 
4606:./FreeRtos/src/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
ARM GAS  /tmp/ccQvkfbu.s 			page 95


4607:./FreeRtos/src/tasks.c **** 			semaphore. */
4608:./FreeRtos/src/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:./FreeRtos/src/tasks.c **** 
4610:./FreeRtos/src/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:./FreeRtos/src/tasks.c **** 
4612:./FreeRtos/src/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:./FreeRtos/src/tasks.c **** 			notification then unblock it now. */
4614:./FreeRtos/src/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:./FreeRtos/src/tasks.c **** 			{
4616:./FreeRtos/src/tasks.c **** 				/* The task should not have been on an event list. */
4617:./FreeRtos/src/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:./FreeRtos/src/tasks.c **** 
4619:./FreeRtos/src/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:./FreeRtos/src/tasks.c **** 				{
4621:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:./FreeRtos/src/tasks.c **** 				}
4624:./FreeRtos/src/tasks.c **** 				else
4625:./FreeRtos/src/tasks.c **** 				{
4626:./FreeRtos/src/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4627:./FreeRtos/src/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:./FreeRtos/src/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:./FreeRtos/src/tasks.c **** 				}
4630:./FreeRtos/src/tasks.c **** 
4631:./FreeRtos/src/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:./FreeRtos/src/tasks.c **** 				{
4633:./FreeRtos/src/tasks.c **** 					/* The notified task has a priority above the currently
4634:./FreeRtos/src/tasks.c **** 					executing task so a yield is required. */
4635:./FreeRtos/src/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:./FreeRtos/src/tasks.c **** 					{
4637:./FreeRtos/src/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:./FreeRtos/src/tasks.c **** 					}
4639:./FreeRtos/src/tasks.c **** 					else
4640:./FreeRtos/src/tasks.c **** 					{
4641:./FreeRtos/src/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:./FreeRtos/src/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:./FreeRtos/src/tasks.c **** 						safe FreeRTOS function. */
4644:./FreeRtos/src/tasks.c **** 						xYieldPending = pdTRUE;
4645:./FreeRtos/src/tasks.c **** 					}
4646:./FreeRtos/src/tasks.c **** 				}
4647:./FreeRtos/src/tasks.c **** 				else
4648:./FreeRtos/src/tasks.c **** 				{
4649:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:./FreeRtos/src/tasks.c **** 				}
4651:./FreeRtos/src/tasks.c **** 			}
4652:./FreeRtos/src/tasks.c **** 		}
4653:./FreeRtos/src/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:./FreeRtos/src/tasks.c **** 	}
4655:./FreeRtos/src/tasks.c **** 
4656:./FreeRtos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:./FreeRtos/src/tasks.c **** 
4658:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4659:./FreeRtos/src/tasks.c **** 
4660:./FreeRtos/src/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:./FreeRtos/src/tasks.c **** 
4662:./FreeRtos/src/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:./FreeRtos/src/tasks.c **** 	{
ARM GAS  /tmp/ccQvkfbu.s 			page 96


4664:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
4665:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
4666:./FreeRtos/src/tasks.c **** 
4667:./FreeRtos/src/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:./FreeRtos/src/tasks.c **** 		its notification state cleared. */
4669:./FreeRtos/src/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:./FreeRtos/src/tasks.c **** 
4671:./FreeRtos/src/tasks.c **** 		taskENTER_CRITICAL();
4672:./FreeRtos/src/tasks.c **** 		{
4673:./FreeRtos/src/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:./FreeRtos/src/tasks.c **** 			{
4675:./FreeRtos/src/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:./FreeRtos/src/tasks.c **** 				xReturn = pdPASS;
4677:./FreeRtos/src/tasks.c **** 			}
4678:./FreeRtos/src/tasks.c **** 			else
4679:./FreeRtos/src/tasks.c **** 			{
4680:./FreeRtos/src/tasks.c **** 				xReturn = pdFAIL;
4681:./FreeRtos/src/tasks.c **** 			}
4682:./FreeRtos/src/tasks.c **** 		}
4683:./FreeRtos/src/tasks.c **** 		taskEXIT_CRITICAL();
4684:./FreeRtos/src/tasks.c **** 
4685:./FreeRtos/src/tasks.c **** 		return xReturn;
4686:./FreeRtos/src/tasks.c **** 	}
4687:./FreeRtos/src/tasks.c **** 
4688:./FreeRtos/src/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
4690:./FreeRtos/src/tasks.c **** 
4691:./FreeRtos/src/tasks.c **** 
4692:./FreeRtos/src/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:./FreeRtos/src/tasks.c **** {
 606              		.loc 1 4693 1 view -0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              		.loc 1 4693 1 is_stmt 0 view .LVU169
 611 0000 70B5     		push	{r4, r5, r6, lr}
 612              	.LCFI5:
 613              		.cfi_def_cfa_offset 16
 614              		.cfi_offset 4, -16
 615              		.cfi_offset 5, -12
 616              		.cfi_offset 6, -8
 617              		.cfi_offset 14, -4
 618 0002 0446     		mov	r4, r0
 619 0004 0D46     		mov	r5, r1
4694:./FreeRtos/src/tasks.c **** TickType_t xTimeToWake;
 620              		.loc 1 4694 1 is_stmt 1 view .LVU170
4695:./FreeRtos/src/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 621              		.loc 1 4695 1 view .LVU171
 622              		.loc 1 4695 18 is_stmt 0 view .LVU172
 623 0006 1D4B     		ldr	r3, .L49
 624 0008 1E68     		ldr	r6, [r3]
 625              	.LVL44:
4696:./FreeRtos/src/tasks.c **** 
4697:./FreeRtos/src/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:./FreeRtos/src/tasks.c **** 	{
4699:./FreeRtos/src/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:./FreeRtos/src/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
ARM GAS  /tmp/ccQvkfbu.s 			page 97


4701:./FreeRtos/src/tasks.c **** 		when the task leaves the Blocked state. */
4702:./FreeRtos/src/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:./FreeRtos/src/tasks.c **** 	}
4704:./FreeRtos/src/tasks.c **** 	#endif
4705:./FreeRtos/src/tasks.c **** 
4706:./FreeRtos/src/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:./FreeRtos/src/tasks.c **** 	as the same list item is used for both lists. */
4708:./FreeRtos/src/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 626              		.loc 1 4708 2 is_stmt 1 view .LVU173
 627              		.loc 1 4708 35 is_stmt 0 view .LVU174
 628 000a 1D4B     		ldr	r3, .L49+4
 629 000c 1868     		ldr	r0, [r3]
 630              	.LVL45:
 631              		.loc 1 4708 6 view .LVU175
 632 000e 0430     		adds	r0, r0, #4
 633 0010 FFF7FEFF 		bl	uxListRemove
 634              	.LVL46:
 635              		.loc 1 4708 4 view .LVU176
 636 0014 50B9     		cbnz	r0, .L43
4709:./FreeRtos/src/tasks.c **** 	{
4710:./FreeRtos/src/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:./FreeRtos/src/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:./FreeRtos/src/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 637              		.loc 1 4712 3 is_stmt 1 view .LVU177
 638 0016 1A4B     		ldr	r3, .L49+4
 639 0018 1B68     		ldr	r3, [r3]
 640 001a DA6A     		ldr	r2, [r3, #44]
 641 001c 0123     		movs	r3, #1
 642 001e 03FA02F2 		lsl	r2, r3, r2
 643 0022 1849     		ldr	r1, .L49+8
 644 0024 0B68     		ldr	r3, [r1]
 645 0026 23EA0203 		bic	r3, r3, r2
 646 002a 0B60     		str	r3, [r1]
 647              	.L43:
4713:./FreeRtos/src/tasks.c **** 	}
4714:./FreeRtos/src/tasks.c **** 	else
4715:./FreeRtos/src/tasks.c **** 	{
4716:./FreeRtos/src/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 648              		.loc 1 4716 27 view .LVU178
4717:./FreeRtos/src/tasks.c **** 	}
4718:./FreeRtos/src/tasks.c **** 
4719:./FreeRtos/src/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:./FreeRtos/src/tasks.c **** 	{
4721:./FreeRtos/src/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 649              		.loc 1 4721 3 view .LVU179
 650              		.loc 1 4721 5 is_stmt 0 view .LVU180
 651 002c B4F1FF3F 		cmp	r4, #-1
 652 0030 0DD0     		beq	.L48
 653              	.L44:
4722:./FreeRtos/src/tasks.c **** 		{
4723:./FreeRtos/src/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:./FreeRtos/src/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:./FreeRtos/src/tasks.c **** 			indefinitely. */
4726:./FreeRtos/src/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4727:./FreeRtos/src/tasks.c **** 		}
4728:./FreeRtos/src/tasks.c **** 		else
4729:./FreeRtos/src/tasks.c **** 		{
ARM GAS  /tmp/ccQvkfbu.s 			page 98


4730:./FreeRtos/src/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:./FreeRtos/src/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:./FreeRtos/src/tasks.c **** 			kernel will manage it correctly. */
4733:./FreeRtos/src/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 654              		.loc 1 4733 4 is_stmt 1 view .LVU181
 655              		.loc 1 4733 16 is_stmt 0 view .LVU182
 656 0032 3444     		add	r4, r4, r6
 657              	.LVL47:
4734:./FreeRtos/src/tasks.c **** 
4735:./FreeRtos/src/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:./FreeRtos/src/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 658              		.loc 1 4736 4 is_stmt 1 view .LVU183
 659 0034 124B     		ldr	r3, .L49+4
 660 0036 1B68     		ldr	r3, [r3]
 661 0038 5C60     		str	r4, [r3, #4]
4737:./FreeRtos/src/tasks.c **** 
4738:./FreeRtos/src/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 662              		.loc 1 4738 4 view .LVU184
 663              		.loc 1 4738 6 is_stmt 0 view .LVU185
 664 003a A642     		cmp	r6, r4
 665 003c 10D9     		bls	.L46
4739:./FreeRtos/src/tasks.c **** 			{
4740:./FreeRtos/src/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:./FreeRtos/src/tasks.c **** 				list. */
4742:./FreeRtos/src/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 666              		.loc 1 4742 5 is_stmt 1 view .LVU186
 667 003e 124B     		ldr	r3, .L49+12
 668 0040 1868     		ldr	r0, [r3]
 669              		.loc 1 4742 60 is_stmt 0 view .LVU187
 670 0042 0F4B     		ldr	r3, .L49+4
 671 0044 1968     		ldr	r1, [r3]
 672              		.loc 1 4742 5 view .LVU188
 673 0046 0431     		adds	r1, r1, #4
 674 0048 FFF7FEFF 		bl	vListInsert
 675              	.LVL48:
 676              	.L42:
4743:./FreeRtos/src/tasks.c **** 			}
4744:./FreeRtos/src/tasks.c **** 			else
4745:./FreeRtos/src/tasks.c **** 			{
4746:./FreeRtos/src/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:./FreeRtos/src/tasks.c **** 				is used. */
4748:./FreeRtos/src/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4749:./FreeRtos/src/tasks.c **** 
4750:./FreeRtos/src/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:./FreeRtos/src/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:./FreeRtos/src/tasks.c **** 				needs to be updated too. */
4753:./FreeRtos/src/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
4754:./FreeRtos/src/tasks.c **** 				{
4755:./FreeRtos/src/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
4756:./FreeRtos/src/tasks.c **** 				}
4757:./FreeRtos/src/tasks.c **** 				else
4758:./FreeRtos/src/tasks.c **** 				{
4759:./FreeRtos/src/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4760:./FreeRtos/src/tasks.c **** 				}
4761:./FreeRtos/src/tasks.c **** 			}
4762:./FreeRtos/src/tasks.c **** 		}
4763:./FreeRtos/src/tasks.c **** 	}
ARM GAS  /tmp/ccQvkfbu.s 			page 99


4764:./FreeRtos/src/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4765:./FreeRtos/src/tasks.c **** 	{
4766:./FreeRtos/src/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4767:./FreeRtos/src/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4768:./FreeRtos/src/tasks.c **** 		will manage it correctly. */
4769:./FreeRtos/src/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4770:./FreeRtos/src/tasks.c **** 
4771:./FreeRtos/src/tasks.c **** 		/* The list item will be inserted in wake time order. */
4772:./FreeRtos/src/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4773:./FreeRtos/src/tasks.c **** 
4774:./FreeRtos/src/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4775:./FreeRtos/src/tasks.c **** 		{
4776:./FreeRtos/src/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4777:./FreeRtos/src/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4778:./FreeRtos/src/tasks.c **** 		}
4779:./FreeRtos/src/tasks.c **** 		else
4780:./FreeRtos/src/tasks.c **** 		{
4781:./FreeRtos/src/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4782:./FreeRtos/src/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4783:./FreeRtos/src/tasks.c **** 
4784:./FreeRtos/src/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4785:./FreeRtos/src/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
4786:./FreeRtos/src/tasks.c **** 			too. */
4787:./FreeRtos/src/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
4788:./FreeRtos/src/tasks.c **** 			{
4789:./FreeRtos/src/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
4790:./FreeRtos/src/tasks.c **** 			}
4791:./FreeRtos/src/tasks.c **** 			else
4792:./FreeRtos/src/tasks.c **** 			{
4793:./FreeRtos/src/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4794:./FreeRtos/src/tasks.c **** 			}
4795:./FreeRtos/src/tasks.c **** 		}
4796:./FreeRtos/src/tasks.c **** 
4797:./FreeRtos/src/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
4798:./FreeRtos/src/tasks.c **** 		( void ) xCanBlockIndefinitely;
4799:./FreeRtos/src/tasks.c **** 	}
4800:./FreeRtos/src/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
4801:./FreeRtos/src/tasks.c **** }
 677              		.loc 1 4801 1 view .LVU189
 678 004c 70BD     		pop	{r4, r5, r6, pc}
 679              	.LVL49:
 680              	.L48:
4721:./FreeRtos/src/tasks.c **** 		{
 681              		.loc 1 4721 41 discriminator 1 view .LVU190
 682 004e 002D     		cmp	r5, #0
 683 0050 EFD0     		beq	.L44
4726:./FreeRtos/src/tasks.c **** 		}
 684              		.loc 1 4726 4 is_stmt 1 view .LVU191
4726:./FreeRtos/src/tasks.c **** 		}
 685              		.loc 1 4726 56 is_stmt 0 view .LVU192
 686 0052 0B4B     		ldr	r3, .L49+4
 687 0054 1968     		ldr	r1, [r3]
4726:./FreeRtos/src/tasks.c **** 		}
 688              		.loc 1 4726 4 view .LVU193
 689 0056 0431     		adds	r1, r1, #4
 690 0058 0C48     		ldr	r0, .L49+16
 691 005a FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccQvkfbu.s 			page 100


 692              	.LVL50:
 693 005e F5E7     		b	.L42
 694              	.LVL51:
 695              	.L46:
4748:./FreeRtos/src/tasks.c **** 
 696              		.loc 1 4748 5 is_stmt 1 view .LVU194
 697 0060 0B4B     		ldr	r3, .L49+20
 698 0062 1868     		ldr	r0, [r3]
4748:./FreeRtos/src/tasks.c **** 
 699              		.loc 1 4748 52 is_stmt 0 view .LVU195
 700 0064 064B     		ldr	r3, .L49+4
 701 0066 1968     		ldr	r1, [r3]
4748:./FreeRtos/src/tasks.c **** 
 702              		.loc 1 4748 5 view .LVU196
 703 0068 0431     		adds	r1, r1, #4
 704 006a FFF7FEFF 		bl	vListInsert
 705              	.LVL52:
4753:./FreeRtos/src/tasks.c **** 				{
 706              		.loc 1 4753 5 is_stmt 1 view .LVU197
4753:./FreeRtos/src/tasks.c **** 				{
 707              		.loc 1 4753 21 is_stmt 0 view .LVU198
 708 006e 094B     		ldr	r3, .L49+24
 709 0070 1B68     		ldr	r3, [r3]
4753:./FreeRtos/src/tasks.c **** 				{
 710              		.loc 1 4753 7 view .LVU199
 711 0072 A342     		cmp	r3, r4
 712 0074 EAD9     		bls	.L42
4755:./FreeRtos/src/tasks.c **** 				}
 713              		.loc 1 4755 6 is_stmt 1 view .LVU200
4755:./FreeRtos/src/tasks.c **** 				}
 714              		.loc 1 4755 27 is_stmt 0 view .LVU201
 715 0076 074B     		ldr	r3, .L49+24
 716 0078 1C60     		str	r4, [r3]
4759:./FreeRtos/src/tasks.c **** 				}
 717              		.loc 1 4759 30 is_stmt 1 view .LVU202
 718              		.loc 1 4801 1 is_stmt 0 view .LVU203
 719 007a E7E7     		b	.L42
 720              	.L50:
 721              		.align	2
 722              	.L49:
 723 007c 00000000 		.word	.LANCHOR14
 724 0080 00000000 		.word	.LANCHOR10
 725 0084 00000000 		.word	.LANCHOR13
 726 0088 00000000 		.word	.LANCHOR8
 727 008c 00000000 		.word	.LANCHOR2
 728 0090 00000000 		.word	.LANCHOR0
 729 0094 00000000 		.word	.LANCHOR1
 730              		.cfi_endproc
 731              	.LFE175:
 733              		.section	.text.xTaskCreate,"ax",%progbits
 734              		.align	1
 735              		.global	xTaskCreate
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	xTaskCreate:
ARM GAS  /tmp/ccQvkfbu.s 			page 101


 742              	.LVL53:
 743              	.LFB131:
 682:./FreeRtos/src/tasks.c **** 	TCB_t *pxNewTCB;
 744              		.loc 1 682 2 is_stmt 1 view -0
 745              		.cfi_startproc
 746              		@ args = 8, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 682:./FreeRtos/src/tasks.c **** 	TCB_t *pxNewTCB;
 748              		.loc 1 682 2 is_stmt 0 view .LVU205
 749 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 750              	.LCFI6:
 751              		.cfi_def_cfa_offset 28
 752              		.cfi_offset 4, -28
 753              		.cfi_offset 5, -24
 754              		.cfi_offset 6, -20
 755              		.cfi_offset 7, -16
 756              		.cfi_offset 8, -12
 757              		.cfi_offset 9, -8
 758              		.cfi_offset 14, -4
 759 0004 85B0     		sub	sp, sp, #20
 760              	.LCFI7:
 761              		.cfi_def_cfa_offset 48
 762 0006 0746     		mov	r7, r0
 763 0008 8846     		mov	r8, r1
 764 000a 1446     		mov	r4, r2
 765 000c 1E46     		mov	r6, r3
 683:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
 766              		.loc 1 683 2 is_stmt 1 view .LVU206
 684:./FreeRtos/src/tasks.c **** 
 767              		.loc 1 684 2 view .LVU207
 768              	.LBB26:
 713:./FreeRtos/src/tasks.c **** 
 769              		.loc 1 713 3 view .LVU208
 716:./FreeRtos/src/tasks.c **** 
 770              		.loc 1 716 4 view .LVU209
 716:./FreeRtos/src/tasks.c **** 
 771              		.loc 1 716 32 is_stmt 0 view .LVU210
 772 000e 9000     		lsls	r0, r2, #2
 773              	.LVL54:
 716:./FreeRtos/src/tasks.c **** 
 774              		.loc 1 716 32 view .LVU211
 775 0010 FFF7FEFF 		bl	pvPortMalloc
 776              	.LVL55:
 718:./FreeRtos/src/tasks.c **** 			{
 777              		.loc 1 718 4 is_stmt 1 view .LVU212
 718:./FreeRtos/src/tasks.c **** 			{
 778              		.loc 1 718 6 is_stmt 0 view .LVU213
 779 0014 F0B1     		cbz	r0, .L55
 780 0016 8146     		mov	r9, r0
 721:./FreeRtos/src/tasks.c **** 
 781              		.loc 1 721 5 is_stmt 1 view .LVU214
 721:./FreeRtos/src/tasks.c **** 
 782              		.loc 1 721 28 is_stmt 0 view .LVU215
 783 0018 4C20     		movs	r0, #76
 784              	.LVL56:
 721:./FreeRtos/src/tasks.c **** 
 785              		.loc 1 721 28 view .LVU216
ARM GAS  /tmp/ccQvkfbu.s 			page 102


 786 001a FFF7FEFF 		bl	pvPortMalloc
 787              	.LVL57:
 723:./FreeRtos/src/tasks.c **** 				{
 788              		.loc 1 723 5 is_stmt 1 view .LVU217
 723:./FreeRtos/src/tasks.c **** 				{
 789              		.loc 1 723 7 is_stmt 0 view .LVU218
 790 001e 0546     		mov	r5, r0
 791 0020 A0B1     		cbz	r0, .L53
 726:./FreeRtos/src/tasks.c **** 				}
 792              		.loc 1 726 6 is_stmt 1 view .LVU219
 726:./FreeRtos/src/tasks.c **** 				}
 793              		.loc 1 726 24 is_stmt 0 view .LVU220
 794 0022 C0F83090 		str	r9, [r0, #48]
 795              	.LVL58:
 796              	.L54:
 726:./FreeRtos/src/tasks.c **** 				}
 797              		.loc 1 726 24 view .LVU221
 798              	.LBE26:
 742:./FreeRtos/src/tasks.c **** 		{
 799              		.loc 1 742 3 is_stmt 1 view .LVU222
 742:./FreeRtos/src/tasks.c **** 		{
 800              		.loc 1 742 5 is_stmt 0 view .LVU223
 801 0026 D5B1     		cbz	r5, .L56
 752:./FreeRtos/src/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 802              		.loc 1 752 4 is_stmt 1 view .LVU224
 803 0028 0023     		movs	r3, #0
 804 002a 0393     		str	r3, [sp, #12]
 805 002c 0295     		str	r5, [sp, #8]
 806 002e 0D9B     		ldr	r3, [sp, #52]
 807 0030 0193     		str	r3, [sp, #4]
 808 0032 0C9B     		ldr	r3, [sp, #48]
 809 0034 0093     		str	r3, [sp]
 810 0036 3346     		mov	r3, r6
 811 0038 2246     		mov	r2, r4
 812 003a 4146     		mov	r1, r8
 813 003c 3846     		mov	r0, r7
 814 003e FFF7FEFF 		bl	prvInitialiseNewTask
 815              	.LVL59:
 753:./FreeRtos/src/tasks.c **** 			xReturn = pdPASS;
 816              		.loc 1 753 4 view .LVU225
 817 0042 2846     		mov	r0, r5
 818 0044 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 819              	.LVL60:
 754:./FreeRtos/src/tasks.c **** 		}
 820              		.loc 1 754 4 view .LVU226
 754:./FreeRtos/src/tasks.c **** 		}
 821              		.loc 1 754 12 is_stmt 0 view .LVU227
 822 0048 0120     		movs	r0, #1
 823 004a 05E0     		b	.L51
 824              	.LVL61:
 825              	.L53:
 826              	.LBB27:
 732:./FreeRtos/src/tasks.c **** 				}
 827              		.loc 1 732 6 is_stmt 1 view .LVU228
 828 004c 4846     		mov	r0, r9
 829              	.LVL62:
 732:./FreeRtos/src/tasks.c **** 				}
ARM GAS  /tmp/ccQvkfbu.s 			page 103


 830              		.loc 1 732 6 is_stmt 0 view .LVU229
 831 004e FFF7FEFF 		bl	vPortFree
 832              	.LVL63:
 833 0052 E8E7     		b	.L54
 834              	.LVL64:
 835              	.L55:
 732:./FreeRtos/src/tasks.c **** 				}
 836              		.loc 1 732 6 view .LVU230
 837              	.LBE27:
 758:./FreeRtos/src/tasks.c **** 		}
 838              		.loc 1 758 12 view .LVU231
 839 0054 4FF0FF30 		mov	r0, #-1
 840              	.LVL65:
 841              	.L51:
 762:./FreeRtos/src/tasks.c **** 
 842              		.loc 1 762 2 view .LVU232
 843 0058 05B0     		add	sp, sp, #20
 844              	.LCFI8:
 845              		.cfi_remember_state
 846              		.cfi_def_cfa_offset 28
 847              		@ sp needed
 848 005a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 849              	.LVL66:
 850              	.L56:
 851              	.LCFI9:
 852              		.cfi_restore_state
 758:./FreeRtos/src/tasks.c **** 		}
 853              		.loc 1 758 12 view .LVU233
 854 005e 4FF0FF30 		mov	r0, #-1
 855              	.LVL67:
 761:./FreeRtos/src/tasks.c **** 	}
 856              		.loc 1 761 3 is_stmt 1 view .LVU234
 761:./FreeRtos/src/tasks.c **** 	}
 857              		.loc 1 761 10 is_stmt 0 view .LVU235
 858 0062 F9E7     		b	.L51
 859              		.cfi_endproc
 860              	.LFE131:
 862              		.section	.text.vTaskDelete,"ax",%progbits
 863              		.align	1
 864              		.global	vTaskDelete
 865              		.syntax unified
 866              		.thumb
 867              		.thumb_func
 868              		.fpu fpv4-sp-d16
 870              	vTaskDelete:
 871              	.LVL68:
 872              	.LFB134:
1049:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 873              		.loc 1 1049 2 is_stmt 1 view -0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 0
 876              		@ frame_needed = 0, uses_anonymous_args = 0
1049:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 877              		.loc 1 1049 2 is_stmt 0 view .LVU237
 878 0000 38B5     		push	{r3, r4, r5, lr}
 879              	.LCFI10:
 880              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccQvkfbu.s 			page 104


 881              		.cfi_offset 3, -16
 882              		.cfi_offset 4, -12
 883              		.cfi_offset 5, -8
 884              		.cfi_offset 14, -4
 885 0002 0446     		mov	r4, r0
1050:./FreeRtos/src/tasks.c **** 
 886              		.loc 1 1050 2 is_stmt 1 view .LVU238
1052:./FreeRtos/src/tasks.c **** 		{
 887              		.loc 1 1052 3 view .LVU239
 888 0004 FFF7FEFF 		bl	vPortEnterCritical
 889              	.LVL69:
1056:./FreeRtos/src/tasks.c **** 
 890              		.loc 1 1056 4 view .LVU240
1056:./FreeRtos/src/tasks.c **** 
 891              		.loc 1 1056 12 is_stmt 0 view .LVU241
 892 0008 002C     		cmp	r4, #0
 893 000a 33D0     		beq	.L67
 894              	.LVL70:
 895              	.L59:
1059:./FreeRtos/src/tasks.c **** 			{
 896              		.loc 1 1059 4 is_stmt 1 discriminator 4 view .LVU242
1059:./FreeRtos/src/tasks.c **** 			{
 897              		.loc 1 1059 8 is_stmt 0 discriminator 4 view .LVU243
 898 000c 251D     		adds	r5, r4, #4
 899 000e 2846     		mov	r0, r5
 900 0010 FFF7FEFF 		bl	uxListRemove
 901              	.LVL71:
1059:./FreeRtos/src/tasks.c **** 			{
 902              		.loc 1 1059 6 discriminator 4 view .LVU244
 903 0014 68B9     		cbnz	r0, .L60
1061:./FreeRtos/src/tasks.c **** 			}
 904              		.loc 1 1061 5 is_stmt 1 view .LVU245
 905 0016 E36A     		ldr	r3, [r4, #44]
 906 0018 03EB8301 		add	r1, r3, r3, lsl #2
 907 001c 264A     		ldr	r2, .L71
 908 001e 52F82120 		ldr	r2, [r2, r1, lsl #2]
 909 0022 32B9     		cbnz	r2, .L60
1061:./FreeRtos/src/tasks.c **** 			}
 910              		.loc 1 1061 5 discriminator 1 view .LVU246
 911 0024 0122     		movs	r2, #1
 912 0026 9A40     		lsls	r2, r2, r3
 913 0028 2449     		ldr	r1, .L71+4
 914 002a 0B68     		ldr	r3, [r1]
 915 002c 23EA0203 		bic	r3, r3, r2
 916 0030 0B60     		str	r3, [r1]
 917              	.L60:
1065:./FreeRtos/src/tasks.c **** 			}
 918              		.loc 1 1065 29 view .LVU247
1069:./FreeRtos/src/tasks.c **** 			{
 919              		.loc 1 1069 4 view .LVU248
1069:./FreeRtos/src/tasks.c **** 			{
 920              		.loc 1 1069 8 is_stmt 0 view .LVU249
 921 0032 A36A     		ldr	r3, [r4, #40]
1069:./FreeRtos/src/tasks.c **** 			{
 922              		.loc 1 1069 6 view .LVU250
 923 0034 1BB1     		cbz	r3, .L61
1071:./FreeRtos/src/tasks.c **** 			}
ARM GAS  /tmp/ccQvkfbu.s 			page 105


 924              		.loc 1 1071 5 is_stmt 1 view .LVU251
1071:./FreeRtos/src/tasks.c **** 			}
 925              		.loc 1 1071 14 is_stmt 0 view .LVU252
 926 0036 04F11800 		add	r0, r4, #24
 927 003a FFF7FEFF 		bl	uxListRemove
 928              	.LVL72:
 929              	.L61:
1075:./FreeRtos/src/tasks.c **** 			}
 930              		.loc 1 1075 29 is_stmt 1 view .LVU253
1082:./FreeRtos/src/tasks.c **** 
 931              		.loc 1 1082 4 view .LVU254
1082:./FreeRtos/src/tasks.c **** 
 932              		.loc 1 1082 16 is_stmt 0 view .LVU255
 933 003e 204A     		ldr	r2, .L71+8
 934 0040 1368     		ldr	r3, [r2]
 935 0042 0133     		adds	r3, r3, #1
 936 0044 1360     		str	r3, [r2]
1084:./FreeRtos/src/tasks.c **** 			{
 937              		.loc 1 1084 4 is_stmt 1 view .LVU256
1084:./FreeRtos/src/tasks.c **** 			{
 938              		.loc 1 1084 14 is_stmt 0 view .LVU257
 939 0046 1F4B     		ldr	r3, .L71+12
 940 0048 1B68     		ldr	r3, [r3]
1084:./FreeRtos/src/tasks.c **** 			{
 941              		.loc 1 1084 6 view .LVU258
 942 004a A342     		cmp	r3, r4
 943 004c 15D0     		beq	.L68
1107:./FreeRtos/src/tasks.c **** 				prvDeleteTCB( pxTCB );
 944              		.loc 1 1107 5 is_stmt 1 view .LVU259
 945 004e 1E4A     		ldr	r2, .L71+16
 946 0050 1368     		ldr	r3, [r2]
 947 0052 013B     		subs	r3, r3, #1
 948 0054 1360     		str	r3, [r2]
1108:./FreeRtos/src/tasks.c **** 
 949              		.loc 1 1108 5 view .LVU260
 950 0056 2046     		mov	r0, r4
 951 0058 FFF7FEFF 		bl	prvDeleteTCB
 952              	.LVL73:
1112:./FreeRtos/src/tasks.c **** 			}
 953              		.loc 1 1112 5 view .LVU261
 954 005c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 955              	.LVL74:
 956              	.L63:
1115:./FreeRtos/src/tasks.c **** 		}
 957              		.loc 1 1115 29 view .LVU262
1117:./FreeRtos/src/tasks.c **** 
 958              		.loc 1 1117 3 view .LVU263
 959 0060 FFF7FEFF 		bl	vPortExitCritical
 960              	.LVL75:
1121:./FreeRtos/src/tasks.c **** 		{
 961              		.loc 1 1121 3 view .LVU264
1121:./FreeRtos/src/tasks.c **** 		{
 962              		.loc 1 1121 25 is_stmt 0 view .LVU265
 963 0064 194B     		ldr	r3, .L71+20
 964 0066 1B68     		ldr	r3, [r3]
1121:./FreeRtos/src/tasks.c **** 		{
 965              		.loc 1 1121 5 view .LVU266
ARM GAS  /tmp/ccQvkfbu.s 			page 106


 966 0068 1BB1     		cbz	r3, .L58
1123:./FreeRtos/src/tasks.c **** 			{
 967              		.loc 1 1123 4 is_stmt 1 view .LVU267
1123:./FreeRtos/src/tasks.c **** 			{
 968              		.loc 1 1123 14 is_stmt 0 view .LVU268
 969 006a 164B     		ldr	r3, .L71+12
 970 006c 1B68     		ldr	r3, [r3]
1123:./FreeRtos/src/tasks.c **** 			{
 971              		.loc 1 1123 6 view .LVU269
 972 006e A342     		cmp	r3, r4
 973 0070 0CD0     		beq	.L69
 974              	.L58:
1133:./FreeRtos/src/tasks.c **** 
 975              		.loc 1 1133 2 view .LVU270
 976 0072 38BD     		pop	{r3, r4, r5, pc}
 977              	.LVL76:
 978              	.L67:
1056:./FreeRtos/src/tasks.c **** 
 979              		.loc 1 1056 12 discriminator 1 view .LVU271
 980 0074 134B     		ldr	r3, .L71+12
 981 0076 1C68     		ldr	r4, [r3]
 982              	.LVL77:
1056:./FreeRtos/src/tasks.c **** 
 983              		.loc 1 1056 12 discriminator 1 view .LVU272
 984 0078 C8E7     		b	.L59
 985              	.LVL78:
 986              	.L68:
1091:./FreeRtos/src/tasks.c **** 
 987              		.loc 1 1091 5 is_stmt 1 view .LVU273
 988 007a 2946     		mov	r1, r5
 989 007c 1448     		ldr	r0, .L71+24
 990 007e FFF7FEFF 		bl	vListInsertEnd
 991              	.LVL79:
1096:./FreeRtos/src/tasks.c **** 
 992              		.loc 1 1096 5 view .LVU274
 993 0082 144A     		ldr	r2, .L71+28
 994 0084 1368     		ldr	r3, [r2]
 995 0086 0133     		adds	r3, r3, #1
 996 0088 1360     		str	r3, [r2]
1103:./FreeRtos/src/tasks.c **** 			}
 997              		.loc 1 1103 54 view .LVU275
 998 008a E9E7     		b	.L63
 999              	.L69:
1125:./FreeRtos/src/tasks.c **** 				portYIELD_WITHIN_API();
 1000              		.loc 1 1125 5 view .LVU276
 1001 008c 124B     		ldr	r3, .L71+32
 1002 008e 1B68     		ldr	r3, [r3]
 1003 0090 53B9     		cbnz	r3, .L70
 1004              	.L65:
1126:./FreeRtos/src/tasks.c **** 			}
 1005              		.loc 1 1126 5 view .LVU277
 1006 0092 4FF0E023 		mov	r3, #-536813568
 1007 0096 4FF08052 		mov	r2, #268435456
 1008 009a C3F8042D 		str	r2, [r3, #3332]
1126:./FreeRtos/src/tasks.c **** 			}
 1009              		.loc 1 1126 5 view .LVU278
 1010              		.syntax unified
ARM GAS  /tmp/ccQvkfbu.s 			page 107


 1011              	@ 1126 "./FreeRtos/src/tasks.c" 1
 1012 009e BFF34F8F 		dsb
 1013              	@ 0 "" 2
1126:./FreeRtos/src/tasks.c **** 			}
 1014              		.loc 1 1126 5 view .LVU279
 1015              	@ 1126 "./FreeRtos/src/tasks.c" 1
 1016 00a2 BFF36F8F 		isb
 1017              	@ 0 "" 2
1126:./FreeRtos/src/tasks.c **** 			}
 1018              		.loc 1 1126 27 view .LVU280
1130:./FreeRtos/src/tasks.c **** 			}
 1019              		.loc 1 1130 29 view .LVU281
1133:./FreeRtos/src/tasks.c **** 
 1020              		.loc 1 1133 2 is_stmt 0 view .LVU282
 1021              		.thumb
 1022              		.syntax unified
 1023 00a6 E4E7     		b	.L58
 1024              	.L70:
1125:./FreeRtos/src/tasks.c **** 				portYIELD_WITHIN_API();
 1025              		.loc 1 1125 5 is_stmt 1 discriminator 1 view .LVU283
 1026 00a8 40F26542 		movw	r2, #1125
 1027 00ac 0B49     		ldr	r1, .L71+36
 1028 00ae 0C48     		ldr	r0, .L71+40
 1029 00b0 FFF7FEFF 		bl	printf
 1030              	.LVL80:
 1031 00b4 EDE7     		b	.L65
 1032              	.L72:
 1033 00b6 00BF     		.align	2
 1034              	.L71:
 1035 00b8 00000000 		.word	.LANCHOR4
 1036 00bc 00000000 		.word	.LANCHOR13
 1037 00c0 00000000 		.word	.LANCHOR12
 1038 00c4 00000000 		.word	.LANCHOR10
 1039 00c8 00000000 		.word	.LANCHOR9
 1040 00cc 00000000 		.word	.LANCHOR11
 1041 00d0 00000000 		.word	.LANCHOR7
 1042 00d4 00000000 		.word	.LANCHOR15
 1043 00d8 00000000 		.word	.LANCHOR16
 1044 00dc 00000000 		.word	.LC0
 1045 00e0 18000000 		.word	.LC1
 1046              		.cfi_endproc
 1047              	.LFE134:
 1049              		.section	.text.eTaskGetState,"ax",%progbits
 1050              		.align	1
 1051              		.global	eTaskGetState
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu fpv4-sp-d16
 1057              	eTaskGetState:
 1058              	.LVL81:
 1059              	.LFB137:
1270:./FreeRtos/src/tasks.c **** 	eTaskState eReturn;
 1060              		.loc 1 1270 2 view -0
 1061              		.cfi_startproc
 1062              		@ args = 0, pretend = 0, frame = 0
 1063              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccQvkfbu.s 			page 108


1270:./FreeRtos/src/tasks.c **** 	eTaskState eReturn;
 1064              		.loc 1 1270 2 is_stmt 0 view .LVU285
 1065 0000 38B5     		push	{r3, r4, r5, lr}
 1066              	.LCFI11:
 1067              		.cfi_def_cfa_offset 16
 1068              		.cfi_offset 3, -16
 1069              		.cfi_offset 4, -12
 1070              		.cfi_offset 5, -8
 1071              		.cfi_offset 14, -4
1271:./FreeRtos/src/tasks.c **** 	List_t *pxStateList;
 1072              		.loc 1 1271 2 is_stmt 1 view .LVU286
1272:./FreeRtos/src/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 1073              		.loc 1 1272 2 view .LVU287
1273:./FreeRtos/src/tasks.c **** 
 1074              		.loc 1 1273 2 view .LVU288
 1075              	.LVL82:
1275:./FreeRtos/src/tasks.c **** 
 1076              		.loc 1 1275 3 view .LVU289
 1077 0002 0446     		mov	r4, r0
 1078 0004 C8B1     		cbz	r0, .L84
 1079              	.LVL83:
 1080              	.L74:
1277:./FreeRtos/src/tasks.c **** 		{
 1081              		.loc 1 1277 3 view .LVU290
1277:./FreeRtos/src/tasks.c **** 		{
 1082              		.loc 1 1277 13 is_stmt 0 view .LVU291
 1083 0006 184B     		ldr	r3, .L88
 1084 0008 1B68     		ldr	r3, [r3]
1277:./FreeRtos/src/tasks.c **** 		{
 1085              		.loc 1 1277 5 view .LVU292
 1086 000a A342     		cmp	r3, r4
 1087 000c 24D0     		beq	.L77
1284:./FreeRtos/src/tasks.c **** 			{
 1088              		.loc 1 1284 4 is_stmt 1 view .LVU293
 1089 000e FFF7FEFF 		bl	vPortEnterCritical
 1090              	.LVL84:
1286:./FreeRtos/src/tasks.c **** 			}
 1091              		.loc 1 1286 5 view .LVU294
1286:./FreeRtos/src/tasks.c **** 			}
 1092              		.loc 1 1286 17 is_stmt 0 view .LVU295
 1093 0012 6569     		ldr	r5, [r4, #20]
 1094              	.LVL85:
1288:./FreeRtos/src/tasks.c **** 
 1095              		.loc 1 1288 4 is_stmt 1 view .LVU296
 1096 0014 FFF7FEFF 		bl	vPortExitCritical
 1097              	.LVL86:
1290:./FreeRtos/src/tasks.c **** 			{
 1098              		.loc 1 1290 4 view .LVU297
1290:./FreeRtos/src/tasks.c **** 			{
 1099              		.loc 1 1290 22 is_stmt 0 view .LVU298
 1100 0018 144B     		ldr	r3, .L88+4
 1101 001a 1B68     		ldr	r3, [r3]
1290:./FreeRtos/src/tasks.c **** 			{
 1102              		.loc 1 1290 6 view .LVU299
 1103 001c AB42     		cmp	r3, r5
 1104 001e 1DD0     		beq	.L78
1290:./FreeRtos/src/tasks.c **** 			{
ARM GAS  /tmp/ccQvkfbu.s 			page 109


 1105              		.loc 1 1290 62 discriminator 1 view .LVU300
 1106 0020 134B     		ldr	r3, .L88+8
 1107 0022 1B68     		ldr	r3, [r3]
1290:./FreeRtos/src/tasks.c **** 			{
 1108              		.loc 1 1290 45 discriminator 1 view .LVU301
 1109 0024 AB42     		cmp	r3, r5
 1110 0026 1BD0     		beq	.L79
1298:./FreeRtos/src/tasks.c **** 				{
 1111              		.loc 1 1298 10 is_stmt 1 view .LVU302
1298:./FreeRtos/src/tasks.c **** 				{
 1112              		.loc 1 1298 12 is_stmt 0 view .LVU303
 1113 0028 124B     		ldr	r3, .L88+12
 1114 002a 9D42     		cmp	r5, r3
 1115 002c 0CD0     		beq	.L85
1315:./FreeRtos/src/tasks.c **** 				{
 1116              		.loc 1 1315 10 is_stmt 1 view .LVU304
1315:./FreeRtos/src/tasks.c **** 				{
 1117              		.loc 1 1315 12 is_stmt 0 view .LVU305
 1118 002e 124B     		ldr	r3, .L88+16
 1119 0030 9D42     		cmp	r5, r3
 1120 0032 17D0     		beq	.L81
1315:./FreeRtos/src/tasks.c **** 				{
 1121              		.loc 1 1315 59 discriminator 1 view .LVU306
 1122 0034 75B1     		cbz	r5, .L86
1328:./FreeRtos/src/tasks.c **** 			}
 1123              		.loc 1 1328 13 view .LVU307
 1124 0036 0120     		movs	r0, #1
 1125 0038 0FE0     		b	.L75
 1126              	.LVL87:
 1127              	.L84:
1275:./FreeRtos/src/tasks.c **** 
 1128              		.loc 1 1275 3 is_stmt 1 discriminator 1 view .LVU308
 1129 003a 40F2FB42 		movw	r2, #1275
 1130 003e 0F49     		ldr	r1, .L88+20
 1131 0040 0F48     		ldr	r0, .L88+24
 1132              	.LVL88:
1275:./FreeRtos/src/tasks.c **** 
 1133              		.loc 1 1275 3 is_stmt 0 discriminator 1 view .LVU309
 1134 0042 FFF7FEFF 		bl	printf
 1135              	.LVL89:
 1136 0046 DEE7     		b	.L74
 1137              	.LVL90:
 1138              	.L85:
1303:./FreeRtos/src/tasks.c **** 					{
 1139              		.loc 1 1303 6 is_stmt 1 view .LVU310
1303:./FreeRtos/src/tasks.c **** 					{
 1140              		.loc 1 1303 10 is_stmt 0 view .LVU311
 1141 0048 A36A     		ldr	r3, [r4, #40]
1303:./FreeRtos/src/tasks.c **** 					{
 1142              		.loc 1 1303 8 view .LVU312
 1143 004a 0BB1     		cbz	r3, .L87
1309:./FreeRtos/src/tasks.c **** 					}
 1144              		.loc 1 1309 15 view .LVU313
 1145 004c 0220     		movs	r0, #2
 1146 004e 04E0     		b	.L75
 1147              	.L87:
1305:./FreeRtos/src/tasks.c **** 					}
ARM GAS  /tmp/ccQvkfbu.s 			page 110


 1148              		.loc 1 1305 15 view .LVU314
 1149 0050 0320     		movs	r0, #3
 1150 0052 02E0     		b	.L75
 1151              	.L86:
1320:./FreeRtos/src/tasks.c **** 				}
 1152              		.loc 1 1320 14 view .LVU315
 1153 0054 0420     		movs	r0, #4
 1154 0056 00E0     		b	.L75
 1155              	.LVL91:
 1156              	.L77:
1280:./FreeRtos/src/tasks.c **** 		}
 1157              		.loc 1 1280 12 view .LVU316
 1158 0058 0020     		movs	r0, #0
 1159              	.L75:
 1160              	.LVL92:
1332:./FreeRtos/src/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1161              		.loc 1 1332 3 is_stmt 1 view .LVU317
1333:./FreeRtos/src/tasks.c **** 
 1162              		.loc 1 1333 2 is_stmt 0 view .LVU318
 1163 005a 38BD     		pop	{r3, r4, r5, pc}
 1164              	.LVL93:
 1165              	.L78:
1294:./FreeRtos/src/tasks.c **** 			}
 1166              		.loc 1 1294 13 view .LVU319
 1167 005c 0220     		movs	r0, #2
 1168 005e FCE7     		b	.L75
 1169              	.L79:
 1170 0060 0220     		movs	r0, #2
 1171 0062 FAE7     		b	.L75
 1172              	.L81:
1320:./FreeRtos/src/tasks.c **** 				}
 1173              		.loc 1 1320 14 view .LVU320
 1174 0064 0420     		movs	r0, #4
 1175 0066 F8E7     		b	.L75
 1176              	.L89:
 1177              		.align	2
 1178              	.L88:
 1179 0068 00000000 		.word	.LANCHOR10
 1180 006c 00000000 		.word	.LANCHOR0
 1181 0070 00000000 		.word	.LANCHOR8
 1182 0074 00000000 		.word	.LANCHOR2
 1183 0078 00000000 		.word	.LANCHOR7
 1184 007c 00000000 		.word	.LC0
 1185 0080 18000000 		.word	.LC1
 1186              		.cfi_endproc
 1187              	.LFE137:
 1189              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1190              		.align	1
 1191              		.global	uxTaskPriorityGet
 1192              		.syntax unified
 1193              		.thumb
 1194              		.thumb_func
 1195              		.fpu fpv4-sp-d16
 1197              	uxTaskPriorityGet:
 1198              	.LVL94:
 1199              	.LFB138:
1341:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccQvkfbu.s 			page 111


 1200              		.loc 1 1341 2 is_stmt 1 view -0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 0
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
1341:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 1204              		.loc 1 1341 2 is_stmt 0 view .LVU322
 1205 0000 10B5     		push	{r4, lr}
 1206              	.LCFI12:
 1207              		.cfi_def_cfa_offset 8
 1208              		.cfi_offset 4, -8
 1209              		.cfi_offset 14, -4
 1210 0002 0446     		mov	r4, r0
1342:./FreeRtos/src/tasks.c **** 	UBaseType_t uxReturn;
 1211              		.loc 1 1342 2 is_stmt 1 view .LVU323
1343:./FreeRtos/src/tasks.c **** 
 1212              		.loc 1 1343 2 view .LVU324
1345:./FreeRtos/src/tasks.c **** 		{
 1213              		.loc 1 1345 3 view .LVU325
 1214 0004 FFF7FEFF 		bl	vPortEnterCritical
 1215              	.LVL95:
1349:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1216              		.loc 1 1349 4 view .LVU326
1349:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1217              		.loc 1 1349 12 is_stmt 0 view .LVU327
 1218 0008 24B1     		cbz	r4, .L93
 1219              	.LVL96:
 1220              	.L91:
1350:./FreeRtos/src/tasks.c **** 		}
 1221              		.loc 1 1350 4 is_stmt 1 discriminator 4 view .LVU328
1350:./FreeRtos/src/tasks.c **** 		}
 1222              		.loc 1 1350 13 is_stmt 0 discriminator 4 view .LVU329
 1223 000a E46A     		ldr	r4, [r4, #44]
 1224              	.LVL97:
1352:./FreeRtos/src/tasks.c **** 
 1225              		.loc 1 1352 3 is_stmt 1 discriminator 4 view .LVU330
 1226 000c FFF7FEFF 		bl	vPortExitCritical
 1227              	.LVL98:
1354:./FreeRtos/src/tasks.c **** 	}
 1228              		.loc 1 1354 3 discriminator 4 view .LVU331
1355:./FreeRtos/src/tasks.c **** 
 1229              		.loc 1 1355 2 is_stmt 0 discriminator 4 view .LVU332
 1230 0010 2046     		mov	r0, r4
 1231 0012 10BD     		pop	{r4, pc}
 1232              	.LVL99:
 1233              	.L93:
1349:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1234              		.loc 1 1349 12 discriminator 1 view .LVU333
 1235 0014 014B     		ldr	r3, .L94
 1236 0016 1C68     		ldr	r4, [r3]
 1237              	.LVL100:
1349:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1238              		.loc 1 1349 12 discriminator 1 view .LVU334
 1239 0018 F7E7     		b	.L91
 1240              	.L95:
 1241 001a 00BF     		.align	2
 1242              	.L94:
 1243 001c 00000000 		.word	.LANCHOR10
ARM GAS  /tmp/ccQvkfbu.s 			page 112


 1244              		.cfi_endproc
 1245              	.LFE138:
 1247              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1248              		.align	1
 1249              		.global	uxTaskPriorityGetFromISR
 1250              		.syntax unified
 1251              		.thumb
 1252              		.thumb_func
 1253              		.fpu fpv4-sp-d16
 1255              	uxTaskPriorityGetFromISR:
 1256              	.LVL101:
 1257              	.LFB139:
1363:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 1258              		.loc 1 1363 2 is_stmt 1 view -0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
1363:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 1262              		.loc 1 1363 2 is_stmt 0 view .LVU336
 1263 0000 10B5     		push	{r4, lr}
 1264              	.LCFI13:
 1265              		.cfi_def_cfa_offset 8
 1266              		.cfi_offset 4, -8
 1267              		.cfi_offset 14, -4
 1268 0002 0446     		mov	r4, r0
1364:./FreeRtos/src/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
 1269              		.loc 1 1364 2 is_stmt 1 view .LVU337
1365:./FreeRtos/src/tasks.c **** 
 1270              		.loc 1 1365 2 view .LVU338
1383:./FreeRtos/src/tasks.c **** 
 1271              		.loc 1 1383 3 view .LVU339
 1272 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1273              	.LVL102:
1385:./FreeRtos/src/tasks.c **** 		{
 1274              		.loc 1 1385 3 view .LVU340
 1275              	.LBB28:
 1276              	.LBI28:
 1277              		.file 2 "./FreeRtos/port/ARM_CM4F/portmacro.h"
   1:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*
   2:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
   5:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  12:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  15:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  /tmp/ccQvkfbu.s 			page 113


  20:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  22:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  25:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./FreeRtos/port/ARM_CM4F/portmacro.h ****  */
  27:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  28:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  29:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  32:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern "C" {
  34:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
  35:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  36:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  39:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  42:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./FreeRtos/port/ARM_CM4F/portmacro.h ****  */
  45:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  46:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  55:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  59:./FreeRtos/port/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./FreeRtos/port/ARM_CM4F/portmacro.h **** #else
  63:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  66:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
  70:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  72:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccQvkfbu.s 			page 114


  77:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  78:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./FreeRtos/port/ARM_CM4F/portmacro.h **** {																				\
  81:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./FreeRtos/port/ARM_CM4F/portmacro.h **** 																				\
  84:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
  89:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  90:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  96:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 106:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 108:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./FreeRtos/port/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./FreeRtos/port/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 115:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 120:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 122:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 126:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 127:./FreeRtos/port/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 129:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 132:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 115


 134:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 137:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 138:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#endif
 142:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 143:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 147:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 149:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 151:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 153:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 155:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 159:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 160:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 163:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 165:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 168:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 169:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 171:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./FreeRtos/port/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 174:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 177:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 179:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 181:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	else
 182:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 183:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 185:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 186:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 188:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 189:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 116


 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 195:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 196:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 197:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	);
 203:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 204:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 205:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1278              		.loc 2 207 34 view .LVU341
 1279              	.LBB29:
 208:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1280              		.loc 2 209 1 view .LVU342
 210:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 1281              		.loc 2 211 2 view .LVU343
 1282              		.syntax unified
 1283              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1284 0008 EFF31183 			mrs r3, basepri											
 1285 000c 4FF05002 		mov r2, #80												
 1286 0010 82F31188 		msr basepri, r2											
 1287 0014 BFF36F8F 		isb														
 1288 0018 BFF34F8F 		dsb														
 1289              	
 1290              	@ 0 "" 2
 1291              	.LVL103:
 212:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 213:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	);
 220:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 221:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1292              		.loc 2 223 2 view .LVU344
 1293              		.loc 2 223 2 is_stmt 0 view .LVU345
 1294              		.thumb
 1295              		.syntax unified
 1296              	.LBE29:
 1297              	.LBE28:
1389:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1298              		.loc 1 1389 4 is_stmt 1 view .LVU346
1389:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1299              		.loc 1 1389 12 is_stmt 0 view .LVU347
ARM GAS  /tmp/ccQvkfbu.s 			page 117


 1300 001c 1CB1     		cbz	r4, .L99
 1301              	.LVL104:
 1302              	.L97:
1390:./FreeRtos/src/tasks.c **** 		}
 1303              		.loc 1 1390 4 is_stmt 1 discriminator 4 view .LVU348
1390:./FreeRtos/src/tasks.c **** 		}
 1304              		.loc 1 1390 13 is_stmt 0 discriminator 4 view .LVU349
 1305 001e E06A     		ldr	r0, [r4, #44]
 1306              	.LVL105:
1392:./FreeRtos/src/tasks.c **** 
 1307              		.loc 1 1392 3 is_stmt 1 discriminator 4 view .LVU350
 1308              	.LBB30:
 1309              	.LBI30:
 224:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 225:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1310              		.loc 2 227 30 discriminator 4 view .LVU351
 1311              	.LBB31:
 228:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 229:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 1312              		.loc 2 229 2 discriminator 4 view .LVU352
 1313              		.syntax unified
 1314              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1315 0020 83F31188 			msr basepri, r3	
 1316              	@ 0 "" 2
 1317              	.LVL106:
 1318              		.loc 2 229 2 is_stmt 0 discriminator 4 view .LVU353
 1319              		.thumb
 1320              		.syntax unified
 1321              	.LBE31:
 1322              	.LBE30:
1394:./FreeRtos/src/tasks.c **** 	}
 1323              		.loc 1 1394 3 is_stmt 1 discriminator 4 view .LVU354
1395:./FreeRtos/src/tasks.c **** 
 1324              		.loc 1 1395 2 is_stmt 0 discriminator 4 view .LVU355
 1325 0024 10BD     		pop	{r4, pc}
 1326              	.LVL107:
 1327              	.L99:
1389:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1328              		.loc 1 1389 12 discriminator 1 view .LVU356
 1329 0026 014A     		ldr	r2, .L100
 1330 0028 1468     		ldr	r4, [r2]
 1331              	.LVL108:
1389:./FreeRtos/src/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1332              		.loc 1 1389 12 discriminator 1 view .LVU357
 1333 002a F8E7     		b	.L97
 1334              	.L101:
 1335              		.align	2
 1336              	.L100:
 1337 002c 00000000 		.word	.LANCHOR10
 1338              		.cfi_endproc
 1339              	.LFE139:
 1341              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1342              		.align	1
 1343              		.global	vTaskPrioritySet
 1344              		.syntax unified
ARM GAS  /tmp/ccQvkfbu.s 			page 118


 1345              		.thumb
 1346              		.thumb_func
 1347              		.fpu fpv4-sp-d16
 1349              	vTaskPrioritySet:
 1350              	.LVL109:
 1351              	.LFB140:
1403:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 1352              		.loc 1 1403 2 is_stmt 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
1403:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 1356              		.loc 1 1403 2 is_stmt 0 view .LVU359
 1357 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1358              	.LCFI14:
 1359              		.cfi_def_cfa_offset 24
 1360              		.cfi_offset 3, -24
 1361              		.cfi_offset 4, -20
 1362              		.cfi_offset 5, -16
 1363              		.cfi_offset 6, -12
 1364              		.cfi_offset 7, -8
 1365              		.cfi_offset 14, -4
 1366 0002 0546     		mov	r5, r0
 1367 0004 0C46     		mov	r4, r1
1404:./FreeRtos/src/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1368              		.loc 1 1404 2 is_stmt 1 view .LVU360
1405:./FreeRtos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1369              		.loc 1 1405 2 view .LVU361
1406:./FreeRtos/src/tasks.c **** 
 1370              		.loc 1 1406 2 view .LVU362
 1371              	.LVL110:
1408:./FreeRtos/src/tasks.c **** 
 1372              		.loc 1 1408 3 view .LVU363
 1373 0006 1F29     		cmp	r1, #31
 1374 0008 14D8     		bhi	.L117
 1375              	.LVL111:
 1376              	.L103:
1411:./FreeRtos/src/tasks.c **** 		{
 1377              		.loc 1 1411 3 view .LVU364
1411:./FreeRtos/src/tasks.c **** 		{
 1378              		.loc 1 1411 5 is_stmt 0 view .LVU365
 1379 000a 1F2C     		cmp	r4, #31
 1380 000c 00D9     		bls	.L104
1413:./FreeRtos/src/tasks.c **** 		}
 1381              		.loc 1 1413 18 view .LVU366
 1382 000e 1F24     		movs	r4, #31
 1383              	.LVL112:
 1384              	.L104:
1417:./FreeRtos/src/tasks.c **** 		}
 1385              		.loc 1 1417 28 is_stmt 1 view .LVU367
1420:./FreeRtos/src/tasks.c **** 		{
 1386              		.loc 1 1420 3 view .LVU368
 1387 0010 FFF7FEFF 		bl	vPortEnterCritical
 1388              	.LVL113:
1424:./FreeRtos/src/tasks.c **** 
 1389              		.loc 1 1424 4 view .LVU369
1424:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 119


 1390              		.loc 1 1424 12 is_stmt 0 view .LVU370
 1391 0014 ADB1     		cbz	r5, .L118
 1392              	.LVL114:
 1393              	.L105:
1426:./FreeRtos/src/tasks.c **** 
 1394              		.loc 1 1426 50 is_stmt 1 discriminator 4 view .LVU371
1434:./FreeRtos/src/tasks.c **** 			}
 1395              		.loc 1 1434 5 discriminator 4 view .LVU372
1434:./FreeRtos/src/tasks.c **** 			}
 1396              		.loc 1 1434 27 is_stmt 0 discriminator 4 view .LVU373
 1397 0016 EE6A     		ldr	r6, [r5, #44]
 1398              	.LVL115:
1438:./FreeRtos/src/tasks.c **** 			{
 1399              		.loc 1 1438 4 is_stmt 1 discriminator 4 view .LVU374
1438:./FreeRtos/src/tasks.c **** 			{
 1400              		.loc 1 1438 6 is_stmt 0 discriminator 4 view .LVU375
 1401 0018 B442     		cmp	r4, r6
 1402 001a 34D0     		beq	.L106
1442:./FreeRtos/src/tasks.c **** 				{
 1403              		.loc 1 1442 5 is_stmt 1 view .LVU376
1442:./FreeRtos/src/tasks.c **** 				{
 1404              		.loc 1 1442 7 is_stmt 0 view .LVU377
 1405 001c 14D9     		bls	.L107
1444:./FreeRtos/src/tasks.c **** 					{
 1406              		.loc 1 1444 6 is_stmt 1 view .LVU378
1444:./FreeRtos/src/tasks.c **** 					{
 1407              		.loc 1 1444 16 is_stmt 0 view .LVU379
 1408 001e 2C4B     		ldr	r3, .L120
 1409 0020 1B68     		ldr	r3, [r3]
1444:./FreeRtos/src/tasks.c **** 					{
 1410              		.loc 1 1444 8 view .LVU380
 1411 0022 AB42     		cmp	r3, r5
 1412 0024 32D0     		beq	.L113
1449:./FreeRtos/src/tasks.c **** 						{
 1413              		.loc 1 1449 7 is_stmt 1 view .LVU381
1449:./FreeRtos/src/tasks.c **** 						{
 1414              		.loc 1 1449 40 is_stmt 0 view .LVU382
 1415 0026 2A4B     		ldr	r3, .L120
 1416 0028 1B68     		ldr	r3, [r3]
 1417 002a DB6A     		ldr	r3, [r3, #44]
1449:./FreeRtos/src/tasks.c **** 						{
 1418              		.loc 1 1449 9 view .LVU383
 1419 002c A342     		cmp	r3, r4
 1420 002e 2FD9     		bls	.L114
1406:./FreeRtos/src/tasks.c **** 
 1421              		.loc 1 1406 13 view .LVU384
 1422 0030 0027     		movs	r7, #0
 1423 0032 0EE0     		b	.L108
 1424              	.LVL116:
 1425              	.L117:
1408:./FreeRtos/src/tasks.c **** 
 1426              		.loc 1 1408 3 is_stmt 1 discriminator 1 view .LVU385
 1427 0034 4FF4B062 		mov	r2, #1408
 1428 0038 2649     		ldr	r1, .L120+4
 1429              	.LVL117:
1408:./FreeRtos/src/tasks.c **** 
 1430              		.loc 1 1408 3 is_stmt 0 discriminator 1 view .LVU386
ARM GAS  /tmp/ccQvkfbu.s 			page 120


 1431 003a 2748     		ldr	r0, .L120+8
 1432              	.LVL118:
1408:./FreeRtos/src/tasks.c **** 
 1433              		.loc 1 1408 3 discriminator 1 view .LVU387
 1434 003c FFF7FEFF 		bl	printf
 1435              	.LVL119:
 1436 0040 E3E7     		b	.L103
 1437              	.L118:
1424:./FreeRtos/src/tasks.c **** 
 1438              		.loc 1 1424 12 discriminator 1 view .LVU388
 1439 0042 234B     		ldr	r3, .L120
 1440 0044 1D68     		ldr	r5, [r3]
 1441              	.LVL120:
1424:./FreeRtos/src/tasks.c **** 
 1442              		.loc 1 1424 12 discriminator 1 view .LVU389
 1443 0046 E6E7     		b	.L105
 1444              	.LVL121:
 1445              	.L107:
1465:./FreeRtos/src/tasks.c **** 				{
 1446              		.loc 1 1465 10 is_stmt 1 view .LVU390
1465:./FreeRtos/src/tasks.c **** 				{
 1447              		.loc 1 1465 20 is_stmt 0 view .LVU391
 1448 0048 214B     		ldr	r3, .L120
 1449 004a 1B68     		ldr	r3, [r3]
1465:./FreeRtos/src/tasks.c **** 				{
 1450              		.loc 1 1465 12 view .LVU392
 1451 004c AB42     		cmp	r3, r5
 1452 004e 21D0     		beq	.L115
1406:./FreeRtos/src/tasks.c **** 
 1453              		.loc 1 1406 13 view .LVU393
 1454 0050 0027     		movs	r7, #0
 1455              	.L108:
 1456              	.LVL122:
1477:./FreeRtos/src/tasks.c **** 
 1457              		.loc 1 1477 5 is_stmt 1 view .LVU394
1482:./FreeRtos/src/tasks.c **** 
 1458              		.loc 1 1482 5 view .LVU395
1502:./FreeRtos/src/tasks.c **** 				}
 1459              		.loc 1 1502 6 view .LVU396
1502:./FreeRtos/src/tasks.c **** 				}
 1460              		.loc 1 1502 24 is_stmt 0 view .LVU397
 1461 0052 EC62     		str	r4, [r5, #44]
1508:./FreeRtos/src/tasks.c **** 				{
 1462              		.loc 1 1508 5 is_stmt 1 view .LVU398
1508:./FreeRtos/src/tasks.c **** 				{
 1463              		.loc 1 1508 11 is_stmt 0 view .LVU399
 1464 0054 AB69     		ldr	r3, [r5, #24]
1508:./FreeRtos/src/tasks.c **** 				{
 1465              		.loc 1 1508 7 view .LVU400
 1466 0056 002B     		cmp	r3, #0
 1467 0058 02DB     		blt	.L109
1510:./FreeRtos/src/tasks.c **** 				}
 1468              		.loc 1 1510 6 is_stmt 1 view .LVU401
 1469 005a C4F12004 		rsb	r4, r4, #32
 1470              	.LVL123:
1510:./FreeRtos/src/tasks.c **** 				}
 1471              		.loc 1 1510 6 is_stmt 0 view .LVU402
ARM GAS  /tmp/ccQvkfbu.s 			page 121


 1472 005e AC61     		str	r4, [r5, #24]
 1473              	.L109:
1514:./FreeRtos/src/tasks.c **** 				}
 1474              		.loc 1 1514 30 is_stmt 1 view .LVU403
1521:./FreeRtos/src/tasks.c **** 				{
 1475              		.loc 1 1521 5 view .LVU404
1521:./FreeRtos/src/tasks.c **** 				{
 1476              		.loc 1 1521 9 is_stmt 0 view .LVU405
 1477 0060 6969     		ldr	r1, [r5, #20]
 1478 0062 06EB8603 		add	r3, r6, r6, lsl #2
 1479 0066 1D4A     		ldr	r2, .L120+12
 1480 0068 02EB8303 		add	r3, r2, r3, lsl #2
1521:./FreeRtos/src/tasks.c **** 				{
 1481              		.loc 1 1521 112 view .LVU406
 1482 006c 9942     		cmp	r1, r3
 1483 006e 13D0     		beq	.L119
 1484              	.LVL124:
 1485              	.L110:
1541:./FreeRtos/src/tasks.c **** 				}
 1486              		.loc 1 1541 30 is_stmt 1 view .LVU407
1544:./FreeRtos/src/tasks.c **** 				{
 1487              		.loc 1 1544 5 view .LVU408
1544:./FreeRtos/src/tasks.c **** 				{
 1488              		.loc 1 1544 7 is_stmt 0 view .LVU409
 1489 0070 4FB1     		cbz	r7, .L106
1546:./FreeRtos/src/tasks.c **** 				}
 1490              		.loc 1 1546 6 is_stmt 1 view .LVU410
 1491 0072 4FF0E023 		mov	r3, #-536813568
 1492 0076 4FF08052 		mov	r2, #268435456
 1493 007a C3F8042D 		str	r2, [r3, #3332]
1546:./FreeRtos/src/tasks.c **** 				}
 1494              		.loc 1 1546 6 view .LVU411
 1495              		.syntax unified
 1496              	@ 1546 "./FreeRtos/src/tasks.c" 1
 1497 007e BFF34F8F 		dsb
 1498              	@ 0 "" 2
1546:./FreeRtos/src/tasks.c **** 				}
 1499              		.loc 1 1546 6 view .LVU412
 1500              	@ 1546 "./FreeRtos/src/tasks.c" 1
 1501 0082 BFF36F8F 		isb
 1502              	@ 0 "" 2
1546:./FreeRtos/src/tasks.c **** 				}
 1503              		.loc 1 1546 37 view .LVU413
 1504              	.LVL125:
 1505              		.thumb
 1506              		.syntax unified
 1507              	.L106:
1550:./FreeRtos/src/tasks.c **** 				}
 1508              		.loc 1 1550 30 view .LVU414
1555:./FreeRtos/src/tasks.c **** 			}
 1509              		.loc 1 1555 5 view .LVU415
1558:./FreeRtos/src/tasks.c **** 	}
 1510              		.loc 1 1558 3 view .LVU416
 1511 0086 FFF7FEFF 		bl	vPortExitCritical
 1512              	.LVL126:
1559:./FreeRtos/src/tasks.c **** 
 1513              		.loc 1 1559 2 is_stmt 0 view .LVU417
ARM GAS  /tmp/ccQvkfbu.s 			page 122


 1514 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1515              	.LVL127:
 1516              	.L113:
1406:./FreeRtos/src/tasks.c **** 
 1517              		.loc 1 1406 13 view .LVU418
 1518 008c 0027     		movs	r7, #0
 1519 008e E0E7     		b	.L108
 1520              	.L114:
1451:./FreeRtos/src/tasks.c **** 						}
 1521              		.loc 1 1451 23 view .LVU419
 1522 0090 0127     		movs	r7, #1
 1523 0092 DEE7     		b	.L108
 1524              	.L115:
1470:./FreeRtos/src/tasks.c **** 				}
 1525              		.loc 1 1470 21 view .LVU420
 1526 0094 0127     		movs	r7, #1
 1527 0096 DCE7     		b	.L108
 1528              	.LVL128:
 1529              	.L119:
1526:./FreeRtos/src/tasks.c **** 					{
 1530              		.loc 1 1526 6 is_stmt 1 view .LVU421
1526:./FreeRtos/src/tasks.c **** 					{
 1531              		.loc 1 1526 10 is_stmt 0 view .LVU422
 1532 0098 2C1D     		adds	r4, r5, #4
 1533 009a 2046     		mov	r0, r4
 1534 009c FFF7FEFF 		bl	uxListRemove
 1535              	.LVL129:
1526:./FreeRtos/src/tasks.c **** 					{
 1536              		.loc 1 1526 8 view .LVU423
 1537 00a0 30B9     		cbnz	r0, .L111
1531:./FreeRtos/src/tasks.c **** 					}
 1538              		.loc 1 1531 7 is_stmt 1 view .LVU424
 1539 00a2 0123     		movs	r3, #1
 1540 00a4 B340     		lsls	r3, r3, r6
 1541 00a6 0E4A     		ldr	r2, .L120+16
 1542 00a8 1668     		ldr	r6, [r2]
 1543              	.LVL130:
1531:./FreeRtos/src/tasks.c **** 					}
 1544              		.loc 1 1531 7 is_stmt 0 view .LVU425
 1545 00aa 26EA0306 		bic	r6, r6, r3
 1546 00ae 1660     		str	r6, [r2]
 1547              	.L111:
1535:./FreeRtos/src/tasks.c **** 					}
 1548              		.loc 1 1535 31 is_stmt 1 view .LVU426
1537:./FreeRtos/src/tasks.c **** 				}
 1549              		.loc 1 1537 6 view .LVU427
1537:./FreeRtos/src/tasks.c **** 				}
 1550              		.loc 1 1537 6 view .LVU428
 1551 00b0 E86A     		ldr	r0, [r5, #44]
 1552 00b2 0123     		movs	r3, #1
 1553 00b4 8340     		lsls	r3, r3, r0
 1554 00b6 0A4A     		ldr	r2, .L120+16
 1555 00b8 1168     		ldr	r1, [r2]
 1556 00ba 0B43     		orrs	r3, r3, r1
 1557 00bc 1360     		str	r3, [r2]
1537:./FreeRtos/src/tasks.c **** 				}
 1558              		.loc 1 1537 6 view .LVU429
ARM GAS  /tmp/ccQvkfbu.s 			page 123


 1559 00be 00EB8000 		add	r0, r0, r0, lsl #2
 1560 00c2 2146     		mov	r1, r4
 1561 00c4 054B     		ldr	r3, .L120+12
 1562 00c6 03EB8000 		add	r0, r3, r0, lsl #2
 1563 00ca FFF7FEFF 		bl	vListInsertEnd
 1564              	.LVL131:
1537:./FreeRtos/src/tasks.c **** 				}
 1565              		.loc 1 1537 36 view .LVU430
 1566 00ce CFE7     		b	.L110
 1567              	.L121:
 1568              		.align	2
 1569              	.L120:
 1570 00d0 00000000 		.word	.LANCHOR10
 1571 00d4 00000000 		.word	.LC0
 1572 00d8 18000000 		.word	.LC1
 1573 00dc 00000000 		.word	.LANCHOR4
 1574 00e0 00000000 		.word	.LANCHOR13
 1575              		.cfi_endproc
 1576              	.LFE140:
 1578              		.section	.text.vTaskResume,"ax",%progbits
 1579              		.align	1
 1580              		.global	vTaskResume
 1581              		.syntax unified
 1582              		.thumb
 1583              		.thumb_func
 1584              		.fpu fpv4-sp-d16
 1586              	vTaskResume:
 1587              	.LVL132:
 1588              	.LFB143:
1703:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1589              		.loc 1 1703 2 view -0
 1590              		.cfi_startproc
 1591              		@ args = 0, pretend = 0, frame = 0
 1592              		@ frame_needed = 0, uses_anonymous_args = 0
1703:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1593              		.loc 1 1703 2 is_stmt 0 view .LVU432
 1594 0000 38B5     		push	{r3, r4, r5, lr}
 1595              	.LCFI15:
 1596              		.cfi_def_cfa_offset 16
 1597              		.cfi_offset 3, -16
 1598              		.cfi_offset 4, -12
 1599              		.cfi_offset 5, -8
 1600              		.cfi_offset 14, -4
1704:./FreeRtos/src/tasks.c **** 
 1601              		.loc 1 1704 2 is_stmt 1 view .LVU433
 1602              	.LVL133:
1707:./FreeRtos/src/tasks.c **** 
 1603              		.loc 1 1707 3 view .LVU434
 1604 0002 0446     		mov	r4, r0
 1605 0004 68B1     		cbz	r0, .L127
 1606              	.LVL134:
 1607              	.L123:
1711:./FreeRtos/src/tasks.c **** 		{
 1608              		.loc 1 1711 3 view .LVU435
1711:./FreeRtos/src/tasks.c **** 		{
 1609              		.loc 1 1711 5 is_stmt 0 view .LVU436
 1610 0006 5CB1     		cbz	r4, .L122
ARM GAS  /tmp/ccQvkfbu.s 			page 124


1711:./FreeRtos/src/tasks.c **** 		{
 1611              		.loc 1 1711 36 discriminator 1 view .LVU437
 1612 0008 1B4B     		ldr	r3, .L129
 1613 000a 1B68     		ldr	r3, [r3]
1711:./FreeRtos/src/tasks.c **** 		{
 1614              		.loc 1 1711 25 discriminator 1 view .LVU438
 1615 000c A342     		cmp	r3, r4
 1616 000e 07D0     		beq	.L122
1713:./FreeRtos/src/tasks.c **** 			{
 1617              		.loc 1 1713 4 is_stmt 1 view .LVU439
 1618 0010 FFF7FEFF 		bl	vPortEnterCritical
 1619              	.LVL135:
1715:./FreeRtos/src/tasks.c **** 				{
 1620              		.loc 1 1715 5 view .LVU440
1715:./FreeRtos/src/tasks.c **** 				{
 1621              		.loc 1 1715 9 is_stmt 0 view .LVU441
 1622 0014 2046     		mov	r0, r4
 1623 0016 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1624              	.LVL136:
1715:./FreeRtos/src/tasks.c **** 				{
 1625              		.loc 1 1715 7 view .LVU442
 1626 001a 48B9     		cbnz	r0, .L128
 1627              	.L125:
1739:./FreeRtos/src/tasks.c **** 				}
 1628              		.loc 1 1739 30 is_stmt 1 view .LVU443
1742:./FreeRtos/src/tasks.c **** 		}
 1629              		.loc 1 1742 4 view .LVU444
 1630 001c FFF7FEFF 		bl	vPortExitCritical
 1631              	.LVL137:
1746:./FreeRtos/src/tasks.c **** 		}
 1632              		.loc 1 1746 28 view .LVU445
 1633              	.L122:
1748:./FreeRtos/src/tasks.c **** 
 1634              		.loc 1 1748 2 is_stmt 0 view .LVU446
 1635 0020 38BD     		pop	{r3, r4, r5, pc}
 1636              	.LVL138:
 1637              	.L127:
1707:./FreeRtos/src/tasks.c **** 
 1638              		.loc 1 1707 3 is_stmt 1 discriminator 1 view .LVU447
 1639 0022 40F2AB62 		movw	r2, #1707
 1640 0026 1549     		ldr	r1, .L129+4
 1641 0028 1548     		ldr	r0, .L129+8
 1642              	.LVL139:
1707:./FreeRtos/src/tasks.c **** 
 1643              		.loc 1 1707 3 is_stmt 0 discriminator 1 view .LVU448
 1644 002a FFF7FEFF 		bl	printf
 1645              	.LVL140:
 1646 002e EAE7     		b	.L123
 1647              	.L128:
1717:./FreeRtos/src/tasks.c **** 
 1648              		.loc 1 1717 31 is_stmt 1 view .LVU449
1721:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1649              		.loc 1 1721 6 view .LVU450
1721:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1650              		.loc 1 1721 15 is_stmt 0 view .LVU451
 1651 0030 251D     		adds	r5, r4, #4
 1652 0032 2846     		mov	r0, r5
ARM GAS  /tmp/ccQvkfbu.s 			page 125


 1653 0034 FFF7FEFF 		bl	uxListRemove
 1654              	.LVL141:
1722:./FreeRtos/src/tasks.c **** 
 1655              		.loc 1 1722 6 is_stmt 1 view .LVU452
1722:./FreeRtos/src/tasks.c **** 
 1656              		.loc 1 1722 6 view .LVU453
 1657 0038 E06A     		ldr	r0, [r4, #44]
 1658 003a 0123     		movs	r3, #1
 1659 003c 8340     		lsls	r3, r3, r0
 1660 003e 114A     		ldr	r2, .L129+12
 1661 0040 1168     		ldr	r1, [r2]
 1662 0042 0B43     		orrs	r3, r3, r1
 1663 0044 1360     		str	r3, [r2]
1722:./FreeRtos/src/tasks.c **** 
 1664              		.loc 1 1722 6 view .LVU454
 1665 0046 00EB8000 		add	r0, r0, r0, lsl #2
 1666 004a 2946     		mov	r1, r5
 1667 004c 0E4B     		ldr	r3, .L129+16
 1668 004e 03EB8000 		add	r0, r3, r0, lsl #2
 1669 0052 FFF7FEFF 		bl	vListInsertEnd
 1670              	.LVL142:
1722:./FreeRtos/src/tasks.c **** 
 1671              		.loc 1 1722 36 view .LVU455
1725:./FreeRtos/src/tasks.c **** 					{
 1672              		.loc 1 1725 6 view .LVU456
1725:./FreeRtos/src/tasks.c **** 					{
 1673              		.loc 1 1725 15 is_stmt 0 view .LVU457
 1674 0056 E26A     		ldr	r2, [r4, #44]
1725:./FreeRtos/src/tasks.c **** 					{
 1675              		.loc 1 1725 43 view .LVU458
 1676 0058 074B     		ldr	r3, .L129
 1677 005a 1B68     		ldr	r3, [r3]
 1678 005c DB6A     		ldr	r3, [r3, #44]
1725:./FreeRtos/src/tasks.c **** 					{
 1679              		.loc 1 1725 8 view .LVU459
 1680 005e 9A42     		cmp	r2, r3
 1681 0060 DCD3     		bcc	.L125
1730:./FreeRtos/src/tasks.c **** 					}
 1682              		.loc 1 1730 7 is_stmt 1 view .LVU460
 1683 0062 4FF0E023 		mov	r3, #-536813568
 1684 0066 4FF08052 		mov	r2, #268435456
 1685 006a C3F8042D 		str	r2, [r3, #3332]
1730:./FreeRtos/src/tasks.c **** 					}
 1686              		.loc 1 1730 7 view .LVU461
 1687              		.syntax unified
 1688              	@ 1730 "./FreeRtos/src/tasks.c" 1
 1689 006e BFF34F8F 		dsb
 1690              	@ 0 "" 2
1730:./FreeRtos/src/tasks.c **** 					}
 1691              		.loc 1 1730 7 view .LVU462
 1692              	@ 1730 "./FreeRtos/src/tasks.c" 1
 1693 0072 BFF36F8F 		isb
 1694              	@ 0 "" 2
1730:./FreeRtos/src/tasks.c **** 					}
 1695              		.loc 1 1730 38 view .LVU463
 1696              		.thumb
 1697              		.syntax unified
ARM GAS  /tmp/ccQvkfbu.s 			page 126


 1698 0076 D1E7     		b	.L125
 1699              	.L130:
 1700              		.align	2
 1701              	.L129:
 1702 0078 00000000 		.word	.LANCHOR10
 1703 007c 00000000 		.word	.LC0
 1704 0080 18000000 		.word	.LC1
 1705 0084 00000000 		.word	.LANCHOR13
 1706 0088 00000000 		.word	.LANCHOR4
 1707              		.cfi_endproc
 1708              	.LFE143:
 1710              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1711              		.align	1
 1712              		.global	xTaskResumeFromISR
 1713              		.syntax unified
 1714              		.thumb
 1715              		.thumb_func
 1716              		.fpu fpv4-sp-d16
 1718              	xTaskResumeFromISR:
 1719              	.LVL143:
 1720              	.LFB144:
1757:./FreeRtos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1721              		.loc 1 1757 2 view -0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 0
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
1757:./FreeRtos/src/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1725              		.loc 1 1757 2 is_stmt 0 view .LVU465
 1726 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1727              	.LCFI16:
 1728              		.cfi_def_cfa_offset 24
 1729              		.cfi_offset 3, -24
 1730              		.cfi_offset 4, -20
 1731              		.cfi_offset 5, -16
 1732              		.cfi_offset 6, -12
 1733              		.cfi_offset 7, -8
 1734              		.cfi_offset 14, -4
1758:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1735              		.loc 1 1758 2 is_stmt 1 view .LVU466
 1736              	.LVL144:
1759:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 1737              		.loc 1 1759 2 view .LVU467
1760:./FreeRtos/src/tasks.c **** 
 1738              		.loc 1 1760 2 view .LVU468
1762:./FreeRtos/src/tasks.c **** 
 1739              		.loc 1 1762 3 view .LVU469
 1740 0002 0446     		mov	r4, r0
 1741 0004 88B3     		cbz	r0, .L138
 1742              	.LVL145:
 1743              	.L132:
1780:./FreeRtos/src/tasks.c **** 
 1744              		.loc 1 1780 3 view .LVU470
 1745 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1746              	.LVL146:
1782:./FreeRtos/src/tasks.c **** 		{
 1747              		.loc 1 1782 3 view .LVU471
 1748              	.LBB32:
ARM GAS  /tmp/ccQvkfbu.s 			page 127


 1749              	.LBI32:
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 1750              		.loc 2 207 34 view .LVU472
 1751              	.LBB33:
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 1752              		.loc 2 209 1 view .LVU473
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 1753              		.loc 2 211 2 view .LVU474
 1754              		.syntax unified
 1755              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1756 000a EFF31186 			mrs r6, basepri											
 1757 000e 4FF05003 		mov r3, #80												
 1758 0012 83F31188 		msr basepri, r3											
 1759 0016 BFF36F8F 		isb														
 1760 001a BFF34F8F 		dsb														
 1761              	
 1762              	@ 0 "" 2
 1763              	.LVL147:
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 1764              		.loc 2 223 2 view .LVU475
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 1765              		.loc 2 223 2 is_stmt 0 view .LVU476
 1766              		.thumb
 1767              		.syntax unified
 1768              	.LBE33:
 1769              	.LBE32:
1784:./FreeRtos/src/tasks.c **** 			{
 1770              		.loc 1 1784 4 is_stmt 1 view .LVU477
1784:./FreeRtos/src/tasks.c **** 			{
 1771              		.loc 1 1784 8 is_stmt 0 view .LVU478
 1772 001e 2046     		mov	r0, r4
 1773 0020 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1774              	.LVL148:
1784:./FreeRtos/src/tasks.c **** 			{
 1775              		.loc 1 1784 6 view .LVU479
 1776 0024 0546     		mov	r5, r0
 1777 0026 E0B1     		cbz	r0, .L133
1786:./FreeRtos/src/tasks.c **** 
 1778              		.loc 1 1786 39 is_stmt 1 view .LVU480
1789:./FreeRtos/src/tasks.c **** 				{
 1779              		.loc 1 1789 5 view .LVU481
1789:./FreeRtos/src/tasks.c **** 				{
 1780              		.loc 1 1789 30 is_stmt 0 view .LVU482
 1781 0028 184B     		ldr	r3, .L139
 1782 002a 1B68     		ldr	r3, [r3]
1789:./FreeRtos/src/tasks.c **** 				{
 1783              		.loc 1 1789 7 view .LVU483
 1784 002c 33BB     		cbnz	r3, .L134
1793:./FreeRtos/src/tasks.c **** 					{
 1785              		.loc 1 1793 6 is_stmt 1 view .LVU484
1793:./FreeRtos/src/tasks.c **** 					{
 1786              		.loc 1 1793 15 is_stmt 0 view .LVU485
 1787 002e E26A     		ldr	r2, [r4, #44]
1793:./FreeRtos/src/tasks.c **** 					{
 1788              		.loc 1 1793 43 view .LVU486
 1789 0030 174B     		ldr	r3, .L139+4
 1790 0032 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQvkfbu.s 			page 128


 1791 0034 DB6A     		ldr	r3, [r3, #44]
1793:./FreeRtos/src/tasks.c **** 					{
 1792              		.loc 1 1793 8 view .LVU487
 1793 0036 9A42     		cmp	r2, r3
 1794 0038 1ED2     		bcs	.L136
1758:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1795              		.loc 1 1758 13 view .LVU488
 1796 003a 0025     		movs	r5, #0
 1797              	.L135:
 1798              	.LVL149:
1799:./FreeRtos/src/tasks.c **** 					}
 1799              		.loc 1 1799 31 is_stmt 1 view .LVU489
1802:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1800              		.loc 1 1802 6 view .LVU490
1802:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1801              		.loc 1 1802 15 is_stmt 0 view .LVU491
 1802 003c 271D     		adds	r7, r4, #4
 1803 003e 3846     		mov	r0, r7
 1804 0040 FFF7FEFF 		bl	uxListRemove
 1805              	.LVL150:
1803:./FreeRtos/src/tasks.c **** 				}
 1806              		.loc 1 1803 6 is_stmt 1 view .LVU492
1803:./FreeRtos/src/tasks.c **** 				}
 1807              		.loc 1 1803 6 view .LVU493
 1808 0044 E06A     		ldr	r0, [r4, #44]
 1809 0046 0123     		movs	r3, #1
 1810 0048 8340     		lsls	r3, r3, r0
 1811 004a 124A     		ldr	r2, .L139+8
 1812 004c 1168     		ldr	r1, [r2]
 1813 004e 0B43     		orrs	r3, r3, r1
 1814 0050 1360     		str	r3, [r2]
1803:./FreeRtos/src/tasks.c **** 				}
 1815              		.loc 1 1803 6 view .LVU494
 1816 0052 00EB8000 		add	r0, r0, r0, lsl #2
 1817 0056 3946     		mov	r1, r7
 1818 0058 0F4B     		ldr	r3, .L139+12
 1819 005a 03EB8000 		add	r0, r3, r0, lsl #2
 1820 005e FFF7FEFF 		bl	vListInsertEnd
 1821              	.LVL151:
1803:./FreeRtos/src/tasks.c **** 				}
 1822              		.loc 1 1803 36 view .LVU495
 1823              	.L133:
1815:./FreeRtos/src/tasks.c **** 			}
 1824              		.loc 1 1815 29 view .LVU496
1818:./FreeRtos/src/tasks.c **** 
 1825              		.loc 1 1818 3 view .LVU497
 1826              	.LBB34:
 1827              	.LBI34:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 1828              		.loc 2 227 30 view .LVU498
 1829              	.LBB35:
 1830              		.loc 2 229 2 view .LVU499
 1831              		.syntax unified
 1832              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1833 0062 86F31188 			msr basepri, r6	
 1834              	@ 0 "" 2
 1835              	.LVL152:
ARM GAS  /tmp/ccQvkfbu.s 			page 129


 1836              		.loc 2 229 2 is_stmt 0 view .LVU500
 1837              		.thumb
 1838              		.syntax unified
 1839              	.LBE35:
 1840              	.LBE34:
1820:./FreeRtos/src/tasks.c **** 	}
 1841              		.loc 1 1820 3 is_stmt 1 view .LVU501
1821:./FreeRtos/src/tasks.c **** 
 1842              		.loc 1 1821 2 is_stmt 0 view .LVU502
 1843 0066 2846     		mov	r0, r5
 1844 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1845              	.LVL153:
 1846              	.L138:
1762:./FreeRtos/src/tasks.c **** 
 1847              		.loc 1 1762 3 is_stmt 1 discriminator 1 view .LVU503
 1848 006a 40F2E262 		movw	r2, #1762
 1849 006e 0B49     		ldr	r1, .L139+16
 1850 0070 0B48     		ldr	r0, .L139+20
 1851              	.LVL154:
1762:./FreeRtos/src/tasks.c **** 
 1852              		.loc 1 1762 3 is_stmt 0 discriminator 1 view .LVU504
 1853 0072 FFF7FEFF 		bl	printf
 1854              	.LVL155:
 1855 0076 C6E7     		b	.L132
 1856              	.LVL156:
 1857              	.L136:
1795:./FreeRtos/src/tasks.c **** 					}
 1858              		.loc 1 1795 22 view .LVU505
 1859 0078 0125     		movs	r5, #1
 1860 007a DFE7     		b	.L135
 1861              	.L134:
1810:./FreeRtos/src/tasks.c **** 				}
 1862              		.loc 1 1810 6 is_stmt 1 view .LVU506
 1863 007c 04F11801 		add	r1, r4, #24
 1864 0080 0848     		ldr	r0, .L139+24
 1865 0082 FFF7FEFF 		bl	vListInsertEnd
 1866              	.LVL157:
1758:./FreeRtos/src/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1867              		.loc 1 1758 13 is_stmt 0 view .LVU507
 1868 0086 0025     		movs	r5, #0
 1869 0088 EBE7     		b	.L133
 1870              	.L140:
 1871 008a 00BF     		.align	2
 1872              	.L139:
 1873 008c 00000000 		.word	.LANCHOR16
 1874 0090 00000000 		.word	.LANCHOR10
 1875 0094 00000000 		.word	.LANCHOR13
 1876 0098 00000000 		.word	.LANCHOR4
 1877 009c 00000000 		.word	.LC0
 1878 00a0 18000000 		.word	.LC1
 1879 00a4 00000000 		.word	.LANCHOR3
 1880              		.cfi_endproc
 1881              	.LFE144:
 1883              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 1884              		.align	2
 1885              	.LC2:
 1886 0000 49444C45 		.ascii	"IDLE\000"
ARM GAS  /tmp/ccQvkfbu.s 			page 130


 1886      00
 1887              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1888              		.align	1
 1889              		.global	vTaskStartScheduler
 1890              		.syntax unified
 1891              		.thumb
 1892              		.thumb_func
 1893              		.fpu fpv4-sp-d16
 1895              	vTaskStartScheduler:
 1896              	.LFB145:
1827:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
 1897              		.loc 1 1827 1 is_stmt 1 view -0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 0
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 1901 0000 00B5     		push	{lr}
 1902              	.LCFI17:
 1903              		.cfi_def_cfa_offset 4
 1904              		.cfi_offset 14, -4
 1905 0002 83B0     		sub	sp, sp, #12
 1906              	.LCFI18:
 1907              		.cfi_def_cfa_offset 16
1828:./FreeRtos/src/tasks.c **** 
 1908              		.loc 1 1828 1 view .LVU509
1860:./FreeRtos/src/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1909              		.loc 1 1860 3 view .LVU510
1860:./FreeRtos/src/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1910              		.loc 1 1860 13 is_stmt 0 view .LVU511
 1911 0004 164B     		ldr	r3, .L147
 1912 0006 0193     		str	r3, [sp, #4]
 1913 0008 0023     		movs	r3, #0
 1914 000a 0093     		str	r3, [sp]
 1915 000c 8022     		movs	r2, #128
 1916 000e 1549     		ldr	r1, .L147+4
 1917 0010 1548     		ldr	r0, .L147+8
 1918 0012 FFF7FEFF 		bl	xTaskCreate
 1919              	.LVL158:
1881:./FreeRtos/src/tasks.c **** 	{
 1920              		.loc 1 1881 2 is_stmt 1 view .LVU512
1881:./FreeRtos/src/tasks.c **** 	{
 1921              		.loc 1 1881 4 is_stmt 0 view .LVU513
 1922 0016 0128     		cmp	r0, #1
 1923 0018 05D0     		beq	.L145
1924:./FreeRtos/src/tasks.c **** 	}
 1924              		.loc 1 1924 3 is_stmt 1 view .LVU514
 1925 001a B0F1FF3F 		cmp	r0, #-1
 1926 001e 17D0     		beq	.L146
 1927              	.LVL159:
 1928              	.L141:
1930:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 1929              		.loc 1 1930 1 is_stmt 0 view .LVU515
 1930 0020 03B0     		add	sp, sp, #12
 1931              	.LCFI19:
 1932              		.cfi_remember_state
 1933              		.cfi_def_cfa_offset 4
 1934              		@ sp needed
 1935 0022 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccQvkfbu.s 			page 131


 1936              	.LVL160:
 1937              	.L145:
 1938              	.LCFI20:
 1939              		.cfi_restore_state
1888:./FreeRtos/src/tasks.c **** 
 1940              		.loc 1 1888 3 is_stmt 1 view .LVU516
 1941              	.LBB36:
 1942              	.LBI36:
 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 1943              		.loc 2 191 30 view .LVU517
 1944              	.LBB37:
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 1945              		.loc 2 193 1 view .LVU518
 195:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 1946              		.loc 2 195 2 view .LVU519
 1947              		.syntax unified
 1948              	@ 195 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1949 0026 4FF05003 			mov r3, #80												
 1950 002a 83F31188 		msr basepri, r3											
 1951 002e BFF36F8F 		isb														
 1952 0032 BFF34F8F 		dsb														
 1953              	
 1954              	@ 0 "" 2
 1955              		.thumb
 1956              		.syntax unified
 1957              	.LBE37:
 1958              	.LBE36:
1898:./FreeRtos/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1959              		.loc 1 1898 3 view .LVU520
1898:./FreeRtos/src/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1960              		.loc 1 1898 24 is_stmt 0 view .LVU521
 1961 0036 0D4B     		ldr	r3, .L147+12
 1962 0038 4FF0FF32 		mov	r2, #-1
 1963 003c 1A60     		str	r2, [r3]
1899:./FreeRtos/src/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1964              		.loc 1 1899 3 is_stmt 1 view .LVU522
1899:./FreeRtos/src/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1965              		.loc 1 1899 21 is_stmt 0 view .LVU523
 1966 003e 0C4B     		ldr	r3, .L147+16
 1967 0040 0122     		movs	r2, #1
 1968 0042 1A60     		str	r2, [r3]
1900:./FreeRtos/src/tasks.c **** 
 1969              		.loc 1 1900 3 is_stmt 1 view .LVU524
1900:./FreeRtos/src/tasks.c **** 
 1970              		.loc 1 1900 14 is_stmt 0 view .LVU525
 1971 0044 0B4B     		ldr	r3, .L147+20
 1972 0046 0022     		movs	r2, #0
 1973 0048 1A60     		str	r2, [r3]
1905:./FreeRtos/src/tasks.c **** 
 1974              		.loc 1 1905 43 is_stmt 1 view .LVU526
1909:./FreeRtos/src/tasks.c **** 		{
 1975              		.loc 1 1909 3 view .LVU527
1909:./FreeRtos/src/tasks.c **** 		{
 1976              		.loc 1 1909 7 is_stmt 0 view .LVU528
 1977 004a FFF7FEFF 		bl	xPortStartScheduler
 1978              	.LVL161:
1909:./FreeRtos/src/tasks.c **** 		{
ARM GAS  /tmp/ccQvkfbu.s 			page 132


 1979              		.loc 1 1909 7 view .LVU529
 1980 004e E7E7     		b	.L141
 1981              	.LVL162:
 1982              	.L146:
1924:./FreeRtos/src/tasks.c **** 	}
 1983              		.loc 1 1924 3 is_stmt 1 discriminator 1 view .LVU530
 1984 0050 40F28472 		movw	r2, #1924
 1985 0054 0849     		ldr	r1, .L147+24
 1986 0056 0948     		ldr	r0, .L147+28
 1987              	.LVL163:
1924:./FreeRtos/src/tasks.c **** 	}
 1988              		.loc 1 1924 3 is_stmt 0 discriminator 1 view .LVU531
 1989 0058 FFF7FEFF 		bl	printf
 1990              	.LVL164:
1929:./FreeRtos/src/tasks.c **** }
 1991              		.loc 1 1929 2 is_stmt 1 discriminator 1 view .LVU532
1930:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 1992              		.loc 1 1930 1 is_stmt 0 discriminator 1 view .LVU533
 1993 005c E0E7     		b	.L141
 1994              	.L148:
 1995 005e 00BF     		.align	2
 1996              	.L147:
 1997 0060 00000000 		.word	.LANCHOR17
 1998 0064 00000000 		.word	.LC2
 1999 0068 00000000 		.word	prvIdleTask
 2000 006c 00000000 		.word	.LANCHOR1
 2001 0070 00000000 		.word	.LANCHOR11
 2002 0074 00000000 		.word	.LANCHOR14
 2003 0078 00000000 		.word	.LC0
 2004 007c 18000000 		.word	.LC1
 2005              		.cfi_endproc
 2006              	.LFE145:
 2008              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2009              		.align	1
 2010              		.global	vTaskEndScheduler
 2011              		.syntax unified
 2012              		.thumb
 2013              		.thumb_func
 2014              		.fpu fpv4-sp-d16
 2016              	vTaskEndScheduler:
 2017              	.LFB146:
1934:./FreeRtos/src/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2018              		.loc 1 1934 1 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022 0000 08B5     		push	{r3, lr}
 2023              	.LCFI21:
 2024              		.cfi_def_cfa_offset 8
 2025              		.cfi_offset 3, -8
 2026              		.cfi_offset 14, -4
1938:./FreeRtos/src/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2027              		.loc 1 1938 2 view .LVU535
 2028              	.LBB38:
 2029              	.LBI38:
 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 2030              		.loc 2 191 30 view .LVU536
ARM GAS  /tmp/ccQvkfbu.s 			page 133


 2031              	.LBB39:
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 2032              		.loc 2 193 1 view .LVU537
 195:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 2033              		.loc 2 195 2 view .LVU538
 2034              		.syntax unified
 2035              	@ 195 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 2036 0002 4FF05003 			mov r3, #80												
 2037 0006 83F31188 		msr basepri, r3											
 2038 000a BFF36F8F 		isb														
 2039 000e BFF34F8F 		dsb														
 2040              	
 2041              	@ 0 "" 2
 2042              		.thumb
 2043              		.syntax unified
 2044              	.LBE39:
 2045              	.LBE38:
1939:./FreeRtos/src/tasks.c **** 	vPortEndScheduler();
 2046              		.loc 1 1939 2 view .LVU539
1939:./FreeRtos/src/tasks.c **** 	vPortEndScheduler();
 2047              		.loc 1 1939 20 is_stmt 0 view .LVU540
 2048 0012 034B     		ldr	r3, .L151
 2049 0014 0022     		movs	r2, #0
 2050 0016 1A60     		str	r2, [r3]
1940:./FreeRtos/src/tasks.c **** }
 2051              		.loc 1 1940 2 is_stmt 1 view .LVU541
 2052 0018 FFF7FEFF 		bl	vPortEndScheduler
 2053              	.LVL165:
1941:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
 2054              		.loc 1 1941 1 is_stmt 0 view .LVU542
 2055 001c 08BD     		pop	{r3, pc}
 2056              	.L152:
 2057 001e 00BF     		.align	2
 2058              	.L151:
 2059 0020 00000000 		.word	.LANCHOR11
 2060              		.cfi_endproc
 2061              	.LFE146:
 2063              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2064              		.align	1
 2065              		.global	vTaskSuspendAll
 2066              		.syntax unified
 2067              		.thumb
 2068              		.thumb_func
 2069              		.fpu fpv4-sp-d16
 2071              	vTaskSuspendAll:
 2072              	.LFB147:
1945:./FreeRtos/src/tasks.c **** 	/* A critical section is not required as the variable is of type
 2073              		.loc 1 1945 1 is_stmt 1 view -0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 0
 2076              		@ frame_needed = 0, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
1950:./FreeRtos/src/tasks.c **** }
 2078              		.loc 1 1950 2 view .LVU544
 2079 0000 024A     		ldr	r2, .L154
 2080 0002 1368     		ldr	r3, [r2]
 2081 0004 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccQvkfbu.s 			page 134


 2082 0006 1360     		str	r3, [r2]
1951:./FreeRtos/src/tasks.c **** /*----------------------------------------------------------*/
 2083              		.loc 1 1951 1 is_stmt 0 view .LVU545
 2084 0008 7047     		bx	lr
 2085              	.L155:
 2086 000a 00BF     		.align	2
 2087              	.L154:
 2088 000c 00000000 		.word	.LANCHOR16
 2089              		.cfi_endproc
 2090              	.LFE147:
 2092              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2093              		.align	1
 2094              		.global	xTaskGetTickCount
 2095              		.syntax unified
 2096              		.thumb
 2097              		.thumb_func
 2098              		.fpu fpv4-sp-d16
 2100              	xTaskGetTickCount:
 2101              	.LFB149:
2128:./FreeRtos/src/tasks.c **** TickType_t xTicks;
 2102              		.loc 1 2128 1 is_stmt 1 view -0
 2103              		.cfi_startproc
 2104              		@ args = 0, pretend = 0, frame = 0
 2105              		@ frame_needed = 0, uses_anonymous_args = 0
 2106              		@ link register save eliminated.
2129:./FreeRtos/src/tasks.c **** 
 2107              		.loc 1 2129 1 view .LVU547
2132:./FreeRtos/src/tasks.c **** 	{
 2108              		.loc 1 2132 32 view .LVU548
2134:./FreeRtos/src/tasks.c **** 	}
 2109              		.loc 1 2134 3 view .LVU549
2134:./FreeRtos/src/tasks.c **** 	}
 2110              		.loc 1 2134 10 is_stmt 0 view .LVU550
 2111 0000 014B     		ldr	r3, .L157
 2112 0002 1868     		ldr	r0, [r3]
 2113              	.LVL166:
2136:./FreeRtos/src/tasks.c **** 
 2114              		.loc 1 2136 31 is_stmt 1 view .LVU551
2138:./FreeRtos/src/tasks.c **** }
 2115              		.loc 1 2138 2 view .LVU552
2139:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2116              		.loc 1 2139 1 is_stmt 0 view .LVU553
 2117 0004 7047     		bx	lr
 2118              	.L158:
 2119 0006 00BF     		.align	2
 2120              	.L157:
 2121 0008 00000000 		.word	.LANCHOR14
 2122              		.cfi_endproc
 2123              	.LFE149:
 2125              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2126              		.align	1
 2127              		.global	xTaskGetTickCountFromISR
 2128              		.syntax unified
 2129              		.thumb
 2130              		.thumb_func
 2131              		.fpu fpv4-sp-d16
 2133              	xTaskGetTickCountFromISR:
ARM GAS  /tmp/ccQvkfbu.s 			page 135


 2134              	.LFB150:
2143:./FreeRtos/src/tasks.c **** TickType_t xReturn;
 2135              		.loc 1 2143 1 is_stmt 1 view -0
 2136              		.cfi_startproc
 2137              		@ args = 0, pretend = 0, frame = 0
 2138              		@ frame_needed = 0, uses_anonymous_args = 0
 2139 0000 08B5     		push	{r3, lr}
 2140              	.LCFI22:
 2141              		.cfi_def_cfa_offset 8
 2142              		.cfi_offset 3, -8
 2143              		.cfi_offset 14, -4
2144:./FreeRtos/src/tasks.c **** UBaseType_t uxSavedInterruptStatus;
 2144              		.loc 1 2144 1 view .LVU555
2145:./FreeRtos/src/tasks.c **** 
 2145              		.loc 1 2145 1 view .LVU556
2161:./FreeRtos/src/tasks.c **** 
 2146              		.loc 1 2161 2 view .LVU557
 2147 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2148              	.LVL167:
2163:./FreeRtos/src/tasks.c **** 	{
 2149              		.loc 1 2163 2 view .LVU558
2165:./FreeRtos/src/tasks.c **** 	}
 2150              		.loc 1 2165 3 view .LVU559
2165:./FreeRtos/src/tasks.c **** 	}
 2151              		.loc 1 2165 11 is_stmt 0 view .LVU560
 2152 0006 014B     		ldr	r3, .L161
 2153 0008 1868     		ldr	r0, [r3]
 2154              	.LVL168:
2167:./FreeRtos/src/tasks.c **** 
 2155              		.loc 1 2167 2 is_stmt 1 view .LVU561
2169:./FreeRtos/src/tasks.c **** }
 2156              		.loc 1 2169 2 view .LVU562
2170:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2157              		.loc 1 2170 1 is_stmt 0 view .LVU563
 2158 000a 08BD     		pop	{r3, pc}
 2159              	.L162:
 2160              		.align	2
 2161              	.L161:
 2162 000c 00000000 		.word	.LANCHOR14
 2163              		.cfi_endproc
 2164              	.LFE150:
 2166              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2167              		.align	1
 2168              		.global	uxTaskGetNumberOfTasks
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu fpv4-sp-d16
 2174              	uxTaskGetNumberOfTasks:
 2175              	.LFB151:
2174:./FreeRtos/src/tasks.c **** 	/* A critical section is not required because the variables are of type
 2176              		.loc 1 2174 1 is_stmt 1 view -0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 0
 2179              		@ frame_needed = 0, uses_anonymous_args = 0
 2180              		@ link register save eliminated.
2177:./FreeRtos/src/tasks.c **** }
ARM GAS  /tmp/ccQvkfbu.s 			page 136


 2181              		.loc 1 2177 2 view .LVU565
2177:./FreeRtos/src/tasks.c **** }
 2182              		.loc 1 2177 9 is_stmt 0 view .LVU566
 2183 0000 014B     		ldr	r3, .L164
 2184 0002 1868     		ldr	r0, [r3]
2178:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2185              		.loc 1 2178 1 view .LVU567
 2186 0004 7047     		bx	lr
 2187              	.L165:
 2188 0006 00BF     		.align	2
 2189              	.L164:
 2190 0008 00000000 		.word	.LANCHOR9
 2191              		.cfi_endproc
 2192              	.LFE151:
 2194              		.section	.text.pcTaskGetName,"ax",%progbits
 2195              		.align	1
 2196              		.global	pcTaskGetName
 2197              		.syntax unified
 2198              		.thumb
 2199              		.thumb_func
 2200              		.fpu fpv4-sp-d16
 2202              	pcTaskGetName:
 2203              	.LVL169:
 2204              	.LFB152:
2182:./FreeRtos/src/tasks.c **** TCB_t *pxTCB;
 2205              		.loc 1 2182 1 is_stmt 1 view -0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 0
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
2182:./FreeRtos/src/tasks.c **** TCB_t *pxTCB;
 2209              		.loc 1 2182 1 is_stmt 0 view .LVU569
 2210 0000 10B5     		push	{r4, lr}
 2211              	.LCFI23:
 2212              		.cfi_def_cfa_offset 8
 2213              		.cfi_offset 4, -8
 2214              		.cfi_offset 14, -4
2183:./FreeRtos/src/tasks.c **** 
 2215              		.loc 1 2183 1 is_stmt 1 view .LVU570
2187:./FreeRtos/src/tasks.c **** 	configASSERT( pxTCB );
 2216              		.loc 1 2187 2 view .LVU571
2187:./FreeRtos/src/tasks.c **** 	configASSERT( pxTCB );
 2217              		.loc 1 2187 10 is_stmt 0 view .LVU572
 2218 0002 0446     		mov	r4, r0
 2219 0004 18B1     		cbz	r0, .L170
 2220              	.LVL170:
 2221              	.L167:
2188:./FreeRtos/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2222              		.loc 1 2188 2 is_stmt 1 discriminator 4 view .LVU573
 2223 0006 2CB1     		cbz	r4, .L171
 2224              	.L168:
2189:./FreeRtos/src/tasks.c **** }
 2225              		.loc 1 2189 2 view .LVU574
2190:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2226              		.loc 1 2190 1 is_stmt 0 view .LVU575
 2227 0008 04F13400 		add	r0, r4, #52
 2228 000c 10BD     		pop	{r4, pc}
 2229              	.LVL171:
ARM GAS  /tmp/ccQvkfbu.s 			page 137


 2230              	.L170:
2187:./FreeRtos/src/tasks.c **** 	configASSERT( pxTCB );
 2231              		.loc 1 2187 10 discriminator 1 view .LVU576
 2232 000e 054B     		ldr	r3, .L172
 2233 0010 1C68     		ldr	r4, [r3]
 2234              	.LVL172:
2187:./FreeRtos/src/tasks.c **** 	configASSERT( pxTCB );
 2235              		.loc 1 2187 10 discriminator 1 view .LVU577
 2236 0012 F8E7     		b	.L167
 2237              	.LVL173:
 2238              	.L171:
2188:./FreeRtos/src/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2239              		.loc 1 2188 2 is_stmt 1 discriminator 1 view .LVU578
 2240 0014 40F68C02 		movw	r2, #2188
 2241 0018 0349     		ldr	r1, .L172+4
 2242 001a 0448     		ldr	r0, .L172+8
 2243 001c FFF7FEFF 		bl	printf
 2244              	.LVL174:
 2245 0020 F2E7     		b	.L168
 2246              	.L173:
 2247 0022 00BF     		.align	2
 2248              	.L172:
 2249 0024 00000000 		.word	.LANCHOR10
 2250 0028 00000000 		.word	.LC0
 2251 002c 18000000 		.word	.LC1
 2252              		.cfi_endproc
 2253              	.LFE152:
 2255              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2256              		.align	1
 2257              		.global	xTaskIncrementTick
 2258              		.syntax unified
 2259              		.thumb
 2260              		.thumb_func
 2261              		.fpu fpv4-sp-d16
 2263              	xTaskIncrementTick:
 2264              	.LFB153:
2500:./FreeRtos/src/tasks.c **** TCB_t * pxTCB;
 2265              		.loc 1 2500 1 view -0
 2266              		.cfi_startproc
 2267              		@ args = 0, pretend = 0, frame = 0
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2270              	.LCFI24:
 2271              		.cfi_def_cfa_offset 24
 2272              		.cfi_offset 3, -24
 2273              		.cfi_offset 4, -20
 2274              		.cfi_offset 5, -16
 2275              		.cfi_offset 6, -12
 2276              		.cfi_offset 7, -8
 2277              		.cfi_offset 14, -4
2501:./FreeRtos/src/tasks.c **** TickType_t xItemValue;
 2278              		.loc 1 2501 1 view .LVU580
2502:./FreeRtos/src/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2279              		.loc 1 2502 1 view .LVU581
2503:./FreeRtos/src/tasks.c **** 
 2280              		.loc 1 2503 1 view .LVU582
 2281              	.LVL175:
ARM GAS  /tmp/ccQvkfbu.s 			page 138


2508:./FreeRtos/src/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2282              		.loc 1 2508 40 view .LVU583
2509:./FreeRtos/src/tasks.c **** 	{
 2283              		.loc 1 2509 2 view .LVU584
2509:./FreeRtos/src/tasks.c **** 	{
 2284              		.loc 1 2509 27 is_stmt 0 view .LVU585
 2285 0002 394B     		ldr	r3, .L195
 2286 0004 1B68     		ldr	r3, [r3]
2509:./FreeRtos/src/tasks.c **** 	{
 2287              		.loc 1 2509 4 view .LVU586
 2288 0006 002B     		cmp	r3, #0
 2289 0008 62D1     		bne	.L175
 2290              	.LBB40:
2513:./FreeRtos/src/tasks.c **** 
 2291              		.loc 1 2513 3 is_stmt 1 view .LVU587
2513:./FreeRtos/src/tasks.c **** 
 2292              		.loc 1 2513 49 is_stmt 0 view .LVU588
 2293 000a 384B     		ldr	r3, .L195+4
 2294 000c 1E68     		ldr	r6, [r3]
2513:./FreeRtos/src/tasks.c **** 
 2295              		.loc 1 2513 20 view .LVU589
 2296 000e 0136     		adds	r6, r6, #1
 2297              	.LVL176:
2517:./FreeRtos/src/tasks.c **** 
 2298              		.loc 1 2517 3 is_stmt 1 view .LVU590
2517:./FreeRtos/src/tasks.c **** 
 2299              		.loc 1 2517 14 is_stmt 0 view .LVU591
 2300 0010 1E60     		str	r6, [r3]
2519:./FreeRtos/src/tasks.c **** 		{
 2301              		.loc 1 2519 3 is_stmt 1 view .LVU592
2519:./FreeRtos/src/tasks.c **** 		{
 2302              		.loc 1 2519 5 is_stmt 0 view .LVU593
 2303 0012 7EB9     		cbnz	r6, .L176
 2304              	.LBB41:
2521:./FreeRtos/src/tasks.c **** 		}
 2305              		.loc 1 2521 4 is_stmt 1 view .LVU594
2521:./FreeRtos/src/tasks.c **** 		}
 2306              		.loc 1 2521 4 view .LVU595
 2307 0014 364B     		ldr	r3, .L195+8
 2308 0016 1B68     		ldr	r3, [r3]
 2309 0018 1B68     		ldr	r3, [r3]
 2310 001a E3B9     		cbnz	r3, .L192
 2311              	.L177:
2521:./FreeRtos/src/tasks.c **** 		}
 2312              		.loc 1 2521 4 discriminator 3 view .LVU596
 2313 001c 344A     		ldr	r2, .L195+8
 2314 001e 1168     		ldr	r1, [r2]
 2315              	.LVL177:
2521:./FreeRtos/src/tasks.c **** 		}
 2316              		.loc 1 2521 4 discriminator 3 view .LVU597
 2317 0020 344B     		ldr	r3, .L195+12
 2318 0022 1868     		ldr	r0, [r3]
 2319 0024 1060     		str	r0, [r2]
2521:./FreeRtos/src/tasks.c **** 		}
 2320              		.loc 1 2521 4 discriminator 3 view .LVU598
 2321 0026 1960     		str	r1, [r3]
2521:./FreeRtos/src/tasks.c **** 		}
ARM GAS  /tmp/ccQvkfbu.s 			page 139


 2322              		.loc 1 2521 4 discriminator 3 view .LVU599
 2323 0028 334A     		ldr	r2, .L195+16
 2324 002a 1368     		ldr	r3, [r2]
 2325 002c 0133     		adds	r3, r3, #1
 2326 002e 1360     		str	r3, [r2]
2521:./FreeRtos/src/tasks.c **** 		}
 2327              		.loc 1 2521 4 discriminator 3 view .LVU600
 2328 0030 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2329              	.LVL178:
2521:./FreeRtos/src/tasks.c **** 		}
 2330              		.loc 1 2521 4 is_stmt 0 discriminator 3 view .LVU601
 2331              	.LBE41:
2521:./FreeRtos/src/tasks.c **** 		}
 2332              		.loc 1 2521 30 is_stmt 1 discriminator 3 view .LVU602
 2333              	.L176:
2525:./FreeRtos/src/tasks.c **** 		}
 2334              		.loc 1 2525 28 view .LVU603
2532:./FreeRtos/src/tasks.c **** 		{
 2335              		.loc 1 2532 3 view .LVU604
2532:./FreeRtos/src/tasks.c **** 		{
 2336              		.loc 1 2532 23 is_stmt 0 view .LVU605
 2337 0034 314B     		ldr	r3, .L195+20
 2338 0036 1B68     		ldr	r3, [r3]
2532:./FreeRtos/src/tasks.c **** 		{
 2339              		.loc 1 2532 5 view .LVU606
 2340 0038 B342     		cmp	r3, r6
 2341 003a 3FD9     		bls	.L187
 2342              	.LBE40:
2503:./FreeRtos/src/tasks.c **** 
 2343              		.loc 1 2503 12 view .LVU607
 2344 003c 0027     		movs	r7, #0
 2345              	.LVL179:
 2346              	.L179:
 2347              	.LBB43:
2615:./FreeRtos/src/tasks.c **** 			{
 2348              		.loc 1 2615 4 is_stmt 1 view .LVU608
2615:./FreeRtos/src/tasks.c **** 			{
 2349              		.loc 1 2615 8 is_stmt 0 view .LVU609
 2350 003e 304B     		ldr	r3, .L195+24
 2351 0040 1B68     		ldr	r3, [r3]
 2352 0042 DB6A     		ldr	r3, [r3, #44]
 2353 0044 03EB8303 		add	r3, r3, r3, lsl #2
 2354 0048 9A00     		lsls	r2, r3, #2
 2355 004a 2E4B     		ldr	r3, .L195+28
 2356 004c 9B58     		ldr	r3, [r3, r2]
2615:./FreeRtos/src/tasks.c **** 			{
 2357              		.loc 1 2615 6 view .LVU610
 2358 004e 012B     		cmp	r3, #1
 2359 0050 43D9     		bls	.L185
2617:./FreeRtos/src/tasks.c **** 			}
 2360              		.loc 1 2617 21 view .LVU611
 2361 0052 0127     		movs	r7, #1
 2362              	.LVL180:
2617:./FreeRtos/src/tasks.c **** 			}
 2363              		.loc 1 2617 21 view .LVU612
 2364 0054 41E0     		b	.L185
 2365              	.LVL181:
ARM GAS  /tmp/ccQvkfbu.s 			page 140


 2366              	.L192:
 2367              	.LBB42:
2521:./FreeRtos/src/tasks.c **** 		}
 2368              		.loc 1 2521 4 is_stmt 1 discriminator 1 view .LVU613
 2369 0056 40F6D912 		movw	r2, #2521
 2370 005a 2B49     		ldr	r1, .L195+32
 2371 005c 2B48     		ldr	r0, .L195+36
 2372 005e FFF7FEFF 		bl	printf
 2373              	.LVL182:
 2374 0062 DBE7     		b	.L177
 2375              	.LVL183:
 2376              	.L188:
2521:./FreeRtos/src/tasks.c **** 		}
 2377              		.loc 1 2521 4 is_stmt 0 discriminator 1 view .LVU614
 2378              	.LBE42:
2598:./FreeRtos/src/tasks.c **** 						}
 2379              		.loc 1 2598 24 view .LVU615
 2380 0064 0127     		movs	r7, #1
 2381              	.LVL184:
 2382              	.L178:
2534:./FreeRtos/src/tasks.c **** 			{
 2383              		.loc 1 2534 4 is_stmt 1 view .LVU616
2536:./FreeRtos/src/tasks.c **** 				{
 2384              		.loc 1 2536 5 view .LVU617
2536:./FreeRtos/src/tasks.c **** 				{
 2385              		.loc 1 2536 9 is_stmt 0 view .LVU618
 2386 0066 224B     		ldr	r3, .L195+8
 2387 0068 1B68     		ldr	r3, [r3]
 2388 006a 1B68     		ldr	r3, [r3]
2536:./FreeRtos/src/tasks.c **** 				{
 2389              		.loc 1 2536 48 view .LVU619
 2390 006c 43B3     		cbz	r3, .L193
2552:./FreeRtos/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2391              		.loc 1 2552 6 is_stmt 1 view .LVU620
2552:./FreeRtos/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2392              		.loc 1 2552 26 is_stmt 0 view .LVU621
 2393 006e 204B     		ldr	r3, .L195+8
 2394 0070 1B68     		ldr	r3, [r3]
 2395 0072 DB68     		ldr	r3, [r3, #12]
2552:./FreeRtos/src/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2396              		.loc 1 2552 12 view .LVU622
 2397 0074 DC68     		ldr	r4, [r3, #12]
 2398              	.LVL185:
2553:./FreeRtos/src/tasks.c **** 
 2399              		.loc 1 2553 6 is_stmt 1 view .LVU623
2553:./FreeRtos/src/tasks.c **** 
 2400              		.loc 1 2553 17 is_stmt 0 view .LVU624
 2401 0076 6368     		ldr	r3, [r4, #4]
 2402              	.LVL186:
2555:./FreeRtos/src/tasks.c **** 					{
 2403              		.loc 1 2555 6 is_stmt 1 view .LVU625
2555:./FreeRtos/src/tasks.c **** 					{
 2404              		.loc 1 2555 8 is_stmt 0 view .LVU626
 2405 0078 9E42     		cmp	r6, r3
 2406 007a 26D3     		bcc	.L194
2567:./FreeRtos/src/tasks.c **** 					}
 2407              		.loc 1 2567 31 is_stmt 1 view .LVU627
ARM GAS  /tmp/ccQvkfbu.s 			page 141


2571:./FreeRtos/src/tasks.c **** 
 2408              		.loc 1 2571 6 view .LVU628
2571:./FreeRtos/src/tasks.c **** 
 2409              		.loc 1 2571 15 is_stmt 0 view .LVU629
 2410 007c 251D     		adds	r5, r4, #4
 2411 007e 2846     		mov	r0, r5
 2412 0080 FFF7FEFF 		bl	uxListRemove
 2413              	.LVL187:
2575:./FreeRtos/src/tasks.c **** 					{
 2414              		.loc 1 2575 6 is_stmt 1 view .LVU630
2575:./FreeRtos/src/tasks.c **** 					{
 2415              		.loc 1 2575 10 is_stmt 0 view .LVU631
 2416 0084 A36A     		ldr	r3, [r4, #40]
2575:./FreeRtos/src/tasks.c **** 					{
 2417              		.loc 1 2575 8 view .LVU632
 2418 0086 1BB1     		cbz	r3, .L182
2577:./FreeRtos/src/tasks.c **** 					}
 2419              		.loc 1 2577 7 is_stmt 1 view .LVU633
2577:./FreeRtos/src/tasks.c **** 					}
 2420              		.loc 1 2577 16 is_stmt 0 view .LVU634
 2421 0088 04F11800 		add	r0, r4, #24
 2422 008c FFF7FEFF 		bl	uxListRemove
 2423              	.LVL188:
 2424              	.L182:
2581:./FreeRtos/src/tasks.c **** 					}
 2425              		.loc 1 2581 31 is_stmt 1 view .LVU635
2586:./FreeRtos/src/tasks.c **** 
 2426              		.loc 1 2586 6 view .LVU636
2586:./FreeRtos/src/tasks.c **** 
 2427              		.loc 1 2586 6 view .LVU637
 2428 0090 E36A     		ldr	r3, [r4, #44]
 2429 0092 0122     		movs	r2, #1
 2430 0094 9A40     		lsls	r2, r2, r3
 2431 0096 1E49     		ldr	r1, .L195+40
 2432 0098 0868     		ldr	r0, [r1]
 2433 009a 0243     		orrs	r2, r2, r0
 2434 009c 0A60     		str	r2, [r1]
2586:./FreeRtos/src/tasks.c **** 
 2435              		.loc 1 2586 6 view .LVU638
 2436 009e 03EB8303 		add	r3, r3, r3, lsl #2
 2437 00a2 9A00     		lsls	r2, r3, #2
 2438 00a4 2946     		mov	r1, r5
 2439 00a6 1748     		ldr	r0, .L195+28
 2440 00a8 1044     		add	r0, r0, r2
 2441 00aa FFF7FEFF 		bl	vListInsertEnd
 2442              	.LVL189:
2586:./FreeRtos/src/tasks.c **** 
 2443              		.loc 1 2586 36 view .LVU639
2596:./FreeRtos/src/tasks.c **** 						{
 2444              		.loc 1 2596 7 view .LVU640
2596:./FreeRtos/src/tasks.c **** 						{
 2445              		.loc 1 2596 16 is_stmt 0 view .LVU641
 2446 00ae E26A     		ldr	r2, [r4, #44]
2596:./FreeRtos/src/tasks.c **** 						{
 2447              		.loc 1 2596 44 view .LVU642
 2448 00b0 134B     		ldr	r3, .L195+24
 2449 00b2 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQvkfbu.s 			page 142


 2450 00b4 DB6A     		ldr	r3, [r3, #44]
2596:./FreeRtos/src/tasks.c **** 						{
 2451              		.loc 1 2596 9 view .LVU643
 2452 00b6 9A42     		cmp	r2, r3
 2453 00b8 D4D2     		bcs	.L188
 2454 00ba D4E7     		b	.L178
 2455              	.LVL190:
 2456              	.L187:
2596:./FreeRtos/src/tasks.c **** 						{
 2457              		.loc 1 2596 9 view .LVU644
 2458              	.LBE43:
2503:./FreeRtos/src/tasks.c **** 
 2459              		.loc 1 2503 12 view .LVU645
 2460 00bc 0027     		movs	r7, #0
 2461 00be D2E7     		b	.L178
 2462              	.LVL191:
 2463              	.L193:
 2464              	.LBB44:
2543:./FreeRtos/src/tasks.c **** 					break;
 2465              		.loc 1 2543 6 is_stmt 1 view .LVU646
2543:./FreeRtos/src/tasks.c **** 					break;
 2466              		.loc 1 2543 27 is_stmt 0 view .LVU647
 2467 00c0 0E4B     		ldr	r3, .L195+20
 2468 00c2 4FF0FF32 		mov	r2, #-1
 2469 00c6 1A60     		str	r2, [r3]
2544:./FreeRtos/src/tasks.c **** 				}
 2470              		.loc 1 2544 6 is_stmt 1 view .LVU648
 2471 00c8 B9E7     		b	.L179
 2472              	.LVL192:
 2473              	.L194:
2562:./FreeRtos/src/tasks.c **** 						break;
 2474              		.loc 1 2562 7 view .LVU649
2562:./FreeRtos/src/tasks.c **** 						break;
 2475              		.loc 1 2562 28 is_stmt 0 view .LVU650
 2476 00ca 0C4A     		ldr	r2, .L195+20
 2477 00cc 1360     		str	r3, [r2]
2563:./FreeRtos/src/tasks.c **** 					}
 2478              		.loc 1 2563 7 is_stmt 1 view .LVU651
 2479 00ce B6E7     		b	.L179
 2480              	.LVL193:
 2481              	.L175:
2563:./FreeRtos/src/tasks.c **** 					}
 2482              		.loc 1 2563 7 is_stmt 0 view .LVU652
 2483              	.LBE44:
2643:./FreeRtos/src/tasks.c **** 
 2484              		.loc 1 2643 3 is_stmt 1 view .LVU653
 2485 00d0 104A     		ldr	r2, .L195+44
 2486 00d2 1368     		ldr	r3, [r2]
 2487 00d4 0133     		adds	r3, r3, #1
 2488 00d6 1360     		str	r3, [r2]
2503:./FreeRtos/src/tasks.c **** 
 2489              		.loc 1 2503 12 is_stmt 0 view .LVU654
 2490 00d8 0027     		movs	r7, #0
 2491              	.LVL194:
 2492              	.L185:
2656:./FreeRtos/src/tasks.c **** 		{
 2493              		.loc 1 2656 3 is_stmt 1 view .LVU655
ARM GAS  /tmp/ccQvkfbu.s 			page 143


2656:./FreeRtos/src/tasks.c **** 		{
 2494              		.loc 1 2656 21 is_stmt 0 view .LVU656
 2495 00da 0F4B     		ldr	r3, .L195+48
 2496 00dc 1B68     		ldr	r3, [r3]
2656:./FreeRtos/src/tasks.c **** 		{
 2497              		.loc 1 2656 5 view .LVU657
 2498 00de 03B1     		cbz	r3, .L174
2658:./FreeRtos/src/tasks.c **** 		}
 2499              		.loc 1 2658 20 view .LVU658
 2500 00e0 0127     		movs	r7, #1
 2501              	.LVL195:
2662:./FreeRtos/src/tasks.c **** 		}
 2502              		.loc 1 2662 28 is_stmt 1 view .LVU659
2667:./FreeRtos/src/tasks.c **** }
 2503              		.loc 1 2667 2 view .LVU660
 2504              	.L174:
2668:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2505              		.loc 1 2668 1 is_stmt 0 view .LVU661
 2506 00e2 3846     		mov	r0, r7
 2507 00e4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2508              	.L196:
 2509 00e6 00BF     		.align	2
 2510              	.L195:
 2511 00e8 00000000 		.word	.LANCHOR16
 2512 00ec 00000000 		.word	.LANCHOR14
 2513 00f0 00000000 		.word	.LANCHOR0
 2514 00f4 00000000 		.word	.LANCHOR8
 2515 00f8 00000000 		.word	.LANCHOR18
 2516 00fc 00000000 		.word	.LANCHOR1
 2517 0100 00000000 		.word	.LANCHOR10
 2518 0104 00000000 		.word	.LANCHOR4
 2519 0108 00000000 		.word	.LC0
 2520 010c 18000000 		.word	.LC1
 2521 0110 00000000 		.word	.LANCHOR13
 2522 0114 00000000 		.word	.LANCHOR19
 2523 0118 00000000 		.word	.LANCHOR20
 2524              		.cfi_endproc
 2525              	.LFE153:
 2527              		.section	.text.xTaskResumeAll,"ax",%progbits
 2528              		.align	1
 2529              		.global	xTaskResumeAll
 2530              		.syntax unified
 2531              		.thumb
 2532              		.thumb_func
 2533              		.fpu fpv4-sp-d16
 2535              	xTaskResumeAll:
 2536              	.LFB148:
2018:./FreeRtos/src/tasks.c **** TCB_t *pxTCB = NULL;
 2537              		.loc 1 2018 1 is_stmt 1 view -0
 2538              		.cfi_startproc
 2539              		@ args = 0, pretend = 0, frame = 0
 2540              		@ frame_needed = 0, uses_anonymous_args = 0
 2541 0000 38B5     		push	{r3, r4, r5, lr}
 2542              	.LCFI25:
 2543              		.cfi_def_cfa_offset 16
 2544              		.cfi_offset 3, -16
 2545              		.cfi_offset 4, -12
ARM GAS  /tmp/ccQvkfbu.s 			page 144


 2546              		.cfi_offset 5, -8
 2547              		.cfi_offset 14, -4
2019:./FreeRtos/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2548              		.loc 1 2019 1 view .LVU663
 2549              	.LVL196:
2020:./FreeRtos/src/tasks.c **** 
 2550              		.loc 1 2020 1 view .LVU664
2024:./FreeRtos/src/tasks.c **** 
 2551              		.loc 1 2024 2 view .LVU665
 2552 0002 344B     		ldr	r3, .L213
 2553 0004 1B68     		ldr	r3, [r3]
 2554 0006 6BB1     		cbz	r3, .L210
 2555              	.L198:
2031:./FreeRtos/src/tasks.c **** 	{
 2556              		.loc 1 2031 2 view .LVU666
 2557 0008 FFF7FEFF 		bl	vPortEnterCritical
 2558              	.LVL197:
2033:./FreeRtos/src/tasks.c **** 
 2559              		.loc 1 2033 3 view .LVU667
 2560 000c 314B     		ldr	r3, .L213
 2561 000e 1A68     		ldr	r2, [r3]
 2562 0010 013A     		subs	r2, r2, #1
 2563 0012 1A60     		str	r2, [r3]
2035:./FreeRtos/src/tasks.c **** 		{
 2564              		.loc 1 2035 3 view .LVU668
2035:./FreeRtos/src/tasks.c **** 		{
 2565              		.loc 1 2035 28 is_stmt 0 view .LVU669
 2566 0014 1B68     		ldr	r3, [r3]
2035:./FreeRtos/src/tasks.c **** 		{
 2567              		.loc 1 2035 5 view .LVU670
 2568 0016 002B     		cmp	r3, #0
 2569 0018 56D1     		bne	.L207
2037:./FreeRtos/src/tasks.c **** 			{
 2570              		.loc 1 2037 4 is_stmt 1 view .LVU671
2037:./FreeRtos/src/tasks.c **** 			{
 2571              		.loc 1 2037 31 is_stmt 0 view .LVU672
 2572 001a 2F4B     		ldr	r3, .L213+4
 2573 001c 1B68     		ldr	r3, [r3]
2037:./FreeRtos/src/tasks.c **** 			{
 2574              		.loc 1 2037 6 view .LVU673
 2575 001e 43B9     		cbnz	r3, .L208
2020:./FreeRtos/src/tasks.c **** 
 2576              		.loc 1 2020 12 view .LVU674
 2577 0020 0024     		movs	r4, #0
 2578 0022 52E0     		b	.L199
 2579              	.L210:
2024:./FreeRtos/src/tasks.c **** 
 2580              		.loc 1 2024 2 is_stmt 1 discriminator 1 view .LVU675
 2581 0024 4FF4FD62 		mov	r2, #2024
 2582 0028 2C49     		ldr	r1, .L213+8
 2583 002a 2D48     		ldr	r0, .L213+12
 2584 002c FFF7FEFF 		bl	printf
 2585              	.LVL198:
 2586 0030 EAE7     		b	.L198
 2587              	.L208:
2019:./FreeRtos/src/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2588              		.loc 1 2019 8 is_stmt 0 view .LVU676
ARM GAS  /tmp/ccQvkfbu.s 			page 145


 2589 0032 0024     		movs	r4, #0
 2590              	.LVL199:
 2591              	.L200:
2056:./FreeRtos/src/tasks.c **** 					}
 2592              		.loc 1 2056 31 is_stmt 1 view .LVU677
2041:./FreeRtos/src/tasks.c **** 				{
 2593              		.loc 1 2041 10 view .LVU678
2041:./FreeRtos/src/tasks.c **** 				{
 2594              		.loc 1 2041 12 is_stmt 0 view .LVU679
 2595 0034 2B4B     		ldr	r3, .L213+16
 2596 0036 1B68     		ldr	r3, [r3]
2041:./FreeRtos/src/tasks.c **** 				{
 2597              		.loc 1 2041 10 view .LVU680
 2598 0038 1BB3     		cbz	r3, .L211
2043:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2599              		.loc 1 2043 6 is_stmt 1 view .LVU681
2043:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2600              		.loc 1 2043 26 is_stmt 0 view .LVU682
 2601 003a 2A4B     		ldr	r3, .L213+16
 2602 003c DB68     		ldr	r3, [r3, #12]
2043:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2603              		.loc 1 2043 12 view .LVU683
 2604 003e DC68     		ldr	r4, [r3, #12]
 2605              	.LVL200:
2044:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2606              		.loc 1 2044 6 is_stmt 1 view .LVU684
2044:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2607              		.loc 1 2044 15 is_stmt 0 view .LVU685
 2608 0040 04F11800 		add	r0, r4, #24
 2609 0044 FFF7FEFF 		bl	uxListRemove
 2610              	.LVL201:
2045:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2611              		.loc 1 2045 6 is_stmt 1 view .LVU686
2045:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2612              		.loc 1 2045 15 is_stmt 0 view .LVU687
 2613 0048 251D     		adds	r5, r4, #4
 2614 004a 2846     		mov	r0, r5
 2615 004c FFF7FEFF 		bl	uxListRemove
 2616              	.LVL202:
2046:./FreeRtos/src/tasks.c **** 
 2617              		.loc 1 2046 6 is_stmt 1 view .LVU688
2046:./FreeRtos/src/tasks.c **** 
 2618              		.loc 1 2046 6 view .LVU689
 2619 0050 E06A     		ldr	r0, [r4, #44]
 2620 0052 0123     		movs	r3, #1
 2621 0054 8340     		lsls	r3, r3, r0
 2622 0056 244A     		ldr	r2, .L213+20
 2623 0058 1168     		ldr	r1, [r2]
 2624 005a 0B43     		orrs	r3, r3, r1
 2625 005c 1360     		str	r3, [r2]
2046:./FreeRtos/src/tasks.c **** 
 2626              		.loc 1 2046 6 view .LVU690
 2627 005e 00EB8000 		add	r0, r0, r0, lsl #2
 2628 0062 2946     		mov	r1, r5
 2629 0064 214B     		ldr	r3, .L213+24
 2630 0066 03EB8000 		add	r0, r3, r0, lsl #2
 2631 006a FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccQvkfbu.s 			page 146


 2632              	.LVL203:
2046:./FreeRtos/src/tasks.c **** 
 2633              		.loc 1 2046 36 view .LVU691
2050:./FreeRtos/src/tasks.c **** 					{
 2634              		.loc 1 2050 6 view .LVU692
2050:./FreeRtos/src/tasks.c **** 					{
 2635              		.loc 1 2050 15 is_stmt 0 view .LVU693
 2636 006e E26A     		ldr	r2, [r4, #44]
2050:./FreeRtos/src/tasks.c **** 					{
 2637              		.loc 1 2050 43 view .LVU694
 2638 0070 1F4B     		ldr	r3, .L213+28
 2639 0072 1B68     		ldr	r3, [r3]
 2640 0074 DB6A     		ldr	r3, [r3, #44]
2050:./FreeRtos/src/tasks.c **** 					{
 2641              		.loc 1 2050 8 view .LVU695
 2642 0076 9A42     		cmp	r2, r3
 2643 0078 DCD3     		bcc	.L200
2052:./FreeRtos/src/tasks.c **** 					}
 2644              		.loc 1 2052 7 is_stmt 1 view .LVU696
2052:./FreeRtos/src/tasks.c **** 					}
 2645              		.loc 1 2052 21 is_stmt 0 view .LVU697
 2646 007a 1E4B     		ldr	r3, .L213+32
 2647 007c 0122     		movs	r2, #1
 2648 007e 1A60     		str	r2, [r3]
 2649 0080 D8E7     		b	.L200
 2650              	.L211:
2060:./FreeRtos/src/tasks.c **** 				{
 2651              		.loc 1 2060 5 is_stmt 1 view .LVU698
2060:./FreeRtos/src/tasks.c **** 				{
 2652              		.loc 1 2060 7 is_stmt 0 view .LVU699
 2653 0082 0CB1     		cbz	r4, .L203
2068:./FreeRtos/src/tasks.c **** 				}
 2654              		.loc 1 2068 6 is_stmt 1 view .LVU700
 2655 0084 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2656              	.LVL204:
 2657              	.L203:
 2658              	.LBB45:
2076:./FreeRtos/src/tasks.c **** 
 2659              		.loc 1 2076 6 view .LVU701
2076:./FreeRtos/src/tasks.c **** 
 2660              		.loc 1 2076 18 is_stmt 0 view .LVU702
 2661 0088 1B4B     		ldr	r3, .L213+36
 2662 008a 1C68     		ldr	r4, [r3]
 2663              	.LVL205:
2078:./FreeRtos/src/tasks.c **** 					{
 2664              		.loc 1 2078 6 is_stmt 1 view .LVU703
2078:./FreeRtos/src/tasks.c **** 					{
 2665              		.loc 1 2078 8 is_stmt 0 view .LVU704
 2666 008c 84B9     		cbnz	r4, .L206
 2667              	.L204:
2097:./FreeRtos/src/tasks.c **** 					}
 2668              		.loc 1 2097 31 is_stmt 1 view .LVU705
 2669              	.LBE45:
2101:./FreeRtos/src/tasks.c **** 				{
 2670              		.loc 1 2101 5 view .LVU706
2101:./FreeRtos/src/tasks.c **** 				{
 2671              		.loc 1 2101 23 is_stmt 0 view .LVU707
ARM GAS  /tmp/ccQvkfbu.s 			page 147


 2672 008e 194B     		ldr	r3, .L213+32
 2673 0090 1C68     		ldr	r4, [r3]
 2674              	.LVL206:
2101:./FreeRtos/src/tasks.c **** 				{
 2675              		.loc 1 2101 7 view .LVU708
 2676 0092 D4B1     		cbz	r4, .L199
2105:./FreeRtos/src/tasks.c **** 					}
 2677              		.loc 1 2105 7 is_stmt 1 view .LVU709
 2678              	.LVL207:
2108:./FreeRtos/src/tasks.c **** 				}
 2679              		.loc 1 2108 6 view .LVU710
 2680 0094 4FF0E023 		mov	r3, #-536813568
 2681 0098 4FF08052 		mov	r2, #268435456
 2682 009c C3F8042D 		str	r2, [r3, #3332]
2108:./FreeRtos/src/tasks.c **** 				}
 2683              		.loc 1 2108 6 view .LVU711
 2684              		.syntax unified
 2685              	@ 2108 "./FreeRtos/src/tasks.c" 1
 2686 00a0 BFF34F8F 		dsb
 2687              	@ 0 "" 2
2108:./FreeRtos/src/tasks.c **** 				}
 2688              		.loc 1 2108 6 view .LVU712
 2689              	@ 2108 "./FreeRtos/src/tasks.c" 1
 2690 00a4 BFF36F8F 		isb
 2691              	@ 0 "" 2
2108:./FreeRtos/src/tasks.c **** 				}
 2692              		.loc 1 2108 37 view .LVU713
2105:./FreeRtos/src/tasks.c **** 					}
 2693              		.loc 1 2105 23 is_stmt 0 view .LVU714
 2694              		.thumb
 2695              		.syntax unified
 2696 00a8 0124     		movs	r4, #1
 2697 00aa 0EE0     		b	.L199
 2698              	.LVL208:
 2699              	.L205:
 2700              	.LBB46:
2088:./FreeRtos/src/tasks.c **** 							}
 2701              		.loc 1 2088 33 is_stmt 1 view .LVU715
2090:./FreeRtos/src/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2702              		.loc 1 2090 8 view .LVU716
2091:./FreeRtos/src/tasks.c **** 
 2703              		.loc 1 2091 14 view .LVU717
2091:./FreeRtos/src/tasks.c **** 
 2704              		.loc 1 2091 7 is_stmt 0 view .LVU718
 2705 00ac 013C     		subs	r4, r4, #1
 2706              	.LVL209:
2091:./FreeRtos/src/tasks.c **** 
 2707              		.loc 1 2091 7 view .LVU719
 2708 00ae 07D0     		beq	.L212
 2709              	.L206:
2080:./FreeRtos/src/tasks.c **** 						{
 2710              		.loc 1 2080 7 is_stmt 1 view .LVU720
2082:./FreeRtos/src/tasks.c **** 							{
 2711              		.loc 1 2082 8 view .LVU721
2082:./FreeRtos/src/tasks.c **** 							{
 2712              		.loc 1 2082 12 is_stmt 0 view .LVU722
 2713 00b0 FFF7FEFF 		bl	xTaskIncrementTick
ARM GAS  /tmp/ccQvkfbu.s 			page 148


 2714              	.LVL210:
2082:./FreeRtos/src/tasks.c **** 							{
 2715              		.loc 1 2082 10 view .LVU723
 2716 00b4 0028     		cmp	r0, #0
 2717 00b6 F9D0     		beq	.L205
2084:./FreeRtos/src/tasks.c **** 							}
 2718              		.loc 1 2084 9 is_stmt 1 view .LVU724
2084:./FreeRtos/src/tasks.c **** 							}
 2719              		.loc 1 2084 23 is_stmt 0 view .LVU725
 2720 00b8 0E4B     		ldr	r3, .L213+32
 2721 00ba 0122     		movs	r2, #1
 2722 00bc 1A60     		str	r2, [r3]
 2723 00be F5E7     		b	.L205
 2724              	.L212:
2093:./FreeRtos/src/tasks.c **** 					}
 2725              		.loc 1 2093 7 is_stmt 1 view .LVU726
2093:./FreeRtos/src/tasks.c **** 					}
 2726              		.loc 1 2093 21 is_stmt 0 view .LVU727
 2727 00c0 0D4B     		ldr	r3, .L213+36
 2728 00c2 0022     		movs	r2, #0
 2729 00c4 1A60     		str	r2, [r3]
 2730 00c6 E2E7     		b	.L204
 2731              	.LVL211:
 2732              	.L207:
2093:./FreeRtos/src/tasks.c **** 					}
 2733              		.loc 1 2093 21 view .LVU728
 2734              	.LBE46:
2020:./FreeRtos/src/tasks.c **** 
 2735              		.loc 1 2020 12 view .LVU729
 2736 00c8 0024     		movs	r4, #0
 2737              	.LVL212:
 2738              	.L199:
2118:./FreeRtos/src/tasks.c **** 		}
 2739              		.loc 1 2118 28 is_stmt 1 view .LVU730
2121:./FreeRtos/src/tasks.c **** 
 2740              		.loc 1 2121 2 view .LVU731
 2741 00ca FFF7FEFF 		bl	vPortExitCritical
 2742              	.LVL213:
2123:./FreeRtos/src/tasks.c **** }
 2743              		.loc 1 2123 2 view .LVU732
2124:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2744              		.loc 1 2124 1 is_stmt 0 view .LVU733
 2745 00ce 2046     		mov	r0, r4
 2746 00d0 38BD     		pop	{r3, r4, r5, pc}
 2747              	.LVL214:
 2748              	.L214:
2124:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 2749              		.loc 1 2124 1 view .LVU734
 2750 00d2 00BF     		.align	2
 2751              	.L213:
 2752 00d4 00000000 		.word	.LANCHOR16
 2753 00d8 00000000 		.word	.LANCHOR9
 2754 00dc 00000000 		.word	.LC0
 2755 00e0 18000000 		.word	.LC1
 2756 00e4 00000000 		.word	.LANCHOR3
 2757 00e8 00000000 		.word	.LANCHOR13
 2758 00ec 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccQvkfbu.s 			page 149


 2759 00f0 00000000 		.word	.LANCHOR10
 2760 00f4 00000000 		.word	.LANCHOR20
 2761 00f8 00000000 		.word	.LANCHOR19
 2762              		.cfi_endproc
 2763              	.LFE148:
 2765              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2766              		.align	1
 2767              		.global	vTaskDelayUntil
 2768              		.syntax unified
 2769              		.thumb
 2770              		.thumb_func
 2771              		.fpu fpv4-sp-d16
 2773              	vTaskDelayUntil:
 2774              	.LVL215:
 2775              	.LFB135:
1141:./FreeRtos/src/tasks.c **** 	TickType_t xTimeToWake;
 2776              		.loc 1 1141 2 is_stmt 1 view -0
 2777              		.cfi_startproc
 2778              		@ args = 0, pretend = 0, frame = 0
 2779              		@ frame_needed = 0, uses_anonymous_args = 0
1141:./FreeRtos/src/tasks.c **** 	TickType_t xTimeToWake;
 2780              		.loc 1 1141 2 is_stmt 0 view .LVU736
 2781 0000 38B5     		push	{r3, r4, r5, lr}
 2782              	.LCFI26:
 2783              		.cfi_def_cfa_offset 16
 2784              		.cfi_offset 3, -16
 2785              		.cfi_offset 4, -12
 2786              		.cfi_offset 5, -8
 2787              		.cfi_offset 14, -4
 2788 0002 0C46     		mov	r4, r1
1142:./FreeRtos/src/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 2789              		.loc 1 1142 2 is_stmt 1 view .LVU737
1143:./FreeRtos/src/tasks.c **** 
 2790              		.loc 1 1143 2 view .LVU738
 2791              	.LVL216:
1145:./FreeRtos/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2792              		.loc 1 1145 3 view .LVU739
 2793 0004 0546     		mov	r5, r0
 2794 0006 78B1     		cbz	r0, .L228
 2795              	.LVL217:
 2796              	.L216:
1146:./FreeRtos/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2797              		.loc 1 1146 3 view .LVU740
 2798 0008 ACB1     		cbz	r4, .L229
 2799              	.L217:
1147:./FreeRtos/src/tasks.c **** 
 2800              		.loc 1 1147 3 view .LVU741
 2801 000a 214B     		ldr	r3, .L231
 2802 000c 1B68     		ldr	r3, [r3]
 2803 000e CBB9     		cbnz	r3, .L230
 2804              	.L218:
1149:./FreeRtos/src/tasks.c **** 		{
 2805              		.loc 1 1149 3 view .LVU742
 2806 0010 FFF7FEFF 		bl	vTaskSuspendAll
 2807              	.LVL218:
 2808              	.LBB47:
1153:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 150


 2809              		.loc 1 1153 4 view .LVU743
1153:./FreeRtos/src/tasks.c **** 
 2810              		.loc 1 1153 21 is_stmt 0 view .LVU744
 2811 0014 1F4B     		ldr	r3, .L231+4
 2812 0016 1868     		ldr	r0, [r3]
 2813              	.LVL219:
1156:./FreeRtos/src/tasks.c **** 
 2814              		.loc 1 1156 4 is_stmt 1 view .LVU745
1156:./FreeRtos/src/tasks.c **** 
 2815              		.loc 1 1156 18 is_stmt 0 view .LVU746
 2816 0018 2A68     		ldr	r2, [r5]
1156:./FreeRtos/src/tasks.c **** 
 2817              		.loc 1 1156 16 view .LVU747
 2818 001a 1444     		add	r4, r4, r2
 2819              	.LVL220:
1158:./FreeRtos/src/tasks.c **** 			{
 2820              		.loc 1 1158 4 is_stmt 1 view .LVU748
1158:./FreeRtos/src/tasks.c **** 			{
 2821              		.loc 1 1158 6 is_stmt 0 view .LVU749
 2822 001c 8242     		cmp	r2, r0
 2823 001e 1ED9     		bls	.L219
1165:./FreeRtos/src/tasks.c **** 				{
 2824              		.loc 1 1165 5 is_stmt 1 view .LVU750
1165:./FreeRtos/src/tasks.c **** 				{
 2825              		.loc 1 1165 7 is_stmt 0 view .LVU751
 2826 0020 A242     		cmp	r2, r4
 2827 0022 16D8     		bhi	.L220
1190:./FreeRtos/src/tasks.c **** 
 2828              		.loc 1 1190 4 is_stmt 1 view .LVU752
1190:./FreeRtos/src/tasks.c **** 
 2829              		.loc 1 1190 24 is_stmt 0 view .LVU753
 2830 0024 2C60     		str	r4, [r5]
1192:./FreeRtos/src/tasks.c **** 			{
 2831              		.loc 1 1192 4 is_stmt 1 view .LVU754
 2832 0026 23E0     		b	.L221
 2833              	.LVL221:
 2834              	.L228:
1192:./FreeRtos/src/tasks.c **** 			{
 2835              		.loc 1 1192 4 is_stmt 0 view .LVU755
 2836              	.LBE47:
1145:./FreeRtos/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2837              		.loc 1 1145 3 is_stmt 1 discriminator 1 view .LVU756
 2838 0028 40F27942 		movw	r2, #1145
 2839 002c 1A49     		ldr	r1, .L231+8
 2840              	.LVL222:
1145:./FreeRtos/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2841              		.loc 1 1145 3 is_stmt 0 discriminator 1 view .LVU757
 2842 002e 1B48     		ldr	r0, .L231+12
 2843              	.LVL223:
1145:./FreeRtos/src/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2844              		.loc 1 1145 3 discriminator 1 view .LVU758
 2845 0030 FFF7FEFF 		bl	printf
 2846              	.LVL224:
 2847 0034 E8E7     		b	.L216
 2848              	.L229:
1146:./FreeRtos/src/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2849              		.loc 1 1146 3 is_stmt 1 discriminator 1 view .LVU759
ARM GAS  /tmp/ccQvkfbu.s 			page 151


 2850 0036 40F27A42 		movw	r2, #1146
 2851 003a 1749     		ldr	r1, .L231+8
 2852 003c 1748     		ldr	r0, .L231+12
 2853 003e FFF7FEFF 		bl	printf
 2854              	.LVL225:
 2855 0042 E2E7     		b	.L217
 2856              	.L230:
1147:./FreeRtos/src/tasks.c **** 
 2857              		.loc 1 1147 3 discriminator 1 view .LVU760
 2858 0044 40F27B42 		movw	r2, #1147
 2859 0048 1349     		ldr	r1, .L231+8
 2860 004a 1448     		ldr	r0, .L231+12
 2861 004c FFF7FEFF 		bl	printf
 2862              	.LVL226:
 2863 0050 DEE7     		b	.L218
 2864              	.LVL227:
 2865              	.L220:
 2866              	.LBB48:
1165:./FreeRtos/src/tasks.c **** 				{
 2867              		.loc 1 1165 47 is_stmt 0 discriminator 1 view .LVU761
 2868 0052 A042     		cmp	r0, r4
 2869 0054 01D3     		bcc	.L222
1190:./FreeRtos/src/tasks.c **** 
 2870              		.loc 1 1190 4 is_stmt 1 view .LVU762
1190:./FreeRtos/src/tasks.c **** 
 2871              		.loc 1 1190 24 is_stmt 0 view .LVU763
 2872 0056 2C60     		str	r4, [r5]
1192:./FreeRtos/src/tasks.c **** 			{
 2873              		.loc 1 1192 4 is_stmt 1 view .LVU764
 2874 0058 0AE0     		b	.L221
 2875              	.L222:
1167:./FreeRtos/src/tasks.c **** 				}
 2876              		.loc 1 1167 6 view .LVU765
 2877              	.LVL228:
1190:./FreeRtos/src/tasks.c **** 
 2878              		.loc 1 1190 4 view .LVU766
1190:./FreeRtos/src/tasks.c **** 
 2879              		.loc 1 1190 24 is_stmt 0 view .LVU767
 2880 005a 2C60     		str	r4, [r5]
1192:./FreeRtos/src/tasks.c **** 			{
 2881              		.loc 1 1192 4 is_stmt 1 view .LVU768
 2882 005c 04E0     		b	.L223
 2883              	.LVL229:
 2884              	.L219:
1179:./FreeRtos/src/tasks.c **** 				{
 2885              		.loc 1 1179 5 view .LVU769
1179:./FreeRtos/src/tasks.c **** 				{
 2886              		.loc 1 1179 7 is_stmt 0 view .LVU770
 2887 005e A242     		cmp	r2, r4
 2888 0060 01D8     		bhi	.L224
1179:./FreeRtos/src/tasks.c **** 				{
 2889              		.loc 1 1179 47 discriminator 1 view .LVU771
 2890 0062 A042     		cmp	r0, r4
 2891 0064 12D2     		bcs	.L225
 2892              	.L224:
1181:./FreeRtos/src/tasks.c **** 				}
 2893              		.loc 1 1181 6 is_stmt 1 view .LVU772
ARM GAS  /tmp/ccQvkfbu.s 			page 152


 2894              	.LVL230:
1190:./FreeRtos/src/tasks.c **** 
 2895              		.loc 1 1190 4 view .LVU773
1190:./FreeRtos/src/tasks.c **** 
 2896              		.loc 1 1190 24 is_stmt 0 view .LVU774
 2897 0066 2C60     		str	r4, [r5]
1192:./FreeRtos/src/tasks.c **** 			{
 2898              		.loc 1 1192 4 is_stmt 1 view .LVU775
 2899              	.L223:
1194:./FreeRtos/src/tasks.c **** 
 2900              		.loc 1 1194 41 view .LVU776
1198:./FreeRtos/src/tasks.c **** 			}
 2901              		.loc 1 1198 5 view .LVU777
 2902 0068 0021     		movs	r1, #0
 2903 006a 201A     		subs	r0, r4, r0
 2904              	.LVL231:
1198:./FreeRtos/src/tasks.c **** 			}
 2905              		.loc 1 1198 5 is_stmt 0 view .LVU778
 2906 006c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2907              	.LVL232:
 2908              	.L221:
1202:./FreeRtos/src/tasks.c **** 			}
 2909              		.loc 1 1202 29 is_stmt 1 view .LVU779
 2910              	.LBE48:
1205:./FreeRtos/src/tasks.c **** 
 2911              		.loc 1 1205 3 view .LVU780
1205:./FreeRtos/src/tasks.c **** 
 2912              		.loc 1 1205 21 is_stmt 0 view .LVU781
 2913 0070 FFF7FEFF 		bl	xTaskResumeAll
 2914              	.LVL233:
1209:./FreeRtos/src/tasks.c **** 		{
 2915              		.loc 1 1209 3 is_stmt 1 view .LVU782
1209:./FreeRtos/src/tasks.c **** 		{
 2916              		.loc 1 1209 5 is_stmt 0 view .LVU783
 2917 0074 48B9     		cbnz	r0, .L215
1211:./FreeRtos/src/tasks.c **** 		}
 2918              		.loc 1 1211 4 is_stmt 1 view .LVU784
 2919 0076 4FF0E023 		mov	r3, #-536813568
 2920 007a 4FF08052 		mov	r2, #268435456
 2921 007e C3F8042D 		str	r2, [r3, #3332]
1211:./FreeRtos/src/tasks.c **** 		}
 2922              		.loc 1 1211 4 view .LVU785
 2923              		.syntax unified
 2924              	@ 1211 "./FreeRtos/src/tasks.c" 1
 2925 0082 BFF34F8F 		dsb
 2926              	@ 0 "" 2
1211:./FreeRtos/src/tasks.c **** 		}
 2927              		.loc 1 1211 4 view .LVU786
 2928              	@ 1211 "./FreeRtos/src/tasks.c" 1
 2929 0086 BFF36F8F 		isb
 2930              	@ 0 "" 2
1211:./FreeRtos/src/tasks.c **** 		}
 2931              		.loc 1 1211 26 view .LVU787
1215:./FreeRtos/src/tasks.c **** 		}
 2932              		.loc 1 1215 28 view .LVU788
 2933              		.thumb
 2934              		.syntax unified
ARM GAS  /tmp/ccQvkfbu.s 			page 153


 2935              	.L215:
1217:./FreeRtos/src/tasks.c **** 
 2936              		.loc 1 1217 2 is_stmt 0 view .LVU789
 2937 008a 38BD     		pop	{r3, r4, r5, pc}
 2938              	.LVL234:
 2939              	.L225:
 2940              	.LBB49:
1190:./FreeRtos/src/tasks.c **** 
 2941              		.loc 1 1190 4 is_stmt 1 view .LVU790
1190:./FreeRtos/src/tasks.c **** 
 2942              		.loc 1 1190 24 is_stmt 0 view .LVU791
 2943 008c 2C60     		str	r4, [r5]
1192:./FreeRtos/src/tasks.c **** 			{
 2944              		.loc 1 1192 4 is_stmt 1 view .LVU792
 2945 008e EFE7     		b	.L221
 2946              	.L232:
 2947              		.align	2
 2948              	.L231:
 2949 0090 00000000 		.word	.LANCHOR16
 2950 0094 00000000 		.word	.LANCHOR14
 2951 0098 00000000 		.word	.LC0
 2952 009c 18000000 		.word	.LC1
 2953              	.LBE49:
 2954              		.cfi_endproc
 2955              	.LFE135:
 2957              		.section	.text.vTaskDelay,"ax",%progbits
 2958              		.align	1
 2959              		.global	vTaskDelay
 2960              		.syntax unified
 2961              		.thumb
 2962              		.thumb_func
 2963              		.fpu fpv4-sp-d16
 2965              	vTaskDelay:
 2966              	.LVL235:
 2967              	.LFB136:
1225:./FreeRtos/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2968              		.loc 1 1225 2 view -0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 0
 2971              		@ frame_needed = 0, uses_anonymous_args = 0
1225:./FreeRtos/src/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2972              		.loc 1 1225 2 is_stmt 0 view .LVU794
 2973 0000 10B5     		push	{r4, lr}
 2974              	.LCFI27:
 2975              		.cfi_def_cfa_offset 8
 2976              		.cfi_offset 4, -8
 2977              		.cfi_offset 14, -4
1226:./FreeRtos/src/tasks.c **** 
 2978              		.loc 1 1226 2 is_stmt 1 view .LVU795
 2979              	.LVL236:
1229:./FreeRtos/src/tasks.c **** 		{
 2980              		.loc 1 1229 3 view .LVU796
1229:./FreeRtos/src/tasks.c **** 		{
 2981              		.loc 1 1229 5 is_stmt 0 view .LVU797
 2982 0002 60B1     		cbz	r0, .L234
 2983 0004 0446     		mov	r4, r0
1231:./FreeRtos/src/tasks.c **** 			vTaskSuspendAll();
ARM GAS  /tmp/ccQvkfbu.s 			page 154


 2984              		.loc 1 1231 4 is_stmt 1 view .LVU798
 2985 0006 0F4B     		ldr	r3, .L239
 2986 0008 1B68     		ldr	r3, [r3]
 2987 000a 9BB9     		cbnz	r3, .L238
 2988              	.LVL237:
 2989              	.L235:
1232:./FreeRtos/src/tasks.c **** 			{
 2990              		.loc 1 1232 4 view .LVU799
 2991 000c FFF7FEFF 		bl	vTaskSuspendAll
 2992              	.LVL238:
1234:./FreeRtos/src/tasks.c **** 
 2993              		.loc 1 1234 22 view .LVU800
1243:./FreeRtos/src/tasks.c **** 			}
 2994              		.loc 1 1243 5 view .LVU801
 2995 0010 0021     		movs	r1, #0
 2996 0012 2046     		mov	r0, r4
 2997 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2998              	.LVL239:
1245:./FreeRtos/src/tasks.c **** 		}
 2999              		.loc 1 1245 4 view .LVU802
1245:./FreeRtos/src/tasks.c **** 		}
 3000              		.loc 1 1245 22 is_stmt 0 view .LVU803
 3001 0018 FFF7FEFF 		bl	xTaskResumeAll
 3002              	.LVL240:
1249:./FreeRtos/src/tasks.c **** 		}
 3003              		.loc 1 1249 28 is_stmt 1 view .LVU804
1254:./FreeRtos/src/tasks.c **** 		{
 3004              		.loc 1 1254 3 view .LVU805
1254:./FreeRtos/src/tasks.c **** 		{
 3005              		.loc 1 1254 5 is_stmt 0 view .LVU806
 3006 001c 48B9     		cbnz	r0, .L233
 3007              	.LVL241:
 3008              	.L234:
1256:./FreeRtos/src/tasks.c **** 		}
 3009              		.loc 1 1256 4 is_stmt 1 view .LVU807
 3010 001e 4FF0E023 		mov	r3, #-536813568
 3011 0022 4FF08052 		mov	r2, #268435456
 3012 0026 C3F8042D 		str	r2, [r3, #3332]
1256:./FreeRtos/src/tasks.c **** 		}
 3013              		.loc 1 1256 4 view .LVU808
 3014              		.syntax unified
 3015              	@ 1256 "./FreeRtos/src/tasks.c" 1
 3016 002a BFF34F8F 		dsb
 3017              	@ 0 "" 2
1256:./FreeRtos/src/tasks.c **** 		}
 3018              		.loc 1 1256 4 view .LVU809
 3019              	@ 1256 "./FreeRtos/src/tasks.c" 1
 3020 002e BFF36F8F 		isb
 3021              	@ 0 "" 2
1256:./FreeRtos/src/tasks.c **** 		}
 3022              		.loc 1 1256 26 view .LVU810
1260:./FreeRtos/src/tasks.c **** 		}
 3023              		.loc 1 1260 28 view .LVU811
 3024              		.thumb
 3025              		.syntax unified
 3026              	.L233:
1262:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 155


 3027              		.loc 1 1262 2 is_stmt 0 view .LVU812
 3028 0032 10BD     		pop	{r4, pc}
 3029              	.LVL242:
 3030              	.L238:
1231:./FreeRtos/src/tasks.c **** 			vTaskSuspendAll();
 3031              		.loc 1 1231 4 is_stmt 1 discriminator 1 view .LVU813
 3032 0034 40F2CF42 		movw	r2, #1231
 3033 0038 0349     		ldr	r1, .L239+4
 3034 003a 0448     		ldr	r0, .L239+8
 3035              	.LVL243:
1231:./FreeRtos/src/tasks.c **** 			vTaskSuspendAll();
 3036              		.loc 1 1231 4 is_stmt 0 discriminator 1 view .LVU814
 3037 003c FFF7FEFF 		bl	printf
 3038              	.LVL244:
 3039 0040 E4E7     		b	.L235
 3040              	.L240:
 3041 0042 00BF     		.align	2
 3042              	.L239:
 3043 0044 00000000 		.word	.LANCHOR16
 3044 0048 00000000 		.word	.LC0
 3045 004c 18000000 		.word	.LC1
 3046              		.cfi_endproc
 3047              	.LFE136:
 3049              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3050              		.align	1
 3051              		.syntax unified
 3052              		.thumb
 3053              		.thumb_func
 3054              		.fpu fpv4-sp-d16
 3056              	prvCheckTasksWaitingTermination:
 3057              	.LFB164:
3366:./FreeRtos/src/tasks.c **** 
 3058              		.loc 1 3366 1 is_stmt 1 view -0
 3059              		.cfi_startproc
 3060              		@ args = 0, pretend = 0, frame = 0
 3061              		@ frame_needed = 0, uses_anonymous_args = 0
 3062              	.LBB50:
3372:./FreeRtos/src/tasks.c **** 
 3063              		.loc 1 3372 3 view .LVU816
3376:./FreeRtos/src/tasks.c **** 		{
 3064              		.loc 1 3376 3 view .LVU817
3401:./FreeRtos/src/tasks.c **** 			}
 3065              		.loc 1 3401 29 view .LVU818
3376:./FreeRtos/src/tasks.c **** 		{
 3066              		.loc 1 3376 8 view .LVU819
3376:./FreeRtos/src/tasks.c **** 		{
 3067              		.loc 1 3376 39 is_stmt 0 view .LVU820
 3068 0000 134B     		ldr	r3, .L250
 3069 0002 1B68     		ldr	r3, [r3]
3376:./FreeRtos/src/tasks.c **** 		{
 3070              		.loc 1 3376 8 view .LVU821
 3071 0004 13B3     		cbz	r3, .L248
 3072              	.LBE50:
3366:./FreeRtos/src/tasks.c **** 
 3073              		.loc 1 3366 1 view .LVU822
 3074 0006 10B5     		push	{r4, lr}
 3075              	.LCFI28:
ARM GAS  /tmp/ccQvkfbu.s 			page 156


 3076              		.cfi_def_cfa_offset 8
 3077              		.cfi_offset 4, -8
 3078              		.cfi_offset 14, -4
 3079              	.L244:
 3080              	.LBB52:
3378:./FreeRtos/src/tasks.c **** 			{
 3081              		.loc 1 3378 4 is_stmt 1 view .LVU823
 3082 0008 FFF7FEFF 		bl	vTaskSuspendAll
 3083              	.LVL245:
3380:./FreeRtos/src/tasks.c **** 			}
 3084              		.loc 1 3380 5 view .LVU824
3380:./FreeRtos/src/tasks.c **** 			}
 3085              		.loc 1 3380 20 is_stmt 0 view .LVU825
 3086 000c 114B     		ldr	r3, .L250+4
 3087 000e 1C68     		ldr	r4, [r3]
 3088              	.LVL246:
3382:./FreeRtos/src/tasks.c **** 
 3089              		.loc 1 3382 4 is_stmt 1 view .LVU826
3382:./FreeRtos/src/tasks.c **** 
 3090              		.loc 1 3382 13 is_stmt 0 view .LVU827
 3091 0010 FFF7FEFF 		bl	xTaskResumeAll
 3092              	.LVL247:
3384:./FreeRtos/src/tasks.c **** 			{
 3093              		.loc 1 3384 4 is_stmt 1 view .LVU828
3384:./FreeRtos/src/tasks.c **** 			{
 3094              		.loc 1 3384 6 is_stmt 0 view .LVU829
 3095 0014 24B9     		cbnz	r4, .L249
 3096              	.LVL248:
 3097              	.L243:
3401:./FreeRtos/src/tasks.c **** 			}
 3098              		.loc 1 3401 29 is_stmt 1 view .LVU830
3376:./FreeRtos/src/tasks.c **** 		{
 3099              		.loc 1 3376 8 view .LVU831
3376:./FreeRtos/src/tasks.c **** 		{
 3100              		.loc 1 3376 39 is_stmt 0 view .LVU832
 3101 0016 0E4B     		ldr	r3, .L250
 3102 0018 1B68     		ldr	r3, [r3]
3376:./FreeRtos/src/tasks.c **** 		{
 3103              		.loc 1 3376 8 view .LVU833
 3104 001a 002B     		cmp	r3, #0
 3105 001c F4D1     		bne	.L244
 3106              	.LBE52:
3406:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 3107              		.loc 1 3406 1 view .LVU834
 3108 001e 10BD     		pop	{r4, pc}
 3109              	.LVL249:
 3110              	.L249:
 3111              	.LBB53:
 3112              	.LBB51:
3386:./FreeRtos/src/tasks.c **** 
 3113              		.loc 1 3386 5 is_stmt 1 view .LVU835
3388:./FreeRtos/src/tasks.c **** 				{
 3114              		.loc 1 3388 5 view .LVU836
 3115 0020 FFF7FEFF 		bl	vPortEnterCritical
 3116              	.LVL250:
3390:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3117              		.loc 1 3390 6 view .LVU837
ARM GAS  /tmp/ccQvkfbu.s 			page 157


3390:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3118              		.loc 1 3390 26 is_stmt 0 view .LVU838
 3119 0024 0B4B     		ldr	r3, .L250+4
 3120 0026 DB68     		ldr	r3, [r3, #12]
3390:./FreeRtos/src/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3121              		.loc 1 3390 12 view .LVU839
 3122 0028 DC68     		ldr	r4, [r3, #12]
 3123              	.LVL251:
3391:./FreeRtos/src/tasks.c **** 					--uxCurrentNumberOfTasks;
 3124              		.loc 1 3391 6 is_stmt 1 view .LVU840
3391:./FreeRtos/src/tasks.c **** 					--uxCurrentNumberOfTasks;
 3125              		.loc 1 3391 15 is_stmt 0 view .LVU841
 3126 002a 201D     		adds	r0, r4, #4
 3127 002c FFF7FEFF 		bl	uxListRemove
 3128              	.LVL252:
3392:./FreeRtos/src/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 3129              		.loc 1 3392 6 is_stmt 1 view .LVU842
 3130 0030 094A     		ldr	r2, .L250+8
 3131 0032 1368     		ldr	r3, [r2]
 3132 0034 013B     		subs	r3, r3, #1
 3133 0036 1360     		str	r3, [r2]
3393:./FreeRtos/src/tasks.c **** 				}
 3134              		.loc 1 3393 6 view .LVU843
 3135 0038 054A     		ldr	r2, .L250
 3136 003a 1368     		ldr	r3, [r2]
 3137 003c 013B     		subs	r3, r3, #1
 3138 003e 1360     		str	r3, [r2]
3395:./FreeRtos/src/tasks.c **** 
 3139              		.loc 1 3395 5 view .LVU844
 3140 0040 FFF7FEFF 		bl	vPortExitCritical
 3141              	.LVL253:
3397:./FreeRtos/src/tasks.c **** 			}
 3142              		.loc 1 3397 5 view .LVU845
 3143 0044 2046     		mov	r0, r4
 3144 0046 FFF7FEFF 		bl	prvDeleteTCB
 3145              	.LVL254:
 3146              	.LBE51:
 3147 004a E4E7     		b	.L243
 3148              	.LVL255:
 3149              	.L248:
 3150              	.LCFI29:
 3151              		.cfi_def_cfa_offset 0
 3152              		.cfi_restore 4
 3153              		.cfi_restore 14
3397:./FreeRtos/src/tasks.c **** 			}
 3154              		.loc 1 3397 5 is_stmt 0 view .LVU846
 3155 004c 7047     		bx	lr
 3156              	.L251:
 3157 004e 00BF     		.align	2
 3158              	.L250:
 3159 0050 00000000 		.word	.LANCHOR15
 3160 0054 00000000 		.word	.LANCHOR7
 3161 0058 00000000 		.word	.LANCHOR9
 3162              	.LBE53:
 3163              		.cfi_endproc
 3164              	.LFE164:
 3166              		.section	.text.prvIdleTask,"ax",%progbits
ARM GAS  /tmp/ccQvkfbu.s 			page 158


 3167              		.align	1
 3168              		.syntax unified
 3169              		.thumb
 3170              		.thumb_func
 3171              		.fpu fpv4-sp-d16
 3173              	prvIdleTask:
 3174              	.LFB162:
3132:./FreeRtos/src/tasks.c **** 	/* Stop warnings. */
 3175              		.loc 1 3132 1 is_stmt 1 view -0
 3176              		.cfi_startproc
 3177              		@ Volatile: function does not return.
 3178              		@ args = 0, pretend = 0, frame = 0
 3179              		@ frame_needed = 0, uses_anonymous_args = 0
 3180              	.LVL256:
3132:./FreeRtos/src/tasks.c **** 	/* Stop warnings. */
 3181              		.loc 1 3132 1 is_stmt 0 view .LVU848
 3182 0000 08B5     		push	{r3, lr}
 3183              	.LCFI30:
 3184              		.cfi_def_cfa_offset 8
 3185              		.cfi_offset 3, -8
 3186              		.cfi_offset 14, -4
 3187              	.LVL257:
 3188              	.L253:
3134:./FreeRtos/src/tasks.c **** 
 3189              		.loc 1 3134 2 is_stmt 1 view .LVU849
3139:./FreeRtos/src/tasks.c **** 	{
 3190              		.loc 1 3139 2 view .LVU850
3143:./FreeRtos/src/tasks.c **** 
 3191              		.loc 1 3143 3 view .LVU851
 3192 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 3193              	.LVL258:
3166:./FreeRtos/src/tasks.c **** 			{
 3194              		.loc 1 3166 4 view .LVU852
3166:./FreeRtos/src/tasks.c **** 			{
 3195              		.loc 1 3166 8 is_stmt 0 view .LVU853
 3196 0006 074B     		ldr	r3, .L256
 3197 0008 1B68     		ldr	r3, [r3]
3166:./FreeRtos/src/tasks.c **** 			{
 3198              		.loc 1 3166 6 view .LVU854
 3199 000a 012B     		cmp	r3, #1
 3200 000c F9D9     		bls	.L253
3168:./FreeRtos/src/tasks.c **** 			}
 3201              		.loc 1 3168 5 is_stmt 1 view .LVU855
 3202 000e 4FF0E023 		mov	r3, #-536813568
 3203 0012 4FF08052 		mov	r2, #268435456
 3204 0016 C3F8042D 		str	r2, [r3, #3332]
3168:./FreeRtos/src/tasks.c **** 			}
 3205              		.loc 1 3168 5 view .LVU856
 3206              		.syntax unified
 3207              	@ 3168 "./FreeRtos/src/tasks.c" 1
 3208 001a BFF34F8F 		dsb
 3209              	@ 0 "" 2
3168:./FreeRtos/src/tasks.c **** 			}
 3210              		.loc 1 3168 5 view .LVU857
 3211              	@ 3168 "./FreeRtos/src/tasks.c" 1
 3212 001e BFF36F8F 		isb
 3213              	@ 0 "" 2
ARM GAS  /tmp/ccQvkfbu.s 			page 159


3168:./FreeRtos/src/tasks.c **** 			}
 3214              		.loc 1 3168 16 view .LVU858
 3215              		.thumb
 3216              		.syntax unified
 3217 0022 EEE7     		b	.L253
 3218              	.L257:
 3219              		.align	2
 3220              	.L256:
 3221 0024 00000000 		.word	.LANCHOR4
 3222              		.cfi_endproc
 3223              	.LFE162:
 3225              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3226              		.align	1
 3227              		.global	vTaskSwitchContext
 3228              		.syntax unified
 3229              		.thumb
 3230              		.thumb_func
 3231              		.fpu fpv4-sp-d16
 3233              	vTaskSwitchContext:
 3234              	.LFB154:
2762:./FreeRtos/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3235              		.loc 1 2762 1 view -0
 3236              		.cfi_startproc
 3237              		@ args = 0, pretend = 0, frame = 0
 3238              		@ frame_needed = 0, uses_anonymous_args = 0
2763:./FreeRtos/src/tasks.c **** 	{
 3239              		.loc 1 2763 2 view .LVU860
2763:./FreeRtos/src/tasks.c **** 	{
 3240              		.loc 1 2763 27 is_stmt 0 view .LVU861
 3241 0000 1E4B     		ldr	r3, .L268
 3242 0002 1B68     		ldr	r3, [r3]
2763:./FreeRtos/src/tasks.c **** 	{
 3243              		.loc 1 2763 4 view .LVU862
 3244 0004 1BB1     		cbz	r3, .L259
2767:./FreeRtos/src/tasks.c **** 	}
 3245              		.loc 1 2767 3 is_stmt 1 view .LVU863
2767:./FreeRtos/src/tasks.c **** 	}
 3246              		.loc 1 2767 17 is_stmt 0 view .LVU864
 3247 0006 1E4B     		ldr	r3, .L268+4
 3248 0008 0122     		movs	r2, #1
 3249 000a 1A60     		str	r2, [r3]
 3250 000c 7047     		bx	lr
 3251              	.L259:
2762:./FreeRtos/src/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3252              		.loc 1 2762 1 view .LVU865
 3253 000e 10B5     		push	{r4, lr}
 3254              	.LCFI31:
 3255              		.cfi_def_cfa_offset 8
 3256              		.cfi_offset 4, -8
 3257              		.cfi_offset 14, -4
2771:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3258              		.loc 1 2771 3 is_stmt 1 view .LVU866
2771:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3259              		.loc 1 2771 17 is_stmt 0 view .LVU867
 3260 0010 1B4B     		ldr	r3, .L268+4
 3261 0012 0022     		movs	r2, #0
 3262 0014 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccQvkfbu.s 			page 160


2772:./FreeRtos/src/tasks.c **** 
 3263              		.loc 1 2772 27 is_stmt 1 view .LVU868
2802:./FreeRtos/src/tasks.c **** 
 3264              		.loc 1 2802 33 view .LVU869
 3265              	.LBB54:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3266              		.loc 1 2806 3 view .LVU870
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3267              		.loc 1 2806 3 view .LVU871
 3268 0016 1B4B     		ldr	r3, .L268+8
 3269 0018 1C68     		ldr	r4, [r3]
 3270              	.LVL259:
 3271              	.LBB55:
 3272              	.LBI55:
 130:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 3273              		.loc 2 130 59 view .LVU872
 3274              	.LBB56:
 132:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 3275              		.loc 2 132 2 view .LVU873
 134:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3276              		.loc 2 134 3 view .LVU874
 3277              		.syntax unified
 3278              	@ 134 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 3279 001a B4FA84F4 		clz r4, r4
 3280              	@ 0 "" 2
 3281              	.LVL260:
 134:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		return ucReturn;
 3282              		.loc 2 134 3 is_stmt 0 view .LVU875
 3283              		.thumb
 3284              		.syntax unified
 3285 001e E4B2     		uxtb	r4, r4
 3286              	.LVL261:
 135:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 3287              		.loc 2 135 3 is_stmt 1 view .LVU876
 135:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 3288              		.loc 2 135 3 is_stmt 0 view .LVU877
 3289              	.LBE56:
 3290              	.LBE55:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3291              		.loc 1 2806 3 view .LVU878
 3292 0020 C4F11F04 		rsb	r4, r4, #31
 3293              	.LVL262:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3294              		.loc 1 2806 3 is_stmt 1 view .LVU879
 3295 0024 04EB8402 		add	r2, r4, r4, lsl #2
 3296 0028 9300     		lsls	r3, r2, #2
 3297 002a 174A     		ldr	r2, .L268+12
 3298 002c D358     		ldr	r3, [r2, r3]
 3299 002e C3B1     		cbz	r3, .L266
 3300              	.L261:
 3301              	.LBB57:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3302              		.loc 1 2806 3 discriminator 3 view .LVU880
 3303              	.LVL263:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3304              		.loc 1 2806 3 discriminator 3 view .LVU881
 3305 0030 154A     		ldr	r2, .L268+12
ARM GAS  /tmp/ccQvkfbu.s 			page 161


 3306 0032 04EB8401 		add	r1, r4, r4, lsl #2
 3307 0036 8B00     		lsls	r3, r1, #2
 3308 0038 1344     		add	r3, r3, r2
 3309 003a 5968     		ldr	r1, [r3, #4]
 3310 003c 4968     		ldr	r1, [r1, #4]
 3311 003e 5960     		str	r1, [r3, #4]
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3312              		.loc 1 2806 3 discriminator 3 view .LVU882
 3313 0040 04EB8400 		add	r0, r4, r4, lsl #2
 3314 0044 8300     		lsls	r3, r0, #2
 3315 0046 0833     		adds	r3, r3, #8
 3316 0048 1A44     		add	r2, r2, r3
 3317 004a 9142     		cmp	r1, r2
 3318 004c 10D0     		beq	.L267
 3319              	.L262:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3320              		.loc 1 2806 3 discriminator 6 view .LVU883
 3321 004e 04EB8404 		add	r4, r4, r4, lsl #2
 3322              	.LVL264:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3323              		.loc 1 2806 3 is_stmt 0 discriminator 6 view .LVU884
 3324 0052 A200     		lsls	r2, r4, #2
 3325 0054 0C4B     		ldr	r3, .L268+12
 3326 0056 1344     		add	r3, r3, r2
 3327 0058 5B68     		ldr	r3, [r3, #4]
 3328 005a DA68     		ldr	r2, [r3, #12]
 3329 005c 0B4B     		ldr	r3, .L268+16
 3330 005e 1A60     		str	r2, [r3]
 3331              	.LBE57:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3332              		.loc 1 2806 3 is_stmt 1 discriminator 6 view .LVU885
 3333              	.LBE54:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3334              		.loc 1 2806 37 discriminator 6 view .LVU886
2807:./FreeRtos/src/tasks.c **** 
 3335              		.loc 1 2807 26 discriminator 6 view .LVU887
2817:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 3336              		.loc 1 2817 1 is_stmt 0 discriminator 6 view .LVU888
 3337 0060 10BD     		pop	{r4, pc}
 3338              	.LVL265:
 3339              	.L266:
 3340              	.LBB59:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3341              		.loc 1 2806 3 is_stmt 1 discriminator 1 view .LVU889
 3342 0062 40F6F622 		movw	r2, #2806
 3343 0066 0A49     		ldr	r1, .L268+20
 3344 0068 0A48     		ldr	r0, .L268+24
 3345 006a FFF7FEFF 		bl	printf
 3346              	.LVL266:
 3347 006e DFE7     		b	.L261
 3348              	.LVL267:
 3349              	.L267:
 3350              	.LBB58:
2806:./FreeRtos/src/tasks.c **** 		traceTASK_SWITCHED_IN();
 3351              		.loc 1 2806 3 discriminator 4 view .LVU890
 3352 0070 4968     		ldr	r1, [r1, #4]
 3353 0072 8200     		lsls	r2, r0, #2
ARM GAS  /tmp/ccQvkfbu.s 			page 162


 3354 0074 044B     		ldr	r3, .L268+12
 3355 0076 1344     		add	r3, r3, r2
 3356 0078 5960     		str	r1, [r3, #4]
 3357 007a E8E7     		b	.L262
 3358              	.L269:
 3359              		.align	2
 3360              	.L268:
 3361 007c 00000000 		.word	.LANCHOR16
 3362 0080 00000000 		.word	.LANCHOR20
 3363 0084 00000000 		.word	.LANCHOR13
 3364 0088 00000000 		.word	.LANCHOR4
 3365 008c 00000000 		.word	.LANCHOR10
 3366 0090 00000000 		.word	.LC0
 3367 0094 18000000 		.word	.LC1
 3368              	.LBE58:
 3369              	.LBE59:
 3370              		.cfi_endproc
 3371              	.LFE154:
 3373              		.section	.text.vTaskSuspend,"ax",%progbits
 3374              		.align	1
 3375              		.global	vTaskSuspend
 3376              		.syntax unified
 3377              		.thumb
 3378              		.thumb_func
 3379              		.fpu fpv4-sp-d16
 3381              	vTaskSuspend:
 3382              	.LVL268:
 3383              	.LFB141:
1567:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 3384              		.loc 1 1567 2 view -0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
1567:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 3388              		.loc 1 1567 2 is_stmt 0 view .LVU892
 3389 0000 38B5     		push	{r3, r4, r5, lr}
 3390              	.LCFI32:
 3391              		.cfi_def_cfa_offset 16
 3392              		.cfi_offset 3, -16
 3393              		.cfi_offset 4, -12
 3394              		.cfi_offset 5, -8
 3395              		.cfi_offset 14, -4
 3396 0002 0446     		mov	r4, r0
1568:./FreeRtos/src/tasks.c **** 
 3397              		.loc 1 1568 2 is_stmt 1 view .LVU893
1570:./FreeRtos/src/tasks.c **** 		{
 3398              		.loc 1 1570 3 view .LVU894
 3399 0004 FFF7FEFF 		bl	vPortEnterCritical
 3400              	.LVL269:
1574:./FreeRtos/src/tasks.c **** 
 3401              		.loc 1 1574 4 view .LVU895
1574:./FreeRtos/src/tasks.c **** 
 3402              		.loc 1 1574 12 is_stmt 0 view .LVU896
 3403 0008 34B3     		cbz	r4, .L280
 3404              	.LVL270:
 3405              	.L271:
1576:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 163


 3406              		.loc 1 1576 30 is_stmt 1 discriminator 4 view .LVU897
1580:./FreeRtos/src/tasks.c **** 			{
 3407              		.loc 1 1580 4 discriminator 4 view .LVU898
1580:./FreeRtos/src/tasks.c **** 			{
 3408              		.loc 1 1580 8 is_stmt 0 discriminator 4 view .LVU899
 3409 000a 251D     		adds	r5, r4, #4
 3410 000c 2846     		mov	r0, r5
 3411 000e FFF7FEFF 		bl	uxListRemove
 3412              	.LVL271:
1580:./FreeRtos/src/tasks.c **** 			{
 3413              		.loc 1 1580 6 discriminator 4 view .LVU900
 3414 0012 68B9     		cbnz	r0, .L272
1582:./FreeRtos/src/tasks.c **** 			}
 3415              		.loc 1 1582 5 is_stmt 1 view .LVU901
 3416 0014 E36A     		ldr	r3, [r4, #44]
 3417 0016 03EB8301 		add	r1, r3, r3, lsl #2
 3418 001a 274A     		ldr	r2, .L284
 3419 001c 52F82120 		ldr	r2, [r2, r1, lsl #2]
 3420 0020 32B9     		cbnz	r2, .L272
1582:./FreeRtos/src/tasks.c **** 			}
 3421              		.loc 1 1582 5 discriminator 1 view .LVU902
 3422 0022 0122     		movs	r2, #1
 3423 0024 9A40     		lsls	r2, r2, r3
 3424 0026 2549     		ldr	r1, .L284+4
 3425 0028 0B68     		ldr	r3, [r1]
 3426 002a 23EA0203 		bic	r3, r3, r2
 3427 002e 0B60     		str	r3, [r1]
 3428              	.L272:
1586:./FreeRtos/src/tasks.c **** 			}
 3429              		.loc 1 1586 29 view .LVU903
1590:./FreeRtos/src/tasks.c **** 			{
 3430              		.loc 1 1590 4 view .LVU904
1590:./FreeRtos/src/tasks.c **** 			{
 3431              		.loc 1 1590 8 is_stmt 0 view .LVU905
 3432 0030 A36A     		ldr	r3, [r4, #40]
1590:./FreeRtos/src/tasks.c **** 			{
 3433              		.loc 1 1590 6 view .LVU906
 3434 0032 1BB1     		cbz	r3, .L273
1592:./FreeRtos/src/tasks.c **** 			}
 3435              		.loc 1 1592 5 is_stmt 1 view .LVU907
1592:./FreeRtos/src/tasks.c **** 			}
 3436              		.loc 1 1592 14 is_stmt 0 view .LVU908
 3437 0034 04F11800 		add	r0, r4, #24
 3438 0038 FFF7FEFF 		bl	uxListRemove
 3439              	.LVL272:
 3440              	.L273:
1596:./FreeRtos/src/tasks.c **** 			}
 3441              		.loc 1 1596 29 is_stmt 1 view .LVU909
1599:./FreeRtos/src/tasks.c **** 		}
 3442              		.loc 1 1599 4 view .LVU910
 3443 003c 2946     		mov	r1, r5
 3444 003e 2048     		ldr	r0, .L284+8
 3445 0040 FFF7FEFF 		bl	vListInsertEnd
 3446              	.LVL273:
1601:./FreeRtos/src/tasks.c **** 
 3447              		.loc 1 1601 3 view .LVU911
 3448 0044 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccQvkfbu.s 			page 164


 3449              	.LVL274:
1603:./FreeRtos/src/tasks.c **** 		{
 3450              		.loc 1 1603 3 view .LVU912
1603:./FreeRtos/src/tasks.c **** 		{
 3451              		.loc 1 1603 25 is_stmt 0 view .LVU913
 3452 0048 1E4B     		ldr	r3, .L284+12
 3453 004a 1B68     		ldr	r3, [r3]
1603:./FreeRtos/src/tasks.c **** 		{
 3454              		.loc 1 1603 5 view .LVU914
 3455 004c 3BB9     		cbnz	r3, .L281
 3456              	.L274:
1615:./FreeRtos/src/tasks.c **** 		}
 3457              		.loc 1 1615 28 is_stmt 1 view .LVU915
1618:./FreeRtos/src/tasks.c **** 		{
 3458              		.loc 1 1618 3 view .LVU916
1618:./FreeRtos/src/tasks.c **** 		{
 3459              		.loc 1 1618 13 is_stmt 0 view .LVU917
 3460 004e 1E4B     		ldr	r3, .L284+16
 3461 0050 1B68     		ldr	r3, [r3]
1618:./FreeRtos/src/tasks.c **** 		{
 3462              		.loc 1 1618 5 view .LVU918
 3463 0052 A342     		cmp	r3, r4
 3464 0054 0AD0     		beq	.L282
 3465              	.L270:
1649:./FreeRtos/src/tasks.c **** 
 3466              		.loc 1 1649 2 view .LVU919
 3467 0056 38BD     		pop	{r3, r4, r5, pc}
 3468              	.LVL275:
 3469              	.L280:
1574:./FreeRtos/src/tasks.c **** 
 3470              		.loc 1 1574 12 discriminator 1 view .LVU920
 3471 0058 1B4B     		ldr	r3, .L284+16
 3472 005a 1C68     		ldr	r4, [r3]
 3473              	.LVL276:
1574:./FreeRtos/src/tasks.c **** 
 3474              		.loc 1 1574 12 discriminator 1 view .LVU921
 3475 005c D5E7     		b	.L271
 3476              	.LVL277:
 3477              	.L281:
1607:./FreeRtos/src/tasks.c **** 			{
 3478              		.loc 1 1607 4 is_stmt 1 view .LVU922
 3479 005e FFF7FEFF 		bl	vPortEnterCritical
 3480              	.LVL278:
1609:./FreeRtos/src/tasks.c **** 			}
 3481              		.loc 1 1609 5 view .LVU923
 3482 0062 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3483              	.LVL279:
1611:./FreeRtos/src/tasks.c **** 		}
 3484              		.loc 1 1611 4 view .LVU924
 3485 0066 FFF7FEFF 		bl	vPortExitCritical
 3486              	.LVL280:
 3487 006a F0E7     		b	.L274
 3488              	.L282:
1620:./FreeRtos/src/tasks.c **** 			{
 3489              		.loc 1 1620 4 view .LVU925
1620:./FreeRtos/src/tasks.c **** 			{
 3490              		.loc 1 1620 26 is_stmt 0 view .LVU926
ARM GAS  /tmp/ccQvkfbu.s 			page 165


 3491 006c 154B     		ldr	r3, .L284+12
 3492 006e 1B68     		ldr	r3, [r3]
1620:./FreeRtos/src/tasks.c **** 			{
 3493              		.loc 1 1620 6 view .LVU927
 3494 0070 A3B1     		cbz	r3, .L276
1623:./FreeRtos/src/tasks.c **** 				portYIELD_WITHIN_API();
 3495              		.loc 1 1623 5 is_stmt 1 view .LVU928
 3496 0072 164B     		ldr	r3, .L284+20
 3497 0074 1B68     		ldr	r3, [r3]
 3498 0076 53B9     		cbnz	r3, .L283
 3499              	.L277:
1624:./FreeRtos/src/tasks.c **** 			}
 3500              		.loc 1 1624 5 view .LVU929
 3501 0078 4FF0E023 		mov	r3, #-536813568
 3502 007c 4FF08052 		mov	r2, #268435456
 3503 0080 C3F8042D 		str	r2, [r3, #3332]
1624:./FreeRtos/src/tasks.c **** 			}
 3504              		.loc 1 1624 5 view .LVU930
 3505              		.syntax unified
 3506              	@ 1624 "./FreeRtos/src/tasks.c" 1
 3507 0084 BFF34F8F 		dsb
 3508              	@ 0 "" 2
1624:./FreeRtos/src/tasks.c **** 			}
 3509              		.loc 1 1624 5 view .LVU931
 3510              	@ 1624 "./FreeRtos/src/tasks.c" 1
 3511 0088 BFF36F8F 		isb
 3512              	@ 0 "" 2
1624:./FreeRtos/src/tasks.c **** 			}
 3513              		.loc 1 1624 27 view .LVU932
 3514              		.thumb
 3515              		.syntax unified
 3516 008c E3E7     		b	.L270
 3517              	.L283:
1623:./FreeRtos/src/tasks.c **** 				portYIELD_WITHIN_API();
 3518              		.loc 1 1623 5 discriminator 1 view .LVU933
 3519 008e 40F25762 		movw	r2, #1623
 3520 0092 0F49     		ldr	r1, .L284+24
 3521 0094 0F48     		ldr	r0, .L284+28
 3522 0096 FFF7FEFF 		bl	printf
 3523              	.LVL281:
 3524 009a EDE7     		b	.L277
 3525              	.L276:
1631:./FreeRtos/src/tasks.c **** 				{
 3526              		.loc 1 1631 5 view .LVU934
1631:./FreeRtos/src/tasks.c **** 				{
 3527              		.loc 1 1631 9 is_stmt 0 view .LVU935
 3528 009c 084B     		ldr	r3, .L284+8
 3529 009e 1A68     		ldr	r2, [r3]
1631:./FreeRtos/src/tasks.c **** 				{
 3530              		.loc 1 1631 56 view .LVU936
 3531 00a0 0D4B     		ldr	r3, .L284+32
 3532 00a2 1B68     		ldr	r3, [r3]
1631:./FreeRtos/src/tasks.c **** 				{
 3533              		.loc 1 1631 7 view .LVU937
 3534 00a4 9A42     		cmp	r2, r3
 3535 00a6 03D1     		bne	.L278
1637:./FreeRtos/src/tasks.c **** 				}
ARM GAS  /tmp/ccQvkfbu.s 			page 166


 3536              		.loc 1 1637 6 is_stmt 1 view .LVU938
1637:./FreeRtos/src/tasks.c **** 				}
 3537              		.loc 1 1637 19 is_stmt 0 view .LVU939
 3538 00a8 074B     		ldr	r3, .L284+16
 3539 00aa 0022     		movs	r2, #0
 3540 00ac 1A60     		str	r2, [r3]
 3541 00ae D2E7     		b	.L270
 3542              	.L278:
1641:./FreeRtos/src/tasks.c **** 				}
 3543              		.loc 1 1641 6 is_stmt 1 view .LVU940
 3544 00b0 FFF7FEFF 		bl	vTaskSwitchContext
 3545              	.LVL282:
1647:./FreeRtos/src/tasks.c **** 		}
 3546              		.loc 1 1647 28 view .LVU941
1649:./FreeRtos/src/tasks.c **** 
 3547              		.loc 1 1649 2 is_stmt 0 view .LVU942
 3548 00b4 CFE7     		b	.L270
 3549              	.L285:
 3550 00b6 00BF     		.align	2
 3551              	.L284:
 3552 00b8 00000000 		.word	.LANCHOR4
 3553 00bc 00000000 		.word	.LANCHOR13
 3554 00c0 00000000 		.word	.LANCHOR2
 3555 00c4 00000000 		.word	.LANCHOR11
 3556 00c8 00000000 		.word	.LANCHOR10
 3557 00cc 00000000 		.word	.LANCHOR16
 3558 00d0 00000000 		.word	.LC0
 3559 00d4 18000000 		.word	.LC1
 3560 00d8 00000000 		.word	.LANCHOR9
 3561              		.cfi_endproc
 3562              	.LFE141:
 3564              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3565              		.align	1
 3566              		.global	vTaskPlaceOnEventList
 3567              		.syntax unified
 3568              		.thumb
 3569              		.thumb_func
 3570              		.fpu fpv4-sp-d16
 3572              	vTaskPlaceOnEventList:
 3573              	.LVL283:
 3574              	.LFB155:
2821:./FreeRtos/src/tasks.c **** 	configASSERT( pxEventList );
 3575              		.loc 1 2821 1 is_stmt 1 view -0
 3576              		.cfi_startproc
 3577              		@ args = 0, pretend = 0, frame = 0
 3578              		@ frame_needed = 0, uses_anonymous_args = 0
2821:./FreeRtos/src/tasks.c **** 	configASSERT( pxEventList );
 3579              		.loc 1 2821 1 is_stmt 0 view .LVU944
 3580 0000 38B5     		push	{r3, r4, r5, lr}
 3581              	.LCFI33:
 3582              		.cfi_def_cfa_offset 16
 3583              		.cfi_offset 3, -16
 3584              		.cfi_offset 4, -12
 3585              		.cfi_offset 5, -8
 3586              		.cfi_offset 14, -4
 3587 0002 0C46     		mov	r4, r1
2822:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 167


 3588              		.loc 1 2822 2 is_stmt 1 view .LVU945
 3589 0004 0546     		mov	r5, r0
 3590 0006 50B1     		cbz	r0, .L289
 3591              	.LVL284:
 3592              	.L287:
2831:./FreeRtos/src/tasks.c **** 
 3593              		.loc 1 2831 2 view .LVU946
2831:./FreeRtos/src/tasks.c **** 
 3594              		.loc 1 2831 43 is_stmt 0 view .LVU947
 3595 0008 084B     		ldr	r3, .L290
 3596 000a 1968     		ldr	r1, [r3]
2831:./FreeRtos/src/tasks.c **** 
 3597              		.loc 1 2831 2 view .LVU948
 3598 000c 1831     		adds	r1, r1, #24
 3599 000e 2846     		mov	r0, r5
 3600 0010 FFF7FEFF 		bl	vListInsert
 3601              	.LVL285:
2833:./FreeRtos/src/tasks.c **** }
 3602              		.loc 1 2833 2 is_stmt 1 view .LVU949
 3603 0014 0121     		movs	r1, #1
 3604 0016 2046     		mov	r0, r4
 3605 0018 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3606              	.LVL286:
2834:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 3607              		.loc 1 2834 1 is_stmt 0 view .LVU950
 3608 001c 38BD     		pop	{r3, r4, r5, pc}
 3609              	.LVL287:
 3610              	.L289:
2822:./FreeRtos/src/tasks.c **** 
 3611              		.loc 1 2822 2 is_stmt 1 discriminator 1 view .LVU951
 3612 001e 40F60632 		movw	r2, #2822
 3613 0022 0349     		ldr	r1, .L290+4
 3614              	.LVL288:
2822:./FreeRtos/src/tasks.c **** 
 3615              		.loc 1 2822 2 is_stmt 0 discriminator 1 view .LVU952
 3616 0024 0348     		ldr	r0, .L290+8
 3617              	.LVL289:
2822:./FreeRtos/src/tasks.c **** 
 3618              		.loc 1 2822 2 discriminator 1 view .LVU953
 3619 0026 FFF7FEFF 		bl	printf
 3620              	.LVL290:
 3621 002a EDE7     		b	.L287
 3622              	.L291:
 3623              		.align	2
 3624              	.L290:
 3625 002c 00000000 		.word	.LANCHOR10
 3626 0030 00000000 		.word	.LC0
 3627 0034 18000000 		.word	.LC1
 3628              		.cfi_endproc
 3629              	.LFE155:
 3631              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3632              		.align	1
 3633              		.global	vTaskPlaceOnUnorderedEventList
 3634              		.syntax unified
 3635              		.thumb
 3636              		.thumb_func
 3637              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQvkfbu.s 			page 168


 3639              	vTaskPlaceOnUnorderedEventList:
 3640              	.LVL291:
 3641              	.LFB156:
2838:./FreeRtos/src/tasks.c **** 	configASSERT( pxEventList );
 3642              		.loc 1 2838 1 is_stmt 1 view -0
 3643              		.cfi_startproc
 3644              		@ args = 0, pretend = 0, frame = 0
 3645              		@ frame_needed = 0, uses_anonymous_args = 0
2838:./FreeRtos/src/tasks.c **** 	configASSERT( pxEventList );
 3646              		.loc 1 2838 1 is_stmt 0 view .LVU955
 3647 0000 70B5     		push	{r4, r5, r6, lr}
 3648              	.LCFI34:
 3649              		.cfi_def_cfa_offset 16
 3650              		.cfi_offset 4, -16
 3651              		.cfi_offset 5, -12
 3652              		.cfi_offset 6, -8
 3653              		.cfi_offset 14, -4
 3654 0002 0C46     		mov	r4, r1
 3655 0004 1546     		mov	r5, r2
2839:./FreeRtos/src/tasks.c **** 
 3656              		.loc 1 2839 2 is_stmt 1 view .LVU956
 3657 0006 0646     		mov	r6, r0
 3658 0008 88B1     		cbz	r0, .L296
 3659              	.LVL292:
 3660              	.L293:
2843:./FreeRtos/src/tasks.c **** 
 3661              		.loc 1 2843 2 view .LVU957
 3662 000a 104B     		ldr	r3, .L298
 3663 000c 1B68     		ldr	r3, [r3]
 3664 000e ABB1     		cbz	r3, .L297
 3665              	.L294:
2848:./FreeRtos/src/tasks.c **** 
 3666              		.loc 1 2848 2 view .LVU958
 3667 0010 0F4B     		ldr	r3, .L298+4
 3668 0012 1A68     		ldr	r2, [r3]
 3669 0014 44F00044 		orr	r4, r4, #-2147483648
 3670              	.LVL293:
2848:./FreeRtos/src/tasks.c **** 
 3671              		.loc 1 2848 2 is_stmt 0 view .LVU959
 3672 0018 9461     		str	r4, [r2, #24]
2855:./FreeRtos/src/tasks.c **** 
 3673              		.loc 1 2855 2 is_stmt 1 view .LVU960
2855:./FreeRtos/src/tasks.c **** 
 3674              		.loc 1 2855 46 is_stmt 0 view .LVU961
 3675 001a 1968     		ldr	r1, [r3]
2855:./FreeRtos/src/tasks.c **** 
 3676              		.loc 1 2855 2 view .LVU962
 3677 001c 1831     		adds	r1, r1, #24
 3678 001e 3046     		mov	r0, r6
 3679 0020 FFF7FEFF 		bl	vListInsertEnd
 3680              	.LVL294:
2857:./FreeRtos/src/tasks.c **** }
 3681              		.loc 1 2857 2 is_stmt 1 view .LVU963
 3682 0024 0121     		movs	r1, #1
 3683 0026 2846     		mov	r0, r5
 3684 0028 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3685              	.LVL295:
ARM GAS  /tmp/ccQvkfbu.s 			page 169


2858:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 3686              		.loc 1 2858 1 is_stmt 0 view .LVU964
 3687 002c 70BD     		pop	{r4, r5, r6, pc}
 3688              	.LVL296:
 3689              	.L296:
2839:./FreeRtos/src/tasks.c **** 
 3690              		.loc 1 2839 2 is_stmt 1 discriminator 1 view .LVU965
 3691 002e 40F61732 		movw	r2, #2839
 3692              	.LVL297:
2839:./FreeRtos/src/tasks.c **** 
 3693              		.loc 1 2839 2 is_stmt 0 discriminator 1 view .LVU966
 3694 0032 0849     		ldr	r1, .L298+8
 3695              	.LVL298:
2839:./FreeRtos/src/tasks.c **** 
 3696              		.loc 1 2839 2 discriminator 1 view .LVU967
 3697 0034 0848     		ldr	r0, .L298+12
 3698              	.LVL299:
2839:./FreeRtos/src/tasks.c **** 
 3699              		.loc 1 2839 2 discriminator 1 view .LVU968
 3700 0036 FFF7FEFF 		bl	printf
 3701              	.LVL300:
 3702 003a E6E7     		b	.L293
 3703              	.L297:
2843:./FreeRtos/src/tasks.c **** 
 3704              		.loc 1 2843 2 is_stmt 1 discriminator 1 view .LVU969
 3705 003c 40F61B32 		movw	r2, #2843
 3706 0040 0449     		ldr	r1, .L298+8
 3707 0042 0548     		ldr	r0, .L298+12
 3708 0044 FFF7FEFF 		bl	printf
 3709              	.LVL301:
 3710 0048 E2E7     		b	.L294
 3711              	.L299:
 3712 004a 00BF     		.align	2
 3713              	.L298:
 3714 004c 00000000 		.word	.LANCHOR16
 3715 0050 00000000 		.word	.LANCHOR10
 3716 0054 00000000 		.word	.LC0
 3717 0058 18000000 		.word	.LC1
 3718              		.cfi_endproc
 3719              	.LFE156:
 3721              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3722              		.align	1
 3723              		.global	xTaskRemoveFromEventList
 3724              		.syntax unified
 3725              		.thumb
 3726              		.thumb_func
 3727              		.fpu fpv4-sp-d16
 3729              	xTaskRemoveFromEventList:
 3730              	.LVL302:
 3731              	.LFB157:
2895:./FreeRtos/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3732              		.loc 1 2895 1 view -0
 3733              		.cfi_startproc
 3734              		@ args = 0, pretend = 0, frame = 0
 3735              		@ frame_needed = 0, uses_anonymous_args = 0
2895:./FreeRtos/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3736              		.loc 1 2895 1 is_stmt 0 view .LVU971
ARM GAS  /tmp/ccQvkfbu.s 			page 170


 3737 0000 38B5     		push	{r3, r4, r5, lr}
 3738              	.LCFI35:
 3739              		.cfi_def_cfa_offset 16
 3740              		.cfi_offset 3, -16
 3741              		.cfi_offset 4, -12
 3742              		.cfi_offset 5, -8
 3743              		.cfi_offset 14, -4
2896:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
 3744              		.loc 1 2896 1 is_stmt 1 view .LVU972
2897:./FreeRtos/src/tasks.c **** 
 3745              		.loc 1 2897 1 view .LVU973
2912:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3746              		.loc 1 2912 2 view .LVU974
2912:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3747              		.loc 1 2912 31 is_stmt 0 view .LVU975
 3748 0002 C368     		ldr	r3, [r0, #12]
2912:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3749              		.loc 1 2912 17 view .LVU976
 3750 0004 DC68     		ldr	r4, [r3, #12]
 3751              	.LVL303:
2913:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3752              		.loc 1 2913 2 is_stmt 1 view .LVU977
 3753 0006 24B3     		cbz	r4, .L307
 3754              	.LVL304:
 3755              	.L301:
2914:./FreeRtos/src/tasks.c **** 
 3756              		.loc 1 2914 2 view .LVU978
2914:./FreeRtos/src/tasks.c **** 
 3757              		.loc 1 2914 11 is_stmt 0 view .LVU979
 3758 0008 04F11805 		add	r5, r4, #24
 3759 000c 2846     		mov	r0, r5
 3760 000e FFF7FEFF 		bl	uxListRemove
 3761              	.LVL305:
2916:./FreeRtos/src/tasks.c **** 	{
 3762              		.loc 1 2916 2 is_stmt 1 view .LVU980
2916:./FreeRtos/src/tasks.c **** 	{
 3763              		.loc 1 2916 27 is_stmt 0 view .LVU981
 3764 0012 174B     		ldr	r3, .L308
 3765 0014 1B68     		ldr	r3, [r3]
2916:./FreeRtos/src/tasks.c **** 	{
 3766              		.loc 1 2916 4 view .LVU982
 3767 0016 1BBB     		cbnz	r3, .L302
2918:./FreeRtos/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3768              		.loc 1 2918 3 is_stmt 1 view .LVU983
2918:./FreeRtos/src/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3769              		.loc 1 2918 12 is_stmt 0 view .LVU984
 3770 0018 251D     		adds	r5, r4, #4
 3771 001a 2846     		mov	r0, r5
 3772 001c FFF7FEFF 		bl	uxListRemove
 3773              	.LVL306:
2919:./FreeRtos/src/tasks.c **** 	}
 3774              		.loc 1 2919 3 is_stmt 1 view .LVU985
2919:./FreeRtos/src/tasks.c **** 	}
 3775              		.loc 1 2919 3 view .LVU986
 3776 0020 E06A     		ldr	r0, [r4, #44]
 3777 0022 0123     		movs	r3, #1
 3778 0024 8340     		lsls	r3, r3, r0
ARM GAS  /tmp/ccQvkfbu.s 			page 171


 3779 0026 134A     		ldr	r2, .L308+4
 3780 0028 1168     		ldr	r1, [r2]
 3781 002a 0B43     		orrs	r3, r3, r1
 3782 002c 1360     		str	r3, [r2]
2919:./FreeRtos/src/tasks.c **** 	}
 3783              		.loc 1 2919 3 view .LVU987
 3784 002e 00EB8000 		add	r0, r0, r0, lsl #2
 3785 0032 2946     		mov	r1, r5
 3786 0034 104B     		ldr	r3, .L308+8
 3787 0036 03EB8000 		add	r0, r3, r0, lsl #2
 3788 003a FFF7FEFF 		bl	vListInsertEnd
 3789              	.LVL307:
2919:./FreeRtos/src/tasks.c **** 	}
 3790              		.loc 1 2919 42 view .LVU988
 3791              	.L303:
2928:./FreeRtos/src/tasks.c **** 	{
 3792              		.loc 1 2928 2 view .LVU989
2928:./FreeRtos/src/tasks.c **** 	{
 3793              		.loc 1 2928 20 is_stmt 0 view .LVU990
 3794 003e E26A     		ldr	r2, [r4, #44]
2928:./FreeRtos/src/tasks.c **** 	{
 3795              		.loc 1 2928 47 view .LVU991
 3796 0040 0E4B     		ldr	r3, .L308+12
 3797 0042 1B68     		ldr	r3, [r3]
 3798 0044 DB6A     		ldr	r3, [r3, #44]
2928:./FreeRtos/src/tasks.c **** 	{
 3799              		.loc 1 2928 4 view .LVU992
 3800 0046 9A42     		cmp	r2, r3
 3801 0048 0FD9     		bls	.L305
2933:./FreeRtos/src/tasks.c **** 
 3802              		.loc 1 2933 3 is_stmt 1 view .LVU993
 3803              	.LVL308:
2937:./FreeRtos/src/tasks.c **** 	}
 3804              		.loc 1 2937 3 view .LVU994
2937:./FreeRtos/src/tasks.c **** 	}
 3805              		.loc 1 2937 17 is_stmt 0 view .LVU995
 3806 004a 0120     		movs	r0, #1
 3807 004c 0C4B     		ldr	r3, .L308+16
 3808 004e 1860     		str	r0, [r3]
 3809              	.LVL309:
 3810              	.L300:
2959:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 3811              		.loc 1 2959 1 view .LVU996
 3812 0050 38BD     		pop	{r3, r4, r5, pc}
 3813              	.LVL310:
 3814              	.L307:
2913:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3815              		.loc 1 2913 2 is_stmt 1 discriminator 1 view .LVU997
 3816 0052 40F66132 		movw	r2, #2913
 3817 0056 0B49     		ldr	r1, .L308+20
 3818 0058 0B48     		ldr	r0, .L308+24
 3819              	.LVL311:
2913:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3820              		.loc 1 2913 2 is_stmt 0 discriminator 1 view .LVU998
 3821 005a FFF7FEFF 		bl	printf
 3822              	.LVL312:
 3823 005e D3E7     		b	.L301
ARM GAS  /tmp/ccQvkfbu.s 			page 172


 3824              	.L302:
2925:./FreeRtos/src/tasks.c **** 	}
 3825              		.loc 1 2925 3 is_stmt 1 view .LVU999
 3826 0060 2946     		mov	r1, r5
 3827 0062 0A48     		ldr	r0, .L308+28
 3828 0064 FFF7FEFF 		bl	vListInsertEnd
 3829              	.LVL313:
 3830 0068 E9E7     		b	.L303
 3831              	.L305:
2941:./FreeRtos/src/tasks.c **** 	}
 3832              		.loc 1 2941 11 is_stmt 0 view .LVU1000
 3833 006a 0020     		movs	r0, #0
 3834              	.LVL314:
2958:./FreeRtos/src/tasks.c **** }
 3835              		.loc 1 2958 2 is_stmt 1 view .LVU1001
2958:./FreeRtos/src/tasks.c **** }
 3836              		.loc 1 2958 9 is_stmt 0 view .LVU1002
 3837 006c F0E7     		b	.L300
 3838              	.L309:
 3839 006e 00BF     		.align	2
 3840              	.L308:
 3841 0070 00000000 		.word	.LANCHOR16
 3842 0074 00000000 		.word	.LANCHOR13
 3843 0078 00000000 		.word	.LANCHOR4
 3844 007c 00000000 		.word	.LANCHOR10
 3845 0080 00000000 		.word	.LANCHOR20
 3846 0084 00000000 		.word	.LC0
 3847 0088 18000000 		.word	.LC1
 3848 008c 00000000 		.word	.LANCHOR3
 3849              		.cfi_endproc
 3850              	.LFE157:
 3852              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 3853              		.align	1
 3854              		.global	xTaskRemoveFromUnorderedEventList
 3855              		.syntax unified
 3856              		.thumb
 3857              		.thumb_func
 3858              		.fpu fpv4-sp-d16
 3860              	xTaskRemoveFromUnorderedEventList:
 3861              	.LVL315:
 3862              	.LFB158:
2963:./FreeRtos/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3863              		.loc 1 2963 1 is_stmt 1 view -0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 0
 3866              		@ frame_needed = 0, uses_anonymous_args = 0
2963:./FreeRtos/src/tasks.c **** TCB_t *pxUnblockedTCB;
 3867              		.loc 1 2963 1 is_stmt 0 view .LVU1004
 3868 0000 38B5     		push	{r3, r4, r5, lr}
 3869              	.LCFI36:
 3870              		.cfi_def_cfa_offset 16
 3871              		.cfi_offset 3, -16
 3872              		.cfi_offset 4, -12
 3873              		.cfi_offset 5, -8
 3874              		.cfi_offset 14, -4
 3875 0002 0446     		mov	r4, r0
 3876 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccQvkfbu.s 			page 173


2964:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
 3877              		.loc 1 2964 1 is_stmt 1 view .LVU1005
2965:./FreeRtos/src/tasks.c **** 
 3878              		.loc 1 2965 1 view .LVU1006
2969:./FreeRtos/src/tasks.c **** 
 3879              		.loc 1 2969 2 view .LVU1007
 3880 0006 1C4B     		ldr	r3, .L318
 3881 0008 1B68     		ldr	r3, [r3]
 3882 000a 23B3     		cbz	r3, .L316
 3883              	.LVL316:
 3884              	.L311:
2972:./FreeRtos/src/tasks.c **** 
 3885              		.loc 1 2972 2 view .LVU1008
 3886 000c 45F00045 		orr	r5, r5, #-2147483648
 3887              	.LVL317:
2972:./FreeRtos/src/tasks.c **** 
 3888              		.loc 1 2972 2 is_stmt 0 view .LVU1009
 3889 0010 2560     		str	r5, [r4]
2976:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3890              		.loc 1 2976 2 is_stmt 1 view .LVU1010
2976:./FreeRtos/src/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3891              		.loc 1 2976 17 is_stmt 0 view .LVU1011
 3892 0012 E568     		ldr	r5, [r4, #12]
 3893              	.LVL318:
2977:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3894              		.loc 1 2977 2 is_stmt 1 view .LVU1012
 3895 0014 35B3     		cbz	r5, .L317
 3896              	.L312:
2978:./FreeRtos/src/tasks.c **** 
 3897              		.loc 1 2978 2 view .LVU1013
2978:./FreeRtos/src/tasks.c **** 
 3898              		.loc 1 2978 11 is_stmt 0 view .LVU1014
 3899 0016 2046     		mov	r0, r4
 3900 0018 FFF7FEFF 		bl	uxListRemove
 3901              	.LVL319:
2983:./FreeRtos/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3902              		.loc 1 2983 2 is_stmt 1 view .LVU1015
2983:./FreeRtos/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3903              		.loc 1 2983 11 is_stmt 0 view .LVU1016
 3904 001c 2C1D     		adds	r4, r5, #4
 3905              	.LVL320:
2983:./FreeRtos/src/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3906              		.loc 1 2983 11 view .LVU1017
 3907 001e 2046     		mov	r0, r4
 3908 0020 FFF7FEFF 		bl	uxListRemove
 3909              	.LVL321:
2984:./FreeRtos/src/tasks.c **** 
 3910              		.loc 1 2984 2 is_stmt 1 view .LVU1018
2984:./FreeRtos/src/tasks.c **** 
 3911              		.loc 1 2984 2 view .LVU1019
 3912 0024 E86A     		ldr	r0, [r5, #44]
 3913 0026 0123     		movs	r3, #1
 3914 0028 8340     		lsls	r3, r3, r0
 3915 002a 144A     		ldr	r2, .L318+4
 3916 002c 1168     		ldr	r1, [r2]
 3917 002e 0B43     		orrs	r3, r3, r1
 3918 0030 1360     		str	r3, [r2]
ARM GAS  /tmp/ccQvkfbu.s 			page 174


2984:./FreeRtos/src/tasks.c **** 
 3919              		.loc 1 2984 2 view .LVU1020
 3920 0032 00EB8000 		add	r0, r0, r0, lsl #2
 3921 0036 2146     		mov	r1, r4
 3922 0038 114B     		ldr	r3, .L318+8
 3923 003a 03EB8000 		add	r0, r3, r0, lsl #2
 3924 003e FFF7FEFF 		bl	vListInsertEnd
 3925              	.LVL322:
2984:./FreeRtos/src/tasks.c **** 
 3926              		.loc 1 2984 41 view .LVU1021
2986:./FreeRtos/src/tasks.c **** 	{
 3927              		.loc 1 2986 2 view .LVU1022
2986:./FreeRtos/src/tasks.c **** 	{
 3928              		.loc 1 2986 20 is_stmt 0 view .LVU1023
 3929 0042 EA6A     		ldr	r2, [r5, #44]
2986:./FreeRtos/src/tasks.c **** 	{
 3930              		.loc 1 2986 47 view .LVU1024
 3931 0044 0F4B     		ldr	r3, .L318+12
 3932 0046 1B68     		ldr	r3, [r3]
 3933 0048 DB6A     		ldr	r3, [r3, #44]
2986:./FreeRtos/src/tasks.c **** 	{
 3934              		.loc 1 2986 4 view .LVU1025
 3935 004a 9A42     		cmp	r2, r3
 3936 004c 11D9     		bls	.L314
2992:./FreeRtos/src/tasks.c **** 
 3937              		.loc 1 2992 3 is_stmt 1 view .LVU1026
 3938              	.LVL323:
2996:./FreeRtos/src/tasks.c **** 	}
 3939              		.loc 1 2996 3 view .LVU1027
2996:./FreeRtos/src/tasks.c **** 	}
 3940              		.loc 1 2996 17 is_stmt 0 view .LVU1028
 3941 004e 0120     		movs	r0, #1
 3942 0050 0D4B     		ldr	r3, .L318+16
 3943 0052 1860     		str	r0, [r3]
 3944              	.LVL324:
 3945              	.L310:
3004:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 3946              		.loc 1 3004 1 view .LVU1029
 3947 0054 38BD     		pop	{r3, r4, r5, pc}
 3948              	.LVL325:
 3949              	.L316:
2969:./FreeRtos/src/tasks.c **** 
 3950              		.loc 1 2969 2 is_stmt 1 discriminator 1 view .LVU1030
 3951 0056 40F69932 		movw	r2, #2969
 3952 005a 0C49     		ldr	r1, .L318+20
 3953              	.LVL326:
2969:./FreeRtos/src/tasks.c **** 
 3954              		.loc 1 2969 2 is_stmt 0 discriminator 1 view .LVU1031
 3955 005c 0C48     		ldr	r0, .L318+24
 3956              	.LVL327:
2969:./FreeRtos/src/tasks.c **** 
 3957              		.loc 1 2969 2 discriminator 1 view .LVU1032
 3958 005e FFF7FEFF 		bl	printf
 3959              	.LVL328:
 3960 0062 D3E7     		b	.L311
 3961              	.LVL329:
 3962              	.L317:
ARM GAS  /tmp/ccQvkfbu.s 			page 175


2977:./FreeRtos/src/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3963              		.loc 1 2977 2 is_stmt 1 discriminator 1 view .LVU1033
 3964 0064 40F6A132 		movw	r2, #2977
 3965 0068 0849     		ldr	r1, .L318+20
 3966 006a 0948     		ldr	r0, .L318+24
 3967 006c FFF7FEFF 		bl	printf
 3968              	.LVL330:
 3969 0070 D1E7     		b	.L312
 3970              	.LVL331:
 3971              	.L314:
3000:./FreeRtos/src/tasks.c **** 	}
 3972              		.loc 1 3000 11 is_stmt 0 view .LVU1034
 3973 0072 0020     		movs	r0, #0
 3974              	.LVL332:
3003:./FreeRtos/src/tasks.c **** }
 3975              		.loc 1 3003 2 is_stmt 1 view .LVU1035
3003:./FreeRtos/src/tasks.c **** }
 3976              		.loc 1 3003 9 is_stmt 0 view .LVU1036
 3977 0074 EEE7     		b	.L310
 3978              	.L319:
 3979 0076 00BF     		.align	2
 3980              	.L318:
 3981 0078 00000000 		.word	.LANCHOR16
 3982 007c 00000000 		.word	.LANCHOR13
 3983 0080 00000000 		.word	.LANCHOR4
 3984 0084 00000000 		.word	.LANCHOR10
 3985 0088 00000000 		.word	.LANCHOR20
 3986 008c 00000000 		.word	.LC0
 3987 0090 18000000 		.word	.LC1
 3988              		.cfi_endproc
 3989              	.LFE158:
 3991              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3992              		.align	1
 3993              		.global	vTaskSetTimeOutState
 3994              		.syntax unified
 3995              		.thumb
 3996              		.thumb_func
 3997              		.fpu fpv4-sp-d16
 3999              	vTaskSetTimeOutState:
 4000              	.LVL333:
 4001              	.LFB159:
3008:./FreeRtos/src/tasks.c **** 	configASSERT( pxTimeOut );
 4002              		.loc 1 3008 1 is_stmt 1 view -0
 4003              		.cfi_startproc
 4004              		@ args = 0, pretend = 0, frame = 0
 4005              		@ frame_needed = 0, uses_anonymous_args = 0
3008:./FreeRtos/src/tasks.c **** 	configASSERT( pxTimeOut );
 4006              		.loc 1 3008 1 is_stmt 0 view .LVU1038
 4007 0000 10B5     		push	{r4, lr}
 4008              	.LCFI37:
 4009              		.cfi_def_cfa_offset 8
 4010              		.cfi_offset 4, -8
 4011              		.cfi_offset 14, -4
3009:./FreeRtos/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4012              		.loc 1 3009 2 is_stmt 1 view .LVU1039
 4013 0002 0446     		mov	r4, r0
 4014 0004 30B1     		cbz	r0, .L323
ARM GAS  /tmp/ccQvkfbu.s 			page 176


 4015              	.LVL334:
 4016              	.L321:
3010:./FreeRtos/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4017              		.loc 1 3010 2 view .LVU1040
3010:./FreeRtos/src/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 4018              		.loc 1 3010 28 is_stmt 0 view .LVU1041
 4019 0006 074B     		ldr	r3, .L324
 4020 0008 1B68     		ldr	r3, [r3]
 4021 000a 2360     		str	r3, [r4]
3011:./FreeRtos/src/tasks.c **** }
 4022              		.loc 1 3011 2 is_stmt 1 view .LVU1042
3011:./FreeRtos/src/tasks.c **** }
 4023              		.loc 1 3011 29 is_stmt 0 view .LVU1043
 4024 000c 064B     		ldr	r3, .L324+4
 4025 000e 1B68     		ldr	r3, [r3]
 4026 0010 6360     		str	r3, [r4, #4]
3012:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 4027              		.loc 1 3012 1 view .LVU1044
 4028 0012 10BD     		pop	{r4, pc}
 4029              	.LVL335:
 4030              	.L323:
3009:./FreeRtos/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4031              		.loc 1 3009 2 is_stmt 1 discriminator 1 view .LVU1045
 4032 0014 40F6C132 		movw	r2, #3009
 4033 0018 0449     		ldr	r1, .L324+8
 4034 001a 0548     		ldr	r0, .L324+12
 4035              	.LVL336:
3009:./FreeRtos/src/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 4036              		.loc 1 3009 2 is_stmt 0 discriminator 1 view .LVU1046
 4037 001c FFF7FEFF 		bl	printf
 4038              	.LVL337:
 4039 0020 F1E7     		b	.L321
 4040              	.L325:
 4041 0022 00BF     		.align	2
 4042              	.L324:
 4043 0024 00000000 		.word	.LANCHOR18
 4044 0028 00000000 		.word	.LANCHOR14
 4045 002c 00000000 		.word	.LC0
 4046 0030 18000000 		.word	.LC1
 4047              		.cfi_endproc
 4048              	.LFE159:
 4050              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 4051              		.align	1
 4052              		.global	xTaskCheckForTimeOut
 4053              		.syntax unified
 4054              		.thumb
 4055              		.thumb_func
 4056              		.fpu fpv4-sp-d16
 4058              	xTaskCheckForTimeOut:
 4059              	.LVL338:
 4060              	.LFB160:
3016:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
 4061              		.loc 1 3016 1 is_stmt 1 view -0
 4062              		.cfi_startproc
 4063              		@ args = 0, pretend = 0, frame = 0
 4064              		@ frame_needed = 0, uses_anonymous_args = 0
3016:./FreeRtos/src/tasks.c **** BaseType_t xReturn;
ARM GAS  /tmp/ccQvkfbu.s 			page 177


 4065              		.loc 1 3016 1 is_stmt 0 view .LVU1048
 4066 0000 38B5     		push	{r3, r4, r5, lr}
 4067              	.LCFI38:
 4068              		.cfi_def_cfa_offset 16
 4069              		.cfi_offset 3, -16
 4070              		.cfi_offset 4, -12
 4071              		.cfi_offset 5, -8
 4072              		.cfi_offset 14, -4
 4073 0002 0C46     		mov	r4, r1
3017:./FreeRtos/src/tasks.c **** 
 4074              		.loc 1 3017 1 is_stmt 1 view .LVU1049
3019:./FreeRtos/src/tasks.c **** 	configASSERT( pxTicksToWait );
 4075              		.loc 1 3019 2 view .LVU1050
 4076 0004 0546     		mov	r5, r0
 4077 0006 B0B1     		cbz	r0, .L335
 4078              	.LVL339:
 4079              	.L327:
3020:./FreeRtos/src/tasks.c **** 
 4080              		.loc 1 3020 2 view .LVU1051
 4081 0008 E4B1     		cbz	r4, .L336
 4082              	.L328:
3022:./FreeRtos/src/tasks.c **** 	{
 4083              		.loc 1 3022 2 view .LVU1052
 4084 000a FFF7FEFF 		bl	vPortEnterCritical
 4085              	.LVL340:
 4086              	.LBB60:
3025:./FreeRtos/src/tasks.c **** 
 4087              		.loc 1 3025 3 view .LVU1053
3025:./FreeRtos/src/tasks.c **** 
 4088              		.loc 1 3025 20 is_stmt 0 view .LVU1054
 4089 000e 184B     		ldr	r3, .L338
 4090 0010 1A68     		ldr	r2, [r3]
 4091              	.LVL341:
3039:./FreeRtos/src/tasks.c **** 			{
 4092              		.loc 1 3039 4 is_stmt 1 view .LVU1055
3039:./FreeRtos/src/tasks.c **** 			{
 4093              		.loc 1 3039 8 is_stmt 0 view .LVU1056
 4094 0012 2368     		ldr	r3, [r4]
3039:./FreeRtos/src/tasks.c **** 			{
 4095              		.loc 1 3039 6 view .LVU1057
 4096 0014 B3F1FF3F 		cmp	r3, #-1
 4097 0018 23D0     		beq	.L331
3049:./FreeRtos/src/tasks.c **** 		{
 4098              		.loc 1 3049 3 is_stmt 1 view .LVU1058
3049:./FreeRtos/src/tasks.c **** 		{
 4099              		.loc 1 3049 37 is_stmt 0 view .LVU1059
 4100 001a 2868     		ldr	r0, [r5]
3049:./FreeRtos/src/tasks.c **** 		{
 4101              		.loc 1 3049 25 view .LVU1060
 4102 001c 1549     		ldr	r1, .L338+4
 4103 001e 0968     		ldr	r1, [r1]
3049:./FreeRtos/src/tasks.c **** 		{
 4104              		.loc 1 3049 5 view .LVU1061
 4105 0020 8842     		cmp	r0, r1
 4106 0022 02D0     		beq	.L330
3049:./FreeRtos/src/tasks.c **** 		{
 4107              		.loc 1 3049 89 discriminator 1 view .LVU1062
ARM GAS  /tmp/ccQvkfbu.s 			page 178


 4108 0024 6968     		ldr	r1, [r5, #4]
3049:./FreeRtos/src/tasks.c **** 		{
 4109              		.loc 1 3049 56 discriminator 1 view .LVU1063
 4110 0026 9142     		cmp	r1, r2
 4111 0028 20D9     		bls	.L332
 4112              	.L330:
3058:./FreeRtos/src/tasks.c **** 		{
 4113              		.loc 1 3058 8 is_stmt 1 view .LVU1064
3058:./FreeRtos/src/tasks.c **** 		{
 4114              		.loc 1 3058 58 is_stmt 0 view .LVU1065
 4115 002a 6968     		ldr	r1, [r5, #4]
3058:./FreeRtos/src/tasks.c **** 		{
 4116              		.loc 1 3058 14 view .LVU1066
 4117 002c 501A     		subs	r0, r2, r1
3058:./FreeRtos/src/tasks.c **** 		{
 4118              		.loc 1 3058 10 view .LVU1067
 4119 002e 8342     		cmp	r3, r0
 4120 0030 0FD8     		bhi	.L337
3067:./FreeRtos/src/tasks.c **** 		}
 4121              		.loc 1 3067 12 view .LVU1068
 4122 0032 0124     		movs	r4, #1
 4123              	.LVL342:
3067:./FreeRtos/src/tasks.c **** 		}
 4124              		.loc 1 3067 12 view .LVU1069
 4125 0034 16E0     		b	.L329
 4126              	.LVL343:
 4127              	.L335:
3067:./FreeRtos/src/tasks.c **** 		}
 4128              		.loc 1 3067 12 view .LVU1070
 4129              	.LBE60:
3019:./FreeRtos/src/tasks.c **** 	configASSERT( pxTicksToWait );
 4130              		.loc 1 3019 2 is_stmt 1 discriminator 1 view .LVU1071
 4131 0036 40F6CB32 		movw	r2, #3019
 4132 003a 0F49     		ldr	r1, .L338+8
 4133              	.LVL344:
3019:./FreeRtos/src/tasks.c **** 	configASSERT( pxTicksToWait );
 4134              		.loc 1 3019 2 is_stmt 0 discriminator 1 view .LVU1072
 4135 003c 0F48     		ldr	r0, .L338+12
 4136              	.LVL345:
3019:./FreeRtos/src/tasks.c **** 	configASSERT( pxTicksToWait );
 4137              		.loc 1 3019 2 discriminator 1 view .LVU1073
 4138 003e FFF7FEFF 		bl	printf
 4139              	.LVL346:
 4140 0042 E1E7     		b	.L327
 4141              	.L336:
3020:./FreeRtos/src/tasks.c **** 
 4142              		.loc 1 3020 2 is_stmt 1 discriminator 1 view .LVU1074
 4143 0044 40F6CC32 		movw	r2, #3020
 4144 0048 0B49     		ldr	r1, .L338+8
 4145 004a 0C48     		ldr	r0, .L338+12
 4146 004c FFF7FEFF 		bl	printf
 4147              	.LVL347:
 4148 0050 DBE7     		b	.L328
 4149              	.LVL348:
 4150              	.L337:
 4151              	.LBB61:
3061:./FreeRtos/src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
ARM GAS  /tmp/ccQvkfbu.s 			page 179


 4152              		.loc 1 3061 4 view .LVU1075
3061:./FreeRtos/src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 4153              		.loc 1 3061 19 is_stmt 0 view .LVU1076
 4154 0052 8A1A     		subs	r2, r1, r2
 4155              	.LVL349:
3061:./FreeRtos/src/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 4156              		.loc 1 3061 19 view .LVU1077
 4157 0054 1344     		add	r3, r3, r2
 4158 0056 2360     		str	r3, [r4]
3062:./FreeRtos/src/tasks.c **** 			xReturn = pdFALSE;
 4159              		.loc 1 3062 4 is_stmt 1 view .LVU1078
 4160 0058 2846     		mov	r0, r5
 4161 005a FFF7FEFF 		bl	vTaskSetTimeOutState
 4162              	.LVL350:
3063:./FreeRtos/src/tasks.c **** 		}
 4163              		.loc 1 3063 4 view .LVU1079
3063:./FreeRtos/src/tasks.c **** 		}
 4164              		.loc 1 3063 12 is_stmt 0 view .LVU1080
 4165 005e 0024     		movs	r4, #0
 4166              	.LVL351:
3063:./FreeRtos/src/tasks.c **** 		}
 4167              		.loc 1 3063 12 view .LVU1081
 4168 0060 00E0     		b	.L329
 4169              	.LVL352:
 4170              	.L331:
3044:./FreeRtos/src/tasks.c **** 			}
 4171              		.loc 1 3044 13 view .LVU1082
 4172 0062 0024     		movs	r4, #0
 4173              	.LVL353:
 4174              	.L329:
3044:./FreeRtos/src/tasks.c **** 			}
 4175              		.loc 1 3044 13 view .LVU1083
 4176              	.LBE61:
3070:./FreeRtos/src/tasks.c **** 
 4177              		.loc 1 3070 2 is_stmt 1 view .LVU1084
 4178 0064 FFF7FEFF 		bl	vPortExitCritical
 4179              	.LVL354:
3072:./FreeRtos/src/tasks.c **** }
 4180              		.loc 1 3072 2 view .LVU1085
3073:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 4181              		.loc 1 3073 1 is_stmt 0 view .LVU1086
 4182 0068 2046     		mov	r0, r4
 4183 006a 38BD     		pop	{r3, r4, r5, pc}
 4184              	.LVL355:
 4185              	.L332:
 4186              	.LBB62:
3056:./FreeRtos/src/tasks.c **** 		}
 4187              		.loc 1 3056 12 view .LVU1087
 4188 006c 0124     		movs	r4, #1
 4189              	.LVL356:
3056:./FreeRtos/src/tasks.c **** 		}
 4190              		.loc 1 3056 12 view .LVU1088
 4191 006e F9E7     		b	.L329
 4192              	.L339:
 4193              		.align	2
 4194              	.L338:
 4195 0070 00000000 		.word	.LANCHOR14
ARM GAS  /tmp/ccQvkfbu.s 			page 180


 4196 0074 00000000 		.word	.LANCHOR18
 4197 0078 00000000 		.word	.LC0
 4198 007c 18000000 		.word	.LC1
 4199              	.LBE62:
 4200              		.cfi_endproc
 4201              	.LFE160:
 4203              		.section	.text.vTaskMissedYield,"ax",%progbits
 4204              		.align	1
 4205              		.global	vTaskMissedYield
 4206              		.syntax unified
 4207              		.thumb
 4208              		.thumb_func
 4209              		.fpu fpv4-sp-d16
 4211              	vTaskMissedYield:
 4212              	.LFB161:
3077:./FreeRtos/src/tasks.c **** 	xYieldPending = pdTRUE;
 4213              		.loc 1 3077 1 is_stmt 1 view -0
 4214              		.cfi_startproc
 4215              		@ args = 0, pretend = 0, frame = 0
 4216              		@ frame_needed = 0, uses_anonymous_args = 0
 4217              		@ link register save eliminated.
3078:./FreeRtos/src/tasks.c **** }
 4218              		.loc 1 3078 2 view .LVU1090
3078:./FreeRtos/src/tasks.c **** }
 4219              		.loc 1 3078 16 is_stmt 0 view .LVU1091
 4220 0000 014B     		ldr	r3, .L341
 4221 0002 0122     		movs	r2, #1
 4222 0004 1A60     		str	r2, [r3]
3079:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 4223              		.loc 1 3079 1 view .LVU1092
 4224 0006 7047     		bx	lr
 4225              	.L342:
 4226              		.align	2
 4227              	.L341:
 4228 0008 00000000 		.word	.LANCHOR20
 4229              		.cfi_endproc
 4230              	.LFE161:
 4232              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4233              		.align	1
 4234              		.global	xTaskGetSchedulerState
 4235              		.syntax unified
 4236              		.thumb
 4237              		.thumb_func
 4238              		.fpu fpv4-sp-d16
 4240              	xTaskGetSchedulerState:
 4241              	.LFB167:
3679:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
 4242              		.loc 1 3679 2 is_stmt 1 view -0
 4243              		.cfi_startproc
 4244              		@ args = 0, pretend = 0, frame = 0
 4245              		@ frame_needed = 0, uses_anonymous_args = 0
 4246              		@ link register save eliminated.
3680:./FreeRtos/src/tasks.c **** 
 4247              		.loc 1 3680 2 view .LVU1094
3682:./FreeRtos/src/tasks.c **** 		{
 4248              		.loc 1 3682 3 view .LVU1095
3682:./FreeRtos/src/tasks.c **** 		{
ARM GAS  /tmp/ccQvkfbu.s 			page 181


 4249              		.loc 1 3682 25 is_stmt 0 view .LVU1096
 4250 0000 054B     		ldr	r3, .L348
 4251 0002 1B68     		ldr	r3, [r3]
3682:./FreeRtos/src/tasks.c **** 		{
 4252              		.loc 1 3682 5 view .LVU1097
 4253 0004 33B1     		cbz	r3, .L345
3688:./FreeRtos/src/tasks.c **** 			{
 4254              		.loc 1 3688 4 is_stmt 1 view .LVU1098
3688:./FreeRtos/src/tasks.c **** 			{
 4255              		.loc 1 3688 29 is_stmt 0 view .LVU1099
 4256 0006 054B     		ldr	r3, .L348+4
 4257 0008 1B68     		ldr	r3, [r3]
3688:./FreeRtos/src/tasks.c **** 			{
 4258              		.loc 1 3688 6 view .LVU1100
 4259 000a 0BB1     		cbz	r3, .L347
3694:./FreeRtos/src/tasks.c **** 			}
 4260              		.loc 1 3694 13 view .LVU1101
 4261 000c 0020     		movs	r0, #0
 4262              	.LVL357:
3698:./FreeRtos/src/tasks.c **** 	}
 4263              		.loc 1 3698 3 is_stmt 1 view .LVU1102
3699:./FreeRtos/src/tasks.c **** 
 4264              		.loc 1 3699 2 is_stmt 0 view .LVU1103
 4265 000e 7047     		bx	lr
 4266              	.LVL358:
 4267              	.L347:
3690:./FreeRtos/src/tasks.c **** 			}
 4268              		.loc 1 3690 13 view .LVU1104
 4269 0010 0220     		movs	r0, #2
 4270 0012 7047     		bx	lr
 4271              	.L345:
3684:./FreeRtos/src/tasks.c **** 		}
 4272              		.loc 1 3684 12 view .LVU1105
 4273 0014 0120     		movs	r0, #1
 4274 0016 7047     		bx	lr
 4275              	.L349:
 4276              		.align	2
 4277              	.L348:
 4278 0018 00000000 		.word	.LANCHOR11
 4279 001c 00000000 		.word	.LANCHOR16
 4280              		.cfi_endproc
 4281              	.LFE167:
 4283              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4284              		.align	1
 4285              		.global	uxTaskResetEventItemValue
 4286              		.syntax unified
 4287              		.thumb
 4288              		.thumb_func
 4289              		.fpu fpv4-sp-d16
 4291              	uxTaskResetEventItemValue:
 4292              	.LFB168:
4163:./FreeRtos/src/tasks.c **** TickType_t uxReturn;
 4293              		.loc 1 4163 1 is_stmt 1 view -0
 4294              		.cfi_startproc
 4295              		@ args = 0, pretend = 0, frame = 0
 4296              		@ frame_needed = 0, uses_anonymous_args = 0
 4297              		@ link register save eliminated.
ARM GAS  /tmp/ccQvkfbu.s 			page 182


4164:./FreeRtos/src/tasks.c **** 
 4298              		.loc 1 4164 1 view .LVU1107
4166:./FreeRtos/src/tasks.c **** 
 4299              		.loc 1 4166 2 view .LVU1108
4166:./FreeRtos/src/tasks.c **** 
 4300              		.loc 1 4166 13 is_stmt 0 view .LVU1109
 4301 0000 044A     		ldr	r2, .L351
 4302 0002 1368     		ldr	r3, [r2]
4166:./FreeRtos/src/tasks.c **** 
 4303              		.loc 1 4166 11 view .LVU1110
 4304 0004 9869     		ldr	r0, [r3, #24]
 4305              	.LVL359:
4170:./FreeRtos/src/tasks.c **** 
 4306              		.loc 1 4170 2 is_stmt 1 view .LVU1111
 4307 0006 1368     		ldr	r3, [r2]
 4308 0008 DB6A     		ldr	r3, [r3, #44]
 4309 000a 1268     		ldr	r2, [r2]
 4310 000c C3F12003 		rsb	r3, r3, #32
 4311 0010 9361     		str	r3, [r2, #24]
4172:./FreeRtos/src/tasks.c **** }
 4312              		.loc 1 4172 2 view .LVU1112
4173:./FreeRtos/src/tasks.c **** /*-----------------------------------------------------------*/
 4313              		.loc 1 4173 1 is_stmt 0 view .LVU1113
 4314 0012 7047     		bx	lr
 4315              	.L352:
 4316              		.align	2
 4317              	.L351:
 4318 0014 00000000 		.word	.LANCHOR10
 4319              		.cfi_endproc
 4320              	.LFE168:
 4322              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4323              		.align	1
 4324              		.global	ulTaskNotifyTake
 4325              		.syntax unified
 4326              		.thumb
 4327              		.thumb_func
 4328              		.fpu fpv4-sp-d16
 4330              	ulTaskNotifyTake:
 4331              	.LVL360:
 4332              	.LFB169:
4196:./FreeRtos/src/tasks.c **** 	uint32_t ulReturn;
 4333              		.loc 1 4196 2 is_stmt 1 view -0
 4334              		.cfi_startproc
 4335              		@ args = 0, pretend = 0, frame = 0
 4336              		@ frame_needed = 0, uses_anonymous_args = 0
4196:./FreeRtos/src/tasks.c **** 	uint32_t ulReturn;
 4337              		.loc 1 4196 2 is_stmt 0 view .LVU1115
 4338 0000 38B5     		push	{r3, r4, r5, lr}
 4339              	.LCFI39:
 4340              		.cfi_def_cfa_offset 16
 4341              		.cfi_offset 3, -16
 4342              		.cfi_offset 4, -12
 4343              		.cfi_offset 5, -8
 4344              		.cfi_offset 14, -4
 4345 0002 0546     		mov	r5, r0
 4346 0004 0C46     		mov	r4, r1
4197:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 183


 4347              		.loc 1 4197 2 is_stmt 1 view .LVU1116
4199:./FreeRtos/src/tasks.c **** 		{
 4348              		.loc 1 4199 3 view .LVU1117
 4349 0006 FFF7FEFF 		bl	vPortEnterCritical
 4350              	.LVL361:
4202:./FreeRtos/src/tasks.c **** 			{
 4351              		.loc 1 4202 4 view .LVU1118
4202:./FreeRtos/src/tasks.c **** 			{
 4352              		.loc 1 4202 20 is_stmt 0 view .LVU1119
 4353 000a 1A4B     		ldr	r3, .L359
 4354 000c 1B68     		ldr	r3, [r3]
 4355 000e 5B6C     		ldr	r3, [r3, #68]
4202:./FreeRtos/src/tasks.c **** 			{
 4356              		.loc 1 4202 6 view .LVU1120
 4357 0010 2BB9     		cbnz	r3, .L354
4205:./FreeRtos/src/tasks.c **** 
 4358              		.loc 1 4205 5 is_stmt 1 view .LVU1121
4205:./FreeRtos/src/tasks.c **** 
 4359              		.loc 1 4205 17 is_stmt 0 view .LVU1122
 4360 0012 184B     		ldr	r3, .L359
 4361 0014 1B68     		ldr	r3, [r3]
4205:./FreeRtos/src/tasks.c **** 
 4362              		.loc 1 4205 33 view .LVU1123
 4363 0016 0122     		movs	r2, #1
 4364 0018 83F84820 		strb	r2, [r3, #72]
4207:./FreeRtos/src/tasks.c **** 				{
 4365              		.loc 1 4207 5 is_stmt 1 view .LVU1124
4207:./FreeRtos/src/tasks.c **** 				{
 4366              		.loc 1 4207 7 is_stmt 0 view .LVU1125
 4367 001c ACB9     		cbnz	r4, .L358
 4368              	.L354:
4225:./FreeRtos/src/tasks.c **** 			}
 4369              		.loc 1 4225 29 is_stmt 1 view .LVU1126
4228:./FreeRtos/src/tasks.c **** 
 4370              		.loc 1 4228 3 view .LVU1127
 4371 001e FFF7FEFF 		bl	vPortExitCritical
 4372              	.LVL362:
4230:./FreeRtos/src/tasks.c **** 		{
 4373              		.loc 1 4230 3 view .LVU1128
 4374 0022 FFF7FEFF 		bl	vPortEnterCritical
 4375              	.LVL363:
4232:./FreeRtos/src/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4376              		.loc 1 4232 27 view .LVU1129
4233:./FreeRtos/src/tasks.c **** 
 4377              		.loc 1 4233 4 view .LVU1130
4233:./FreeRtos/src/tasks.c **** 
 4378              		.loc 1 4233 27 is_stmt 0 view .LVU1131
 4379 0026 134B     		ldr	r3, .L359
 4380 0028 1B68     		ldr	r3, [r3]
4233:./FreeRtos/src/tasks.c **** 
 4381              		.loc 1 4233 13 view .LVU1132
 4382 002a 5C6C     		ldr	r4, [r3, #68]
 4383              	.LVL364:
4235:./FreeRtos/src/tasks.c **** 			{
 4384              		.loc 1 4235 4 is_stmt 1 view .LVU1133
4235:./FreeRtos/src/tasks.c **** 			{
 4385              		.loc 1 4235 6 is_stmt 0 view .LVU1134
ARM GAS  /tmp/ccQvkfbu.s 			page 184


 4386 002c 24B1     		cbz	r4, .L355
4237:./FreeRtos/src/tasks.c **** 				{
 4387              		.loc 1 4237 5 is_stmt 1 view .LVU1135
4237:./FreeRtos/src/tasks.c **** 				{
 4388              		.loc 1 4237 7 is_stmt 0 view .LVU1136
 4389 002e DDB1     		cbz	r5, .L356
4239:./FreeRtos/src/tasks.c **** 				}
 4390              		.loc 1 4239 6 is_stmt 1 view .LVU1137
4239:./FreeRtos/src/tasks.c **** 				}
 4391              		.loc 1 4239 18 is_stmt 0 view .LVU1138
 4392 0030 104B     		ldr	r3, .L359
 4393 0032 1B68     		ldr	r3, [r3]
4239:./FreeRtos/src/tasks.c **** 				}
 4394              		.loc 1 4239 36 view .LVU1139
 4395 0034 0022     		movs	r2, #0
 4396 0036 5A64     		str	r2, [r3, #68]
 4397              	.L355:
4248:./FreeRtos/src/tasks.c **** 			}
 4398              		.loc 1 4248 29 is_stmt 1 view .LVU1140
4251:./FreeRtos/src/tasks.c **** 		}
 4399              		.loc 1 4251 4 view .LVU1141
4251:./FreeRtos/src/tasks.c **** 		}
 4400              		.loc 1 4251 16 is_stmt 0 view .LVU1142
 4401 0038 0E4B     		ldr	r3, .L359
 4402 003a 1B68     		ldr	r3, [r3]
4251:./FreeRtos/src/tasks.c **** 		}
 4403              		.loc 1 4251 32 view .LVU1143
 4404 003c 0022     		movs	r2, #0
 4405 003e 83F84820 		strb	r2, [r3, #72]
4253:./FreeRtos/src/tasks.c **** 
 4406              		.loc 1 4253 3 is_stmt 1 view .LVU1144
 4407 0042 FFF7FEFF 		bl	vPortExitCritical
 4408              	.LVL365:
4255:./FreeRtos/src/tasks.c **** 	}
 4409              		.loc 1 4255 3 view .LVU1145
4256:./FreeRtos/src/tasks.c **** 
 4410              		.loc 1 4256 2 is_stmt 0 view .LVU1146
 4411 0046 2046     		mov	r0, r4
 4412 0048 38BD     		pop	{r3, r4, r5, pc}
 4413              	.LVL366:
 4414              	.L358:
4209:./FreeRtos/src/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4415              		.loc 1 4209 6 is_stmt 1 view .LVU1147
 4416 004a 1146     		mov	r1, r2
 4417 004c 2046     		mov	r0, r4
 4418 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4419              	.LVL367:
4210:./FreeRtos/src/tasks.c **** 
 4420              		.loc 1 4210 35 view .LVU1148
4216:./FreeRtos/src/tasks.c **** 				}
 4421              		.loc 1 4216 6 view .LVU1149
 4422 0052 4FF0E023 		mov	r3, #-536813568
 4423 0056 4FF08052 		mov	r2, #268435456
 4424 005a C3F8042D 		str	r2, [r3, #3332]
4216:./FreeRtos/src/tasks.c **** 				}
 4425              		.loc 1 4216 6 view .LVU1150
 4426              		.syntax unified
ARM GAS  /tmp/ccQvkfbu.s 			page 185


 4427              	@ 4216 "./FreeRtos/src/tasks.c" 1
 4428 005e BFF34F8F 		dsb
 4429              	@ 0 "" 2
4216:./FreeRtos/src/tasks.c **** 				}
 4430              		.loc 1 4216 6 view .LVU1151
 4431              	@ 4216 "./FreeRtos/src/tasks.c" 1
 4432 0062 BFF36F8F 		isb
 4433              	@ 0 "" 2
4216:./FreeRtos/src/tasks.c **** 				}
 4434              		.loc 1 4216 28 view .LVU1152
 4435              		.thumb
 4436              		.syntax unified
 4437 0066 DAE7     		b	.L354
 4438              	.LVL368:
 4439              	.L356:
4243:./FreeRtos/src/tasks.c **** 				}
 4440              		.loc 1 4243 6 view .LVU1153
4243:./FreeRtos/src/tasks.c **** 				}
 4441              		.loc 1 4243 18 is_stmt 0 view .LVU1154
 4442 0068 024B     		ldr	r3, .L359
 4443 006a 1B68     		ldr	r3, [r3]
4243:./FreeRtos/src/tasks.c **** 				}
 4444              		.loc 1 4243 47 view .LVU1155
 4445 006c 621E     		subs	r2, r4, #1
4243:./FreeRtos/src/tasks.c **** 				}
 4446              		.loc 1 4243 36 view .LVU1156
 4447 006e 5A64     		str	r2, [r3, #68]
 4448 0070 E2E7     		b	.L355
 4449              	.L360:
 4450 0072 00BF     		.align	2
 4451              	.L359:
 4452 0074 00000000 		.word	.LANCHOR10
 4453              		.cfi_endproc
 4454              	.LFE169:
 4456              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4457              		.align	1
 4458              		.global	xTaskNotifyWait
 4459              		.syntax unified
 4460              		.thumb
 4461              		.thumb_func
 4462              		.fpu fpv4-sp-d16
 4464              	xTaskNotifyWait:
 4465              	.LVL369:
 4466              	.LFB170:
4264:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
 4467              		.loc 1 4264 2 is_stmt 1 view -0
 4468              		.cfi_startproc
 4469              		@ args = 0, pretend = 0, frame = 0
 4470              		@ frame_needed = 0, uses_anonymous_args = 0
4264:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
 4471              		.loc 1 4264 2 is_stmt 0 view .LVU1158
 4472 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4473              	.LCFI40:
 4474              		.cfi_def_cfa_offset 24
 4475              		.cfi_offset 3, -24
 4476              		.cfi_offset 4, -20
 4477              		.cfi_offset 5, -16
ARM GAS  /tmp/ccQvkfbu.s 			page 186


 4478              		.cfi_offset 6, -12
 4479              		.cfi_offset 7, -8
 4480              		.cfi_offset 14, -4
 4481 0002 0746     		mov	r7, r0
 4482 0004 0E46     		mov	r6, r1
 4483 0006 1446     		mov	r4, r2
 4484 0008 1D46     		mov	r5, r3
4265:./FreeRtos/src/tasks.c **** 
 4485              		.loc 1 4265 2 is_stmt 1 view .LVU1159
4267:./FreeRtos/src/tasks.c **** 		{
 4486              		.loc 1 4267 3 view .LVU1160
 4487 000a FFF7FEFF 		bl	vPortEnterCritical
 4488              	.LVL370:
4270:./FreeRtos/src/tasks.c **** 			{
 4489              		.loc 1 4270 4 view .LVU1161
4270:./FreeRtos/src/tasks.c **** 			{
 4490              		.loc 1 4270 20 is_stmt 0 view .LVU1162
 4491 000e 214B     		ldr	r3, .L368
 4492 0010 1B68     		ldr	r3, [r3]
 4493 0012 93F84820 		ldrb	r2, [r3, #72]	@ zero_extendqisi2
 4494 0016 D2B2     		uxtb	r2, r2
4270:./FreeRtos/src/tasks.c **** 			{
 4495              		.loc 1 4270 6 view .LVU1163
 4496 0018 022A     		cmp	r2, #2
 4497 001a 0AD0     		beq	.L362
4275:./FreeRtos/src/tasks.c **** 
 4498              		.loc 1 4275 5 is_stmt 1 view .LVU1164
4275:./FreeRtos/src/tasks.c **** 
 4499              		.loc 1 4275 35 is_stmt 0 view .LVU1165
 4500 001c 1D4B     		ldr	r3, .L368
 4501 001e 1A68     		ldr	r2, [r3]
 4502 0020 506C     		ldr	r0, [r2, #68]
 4503 0022 20EA0707 		bic	r7, r0, r7
 4504              	.LVL371:
4275:./FreeRtos/src/tasks.c **** 
 4505              		.loc 1 4275 35 view .LVU1166
 4506 0026 5764     		str	r7, [r2, #68]
4278:./FreeRtos/src/tasks.c **** 
 4507              		.loc 1 4278 5 is_stmt 1 view .LVU1167
4278:./FreeRtos/src/tasks.c **** 
 4508              		.loc 1 4278 17 is_stmt 0 view .LVU1168
 4509 0028 1B68     		ldr	r3, [r3]
4278:./FreeRtos/src/tasks.c **** 
 4510              		.loc 1 4278 33 view .LVU1169
 4511 002a 0122     		movs	r2, #1
 4512 002c 83F84820 		strb	r2, [r3, #72]
4280:./FreeRtos/src/tasks.c **** 				{
 4513              		.loc 1 4280 5 is_stmt 1 view .LVU1170
4280:./FreeRtos/src/tasks.c **** 				{
 4514              		.loc 1 4280 7 is_stmt 0 view .LVU1171
 4515 0030 FDB9     		cbnz	r5, .L367
 4516              	.L362:
4298:./FreeRtos/src/tasks.c **** 			}
 4517              		.loc 1 4298 29 is_stmt 1 view .LVU1172
4301:./FreeRtos/src/tasks.c **** 
 4518              		.loc 1 4301 3 view .LVU1173
 4519 0032 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  /tmp/ccQvkfbu.s 			page 187


 4520              	.LVL372:
4303:./FreeRtos/src/tasks.c **** 		{
 4521              		.loc 1 4303 3 view .LVU1174
 4522 0036 FFF7FEFF 		bl	vPortEnterCritical
 4523              	.LVL373:
4305:./FreeRtos/src/tasks.c **** 
 4524              		.loc 1 4305 27 view .LVU1175
4307:./FreeRtos/src/tasks.c **** 			{
 4525              		.loc 1 4307 4 view .LVU1176
4307:./FreeRtos/src/tasks.c **** 			{
 4526              		.loc 1 4307 6 is_stmt 0 view .LVU1177
 4527 003a 1CB1     		cbz	r4, .L363
4311:./FreeRtos/src/tasks.c **** 			}
 4528              		.loc 1 4311 5 is_stmt 1 view .LVU1178
4311:./FreeRtos/src/tasks.c **** 			}
 4529              		.loc 1 4311 41 is_stmt 0 view .LVU1179
 4530 003c 154B     		ldr	r3, .L368
 4531 003e 1B68     		ldr	r3, [r3]
 4532 0040 5B6C     		ldr	r3, [r3, #68]
4311:./FreeRtos/src/tasks.c **** 			}
 4533              		.loc 1 4311 27 view .LVU1180
 4534 0042 2360     		str	r3, [r4]
 4535              	.L363:
4318:./FreeRtos/src/tasks.c **** 			{
 4536              		.loc 1 4318 4 is_stmt 1 view .LVU1181
4318:./FreeRtos/src/tasks.c **** 			{
 4537              		.loc 1 4318 20 is_stmt 0 view .LVU1182
 4538 0044 134B     		ldr	r3, .L368
 4539 0046 1B68     		ldr	r3, [r3]
 4540 0048 93F84830 		ldrb	r3, [r3, #72]	@ zero_extendqisi2
 4541 004c DBB2     		uxtb	r3, r3
4318:./FreeRtos/src/tasks.c **** 			{
 4542              		.loc 1 4318 6 view .LVU1183
 4543 004e 012B     		cmp	r3, #1
 4544 0050 1ED0     		beq	.L365
4327:./FreeRtos/src/tasks.c **** 				xReturn = pdTRUE;
 4545              		.loc 1 4327 5 is_stmt 1 view .LVU1184
4327:./FreeRtos/src/tasks.c **** 				xReturn = pdTRUE;
 4546              		.loc 1 4327 35 is_stmt 0 view .LVU1185
 4547 0052 104B     		ldr	r3, .L368
 4548 0054 1B68     		ldr	r3, [r3]
 4549 0056 596C     		ldr	r1, [r3, #68]
 4550 0058 21EA0606 		bic	r6, r1, r6
 4551              	.LVL374:
4327:./FreeRtos/src/tasks.c **** 				xReturn = pdTRUE;
 4552              		.loc 1 4327 35 view .LVU1186
 4553 005c 5E64     		str	r6, [r3, #68]
4328:./FreeRtos/src/tasks.c **** 			}
 4554              		.loc 1 4328 5 is_stmt 1 view .LVU1187
 4555              	.LVL375:
4328:./FreeRtos/src/tasks.c **** 			}
 4556              		.loc 1 4328 13 is_stmt 0 view .LVU1188
 4557 005e 0124     		movs	r4, #1
 4558              	.LVL376:
 4559              	.L364:
4331:./FreeRtos/src/tasks.c **** 		}
 4560              		.loc 1 4331 4 is_stmt 1 view .LVU1189
ARM GAS  /tmp/ccQvkfbu.s 			page 188


4331:./FreeRtos/src/tasks.c **** 		}
 4561              		.loc 1 4331 16 is_stmt 0 view .LVU1190
 4562 0060 0C4B     		ldr	r3, .L368
 4563 0062 1B68     		ldr	r3, [r3]
4331:./FreeRtos/src/tasks.c **** 		}
 4564              		.loc 1 4331 32 view .LVU1191
 4565 0064 0022     		movs	r2, #0
 4566 0066 83F84820 		strb	r2, [r3, #72]
4333:./FreeRtos/src/tasks.c **** 
 4567              		.loc 1 4333 3 is_stmt 1 view .LVU1192
 4568 006a FFF7FEFF 		bl	vPortExitCritical
 4569              	.LVL377:
4335:./FreeRtos/src/tasks.c **** 	}
 4570              		.loc 1 4335 3 view .LVU1193
4336:./FreeRtos/src/tasks.c **** 
 4571              		.loc 1 4336 2 is_stmt 0 view .LVU1194
 4572 006e 2046     		mov	r0, r4
 4573 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4574              	.LVL378:
 4575              	.L367:
4282:./FreeRtos/src/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4576              		.loc 1 4282 6 is_stmt 1 view .LVU1195
 4577 0072 1146     		mov	r1, r2
 4578 0074 2846     		mov	r0, r5
 4579 0076 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4580              	.LVL379:
4283:./FreeRtos/src/tasks.c **** 
 4581              		.loc 1 4283 35 view .LVU1196
4289:./FreeRtos/src/tasks.c **** 				}
 4582              		.loc 1 4289 6 view .LVU1197
 4583 007a 4FF0E023 		mov	r3, #-536813568
 4584 007e 4FF08052 		mov	r2, #268435456
 4585 0082 C3F8042D 		str	r2, [r3, #3332]
4289:./FreeRtos/src/tasks.c **** 				}
 4586              		.loc 1 4289 6 view .LVU1198
 4587              		.syntax unified
 4588              	@ 4289 "./FreeRtos/src/tasks.c" 1
 4589 0086 BFF34F8F 		dsb
 4590              	@ 0 "" 2
4289:./FreeRtos/src/tasks.c **** 				}
 4591              		.loc 1 4289 6 view .LVU1199
 4592              	@ 4289 "./FreeRtos/src/tasks.c" 1
 4593 008a BFF36F8F 		isb
 4594              	@ 0 "" 2
4289:./FreeRtos/src/tasks.c **** 				}
 4595              		.loc 1 4289 28 view .LVU1200
 4596              		.thumb
 4597              		.syntax unified
 4598 008e D0E7     		b	.L362
 4599              	.L365:
4321:./FreeRtos/src/tasks.c **** 			}
 4600              		.loc 1 4321 13 is_stmt 0 view .LVU1201
 4601 0090 0024     		movs	r4, #0
 4602              	.LVL380:
4321:./FreeRtos/src/tasks.c **** 			}
 4603              		.loc 1 4321 13 view .LVU1202
 4604 0092 E5E7     		b	.L364
ARM GAS  /tmp/ccQvkfbu.s 			page 189


 4605              	.L369:
 4606              		.align	2
 4607              	.L368:
 4608 0094 00000000 		.word	.LANCHOR10
 4609              		.cfi_endproc
 4610              	.LFE170:
 4612              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4613              		.align	1
 4614              		.global	xTaskGenericNotify
 4615              		.syntax unified
 4616              		.thumb
 4617              		.thumb_func
 4618              		.fpu fpv4-sp-d16
 4620              	xTaskGenericNotify:
 4621              	.LVL381:
 4622              	.LFB171:
4344:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
 4623              		.loc 1 4344 2 is_stmt 1 view -0
 4624              		.cfi_startproc
 4625              		@ args = 0, pretend = 0, frame = 0
 4626              		@ frame_needed = 0, uses_anonymous_args = 0
4344:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
 4627              		.loc 1 4344 2 is_stmt 0 view .LVU1204
 4628 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4629              	.LCFI41:
 4630              		.cfi_def_cfa_offset 24
 4631              		.cfi_offset 3, -24
 4632              		.cfi_offset 4, -20
 4633              		.cfi_offset 5, -16
 4634              		.cfi_offset 6, -12
 4635              		.cfi_offset 7, -8
 4636              		.cfi_offset 14, -4
 4637 0002 0F46     		mov	r7, r1
 4638 0004 1546     		mov	r5, r2
 4639 0006 1E46     		mov	r6, r3
4345:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4640              		.loc 1 4345 2 is_stmt 1 view .LVU1205
4346:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4641              		.loc 1 4346 2 view .LVU1206
 4642              	.LVL382:
4347:./FreeRtos/src/tasks.c **** 
 4643              		.loc 1 4347 2 view .LVU1207
4349:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4644              		.loc 1 4349 3 view .LVU1208
 4645 0008 0446     		mov	r4, r0
 4646 000a 88B1     		cbz	r0, .L384
 4647              	.LVL383:
 4648              	.L371:
4350:./FreeRtos/src/tasks.c **** 
 4649              		.loc 1 4350 3 view .LVU1209
4352:./FreeRtos/src/tasks.c **** 		{
 4650              		.loc 1 4352 3 view .LVU1210
 4651 000c FFF7FEFF 		bl	vPortEnterCritical
 4652              	.LVL384:
4354:./FreeRtos/src/tasks.c **** 			{
 4653              		.loc 1 4354 4 view .LVU1211
4354:./FreeRtos/src/tasks.c **** 			{
ARM GAS  /tmp/ccQvkfbu.s 			page 190


 4654              		.loc 1 4354 6 is_stmt 0 view .LVU1212
 4655 0010 0EB1     		cbz	r6, .L372
4356:./FreeRtos/src/tasks.c **** 			}
 4656              		.loc 1 4356 5 is_stmt 1 view .LVU1213
4356:./FreeRtos/src/tasks.c **** 			}
 4657              		.loc 1 4356 42 is_stmt 0 view .LVU1214
 4658 0012 636C     		ldr	r3, [r4, #68]
4356:./FreeRtos/src/tasks.c **** 			}
 4659              		.loc 1 4356 35 view .LVU1215
 4660 0014 3360     		str	r3, [r6]
 4661              	.L372:
4359:./FreeRtos/src/tasks.c **** 
 4662              		.loc 1 4359 4 is_stmt 1 view .LVU1216
4359:./FreeRtos/src/tasks.c **** 
 4663              		.loc 1 4359 26 is_stmt 0 view .LVU1217
 4664 0016 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 4665 001a DBB2     		uxtb	r3, r3
 4666              	.LVL385:
4361:./FreeRtos/src/tasks.c **** 
 4667              		.loc 1 4361 4 is_stmt 1 view .LVU1218
4361:./FreeRtos/src/tasks.c **** 
 4668              		.loc 1 4361 25 is_stmt 0 view .LVU1219
 4669 001c 0222     		movs	r2, #2
 4670 001e 84F84820 		strb	r2, [r4, #72]
4363:./FreeRtos/src/tasks.c **** 			{
 4671              		.loc 1 4363 4 is_stmt 1 view .LVU1220
 4672 0022 6A1E     		subs	r2, r5, #1
 4673 0024 032A     		cmp	r2, #3
 4674 0026 21D8     		bhi	.L381
 4675 0028 DFE802F0 		tbb	[pc, r2]
 4676              	.L375:
 4677 002c 09       		.byte	(.L378-.L375)/2
 4678 002d 13       		.byte	(.L377-.L375)/2
 4679 002e 18       		.byte	(.L376-.L375)/2
 4680 002f 1B       		.byte	(.L374-.L375)/2
 4681              	.LVL386:
 4682              		.p2align 1
 4683              	.L384:
4349:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4684              		.loc 1 4349 3 discriminator 1 view .LVU1221
 4685 0030 41F2FD02 		movw	r2, #4349
 4686              	.LVL387:
4349:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4687              		.loc 1 4349 3 is_stmt 0 discriminator 1 view .LVU1222
 4688 0034 2549     		ldr	r1, .L386
 4689              	.LVL388:
4349:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4690              		.loc 1 4349 3 discriminator 1 view .LVU1223
 4691 0036 2648     		ldr	r0, .L386+4
 4692              	.LVL389:
4349:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4693              		.loc 1 4349 3 discriminator 1 view .LVU1224
 4694 0038 FFF7FEFF 		bl	printf
 4695              	.LVL390:
4349:./FreeRtos/src/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4696              		.loc 1 4349 3 discriminator 1 view .LVU1225
 4697 003c E6E7     		b	.L371
ARM GAS  /tmp/ccQvkfbu.s 			page 191


 4698              	.LVL391:
 4699              	.L378:
4366:./FreeRtos/src/tasks.c **** 					break;
 4700              		.loc 1 4366 6 is_stmt 1 view .LVU1226
4366:./FreeRtos/src/tasks.c **** 					break;
 4701              		.loc 1 4366 29 is_stmt 0 view .LVU1227
 4702 003e 616C     		ldr	r1, [r4, #68]
 4703 0040 0F43     		orrs	r7, r7, r1
 4704              	.LVL392:
4366:./FreeRtos/src/tasks.c **** 					break;
 4705              		.loc 1 4366 29 view .LVU1228
 4706 0042 6764     		str	r7, [r4, #68]
4367:./FreeRtos/src/tasks.c **** 
 4707              		.loc 1 4367 6 is_stmt 1 view .LVU1229
4346:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4708              		.loc 1 4346 13 is_stmt 0 view .LVU1230
 4709 0044 0125     		movs	r5, #1
 4710              	.L373:
 4711              	.LVL393:
4395:./FreeRtos/src/tasks.c **** 
 4712              		.loc 1 4395 22 is_stmt 1 view .LVU1231
4399:./FreeRtos/src/tasks.c **** 			{
 4713              		.loc 1 4399 4 view .LVU1232
4399:./FreeRtos/src/tasks.c **** 			{
 4714              		.loc 1 4399 6 is_stmt 0 view .LVU1233
 4715 0046 012B     		cmp	r3, #1
 4716 0048 14D0     		beq	.L385
 4717              	.LVL394:
 4718              	.L379:
4436:./FreeRtos/src/tasks.c **** 			}
 4719              		.loc 1 4436 29 is_stmt 1 view .LVU1234
4439:./FreeRtos/src/tasks.c **** 
 4720              		.loc 1 4439 3 view .LVU1235
 4721 004a FFF7FEFF 		bl	vPortExitCritical
 4722              	.LVL395:
4441:./FreeRtos/src/tasks.c **** 	}
 4723              		.loc 1 4441 3 view .LVU1236
4442:./FreeRtos/src/tasks.c **** 
 4724              		.loc 1 4442 2 is_stmt 0 view .LVU1237
 4725 004e 2846     		mov	r0, r5
 4726 0050 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4727              	.LVL396:
 4728              	.L377:
4370:./FreeRtos/src/tasks.c **** 					break;
 4729              		.loc 1 4370 6 is_stmt 1 view .LVU1238
4370:./FreeRtos/src/tasks.c **** 					break;
 4730              		.loc 1 4370 13 is_stmt 0 view .LVU1239
 4731 0052 626C     		ldr	r2, [r4, #68]
4370:./FreeRtos/src/tasks.c **** 					break;
 4732              		.loc 1 4370 32 view .LVU1240
 4733 0054 0132     		adds	r2, r2, #1
 4734 0056 6264     		str	r2, [r4, #68]
4371:./FreeRtos/src/tasks.c **** 
 4735              		.loc 1 4371 6 is_stmt 1 view .LVU1241
4346:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4736              		.loc 1 4346 13 is_stmt 0 view .LVU1242
 4737 0058 0125     		movs	r5, #1
ARM GAS  /tmp/ccQvkfbu.s 			page 192


4371:./FreeRtos/src/tasks.c **** 
 4738              		.loc 1 4371 6 view .LVU1243
 4739 005a F4E7     		b	.L373
 4740              	.L376:
4374:./FreeRtos/src/tasks.c **** 					break;
 4741              		.loc 1 4374 6 is_stmt 1 view .LVU1244
4374:./FreeRtos/src/tasks.c **** 					break;
 4742              		.loc 1 4374 29 is_stmt 0 view .LVU1245
 4743 005c 6764     		str	r7, [r4, #68]
4375:./FreeRtos/src/tasks.c **** 
 4744              		.loc 1 4375 6 is_stmt 1 view .LVU1246
4346:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4745              		.loc 1 4346 13 is_stmt 0 view .LVU1247
 4746 005e 0125     		movs	r5, #1
4375:./FreeRtos/src/tasks.c **** 
 4747              		.loc 1 4375 6 view .LVU1248
 4748 0060 F1E7     		b	.L373
 4749              	.L374:
4378:./FreeRtos/src/tasks.c **** 					{
 4750              		.loc 1 4378 6 is_stmt 1 view .LVU1249
4378:./FreeRtos/src/tasks.c **** 					{
 4751              		.loc 1 4378 8 is_stmt 0 view .LVU1250
 4752 0062 022B     		cmp	r3, #2
 4753 0064 04D0     		beq	.L382
4380:./FreeRtos/src/tasks.c **** 					}
 4754              		.loc 1 4380 7 is_stmt 1 view .LVU1251
4380:./FreeRtos/src/tasks.c **** 					}
 4755              		.loc 1 4380 30 is_stmt 0 view .LVU1252
 4756 0066 6764     		str	r7, [r4, #68]
4346:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4757              		.loc 1 4346 13 view .LVU1253
 4758 0068 0125     		movs	r5, #1
 4759 006a ECE7     		b	.L373
 4760              	.L381:
4361:./FreeRtos/src/tasks.c **** 
 4761              		.loc 1 4361 25 view .LVU1254
 4762 006c 0125     		movs	r5, #1
 4763 006e EAE7     		b	.L373
 4764              	.L382:
4385:./FreeRtos/src/tasks.c **** 					}
 4765              		.loc 1 4385 15 view .LVU1255
 4766 0070 0025     		movs	r5, #0
 4767 0072 E8E7     		b	.L373
 4768              	.LVL397:
 4769              	.L385:
4401:./FreeRtos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4770              		.loc 1 4401 5 is_stmt 1 view .LVU1256
4401:./FreeRtos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4771              		.loc 1 4401 14 is_stmt 0 view .LVU1257
 4772 0074 261D     		adds	r6, r4, #4
 4773              	.LVL398:
4401:./FreeRtos/src/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4774              		.loc 1 4401 14 view .LVU1258
 4775 0076 3046     		mov	r0, r6
 4776 0078 FFF7FEFF 		bl	uxListRemove
 4777              	.LVL399:
4402:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 193


 4778              		.loc 1 4402 5 is_stmt 1 view .LVU1259
4402:./FreeRtos/src/tasks.c **** 
 4779              		.loc 1 4402 5 view .LVU1260
 4780 007c E06A     		ldr	r0, [r4, #44]
 4781 007e 0123     		movs	r3, #1
 4782 0080 8340     		lsls	r3, r3, r0
 4783 0082 144A     		ldr	r2, .L386+8
 4784 0084 1168     		ldr	r1, [r2]
 4785 0086 0B43     		orrs	r3, r3, r1
 4786 0088 1360     		str	r3, [r2]
4402:./FreeRtos/src/tasks.c **** 
 4787              		.loc 1 4402 5 view .LVU1261
 4788 008a 00EB8000 		add	r0, r0, r0, lsl #2
 4789 008e 3146     		mov	r1, r6
 4790 0090 114B     		ldr	r3, .L386+12
 4791 0092 03EB8000 		add	r0, r3, r0, lsl #2
 4792 0096 FFF7FEFF 		bl	vListInsertEnd
 4793              	.LVL400:
4402:./FreeRtos/src/tasks.c **** 
 4794              		.loc 1 4402 35 view .LVU1262
4405:./FreeRtos/src/tasks.c **** 
 4795              		.loc 1 4405 5 view .LVU1263
 4796 009a A36A     		ldr	r3, [r4, #40]
 4797 009c 2BB1     		cbz	r3, .L380
4405:./FreeRtos/src/tasks.c **** 
 4798              		.loc 1 4405 5 discriminator 1 view .LVU1264
 4799 009e 41F23512 		movw	r2, #4405
 4800 00a2 0A49     		ldr	r1, .L386
 4801 00a4 0A48     		ldr	r0, .L386+4
 4802 00a6 FFF7FEFF 		bl	printf
 4803              	.LVL401:
 4804              	.L380:
4423:./FreeRtos/src/tasks.c **** 				{
 4805              		.loc 1 4423 5 view .LVU1265
4423:./FreeRtos/src/tasks.c **** 				{
 4806              		.loc 1 4423 14 is_stmt 0 view .LVU1266
 4807 00aa E26A     		ldr	r2, [r4, #44]
4423:./FreeRtos/src/tasks.c **** 				{
 4808              		.loc 1 4423 41 view .LVU1267
 4809 00ac 0B4B     		ldr	r3, .L386+16
 4810 00ae 1B68     		ldr	r3, [r3]
 4811 00b0 DB6A     		ldr	r3, [r3, #44]
4423:./FreeRtos/src/tasks.c **** 				{
 4812              		.loc 1 4423 7 view .LVU1268
 4813 00b2 9A42     		cmp	r2, r3
 4814 00b4 C9D9     		bls	.L379
4427:./FreeRtos/src/tasks.c **** 				}
 4815              		.loc 1 4427 6 is_stmt 1 view .LVU1269
 4816 00b6 4FF0E023 		mov	r3, #-536813568
 4817 00ba 4FF08052 		mov	r2, #268435456
 4818 00be C3F8042D 		str	r2, [r3, #3332]
4427:./FreeRtos/src/tasks.c **** 				}
 4819              		.loc 1 4427 6 view .LVU1270
 4820              		.syntax unified
 4821              	@ 4427 "./FreeRtos/src/tasks.c" 1
 4822 00c2 BFF34F8F 		dsb
 4823              	@ 0 "" 2
ARM GAS  /tmp/ccQvkfbu.s 			page 194


4427:./FreeRtos/src/tasks.c **** 				}
 4824              		.loc 1 4427 6 view .LVU1271
 4825              	@ 4427 "./FreeRtos/src/tasks.c" 1
 4826 00c6 BFF36F8F 		isb
 4827              	@ 0 "" 2
4427:./FreeRtos/src/tasks.c **** 				}
 4828              		.loc 1 4427 37 view .LVU1272
 4829              		.thumb
 4830              		.syntax unified
 4831 00ca BEE7     		b	.L379
 4832              	.L387:
 4833              		.align	2
 4834              	.L386:
 4835 00cc 00000000 		.word	.LC0
 4836 00d0 18000000 		.word	.LC1
 4837 00d4 00000000 		.word	.LANCHOR13
 4838 00d8 00000000 		.word	.LANCHOR4
 4839 00dc 00000000 		.word	.LANCHOR10
 4840              		.cfi_endproc
 4841              	.LFE171:
 4843              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4844              		.align	1
 4845              		.global	xTaskGenericNotifyFromISR
 4846              		.syntax unified
 4847              		.thumb
 4848              		.thumb_func
 4849              		.fpu fpv4-sp-d16
 4851              	xTaskGenericNotifyFromISR:
 4852              	.LVL402:
 4853              	.LFB172:
4450:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
 4854              		.loc 1 4450 2 view -0
 4855              		.cfi_startproc
 4856              		@ args = 4, pretend = 0, frame = 0
 4857              		@ frame_needed = 0, uses_anonymous_args = 0
4450:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
 4858              		.loc 1 4450 2 is_stmt 0 view .LVU1274
 4859 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4860              	.LCFI42:
 4861              		.cfi_def_cfa_offset 24
 4862              		.cfi_offset 4, -24
 4863              		.cfi_offset 5, -20
 4864              		.cfi_offset 6, -16
 4865              		.cfi_offset 7, -12
 4866              		.cfi_offset 8, -8
 4867              		.cfi_offset 14, -4
 4868 0004 0F46     		mov	r7, r1
 4869 0006 1546     		mov	r5, r2
 4870 0008 1E46     		mov	r6, r3
4451:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4871              		.loc 1 4451 2 is_stmt 1 view .LVU1275
4452:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4872              		.loc 1 4452 2 view .LVU1276
4453:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4873              		.loc 1 4453 2 view .LVU1277
 4874              	.LVL403:
4454:./FreeRtos/src/tasks.c **** 
ARM GAS  /tmp/ccQvkfbu.s 			page 195


 4875              		.loc 1 4454 2 view .LVU1278
4456:./FreeRtos/src/tasks.c **** 
 4876              		.loc 1 4456 3 view .LVU1279
 4877 000a 0446     		mov	r4, r0
 4878 000c D8B1     		cbz	r0, .L405
 4879              	.LVL404:
 4880              	.L389:
4474:./FreeRtos/src/tasks.c **** 
 4881              		.loc 1 4474 3 view .LVU1280
 4882 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 4883              	.LVL405:
4476:./FreeRtos/src/tasks.c **** 
 4884              		.loc 1 4476 3 view .LVU1281
4478:./FreeRtos/src/tasks.c **** 		{
 4885              		.loc 1 4478 3 view .LVU1282
 4886              	.LBB63:
 4887              	.LBI63:
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 4888              		.loc 2 207 34 view .LVU1283
 4889              	.LBB64:
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 4890              		.loc 2 209 1 view .LVU1284
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 4891              		.loc 2 211 2 view .LVU1285
 4892              		.syntax unified
 4893              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 4894 0012 EFF31188 			mrs r8, basepri											
 4895 0016 4FF05003 		mov r3, #80												
 4896 001a 83F31188 		msr basepri, r3											
 4897 001e BFF36F8F 		isb														
 4898 0022 BFF34F8F 		dsb														
 4899              	
 4900              	@ 0 "" 2
 4901              	.LVL406:
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 4902              		.loc 2 223 2 view .LVU1286
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 4903              		.loc 2 223 2 is_stmt 0 view .LVU1287
 4904              		.thumb
 4905              		.syntax unified
 4906              	.LBE64:
 4907              	.LBE63:
4480:./FreeRtos/src/tasks.c **** 			{
 4908              		.loc 1 4480 4 is_stmt 1 view .LVU1288
4480:./FreeRtos/src/tasks.c **** 			{
 4909              		.loc 1 4480 6 is_stmt 0 view .LVU1289
 4910 0026 0EB1     		cbz	r6, .L390
4482:./FreeRtos/src/tasks.c **** 			}
 4911              		.loc 1 4482 5 is_stmt 1 view .LVU1290
4482:./FreeRtos/src/tasks.c **** 			}
 4912              		.loc 1 4482 42 is_stmt 0 view .LVU1291
 4913 0028 636C     		ldr	r3, [r4, #68]
4482:./FreeRtos/src/tasks.c **** 			}
 4914              		.loc 1 4482 35 view .LVU1292
 4915 002a 3360     		str	r3, [r6]
 4916              	.L390:
4485:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
ARM GAS  /tmp/ccQvkfbu.s 			page 196


 4917              		.loc 1 4485 4 is_stmt 1 view .LVU1293
4485:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4918              		.loc 1 4485 26 is_stmt 0 view .LVU1294
 4919 002c 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 4920 0030 DBB2     		uxtb	r3, r3
 4921              	.LVL407:
4486:./FreeRtos/src/tasks.c **** 
 4922              		.loc 1 4486 4 is_stmt 1 view .LVU1295
4486:./FreeRtos/src/tasks.c **** 
 4923              		.loc 1 4486 25 is_stmt 0 view .LVU1296
 4924 0032 0222     		movs	r2, #2
 4925 0034 84F84820 		strb	r2, [r4, #72]
4488:./FreeRtos/src/tasks.c **** 			{
 4926              		.loc 1 4488 4 is_stmt 1 view .LVU1297
 4927 0038 6A1E     		subs	r2, r5, #1
 4928 003a 032A     		cmp	r2, #3
 4929 003c 22D8     		bhi	.L402
 4930 003e DFE802F0 		tbb	[pc, r2]
 4931              	.L393:
 4932 0042 09       		.byte	(.L396-.L393)/2
 4933 0043 14       		.byte	(.L395-.L393)/2
 4934 0044 19       		.byte	(.L394-.L393)/2
 4935 0045 1C       		.byte	(.L392-.L393)/2
 4936              	.LVL408:
 4937              		.p2align 1
 4938              	.L405:
4456:./FreeRtos/src/tasks.c **** 
 4939              		.loc 1 4456 3 discriminator 1 view .LVU1298
 4940 0046 41F26812 		movw	r2, #4456
 4941              	.LVL409:
4456:./FreeRtos/src/tasks.c **** 
 4942              		.loc 1 4456 3 is_stmt 0 discriminator 1 view .LVU1299
 4943 004a 2A49     		ldr	r1, .L407
 4944              	.LVL410:
4456:./FreeRtos/src/tasks.c **** 
 4945              		.loc 1 4456 3 discriminator 1 view .LVU1300
 4946 004c 2A48     		ldr	r0, .L407+4
 4947              	.LVL411:
4456:./FreeRtos/src/tasks.c **** 
 4948              		.loc 1 4456 3 discriminator 1 view .LVU1301
 4949 004e FFF7FEFF 		bl	printf
 4950              	.LVL412:
4456:./FreeRtos/src/tasks.c **** 
 4951              		.loc 1 4456 3 discriminator 1 view .LVU1302
 4952 0052 DCE7     		b	.L389
 4953              	.LVL413:
 4954              	.L396:
4491:./FreeRtos/src/tasks.c **** 					break;
 4955              		.loc 1 4491 6 is_stmt 1 view .LVU1303
4491:./FreeRtos/src/tasks.c **** 					break;
 4956              		.loc 1 4491 29 is_stmt 0 view .LVU1304
 4957 0054 616C     		ldr	r1, [r4, #68]
 4958 0056 0F43     		orrs	r7, r7, r1
 4959              	.LVL414:
4491:./FreeRtos/src/tasks.c **** 					break;
 4960              		.loc 1 4491 29 view .LVU1305
 4961 0058 6764     		str	r7, [r4, #68]
ARM GAS  /tmp/ccQvkfbu.s 			page 197


4492:./FreeRtos/src/tasks.c **** 
 4962              		.loc 1 4492 6 is_stmt 1 view .LVU1306
4453:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4963              		.loc 1 4453 13 is_stmt 0 view .LVU1307
 4964 005a 0125     		movs	r5, #1
 4965              	.L391:
 4966              	.LVL415:
4520:./FreeRtos/src/tasks.c **** 
 4967              		.loc 1 4520 31 is_stmt 1 view .LVU1308
4524:./FreeRtos/src/tasks.c **** 			{
 4968              		.loc 1 4524 4 view .LVU1309
4524:./FreeRtos/src/tasks.c **** 			{
 4969              		.loc 1 4524 6 is_stmt 0 view .LVU1310
 4970 005c 012B     		cmp	r3, #1
 4971 005e 15D0     		beq	.L406
 4972              	.LVL416:
 4973              	.L397:
4559:./FreeRtos/src/tasks.c **** 				}
 4974              		.loc 1 4559 30 is_stmt 1 view .LVU1311
4563:./FreeRtos/src/tasks.c **** 
 4975              		.loc 1 4563 3 view .LVU1312
 4976              	.LBB65:
 4977              	.LBI65:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 4978              		.loc 2 227 30 view .LVU1313
 4979              	.LBB66:
 4980              		.loc 2 229 2 view .LVU1314
 4981              		.syntax unified
 4982              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 4983 0060 88F31188 			msr basepri, r8	
 4984              	@ 0 "" 2
 4985              	.LVL417:
 4986              		.loc 2 229 2 is_stmt 0 view .LVU1315
 4987              		.thumb
 4988              		.syntax unified
 4989              	.LBE66:
 4990              	.LBE65:
4565:./FreeRtos/src/tasks.c **** 	}
 4991              		.loc 1 4565 3 is_stmt 1 view .LVU1316
4566:./FreeRtos/src/tasks.c **** 
 4992              		.loc 1 4566 2 is_stmt 0 view .LVU1317
 4993 0064 2846     		mov	r0, r5
 4994 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4995              	.LVL418:
 4996              	.L395:
4495:./FreeRtos/src/tasks.c **** 					break;
 4997              		.loc 1 4495 6 is_stmt 1 view .LVU1318
4495:./FreeRtos/src/tasks.c **** 					break;
 4998              		.loc 1 4495 13 is_stmt 0 view .LVU1319
 4999 006a 626C     		ldr	r2, [r4, #68]
4495:./FreeRtos/src/tasks.c **** 					break;
 5000              		.loc 1 4495 32 view .LVU1320
 5001 006c 0132     		adds	r2, r2, #1
 5002 006e 6264     		str	r2, [r4, #68]
4496:./FreeRtos/src/tasks.c **** 
 5003              		.loc 1 4496 6 is_stmt 1 view .LVU1321
4453:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccQvkfbu.s 			page 198


 5004              		.loc 1 4453 13 is_stmt 0 view .LVU1322
 5005 0070 0125     		movs	r5, #1
4496:./FreeRtos/src/tasks.c **** 
 5006              		.loc 1 4496 6 view .LVU1323
 5007 0072 F3E7     		b	.L391
 5008              	.L394:
4499:./FreeRtos/src/tasks.c **** 					break;
 5009              		.loc 1 4499 6 is_stmt 1 view .LVU1324
4499:./FreeRtos/src/tasks.c **** 					break;
 5010              		.loc 1 4499 29 is_stmt 0 view .LVU1325
 5011 0074 6764     		str	r7, [r4, #68]
4500:./FreeRtos/src/tasks.c **** 
 5012              		.loc 1 4500 6 is_stmt 1 view .LVU1326
4453:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5013              		.loc 1 4453 13 is_stmt 0 view .LVU1327
 5014 0076 0125     		movs	r5, #1
4500:./FreeRtos/src/tasks.c **** 
 5015              		.loc 1 4500 6 view .LVU1328
 5016 0078 F0E7     		b	.L391
 5017              	.L392:
4503:./FreeRtos/src/tasks.c **** 					{
 5018              		.loc 1 4503 6 is_stmt 1 view .LVU1329
4503:./FreeRtos/src/tasks.c **** 					{
 5019              		.loc 1 4503 8 is_stmt 0 view .LVU1330
 5020 007a 022B     		cmp	r3, #2
 5021 007c 04D0     		beq	.L403
4505:./FreeRtos/src/tasks.c **** 					}
 5022              		.loc 1 4505 7 is_stmt 1 view .LVU1331
4505:./FreeRtos/src/tasks.c **** 					}
 5023              		.loc 1 4505 30 is_stmt 0 view .LVU1332
 5024 007e 6764     		str	r7, [r4, #68]
4453:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5025              		.loc 1 4453 13 view .LVU1333
 5026 0080 0125     		movs	r5, #1
 5027 0082 EBE7     		b	.L391
 5028              	.L402:
4486:./FreeRtos/src/tasks.c **** 
 5029              		.loc 1 4486 25 view .LVU1334
 5030 0084 0125     		movs	r5, #1
 5031 0086 E9E7     		b	.L391
 5032              	.L403:
4510:./FreeRtos/src/tasks.c **** 					}
 5033              		.loc 1 4510 15 view .LVU1335
 5034 0088 0025     		movs	r5, #0
 5035 008a E7E7     		b	.L391
 5036              	.LVL419:
 5037              	.L406:
4527:./FreeRtos/src/tasks.c **** 
 5038              		.loc 1 4527 5 is_stmt 1 view .LVU1336
 5039 008c A36A     		ldr	r3, [r4, #40]
 5040              	.LVL420:
4527:./FreeRtos/src/tasks.c **** 
 5041              		.loc 1 4527 5 is_stmt 0 view .LVU1337
 5042 008e 2BB1     		cbz	r3, .L398
4527:./FreeRtos/src/tasks.c **** 
 5043              		.loc 1 4527 5 is_stmt 1 discriminator 1 view .LVU1338
 5044 0090 41F2AF12 		movw	r2, #4527
ARM GAS  /tmp/ccQvkfbu.s 			page 199


 5045 0094 1749     		ldr	r1, .L407
 5046 0096 1848     		ldr	r0, .L407+4
 5047 0098 FFF7FEFF 		bl	printf
 5048              	.LVL421:
 5049              	.L398:
4529:./FreeRtos/src/tasks.c **** 				{
 5050              		.loc 1 4529 5 view .LVU1339
4529:./FreeRtos/src/tasks.c **** 				{
 5051              		.loc 1 4529 30 is_stmt 0 view .LVU1340
 5052 009c 174B     		ldr	r3, .L407+8
 5053 009e 1B68     		ldr	r3, [r3]
4529:./FreeRtos/src/tasks.c **** 				{
 5054              		.loc 1 4529 7 view .LVU1341
 5055 00a0 F3B9     		cbnz	r3, .L399
4531:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5056              		.loc 1 4531 6 is_stmt 1 view .LVU1342
4531:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5057              		.loc 1 4531 15 is_stmt 0 view .LVU1343
 5058 00a2 261D     		adds	r6, r4, #4
 5059              	.LVL422:
4531:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5060              		.loc 1 4531 15 view .LVU1344
 5061 00a4 3046     		mov	r0, r6
 5062 00a6 FFF7FEFF 		bl	uxListRemove
 5063              	.LVL423:
4532:./FreeRtos/src/tasks.c **** 				}
 5064              		.loc 1 4532 6 is_stmt 1 view .LVU1345
4532:./FreeRtos/src/tasks.c **** 				}
 5065              		.loc 1 4532 6 view .LVU1346
 5066 00aa E06A     		ldr	r0, [r4, #44]
 5067 00ac 0123     		movs	r3, #1
 5068 00ae 8340     		lsls	r3, r3, r0
 5069 00b0 134A     		ldr	r2, .L407+12
 5070 00b2 1168     		ldr	r1, [r2]
 5071 00b4 0B43     		orrs	r3, r3, r1
 5072 00b6 1360     		str	r3, [r2]
4532:./FreeRtos/src/tasks.c **** 				}
 5073              		.loc 1 4532 6 view .LVU1347
 5074 00b8 00EB8000 		add	r0, r0, r0, lsl #2
 5075 00bc 3146     		mov	r1, r6
 5076 00be 114B     		ldr	r3, .L407+16
 5077 00c0 03EB8000 		add	r0, r3, r0, lsl #2
 5078 00c4 FFF7FEFF 		bl	vListInsertEnd
 5079              	.LVL424:
4532:./FreeRtos/src/tasks.c **** 				}
 5080              		.loc 1 4532 36 view .LVU1348
 5081              	.L400:
4541:./FreeRtos/src/tasks.c **** 				{
 5082              		.loc 1 4541 5 view .LVU1349
4541:./FreeRtos/src/tasks.c **** 				{
 5083              		.loc 1 4541 14 is_stmt 0 view .LVU1350
 5084 00c8 E26A     		ldr	r2, [r4, #44]
4541:./FreeRtos/src/tasks.c **** 				{
 5085              		.loc 1 4541 41 view .LVU1351
 5086 00ca 0F4B     		ldr	r3, .L407+20
 5087 00cc 1B68     		ldr	r3, [r3]
 5088 00ce DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccQvkfbu.s 			page 200


4541:./FreeRtos/src/tasks.c **** 				{
 5089              		.loc 1 4541 7 view .LVU1352
 5090 00d0 9A42     		cmp	r2, r3
 5091 00d2 C5D9     		bls	.L397
4545:./FreeRtos/src/tasks.c **** 					{
 5092              		.loc 1 4545 6 is_stmt 1 view .LVU1353
4545:./FreeRtos/src/tasks.c **** 					{
 5093              		.loc 1 4545 8 is_stmt 0 view .LVU1354
 5094 00d4 069B     		ldr	r3, [sp, #24]
 5095 00d6 4BB1     		cbz	r3, .L401
4547:./FreeRtos/src/tasks.c **** 					}
 5096              		.loc 1 4547 7 is_stmt 1 view .LVU1355
4547:./FreeRtos/src/tasks.c **** 					}
 5097              		.loc 1 4547 34 is_stmt 0 view .LVU1356
 5098 00d8 0123     		movs	r3, #1
 5099 00da 069A     		ldr	r2, [sp, #24]
 5100 00dc 1360     		str	r3, [r2]
 5101 00de BFE7     		b	.L397
 5102              	.LVL425:
 5103              	.L399:
4538:./FreeRtos/src/tasks.c **** 				}
 5104              		.loc 1 4538 6 is_stmt 1 view .LVU1357
 5105 00e0 04F11801 		add	r1, r4, #24
 5106 00e4 0948     		ldr	r0, .L407+24
 5107 00e6 FFF7FEFF 		bl	vListInsertEnd
 5108              	.LVL426:
 5109 00ea EDE7     		b	.L400
 5110              	.LVL427:
 5111              	.L401:
4554:./FreeRtos/src/tasks.c **** 					}
 5112              		.loc 1 4554 7 view .LVU1358
4554:./FreeRtos/src/tasks.c **** 					}
 5113              		.loc 1 4554 21 is_stmt 0 view .LVU1359
 5114 00ec 084B     		ldr	r3, .L407+28
 5115 00ee 0122     		movs	r2, #1
 5116 00f0 1A60     		str	r2, [r3]
 5117 00f2 B5E7     		b	.L397
 5118              	.L408:
 5119              		.align	2
 5120              	.L407:
 5121 00f4 00000000 		.word	.LC0
 5122 00f8 18000000 		.word	.LC1
 5123 00fc 00000000 		.word	.LANCHOR16
 5124 0100 00000000 		.word	.LANCHOR13
 5125 0104 00000000 		.word	.LANCHOR4
 5126 0108 00000000 		.word	.LANCHOR10
 5127 010c 00000000 		.word	.LANCHOR3
 5128 0110 00000000 		.word	.LANCHOR20
 5129              		.cfi_endproc
 5130              	.LFE172:
 5132              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5133              		.align	1
 5134              		.global	vTaskNotifyGiveFromISR
 5135              		.syntax unified
 5136              		.thumb
 5137              		.thumb_func
 5138              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQvkfbu.s 			page 201


 5140              	vTaskNotifyGiveFromISR:
 5141              	.LVL428:
 5142              	.LFB173:
4574:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
 5143              		.loc 1 4574 2 is_stmt 1 view -0
 5144              		.cfi_startproc
 5145              		@ args = 0, pretend = 0, frame = 0
 5146              		@ frame_needed = 0, uses_anonymous_args = 0
4574:./FreeRtos/src/tasks.c **** 	TCB_t * pxTCB;
 5147              		.loc 1 4574 2 is_stmt 0 view .LVU1361
 5148 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5149              	.LCFI43:
 5150              		.cfi_def_cfa_offset 24
 5151              		.cfi_offset 3, -24
 5152              		.cfi_offset 4, -20
 5153              		.cfi_offset 5, -16
 5154              		.cfi_offset 6, -12
 5155              		.cfi_offset 7, -8
 5156              		.cfi_offset 14, -4
 5157 0002 0D46     		mov	r5, r1
4575:./FreeRtos/src/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5158              		.loc 1 4575 2 is_stmt 1 view .LVU1362
4576:./FreeRtos/src/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5159              		.loc 1 4576 2 view .LVU1363
4577:./FreeRtos/src/tasks.c **** 
 5160              		.loc 1 4577 2 view .LVU1364
4579:./FreeRtos/src/tasks.c **** 
 5161              		.loc 1 4579 3 view .LVU1365
 5162 0004 0446     		mov	r4, r0
 5163 0006 C8B1     		cbz	r0, .L417
 5164              	.LVL429:
 5165              	.L410:
4597:./FreeRtos/src/tasks.c **** 
 5166              		.loc 1 4597 3 view .LVU1366
 5167 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5168              	.LVL430:
4599:./FreeRtos/src/tasks.c **** 
 5169              		.loc 1 4599 3 view .LVU1367
4601:./FreeRtos/src/tasks.c **** 		{
 5170              		.loc 1 4601 3 view .LVU1368
 5171              	.LBB67:
 5172              	.LBI67:
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 5173              		.loc 2 207 34 view .LVU1369
 5174              	.LBB68:
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 5175              		.loc 2 209 1 view .LVU1370
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 5176              		.loc 2 211 2 view .LVU1371
 5177              		.syntax unified
 5178              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 5179 000c EFF31186 			mrs r6, basepri											
 5180 0010 4FF05003 		mov r3, #80												
 5181 0014 83F31188 		msr basepri, r3											
 5182 0018 BFF36F8F 		isb														
 5183 001c BFF34F8F 		dsb														
 5184              	
ARM GAS  /tmp/ccQvkfbu.s 			page 202


 5185              	@ 0 "" 2
 5186              	.LVL431:
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 5187              		.loc 2 223 2 view .LVU1372
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 5188              		.loc 2 223 2 is_stmt 0 view .LVU1373
 5189              		.thumb
 5190              		.syntax unified
 5191              	.LBE68:
 5192              	.LBE67:
4603:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5193              		.loc 1 4603 4 is_stmt 1 view .LVU1374
4603:./FreeRtos/src/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5194              		.loc 1 4603 26 is_stmt 0 view .LVU1375
 5195 0020 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 5196 0024 DBB2     		uxtb	r3, r3
 5197              	.LVL432:
4604:./FreeRtos/src/tasks.c **** 
 5198              		.loc 1 4604 4 is_stmt 1 view .LVU1376
4604:./FreeRtos/src/tasks.c **** 
 5199              		.loc 1 4604 25 is_stmt 0 view .LVU1377
 5200 0026 0222     		movs	r2, #2
 5201 0028 84F84820 		strb	r2, [r4, #72]
4608:./FreeRtos/src/tasks.c **** 
 5202              		.loc 1 4608 4 is_stmt 1 view .LVU1378
4608:./FreeRtos/src/tasks.c **** 
 5203              		.loc 1 4608 11 is_stmt 0 view .LVU1379
 5204 002c 626C     		ldr	r2, [r4, #68]
4608:./FreeRtos/src/tasks.c **** 
 5205              		.loc 1 4608 30 view .LVU1380
 5206 002e 0132     		adds	r2, r2, #1
 5207 0030 6264     		str	r2, [r4, #68]
4610:./FreeRtos/src/tasks.c **** 
 5208              		.loc 1 4610 36 is_stmt 1 view .LVU1381
4614:./FreeRtos/src/tasks.c **** 			{
 5209              		.loc 1 4614 4 view .LVU1382
4614:./FreeRtos/src/tasks.c **** 			{
 5210              		.loc 1 4614 6 is_stmt 0 view .LVU1383
 5211 0032 012B     		cmp	r3, #1
 5212 0034 09D0     		beq	.L418
 5213              	.LVL433:
 5214              	.L411:
4649:./FreeRtos/src/tasks.c **** 				}
 5215              		.loc 1 4649 30 is_stmt 1 view .LVU1384
4653:./FreeRtos/src/tasks.c **** 	}
 5216              		.loc 1 4653 3 view .LVU1385
 5217              	.LBB69:
 5218              	.LBI69:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 5219              		.loc 2 227 30 view .LVU1386
 5220              	.LBB70:
 5221              		.loc 2 229 2 view .LVU1387
 5222              		.syntax unified
 5223              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 5224 0036 86F31188 			msr basepri, r6	
 5225              	@ 0 "" 2
 5226              	.LVL434:
ARM GAS  /tmp/ccQvkfbu.s 			page 203


 5227              		.loc 2 229 2 is_stmt 0 view .LVU1388
 5228              		.thumb
 5229              		.syntax unified
 5230              	.LBE70:
 5231              	.LBE69:
4654:./FreeRtos/src/tasks.c **** 
 5232              		.loc 1 4654 2 view .LVU1389
 5233 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5234              	.LVL435:
 5235              	.L417:
4579:./FreeRtos/src/tasks.c **** 
 5236              		.loc 1 4579 3 is_stmt 1 discriminator 1 view .LVU1390
 5237 003c 41F2E312 		movw	r2, #4579
 5238 0040 1B49     		ldr	r1, .L419
 5239              	.LVL436:
4579:./FreeRtos/src/tasks.c **** 
 5240              		.loc 1 4579 3 is_stmt 0 discriminator 1 view .LVU1391
 5241 0042 1C48     		ldr	r0, .L419+4
 5242              	.LVL437:
4579:./FreeRtos/src/tasks.c **** 
 5243              		.loc 1 4579 3 discriminator 1 view .LVU1392
 5244 0044 FFF7FEFF 		bl	printf
 5245              	.LVL438:
 5246 0048 DEE7     		b	.L410
 5247              	.LVL439:
 5248              	.L418:
4617:./FreeRtos/src/tasks.c **** 
 5249              		.loc 1 4617 5 is_stmt 1 view .LVU1393
 5250 004a A36A     		ldr	r3, [r4, #40]
 5251              	.LVL440:
4617:./FreeRtos/src/tasks.c **** 
 5252              		.loc 1 4617 5 is_stmt 0 view .LVU1394
 5253 004c 2BB1     		cbz	r3, .L412
4617:./FreeRtos/src/tasks.c **** 
 5254              		.loc 1 4617 5 is_stmt 1 discriminator 1 view .LVU1395
 5255 004e 41F20922 		movw	r2, #4617
 5256 0052 1749     		ldr	r1, .L419
 5257 0054 1748     		ldr	r0, .L419+4
 5258 0056 FFF7FEFF 		bl	printf
 5259              	.LVL441:
 5260              	.L412:
4619:./FreeRtos/src/tasks.c **** 				{
 5261              		.loc 1 4619 5 view .LVU1396
4619:./FreeRtos/src/tasks.c **** 				{
 5262              		.loc 1 4619 30 is_stmt 0 view .LVU1397
 5263 005a 174B     		ldr	r3, .L419+8
 5264 005c 1B68     		ldr	r3, [r3]
4619:./FreeRtos/src/tasks.c **** 				{
 5265              		.loc 1 4619 7 view .LVU1398
 5266 005e E3B9     		cbnz	r3, .L413
4621:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5267              		.loc 1 4621 6 is_stmt 1 view .LVU1399
4621:./FreeRtos/src/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5268              		.loc 1 4621 15 is_stmt 0 view .LVU1400
 5269 0060 271D     		adds	r7, r4, #4
 5270 0062 3846     		mov	r0, r7
 5271 0064 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccQvkfbu.s 			page 204


 5272              	.LVL442:
4622:./FreeRtos/src/tasks.c **** 				}
 5273              		.loc 1 4622 6 is_stmt 1 view .LVU1401
4622:./FreeRtos/src/tasks.c **** 				}
 5274              		.loc 1 4622 6 view .LVU1402
 5275 0068 E06A     		ldr	r0, [r4, #44]
 5276 006a 0123     		movs	r3, #1
 5277 006c 8340     		lsls	r3, r3, r0
 5278 006e 134A     		ldr	r2, .L419+12
 5279 0070 1168     		ldr	r1, [r2]
 5280 0072 0B43     		orrs	r3, r3, r1
 5281 0074 1360     		str	r3, [r2]
4622:./FreeRtos/src/tasks.c **** 				}
 5282              		.loc 1 4622 6 view .LVU1403
 5283 0076 00EB8000 		add	r0, r0, r0, lsl #2
 5284 007a 3946     		mov	r1, r7
 5285 007c 104B     		ldr	r3, .L419+16
 5286 007e 03EB8000 		add	r0, r3, r0, lsl #2
 5287 0082 FFF7FEFF 		bl	vListInsertEnd
 5288              	.LVL443:
4622:./FreeRtos/src/tasks.c **** 				}
 5289              		.loc 1 4622 36 view .LVU1404
 5290              	.L414:
4631:./FreeRtos/src/tasks.c **** 				{
 5291              		.loc 1 4631 5 view .LVU1405
4631:./FreeRtos/src/tasks.c **** 				{
 5292              		.loc 1 4631 14 is_stmt 0 view .LVU1406
 5293 0086 E26A     		ldr	r2, [r4, #44]
4631:./FreeRtos/src/tasks.c **** 				{
 5294              		.loc 1 4631 41 view .LVU1407
 5295 0088 0E4B     		ldr	r3, .L419+20
 5296 008a 1B68     		ldr	r3, [r3]
 5297 008c DB6A     		ldr	r3, [r3, #44]
4631:./FreeRtos/src/tasks.c **** 				{
 5298              		.loc 1 4631 7 view .LVU1408
 5299 008e 9A42     		cmp	r2, r3
 5300 0090 D1D9     		bls	.L411
4635:./FreeRtos/src/tasks.c **** 					{
 5301              		.loc 1 4635 6 is_stmt 1 view .LVU1409
4635:./FreeRtos/src/tasks.c **** 					{
 5302              		.loc 1 4635 8 is_stmt 0 view .LVU1410
 5303 0092 45B1     		cbz	r5, .L415
4637:./FreeRtos/src/tasks.c **** 					}
 5304              		.loc 1 4637 7 is_stmt 1 view .LVU1411
4637:./FreeRtos/src/tasks.c **** 					}
 5305              		.loc 1 4637 34 is_stmt 0 view .LVU1412
 5306 0094 0123     		movs	r3, #1
 5307 0096 2B60     		str	r3, [r5]
 5308 0098 CDE7     		b	.L411
 5309              	.L413:
4628:./FreeRtos/src/tasks.c **** 				}
 5310              		.loc 1 4628 6 is_stmt 1 view .LVU1413
 5311 009a 04F11801 		add	r1, r4, #24
 5312 009e 0A48     		ldr	r0, .L419+24
 5313 00a0 FFF7FEFF 		bl	vListInsertEnd
 5314              	.LVL444:
 5315 00a4 EFE7     		b	.L414
ARM GAS  /tmp/ccQvkfbu.s 			page 205


 5316              	.L415:
4644:./FreeRtos/src/tasks.c **** 					}
 5317              		.loc 1 4644 7 view .LVU1414
4644:./FreeRtos/src/tasks.c **** 					}
 5318              		.loc 1 4644 21 is_stmt 0 view .LVU1415
 5319 00a6 094B     		ldr	r3, .L419+28
 5320 00a8 0122     		movs	r2, #1
 5321 00aa 1A60     		str	r2, [r3]
 5322 00ac C3E7     		b	.L411
 5323              	.L420:
 5324 00ae 00BF     		.align	2
 5325              	.L419:
 5326 00b0 00000000 		.word	.LC0
 5327 00b4 18000000 		.word	.LC1
 5328 00b8 00000000 		.word	.LANCHOR16
 5329 00bc 00000000 		.word	.LANCHOR13
 5330 00c0 00000000 		.word	.LANCHOR4
 5331 00c4 00000000 		.word	.LANCHOR10
 5332 00c8 00000000 		.word	.LANCHOR3
 5333 00cc 00000000 		.word	.LANCHOR20
 5334              		.cfi_endproc
 5335              	.LFE173:
 5337              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5338              		.align	1
 5339              		.global	xTaskNotifyStateClear
 5340              		.syntax unified
 5341              		.thumb
 5342              		.thumb_func
 5343              		.fpu fpv4-sp-d16
 5345              	xTaskNotifyStateClear:
 5346              	.LVL445:
 5347              	.LFB174:
4663:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 5348              		.loc 1 4663 2 is_stmt 1 view -0
 5349              		.cfi_startproc
 5350              		@ args = 0, pretend = 0, frame = 0
 5351              		@ frame_needed = 0, uses_anonymous_args = 0
4663:./FreeRtos/src/tasks.c **** 	TCB_t *pxTCB;
 5352              		.loc 1 4663 2 is_stmt 0 view .LVU1417
 5353 0000 10B5     		push	{r4, lr}
 5354              	.LCFI44:
 5355              		.cfi_def_cfa_offset 8
 5356              		.cfi_offset 4, -8
 5357              		.cfi_offset 14, -4
4664:./FreeRtos/src/tasks.c **** 	BaseType_t xReturn;
 5358              		.loc 1 4664 2 is_stmt 1 view .LVU1418
4665:./FreeRtos/src/tasks.c **** 
 5359              		.loc 1 4665 2 view .LVU1419
4669:./FreeRtos/src/tasks.c **** 
 5360              		.loc 1 4669 3 view .LVU1420
4669:./FreeRtos/src/tasks.c **** 
 5361              		.loc 1 4669 11 is_stmt 0 view .LVU1421
 5362 0002 0446     		mov	r4, r0
 5363 0004 58B1     		cbz	r0, .L426
 5364              	.LVL446:
 5365              	.L422:
4671:./FreeRtos/src/tasks.c **** 		{
ARM GAS  /tmp/ccQvkfbu.s 			page 206


 5366              		.loc 1 4671 3 is_stmt 1 discriminator 4 view .LVU1422
 5367 0006 FFF7FEFF 		bl	vPortEnterCritical
 5368              	.LVL447:
4673:./FreeRtos/src/tasks.c **** 			{
 5369              		.loc 1 4673 4 discriminator 4 view .LVU1423
4673:./FreeRtos/src/tasks.c **** 			{
 5370              		.loc 1 4673 13 is_stmt 0 discriminator 4 view .LVU1424
 5371 000a 94F84830 		ldrb	r3, [r4, #72]	@ zero_extendqisi2
 5372 000e DBB2     		uxtb	r3, r3
4673:./FreeRtos/src/tasks.c **** 			{
 5373              		.loc 1 4673 6 discriminator 4 view .LVU1425
 5374 0010 022B     		cmp	r3, #2
 5375 0012 07D0     		beq	.L427
4680:./FreeRtos/src/tasks.c **** 			}
 5376              		.loc 1 4680 13 view .LVU1426
 5377 0014 0024     		movs	r4, #0
 5378              	.LVL448:
 5379              	.L423:
4683:./FreeRtos/src/tasks.c **** 
 5380              		.loc 1 4683 3 is_stmt 1 view .LVU1427
 5381 0016 FFF7FEFF 		bl	vPortExitCritical
 5382              	.LVL449:
4685:./FreeRtos/src/tasks.c **** 	}
 5383              		.loc 1 4685 3 view .LVU1428
4686:./FreeRtos/src/tasks.c **** 
 5384              		.loc 1 4686 2 is_stmt 0 view .LVU1429
 5385 001a 2046     		mov	r0, r4
 5386 001c 10BD     		pop	{r4, pc}
 5387              	.LVL450:
 5388              	.L426:
4669:./FreeRtos/src/tasks.c **** 
 5389              		.loc 1 4669 11 discriminator 1 view .LVU1430
 5390 001e 044B     		ldr	r3, .L428
 5391 0020 1C68     		ldr	r4, [r3]
 5392              	.LVL451:
4669:./FreeRtos/src/tasks.c **** 
 5393              		.loc 1 4669 11 discriminator 1 view .LVU1431
 5394 0022 F0E7     		b	.L422
 5395              	.LVL452:
 5396              	.L427:
4675:./FreeRtos/src/tasks.c **** 				xReturn = pdPASS;
 5397              		.loc 1 4675 5 is_stmt 1 view .LVU1432
4675:./FreeRtos/src/tasks.c **** 				xReturn = pdPASS;
 5398              		.loc 1 4675 26 is_stmt 0 view .LVU1433
 5399 0024 0023     		movs	r3, #0
 5400 0026 84F84830 		strb	r3, [r4, #72]
4676:./FreeRtos/src/tasks.c **** 			}
 5401              		.loc 1 4676 5 is_stmt 1 view .LVU1434
 5402              	.LVL453:
4676:./FreeRtos/src/tasks.c **** 			}
 5403              		.loc 1 4676 13 is_stmt 0 view .LVU1435
 5404 002a 0124     		movs	r4, #1
 5405              	.LVL454:
4676:./FreeRtos/src/tasks.c **** 			}
 5406              		.loc 1 4676 13 view .LVU1436
 5407 002c F3E7     		b	.L423
 5408              	.L429:
ARM GAS  /tmp/ccQvkfbu.s 			page 207


 5409 002e 00BF     		.align	2
 5410              	.L428:
 5411 0030 00000000 		.word	.LANCHOR10
 5412              		.cfi_endproc
 5413              	.LFE174:
 5415              		.global	pxCurrentTCB
 5416              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5417              		.align	2
 5418              		.set	.LANCHOR10,. + 0
 5421              	pxCurrentTCB:
 5422 0000 00000000 		.space	4
 5423              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5424              		.align	2
 5425              		.set	.LANCHOR0,. + 0
 5428              	pxDelayedTaskList:
 5429 0000 00000000 		.space	4
 5430              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5431              		.align	2
 5432              		.set	.LANCHOR8,. + 0
 5435              	pxOverflowDelayedTaskList:
 5436 0000 00000000 		.space	4
 5437              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5438              		.align	2
 5439              		.set	.LANCHOR4,. + 0
 5442              	pxReadyTasksLists:
 5443 0000 00000000 		.space	640
 5443      00000000 
 5443      00000000 
 5443      00000000 
 5443      00000000 
 5444              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5445              		.align	2
 5446              		.set	.LANCHOR9,. + 0
 5449              	uxCurrentNumberOfTasks:
 5450 0000 00000000 		.space	4
 5451              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5452              		.align	2
 5453              		.set	.LANCHOR15,. + 0
 5456              	uxDeletedTasksWaitingCleanUp:
 5457 0000 00000000 		.space	4
 5458              		.section	.bss.uxPendedTicks,"aw",%nobits
 5459              		.align	2
 5460              		.set	.LANCHOR19,. + 0
 5463              	uxPendedTicks:
 5464 0000 00000000 		.space	4
 5465              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5466              		.align	2
 5467              		.set	.LANCHOR16,. + 0
 5470              	uxSchedulerSuspended:
 5471 0000 00000000 		.space	4
 5472              		.section	.bss.uxTaskNumber,"aw",%nobits
 5473              		.align	2
 5474              		.set	.LANCHOR12,. + 0
 5477              	uxTaskNumber:
 5478 0000 00000000 		.space	4
 5479              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5480              		.align	2
ARM GAS  /tmp/ccQvkfbu.s 			page 208


 5481              		.set	.LANCHOR13,. + 0
 5484              	uxTopReadyPriority:
 5485 0000 00000000 		.space	4
 5486              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5487              		.align	2
 5488              		.set	.LANCHOR5,. + 0
 5491              	xDelayedTaskList1:
 5492 0000 00000000 		.space	20
 5492      00000000 
 5492      00000000 
 5492      00000000 
 5492      00000000 
 5493              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5494              		.align	2
 5495              		.set	.LANCHOR6,. + 0
 5498              	xDelayedTaskList2:
 5499 0000 00000000 		.space	20
 5499      00000000 
 5499      00000000 
 5499      00000000 
 5499      00000000 
 5500              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 5501              		.align	2
 5502              		.set	.LANCHOR17,. + 0
 5505              	xIdleTaskHandle:
 5506 0000 00000000 		.space	4
 5507              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5508              		.align	2
 5509              		.set	.LANCHOR1,. + 0
 5512              	xNextTaskUnblockTime:
 5513 0000 00000000 		.space	4
 5514              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5515              		.align	2
 5516              		.set	.LANCHOR18,. + 0
 5519              	xNumOfOverflows:
 5520 0000 00000000 		.space	4
 5521              		.section	.bss.xPendingReadyList,"aw",%nobits
 5522              		.align	2
 5523              		.set	.LANCHOR3,. + 0
 5526              	xPendingReadyList:
 5527 0000 00000000 		.space	20
 5527      00000000 
 5527      00000000 
 5527      00000000 
 5527      00000000 
 5528              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5529              		.align	2
 5530              		.set	.LANCHOR11,. + 0
 5533              	xSchedulerRunning:
 5534 0000 00000000 		.space	4
 5535              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5536              		.align	2
 5537              		.set	.LANCHOR2,. + 0
 5540              	xSuspendedTaskList:
 5541 0000 00000000 		.space	20
 5541      00000000 
 5541      00000000 
ARM GAS  /tmp/ccQvkfbu.s 			page 209


 5541      00000000 
 5541      00000000 
 5542              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5543              		.align	2
 5544              		.set	.LANCHOR7,. + 0
 5547              	xTasksWaitingTermination:
 5548 0000 00000000 		.space	20
 5548      00000000 
 5548      00000000 
 5548      00000000 
 5548      00000000 
 5549              		.section	.bss.xTickCount,"aw",%nobits
 5550              		.align	2
 5551              		.set	.LANCHOR14,. + 0
 5554              	xTickCount:
 5555 0000 00000000 		.space	4
 5556              		.section	.bss.xYieldPending,"aw",%nobits
 5557              		.align	2
 5558              		.set	.LANCHOR20,. + 0
 5561              	xYieldPending:
 5562 0000 00000000 		.space	4
 5563              		.text
 5564              	.Letext0:
 5565              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.2.1/include/stddef.h"
 5566              		.file 4 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 5567              		.file 5 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 5568              		.file 6 "./FreeRtos/port/include/projdefs.h"
 5569              		.file 7 "./FreeRtos/port/include/list.h"
 5570              		.file 8 "./FreeRtos/port/include/task.h"
 5571              		.file 9 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 5572              		.file 10 "./FreeRtos/port/include/portable.h"
ARM GAS  /tmp/ccQvkfbu.s 			page 210


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccQvkfbu.s:18     .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccQvkfbu.s:25     .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccQvkfbu.s:69     .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccQvkfbu.s:75     .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccQvkfbu.s:81     .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccQvkfbu.s:113    .rodata.prvTaskIsTaskSuspended.str1.4:0000000000000000 $d
     /tmp/ccQvkfbu.s:120    .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccQvkfbu.s:126    .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccQvkfbu.s:199    .text.prvTaskIsTaskSuspended:0000000000000038 $d
     /tmp/ccQvkfbu.s:207    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccQvkfbu.s:213    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccQvkfbu.s:352    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccQvkfbu.s:358    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccQvkfbu.s:433    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccQvkfbu.s:445    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccQvkfbu.s:451    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccQvkfbu.s:587    .text.prvAddNewTaskToReadyList:0000000000000090 $d
     /tmp/ccQvkfbu.s:597    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccQvkfbu.s:603    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccQvkfbu.s:723    .text.prvAddCurrentTaskToDelayedList:000000000000007c $d
     /tmp/ccQvkfbu.s:734    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccQvkfbu.s:741    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccQvkfbu.s:863    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccQvkfbu.s:870    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccQvkfbu.s:1035   .text.vTaskDelete:00000000000000b8 $d
     /tmp/ccQvkfbu.s:1050   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccQvkfbu.s:1057   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccQvkfbu.s:1179   .text.eTaskGetState:0000000000000068 $d
     /tmp/ccQvkfbu.s:1190   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccQvkfbu.s:1197   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccQvkfbu.s:1243   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccQvkfbu.s:1248   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccQvkfbu.s:1255   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccQvkfbu.s:1337   .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccQvkfbu.s:1342   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccQvkfbu.s:1349   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccQvkfbu.s:1570   .text.vTaskPrioritySet:00000000000000d0 $d
     /tmp/ccQvkfbu.s:1579   .text.vTaskResume:0000000000000000 $t
     /tmp/ccQvkfbu.s:1586   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccQvkfbu.s:1702   .text.vTaskResume:0000000000000078 $d
     /tmp/ccQvkfbu.s:1711   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccQvkfbu.s:1718   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccQvkfbu.s:1873   .text.xTaskResumeFromISR:000000000000008c $d
     /tmp/ccQvkfbu.s:1884   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d
     /tmp/ccQvkfbu.s:1888   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccQvkfbu.s:1895   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccQvkfbu.s:1997   .text.vTaskStartScheduler:0000000000000060 $d
     /tmp/ccQvkfbu.s:3173   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccQvkfbu.s:2009   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccQvkfbu.s:2016   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccQvkfbu.s:2059   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccQvkfbu.s:2064   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccQvkfbu.s:2071   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccQvkfbu.s:2088   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccQvkfbu.s:2093   .text.xTaskGetTickCount:0000000000000000 $t
ARM GAS  /tmp/ccQvkfbu.s 			page 211


     /tmp/ccQvkfbu.s:2100   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccQvkfbu.s:2121   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccQvkfbu.s:2126   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccQvkfbu.s:2133   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccQvkfbu.s:2162   .text.xTaskGetTickCountFromISR:000000000000000c $d
     /tmp/ccQvkfbu.s:2167   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccQvkfbu.s:2174   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccQvkfbu.s:2190   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccQvkfbu.s:2195   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccQvkfbu.s:2202   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccQvkfbu.s:2249   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccQvkfbu.s:2256   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccQvkfbu.s:2263   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccQvkfbu.s:2511   .text.xTaskIncrementTick:00000000000000e8 $d
     /tmp/ccQvkfbu.s:2528   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccQvkfbu.s:2535   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccQvkfbu.s:2752   .text.xTaskResumeAll:00000000000000d4 $d
     /tmp/ccQvkfbu.s:2766   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccQvkfbu.s:2773   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccQvkfbu.s:2949   .text.vTaskDelayUntil:0000000000000090 $d
     /tmp/ccQvkfbu.s:2958   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccQvkfbu.s:2965   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccQvkfbu.s:3043   .text.vTaskDelay:0000000000000044 $d
     /tmp/ccQvkfbu.s:3050   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccQvkfbu.s:3056   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccQvkfbu.s:3159   .text.prvCheckTasksWaitingTermination:0000000000000050 $d
     /tmp/ccQvkfbu.s:3167   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccQvkfbu.s:3221   .text.prvIdleTask:0000000000000024 $d
     /tmp/ccQvkfbu.s:3226   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccQvkfbu.s:3233   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccQvkfbu.s:3361   .text.vTaskSwitchContext:000000000000007c $d
     /tmp/ccQvkfbu.s:3374   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccQvkfbu.s:3381   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccQvkfbu.s:3552   .text.vTaskSuspend:00000000000000b8 $d
     /tmp/ccQvkfbu.s:3565   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccQvkfbu.s:3572   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccQvkfbu.s:3625   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccQvkfbu.s:3632   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccQvkfbu.s:3639   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccQvkfbu.s:3714   .text.vTaskPlaceOnUnorderedEventList:000000000000004c $d
     /tmp/ccQvkfbu.s:3722   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccQvkfbu.s:3729   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccQvkfbu.s:3841   .text.xTaskRemoveFromEventList:0000000000000070 $d
     /tmp/ccQvkfbu.s:3853   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccQvkfbu.s:3860   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccQvkfbu.s:3981   .text.xTaskRemoveFromUnorderedEventList:0000000000000078 $d
     /tmp/ccQvkfbu.s:3992   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccQvkfbu.s:3999   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccQvkfbu.s:4043   .text.vTaskSetTimeOutState:0000000000000024 $d
     /tmp/ccQvkfbu.s:4051   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccQvkfbu.s:4058   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccQvkfbu.s:4195   .text.xTaskCheckForTimeOut:0000000000000070 $d
     /tmp/ccQvkfbu.s:4204   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccQvkfbu.s:4211   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccQvkfbu.s:4228   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccQvkfbu.s:4233   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccQvkfbu.s:4240   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
ARM GAS  /tmp/ccQvkfbu.s 			page 212


     /tmp/ccQvkfbu.s:4278   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccQvkfbu.s:4284   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccQvkfbu.s:4291   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccQvkfbu.s:4318   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccQvkfbu.s:4323   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccQvkfbu.s:4330   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccQvkfbu.s:4452   .text.ulTaskNotifyTake:0000000000000074 $d
     /tmp/ccQvkfbu.s:4457   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccQvkfbu.s:4464   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccQvkfbu.s:4608   .text.xTaskNotifyWait:0000000000000094 $d
     /tmp/ccQvkfbu.s:4613   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccQvkfbu.s:4620   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccQvkfbu.s:4677   .text.xTaskGenericNotify:000000000000002c $d
     /tmp/ccQvkfbu.s:4682   .text.xTaskGenericNotify:0000000000000030 $t
     /tmp/ccQvkfbu.s:4835   .text.xTaskGenericNotify:00000000000000cc $d
     /tmp/ccQvkfbu.s:4844   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccQvkfbu.s:4851   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccQvkfbu.s:4932   .text.xTaskGenericNotifyFromISR:0000000000000042 $d
     /tmp/ccQvkfbu.s:4937   .text.xTaskGenericNotifyFromISR:0000000000000046 $t
     /tmp/ccQvkfbu.s:5121   .text.xTaskGenericNotifyFromISR:00000000000000f4 $d
     /tmp/ccQvkfbu.s:5133   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccQvkfbu.s:5140   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccQvkfbu.s:5326   .text.vTaskNotifyGiveFromISR:00000000000000b0 $d
     /tmp/ccQvkfbu.s:5338   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccQvkfbu.s:5345   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccQvkfbu.s:5411   .text.xTaskNotifyStateClear:0000000000000030 $d
     /tmp/ccQvkfbu.s:5421   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccQvkfbu.s:5417   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccQvkfbu.s:5424   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccQvkfbu.s:5428   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccQvkfbu.s:5431   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccQvkfbu.s:5435   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccQvkfbu.s:5438   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccQvkfbu.s:5442   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccQvkfbu.s:5445   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccQvkfbu.s:5449   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccQvkfbu.s:5452   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccQvkfbu.s:5456   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccQvkfbu.s:5459   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccQvkfbu.s:5463   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccQvkfbu.s:5466   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccQvkfbu.s:5470   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccQvkfbu.s:5473   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccQvkfbu.s:5477   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccQvkfbu.s:5480   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccQvkfbu.s:5484   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccQvkfbu.s:5487   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccQvkfbu.s:5491   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccQvkfbu.s:5494   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccQvkfbu.s:5498   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccQvkfbu.s:5501   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccQvkfbu.s:5505   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccQvkfbu.s:5508   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccQvkfbu.s:5512   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccQvkfbu.s:5515   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccQvkfbu.s:5519   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccQvkfbu.s:5522   .bss.xPendingReadyList:0000000000000000 $d
ARM GAS  /tmp/ccQvkfbu.s 			page 213


     /tmp/ccQvkfbu.s:5526   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccQvkfbu.s:5529   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccQvkfbu.s:5533   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccQvkfbu.s:5536   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccQvkfbu.s:5540   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccQvkfbu.s:5543   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccQvkfbu.s:5547   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccQvkfbu.s:5550   .bss.xTickCount:0000000000000000 $d
     /tmp/ccQvkfbu.s:5554   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccQvkfbu.s:5557   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccQvkfbu.s:5561   .bss.xYieldPending:0000000000000000 xYieldPending

UNDEFINED SYMBOLS
vPortFree
printf
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
