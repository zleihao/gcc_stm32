ARM GAS  /tmp/ccw0H4H9.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_rtc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_RTC_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_RTC_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_RTC_Init:
  27              	.LFB126:
  28              		.file 1 "./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c"
   1:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
   2:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
   3:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @file    stm32f4xx_hal_rtc.c
   4:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @author  MCD Application Team
   5:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following 
   7:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          functionalities of the Real Time Clock (RTC) peripheral:
   8:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + Initialization and de-initialization functions
   9:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + RTC Time and Date functions
  10:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + RTC Alarm functions
  11:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + Peripheral Control functions   
  12:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *           + Peripheral State functions
  13:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         
  14:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   @verbatim
  15:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==============================================================================
  16:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ##### Backup Domain Operating Condition #####
  17:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==============================================================================
  18:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The real-time clock (RTC), the RTC backup registers, and the backup 
  19:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  20:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        VDD supply is powered off.
  21:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        To retain the content of the RTC backup registers, backup SRAM, and supply 
  22:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        the RTC when VDD is turned off, VBAT pin can be connected to an optional 
  23:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  24:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  25:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] To allow the RTC operating even when the main digital supply (VDD) is turned
  26:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        off, the VBAT pin powers the following blocks:
  27:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) The RTC
  28:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) The LSE oscillator
  29:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) The backup SRAM when the low power backup regulator is enabled
  30:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC13 to PC15 I/Os, plus PI8 I/O (when available)
ARM GAS  /tmp/ccw0H4H9.s 			page 2


  31:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  32:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] When the backup domain is supplied by VDD (analog switch connected to VDD),
  33:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        the following pins are available:
  34:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as either GPIO or LSE pins
  35:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC13 can be used as a GPIO or as the RTC_AF1 pin
  36:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PI8 can be used as a GPIO or as the RTC_AF2 pin
  37:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  38:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] When the backup domain is supplied by VBAT (analog switch connected to VBAT 
  39:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        because VDD is not present), the following pins are available:
  40:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC14 and PC15 can be used as LSE pins only
  41:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PC13 can be used as the RTC_AF1 pin 
  42:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) PI8 can be used as the RTC_AF2 pin
  43:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              
  44:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  45:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
  46:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register 
  47:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        to their reset values. The BKPSRAM is not affected by this reset. The only
  48:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        way to reset the BKPSRAM is through the Flash interface by requesting 
  49:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        a protection level change from 1 to 0.
  50:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] A backup domain reset is generated when one of the following events occurs:
  51:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the 
  52:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR). 
  53:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.  
  54:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
  55:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  56:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
  57:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data 
  58:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write 
  59:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        accesses. 
  60:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  61:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable the Power Controller (PWR) APB1 interface clock using the
  62:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RCC_PWR_CLK_ENABLE() function.
  63:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  64:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Select the RTC clock source using the __HAL_RCC_RTC_CONFIG() function.
  65:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() function.
  66:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  67:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  68:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ##### How to use this driver #####
  69:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
  70:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] 
  71:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  72:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour 
  73:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  74:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  75:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *** Time and Date configuration ***
  76:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ===================================
  77:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] 
  78:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime() 
  79:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  80:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions. 
  81:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  82:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *** Alarm configuration ***
  83:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ===========================
  84:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..]
  85:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function. 
  86:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         You can also configure the RTC Alarm with interrupt mode using the HAL_RTC_SetAlarm_IT() fu
  87:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
ARM GAS  /tmp/ccw0H4H9.s 			page 3


  88:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
  89:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  90:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ==================================================================
  91:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate 
  92:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        function.
  93:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
  94:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        RTC wake-up, RTC tamper event detection and RTC time stamp event detection.
  95:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and 
  96:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        Standby low power modes.
  97:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending 
  98:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        on an external interrupt (Auto-wake-up mode), by using the RTC alarm 
  99:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        or the RTC wake-up events.
 100:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the 
 101:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
 102:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        Wake-up from STOP and STANDBY modes is possible only when the RTC clock source
 103:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        is LSE or LSI.
 104:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****      
 105:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    @endverbatim
 106:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
 107:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @attention
 108:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 109:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 110:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 111:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 112:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * are permitted provided that the following conditions are met:
 113:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 114:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer.
 115:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 116:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *      this list of conditions and the following disclaimer in the documentation
 117:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *      and/or other materials provided with the distribution.
 118:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 119:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *      may be used to endorse or promote products derived from this software
 120:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *      without specific prior written permission.
 121:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 122:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 123:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 124:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 125:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 126:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 127:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 128:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 129:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 130:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 131:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 132:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *
 133:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   ******************************************************************************
 134:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */ 
 135:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 136:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 137:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #include "stm32f4xx_hal.h"
 138:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 139:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @addtogroup STM32F4xx_HAL_Driver
 140:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 141:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 142:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 143:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC RTC
 144:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief RTC HAL module driver
ARM GAS  /tmp/ccw0H4H9.s 			page 4


 145:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 146:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 147:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 148:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 149:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 150:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 151:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 152:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 153:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 154:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 155:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /* Private functions ---------------------------------------------------------*/
 156:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 157:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions RTC Exported Functions
 158:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 159:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 160:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 161:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group1 Initialization and de-initialization functions 
 162:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions 
 163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *
 164:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim    
 165:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 166:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 167:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 168:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the 
 169:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable 
 170:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode, 
 171:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 172:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base. 
 173:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 174:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 13-bit synchronous prescaler.
 175:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the 
 176:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
 177:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 178:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 179:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter 
 180:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped 
 181:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is 
 182:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 183:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar 
 184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              initialization, calendar update or after wake-up from low power modes 
 185:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then 
 186:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means 
 187:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the 
 188:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function 
 189:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 190:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  
 191:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
 192:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 193:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 194:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 195:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 196:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Initializes the RTC peripheral 
 197:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 198:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 199:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 200:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 201:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
ARM GAS  /tmp/ccw0H4H9.s 			page 5


 202:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
  29              		.loc 1 202 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 203:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the RTC peripheral state */
 204:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(hrtc == NULL)
  45              		.loc 1 204 5
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 205:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 206:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****      return HAL_ERROR;
  49              		.loc 1 206 13
  50 000e 0123     		movs	r3, #1
  51 0010 83E0     		b	.L3
  52              	.L2:
 207:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 208:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 209:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 210:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 211:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 213:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT(hrtc->Init.OutPut));
 214:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param (IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 215:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 216:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 217:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(hrtc->State == HAL_RTC_STATE_RESET)
  53              		.loc 1 217 10
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 5B7F     		ldrb	r3, [r3, #29]
  56 0016 DBB2     		uxtb	r3, r3
  57              		.loc 1 217 5
  58 0018 002B     		cmp	r3, #0
  59 001a 05D1     		bne	.L4
 218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 219:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Allocate lock resource and initialize it */
 220:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Lock = HAL_UNLOCKED;
  60              		.loc 1 220 16
  61 001c 7B68     		ldr	r3, [r7, #4]
  62 001e 0022     		movs	r2, #0
  63 0020 1A77     		strb	r2, [r3, #28]
 221:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Initialize RTC MSP */
 222:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     HAL_RTC_MspInit(hrtc);
  64              		.loc 1 222 5
ARM GAS  /tmp/ccw0H4H9.s 			page 6


  65 0022 7868     		ldr	r0, [r7, #4]
  66 0024 FFF7FEFF 		bl	HAL_RTC_MspInit
  67              	.L4:
 223:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 224:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 225:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set RTC state */  
 226:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;  
  68              		.loc 1 226 15
  69 0028 7B68     		ldr	r3, [r7, #4]
  70 002a 0222     		movs	r2, #2
  71 002c 5A77     		strb	r2, [r3, #29]
 227:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****        
 228:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 229:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  72              		.loc 1 229 3
  73 002e 7B68     		ldr	r3, [r7, #4]
  74 0030 1B68     		ldr	r3, [r3]
  75 0032 CA22     		movs	r2, #202
  76 0034 5A62     		str	r2, [r3, #36]
  77 0036 7B68     		ldr	r3, [r7, #4]
  78 0038 1B68     		ldr	r3, [r3]
  79 003a 5322     		movs	r2, #83
  80 003c 5A62     		str	r2, [r3, #36]
 230:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set Initialization mode */
 232:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
  81              		.loc 1 232 6
  82 003e 7868     		ldr	r0, [r7, #4]
  83 0040 FFF7FEFF 		bl	RTC_EnterInitMode
  84 0044 0346     		mov	r3, r0
  85              		.loc 1 232 5
  86 0046 002B     		cmp	r3, #0
  87 0048 08D0     		beq	.L5
 233:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 234:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 235:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
  88              		.loc 1 235 5
  89 004a 7B68     		ldr	r3, [r7, #4]
  90 004c 1B68     		ldr	r3, [r3]
  91 004e FF22     		movs	r2, #255
  92 0050 5A62     		str	r2, [r3, #36]
 236:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 237:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set RTC state */
 238:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
  93              		.loc 1 238 17
  94 0052 7B68     		ldr	r3, [r7, #4]
  95 0054 0422     		movs	r2, #4
  96 0056 5A77     		strb	r2, [r3, #29]
 239:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 240:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_ERROR;
  97              		.loc 1 240 12
  98 0058 0123     		movs	r3, #1
  99 005a 5EE0     		b	.L3
 100              	.L5:
 241:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   } 
 242:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 243:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   { 
ARM GAS  /tmp/ccw0H4H9.s 			page 7


 244:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear RTC_CR FMT, OSEL and POL Bits */
 245:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 101              		.loc 1 245 9
 102 005c 7B68     		ldr	r3, [r7, #4]
 103 005e 1B68     		ldr	r3, [r3]
 104              		.loc 1 245 24
 105 0060 9B68     		ldr	r3, [r3, #8]
 106              		.loc 1 245 9
 107 0062 7A68     		ldr	r2, [r7, #4]
 108 0064 1268     		ldr	r2, [r2]
 109              		.loc 1 245 24
 110 0066 23F4E003 		bic	r3, r3, #7340032
 111 006a 23F04003 		bic	r3, r3, #64
 112 006e 9360     		str	r3, [r2, #8]
 246:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set RTC_CR register */
 247:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutP
 113              		.loc 1 247 9
 114 0070 7B68     		ldr	r3, [r7, #4]
 115 0072 1B68     		ldr	r3, [r3]
 116              		.loc 1 247 24
 117 0074 9968     		ldr	r1, [r3, #8]
 118              		.loc 1 247 48
 119 0076 7B68     		ldr	r3, [r7, #4]
 120 0078 5A68     		ldr	r2, [r3, #4]
 121              		.loc 1 247 72
 122 007a 7B68     		ldr	r3, [r7, #4]
 123 007c 1B69     		ldr	r3, [r3, #16]
 124              		.loc 1 247 60
 125 007e 1A43     		orrs	r2, r2, r3
 126              		.loc 1 247 92
 127 0080 7B68     		ldr	r3, [r7, #4]
 128 0082 5B69     		ldr	r3, [r3, #20]
 129              		.loc 1 247 80
 130 0084 1A43     		orrs	r2, r2, r3
 131              		.loc 1 247 9
 132 0086 7B68     		ldr	r3, [r7, #4]
 133 0088 1B68     		ldr	r3, [r3]
 134              		.loc 1 247 24
 135 008a 0A43     		orrs	r2, r2, r1
 136 008c 9A60     		str	r2, [r3, #8]
 248:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 249:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the RTC PRER */
 250:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 137              		.loc 1 250 9
 138 008e 7B68     		ldr	r3, [r7, #4]
 139 0090 1B68     		ldr	r3, [r3]
 140              		.loc 1 250 49
 141 0092 7A68     		ldr	r2, [r7, #4]
 142 0094 D268     		ldr	r2, [r2, #12]
 143              		.loc 1 250 26
 144 0096 1A61     		str	r2, [r3, #16]
 251:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 145              		.loc 1 251 9
 146 0098 7B68     		ldr	r3, [r7, #4]
 147 009a 1B68     		ldr	r3, [r3]
 148              		.loc 1 251 26
 149 009c 1969     		ldr	r1, [r3, #16]
ARM GAS  /tmp/ccw0H4H9.s 			page 8


 150              		.loc 1 251 50
 151 009e 7B68     		ldr	r3, [r7, #4]
 152 00a0 9B68     		ldr	r3, [r3, #8]
 153              		.loc 1 251 64
 154 00a2 1A04     		lsls	r2, r3, #16
 155              		.loc 1 251 9
 156 00a4 7B68     		ldr	r3, [r7, #4]
 157 00a6 1B68     		ldr	r3, [r3]
 158              		.loc 1 251 26
 159 00a8 0A43     		orrs	r2, r2, r1
 160 00aa 1A61     		str	r2, [r3, #16]
 252:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 253:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Exit Initialization mode */
 254:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 161              		.loc 1 254 9
 162 00ac 7B68     		ldr	r3, [r7, #4]
 163 00ae 1B68     		ldr	r3, [r3]
 164              		.loc 1 254 25
 165 00b0 DA68     		ldr	r2, [r3, #12]
 166              		.loc 1 254 9
 167 00b2 7B68     		ldr	r3, [r7, #4]
 168 00b4 1B68     		ldr	r3, [r3]
 169              		.loc 1 254 25
 170 00b6 22F08002 		bic	r2, r2, #128
 171 00ba DA60     		str	r2, [r3, #12]
 255:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 256:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 257:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 172              		.loc 1 257 13
 173 00bc 7B68     		ldr	r3, [r7, #4]
 174 00be 1B68     		ldr	r3, [r3]
 175              		.loc 1 257 23
 176 00c0 9B68     		ldr	r3, [r3, #8]
 177              		.loc 1 257 28
 178 00c2 03F02003 		and	r3, r3, #32
 179              		.loc 1 257 7
 180 00c6 002B     		cmp	r3, #0
 181 00c8 0ED1     		bne	.L6
 258:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 259:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 182              		.loc 1 259 10
 183 00ca 7868     		ldr	r0, [r7, #4]
 184 00cc FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 185 00d0 0346     		mov	r3, r0
 186              		.loc 1 259 9
 187 00d2 002B     		cmp	r3, #0
 188 00d4 08D0     		beq	.L6
 260:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
 261:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 262:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 189              		.loc 1 262 9
 190 00d6 7B68     		ldr	r3, [r7, #4]
 191 00d8 1B68     		ldr	r3, [r3]
 192 00da FF22     		movs	r2, #255
 193 00dc 5A62     		str	r2, [r3, #36]
 263:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 264:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
ARM GAS  /tmp/ccw0H4H9.s 			page 9


 194              		.loc 1 264 21
 195 00de 7B68     		ldr	r3, [r7, #4]
 196 00e0 0422     		movs	r2, #4
 197 00e2 5A77     		strb	r2, [r3, #29]
 265:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 266:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_ERROR;
 198              		.loc 1 266 16
 199 00e4 0123     		movs	r3, #1
 200 00e6 18E0     		b	.L3
 201              	.L6:
 267:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
 268:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 269:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 270:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 202              		.loc 1 270 9
 203 00e8 7B68     		ldr	r3, [r7, #4]
 204 00ea 1B68     		ldr	r3, [r3]
 205              		.loc 1 270 27
 206 00ec 1A6C     		ldr	r2, [r3, #64]
 207              		.loc 1 270 9
 208 00ee 7B68     		ldr	r3, [r7, #4]
 209 00f0 1B68     		ldr	r3, [r3]
 210              		.loc 1 270 27
 211 00f2 22F48022 		bic	r2, r2, #262144
 212 00f6 1A64     		str	r2, [r3, #64]
 271:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 213              		.loc 1 271 9
 214 00f8 7B68     		ldr	r3, [r7, #4]
 215 00fa 1B68     		ldr	r3, [r3]
 216              		.loc 1 271 27
 217 00fc 196C     		ldr	r1, [r3, #64]
 218              		.loc 1 271 51
 219 00fe 7B68     		ldr	r3, [r7, #4]
 220 0100 9A69     		ldr	r2, [r3, #24]
 221              		.loc 1 271 9
 222 0102 7B68     		ldr	r3, [r7, #4]
 223 0104 1B68     		ldr	r3, [r3]
 224              		.loc 1 271 27
 225 0106 0A43     		orrs	r2, r2, r1
 226 0108 1A64     		str	r2, [r3, #64]
 272:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 273:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 274:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 227              		.loc 1 274 5
 228 010a 7B68     		ldr	r3, [r7, #4]
 229 010c 1B68     		ldr	r3, [r3]
 230 010e FF22     		movs	r2, #255
 231 0110 5A62     		str	r2, [r3, #36]
 275:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 276:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set RTC state */
 277:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 232              		.loc 1 277 17
 233 0112 7B68     		ldr	r3, [r7, #4]
 234 0114 0122     		movs	r2, #1
 235 0116 5A77     		strb	r2, [r3, #29]
 278:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 279:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_OK;
ARM GAS  /tmp/ccw0H4H9.s 			page 10


 236              		.loc 1 279 12
 237 0118 0023     		movs	r3, #0
 238              	.L3:
 280:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 281:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 239              		.loc 1 281 1
 240 011a 1846     		mov	r0, r3
 241 011c 0837     		adds	r7, r7, #8
 242              	.LCFI3:
 243              		.cfi_def_cfa_offset 8
 244 011e BD46     		mov	sp, r7
 245              	.LCFI4:
 246              		.cfi_def_cfa_register 13
 247              		@ sp needed
 248 0120 80BD     		pop	{r7, pc}
 249              		.cfi_endproc
 250              	.LFE126:
 252              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
 253              		.align	1
 254              		.global	HAL_RTC_DeInit
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	HAL_RTC_DeInit:
 261              	.LFB127:
 282:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 283:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 284:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  DeInitializes the RTC peripheral 
 285:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 287:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.   
 288:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 289:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 290:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 291:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 262              		.loc 1 291 1
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 16
 265              		@ frame_needed = 1, uses_anonymous_args = 0
 266 0000 80B5     		push	{r7, lr}
 267              	.LCFI5:
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 7, -8
 270              		.cfi_offset 14, -4
 271 0002 84B0     		sub	sp, sp, #16
 272              	.LCFI6:
 273              		.cfi_def_cfa_offset 24
 274 0004 00AF     		add	r7, sp, #0
 275              	.LCFI7:
 276              		.cfi_def_cfa_register 7
 277 0006 7860     		str	r0, [r7, #4]
 292:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 278              		.loc 1 292 12
 279 0008 0023     		movs	r3, #0
 280 000a FB60     		str	r3, [r7, #12]
 293:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  /tmp/ccw0H4H9.s 			page 11


 294:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set RTC state */
 295:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 281              		.loc 1 295 15
 282 000c 7B68     		ldr	r3, [r7, #4]
 283 000e 0222     		movs	r2, #2
 284 0010 5A77     		strb	r2, [r3, #29]
 296:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 297:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 298:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 285              		.loc 1 298 3
 286 0012 7B68     		ldr	r3, [r7, #4]
 287 0014 1B68     		ldr	r3, [r3]
 288 0016 CA22     		movs	r2, #202
 289 0018 5A62     		str	r2, [r3, #36]
 290 001a 7B68     		ldr	r3, [r7, #4]
 291 001c 1B68     		ldr	r3, [r3]
 292 001e 5322     		movs	r2, #83
 293 0020 5A62     		str	r2, [r3, #36]
 299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 300:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set Initialization mode */
 301:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 294              		.loc 1 301 6
 295 0022 7868     		ldr	r0, [r7, #4]
 296 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 297 0028 0346     		mov	r3, r0
 298              		.loc 1 301 5
 299 002a 002B     		cmp	r3, #0
 300 002c 08D0     		beq	.L8
 302:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 303:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 304:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 301              		.loc 1 304 5
 302 002e 7B68     		ldr	r3, [r7, #4]
 303 0030 1B68     		ldr	r3, [r3]
 304 0032 FF22     		movs	r2, #255
 305 0034 5A62     		str	r2, [r3, #36]
 305:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 306:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set RTC state */
 307:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 306              		.loc 1 307 17
 307 0036 7B68     		ldr	r3, [r7, #4]
 308 0038 0422     		movs	r2, #4
 309 003a 5A77     		strb	r2, [r3, #29]
 308:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 309:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_ERROR;
 310              		.loc 1 309 12
 311 003c 0123     		movs	r3, #1
 312 003e 84E0     		b	.L9
 313              	.L8:
 310:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }  
 311:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 312:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 313:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset TR, DR and CR registers */
 314:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TR = 0x00000000U;
 314              		.loc 1 314 9
 315 0040 7B68     		ldr	r3, [r7, #4]
 316 0042 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccw0H4H9.s 			page 12


 317              		.loc 1 314 24
 318 0044 0022     		movs	r2, #0
 319 0046 1A60     		str	r2, [r3]
 315:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->DR = 0x00002101U;
 320              		.loc 1 315 9
 321 0048 7B68     		ldr	r3, [r7, #4]
 322 004a 1B68     		ldr	r3, [r3]
 323              		.loc 1 315 24
 324 004c 42F20112 		movw	r2, #8449
 325 0050 5A60     		str	r2, [r3, #4]
 316:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 317:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR &= 0x00000007U;
 326              		.loc 1 317 9
 327 0052 7B68     		ldr	r3, [r7, #4]
 328 0054 1B68     		ldr	r3, [r3]
 329              		.loc 1 317 24
 330 0056 9A68     		ldr	r2, [r3, #8]
 331              		.loc 1 317 9
 332 0058 7B68     		ldr	r3, [r7, #4]
 333 005a 1B68     		ldr	r3, [r3]
 334              		.loc 1 317 24
 335 005c 02F00702 		and	r2, r2, #7
 336 0060 9A60     		str	r2, [r3, #8]
 318:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 319:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
 320:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 337              		.loc 1 320 17
 338 0062 FFF7FEFF 		bl	HAL_GetTick
 339 0066 F860     		str	r0, [r7, #12]
 321:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 322:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till WUTWF flag is set and if Time out is reached exit */
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while(((hrtc->Instance->ISR) & RTC_ISR_WUTWF) == (uint32_t)RESET)
 340              		.loc 1 323 10
 341 0068 10E0     		b	.L10
 342              	.L11:
 324:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 325:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 343              		.loc 1 325 11
 344 006a FFF7FEFF 		bl	HAL_GetTick
 345 006e 0246     		mov	r2, r0
 346              		.loc 1 325 25
 347 0070 FB68     		ldr	r3, [r7, #12]
 348 0072 D31A     		subs	r3, r2, r3
 349              		.loc 1 325 9
 350 0074 B3F57A7F 		cmp	r3, #1000
 351 0078 08D9     		bls	.L10
 326:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       { 
 327:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 328:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 352              		.loc 1 328 9
 353 007a 7B68     		ldr	r3, [r7, #4]
 354 007c 1B68     		ldr	r3, [r3]
 355 007e FF22     		movs	r2, #255
 356 0080 5A62     		str	r2, [r3, #36]
 329:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 330:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Set RTC state */
 331:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
ARM GAS  /tmp/ccw0H4H9.s 			page 13


 357              		.loc 1 331 21
 358 0082 7B68     		ldr	r3, [r7, #4]
 359 0084 0322     		movs	r2, #3
 360 0086 5A77     		strb	r2, [r3, #29]
 332:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 333:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 361              		.loc 1 333 16
 362 0088 0323     		movs	r3, #3
 363 008a 5EE0     		b	.L9
 364              	.L10:
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 365              		.loc 1 323 17
 366 008c 7B68     		ldr	r3, [r7, #4]
 367 008e 1B68     		ldr	r3, [r3]
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 368              		.loc 1 323 27
 369 0090 DB68     		ldr	r3, [r3, #12]
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 370              		.loc 1 323 34
 371 0092 03F00403 		and	r3, r3, #4
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 372              		.loc 1 323 10
 373 0096 002B     		cmp	r3, #0
 374 0098 E7D0     		beq	.L11
 334:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }      
 335:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 336:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 337:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset all RTC CR register bits */
 338:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR &= 0x00000000U;
 375              		.loc 1 338 9
 376 009a 7B68     		ldr	r3, [r7, #4]
 377 009c 1B68     		ldr	r3, [r3]
 378              		.loc 1 338 24
 379 009e 9B68     		ldr	r3, [r3, #8]
 380              		.loc 1 338 9
 381 00a0 7B68     		ldr	r3, [r7, #4]
 382 00a2 1B68     		ldr	r3, [r3]
 383              		.loc 1 338 24
 384 00a4 0022     		movs	r2, #0
 385 00a6 9A60     		str	r2, [r3, #8]
 339:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->WUTR = 0x0000FFFFU;
 386              		.loc 1 339 9
 387 00a8 7B68     		ldr	r3, [r7, #4]
 388 00aa 1B68     		ldr	r3, [r3]
 389              		.loc 1 339 26
 390 00ac 4FF6FF72 		movw	r2, #65535
 391 00b0 5A61     		str	r2, [r3, #20]
 340:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->PRER = 0x007F00FFU;
 392              		.loc 1 340 9
 393 00b2 7B68     		ldr	r3, [r7, #4]
 394 00b4 1B68     		ldr	r3, [r3]
 395              		.loc 1 340 26
 396 00b6 274A     		ldr	r2, .L13
 397 00b8 1A61     		str	r2, [r3, #16]
 341:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CALIBR = 0x00000000U;
 398              		.loc 1 341 9
 399 00ba 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccw0H4H9.s 			page 14


 400 00bc 1B68     		ldr	r3, [r3]
 401              		.loc 1 341 28
 402 00be 0022     		movs	r2, #0
 403 00c0 9A61     		str	r2, [r3, #24]
 342:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = 0x00000000U;
 404              		.loc 1 342 9
 405 00c2 7B68     		ldr	r3, [r7, #4]
 406 00c4 1B68     		ldr	r3, [r3]
 407              		.loc 1 342 28
 408 00c6 0022     		movs	r2, #0
 409 00c8 DA61     		str	r2, [r3, #28]
 343:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = 0x00000000U;
 410              		.loc 1 343 9
 411 00ca 7B68     		ldr	r3, [r7, #4]
 412 00cc 1B68     		ldr	r3, [r3]
 413              		.loc 1 343 28
 414 00ce 0022     		movs	r2, #0
 415 00d0 1A62     		str	r2, [r3, #32]
 344:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->SHIFTR = 0x00000000U;
 416              		.loc 1 344 9
 417 00d2 7B68     		ldr	r3, [r7, #4]
 418 00d4 1B68     		ldr	r3, [r3]
 419              		.loc 1 344 28
 420 00d6 0022     		movs	r2, #0
 421 00d8 DA62     		str	r2, [r3, #44]
 345:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CALR = 0x00000000U;
 422              		.loc 1 345 9
 423 00da 7B68     		ldr	r3, [r7, #4]
 424 00dc 1B68     		ldr	r3, [r3]
 425              		.loc 1 345 26
 426 00de 0022     		movs	r2, #0
 427 00e0 DA63     		str	r2, [r3, #60]
 346:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = 0x00000000U;
 428              		.loc 1 346 9
 429 00e2 7B68     		ldr	r3, [r7, #4]
 430 00e4 1B68     		ldr	r3, [r3]
 431              		.loc 1 346 30
 432 00e6 0022     		movs	r2, #0
 433 00e8 5A64     		str	r2, [r3, #68]
 347:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = 0x00000000U;
 434              		.loc 1 347 9
 435 00ea 7B68     		ldr	r3, [r7, #4]
 436 00ec 1B68     		ldr	r3, [r3]
 437              		.loc 1 347 30
 438 00ee 0022     		movs	r2, #0
 439 00f0 9A64     		str	r2, [r3, #72]
 348:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset ISR register and exit initialization mode */
 350:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ISR = 0x00000000U;
 440              		.loc 1 350 9
 441 00f2 7B68     		ldr	r3, [r7, #4]
 442 00f4 1B68     		ldr	r3, [r3]
 443              		.loc 1 350 25
 444 00f6 0022     		movs	r2, #0
 445 00f8 DA60     		str	r2, [r3, #12]
 351:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 352:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Reset Tamper and alternate functions configuration register */
ARM GAS  /tmp/ccw0H4H9.s 			page 15


 353:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TAFCR = 0x00000000U;
 446              		.loc 1 353 9
 447 00fa 7B68     		ldr	r3, [r7, #4]
 448 00fc 1B68     		ldr	r3, [r3]
 449              		.loc 1 353 27
 450 00fe 0022     		movs	r2, #0
 451 0100 1A64     		str	r2, [r3, #64]
 354:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 355:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* If  RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 356:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 452              		.loc 1 356 13
 453 0102 7B68     		ldr	r3, [r7, #4]
 454 0104 1B68     		ldr	r3, [r3]
 455              		.loc 1 356 23
 456 0106 9B68     		ldr	r3, [r3, #8]
 457              		.loc 1 356 28
 458 0108 03F02003 		and	r3, r3, #32
 459              		.loc 1 356 7
 460 010c 002B     		cmp	r3, #0
 461 010e 0ED1     		bne	.L12
 357:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 358:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 462              		.loc 1 358 10
 463 0110 7868     		ldr	r0, [r7, #4]
 464 0112 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 465 0116 0346     		mov	r3, r0
 466              		.loc 1 358 9
 467 0118 002B     		cmp	r3, #0
 468 011a 08D0     		beq	.L12
 359:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
 360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 361:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 469              		.loc 1 361 9
 470 011c 7B68     		ldr	r3, [r7, #4]
 471 011e 1B68     		ldr	r3, [r3]
 472 0120 FF22     		movs	r2, #255
 473 0122 5A62     		str	r2, [r3, #36]
 362:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 363:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 474              		.loc 1 363 21
 475 0124 7B68     		ldr	r3, [r7, #4]
 476 0126 0422     		movs	r2, #4
 477 0128 5A77     		strb	r2, [r3, #29]
 364:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 365:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_ERROR;
 478              		.loc 1 365 16
 479 012a 0123     		movs	r3, #1
 480 012c 0DE0     		b	.L9
 481              	.L12:
 366:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
 367:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }    
 368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 370:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 371:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 482              		.loc 1 371 3
 483 012e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccw0H4H9.s 			page 16


 484 0130 1B68     		ldr	r3, [r3]
 485 0132 FF22     		movs	r2, #255
 486 0134 5A62     		str	r2, [r3, #36]
 372:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 373:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* De-Initialize RTC MSP */
 374:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   HAL_RTC_MspDeInit(hrtc);
 487              		.loc 1 374 3
 488 0136 7868     		ldr	r0, [r7, #4]
 489 0138 FFF7FEFF 		bl	HAL_RTC_MspDeInit
 375:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 376:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_RESET; 
 490              		.loc 1 376 15
 491 013c 7B68     		ldr	r3, [r7, #4]
 492 013e 0022     		movs	r2, #0
 493 0140 5A77     		strb	r2, [r3, #29]
 377:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 378:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Release Lock */
 379:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 494              		.loc 1 379 3
 495 0142 7B68     		ldr	r3, [r7, #4]
 496 0144 0022     		movs	r2, #0
 497 0146 1A77     		strb	r2, [r3, #28]
 380:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 381:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 498              		.loc 1 381 10
 499 0148 0023     		movs	r3, #0
 500              	.L9:
 382:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 501              		.loc 1 382 1
 502 014a 1846     		mov	r0, r3
 503 014c 1037     		adds	r7, r7, #16
 504              	.LCFI8:
 505              		.cfi_def_cfa_offset 8
 506 014e BD46     		mov	sp, r7
 507              	.LCFI9:
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 0150 80BD     		pop	{r7, pc}
 511              	.L14:
 512 0152 00BF     		.align	2
 513              	.L13:
 514 0154 FF007F00 		.word	8323327
 515              		.cfi_endproc
 516              	.LFE127:
 518              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
 519              		.align	1
 520              		.weak	HAL_RTC_MspInit
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu fpv4-sp-d16
 526              	HAL_RTC_MspInit:
 527              	.LFB128:
 383:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 384:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 385:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Initializes the RTC MSP.
 386:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
ARM GAS  /tmp/ccw0H4H9.s 			page 17


 387:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.  
 388:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
 389:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 390:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
 391:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 528              		.loc 1 391 1
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 8
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532              		@ link register save eliminated.
 533 0000 80B4     		push	{r7}
 534              	.LCFI10:
 535              		.cfi_def_cfa_offset 4
 536              		.cfi_offset 7, -4
 537 0002 83B0     		sub	sp, sp, #12
 538              	.LCFI11:
 539              		.cfi_def_cfa_offset 16
 540 0004 00AF     		add	r7, sp, #0
 541              	.LCFI12:
 542              		.cfi_def_cfa_register 7
 543 0006 7860     		str	r0, [r7, #4]
 392:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 393:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   UNUSED(hrtc);
 394:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 395:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 396:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    */ 
 397:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 544              		.loc 1 397 1
 545 0008 00BF     		nop
 546 000a 0C37     		adds	r7, r7, #12
 547              	.LCFI13:
 548              		.cfi_def_cfa_offset 4
 549 000c BD46     		mov	sp, r7
 550              	.LCFI14:
 551              		.cfi_def_cfa_register 13
 552              		@ sp needed
 553 000e 5DF8047B 		ldr	r7, [sp], #4
 554              	.LCFI15:
 555              		.cfi_restore 7
 556              		.cfi_def_cfa_offset 0
 557 0012 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE128:
 561              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
 562              		.align	1
 563              		.weak	HAL_RTC_MspDeInit
 564              		.syntax unified
 565              		.thumb
 566              		.thumb_func
 567              		.fpu fpv4-sp-d16
 569              	HAL_RTC_MspDeInit:
 570              	.LFB129:
 398:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 399:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 400:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  DeInitializes the RTC MSP.
 401:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 402:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC. 
ARM GAS  /tmp/ccw0H4H9.s 			page 18


 403:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
 404:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
 406:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 571              		.loc 1 406 1
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 8
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576 0000 80B4     		push	{r7}
 577              	.LCFI16:
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 7, -4
 580 0002 83B0     		sub	sp, sp, #12
 581              	.LCFI17:
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              	.LCFI18:
 585              		.cfi_def_cfa_register 7
 586 0006 7860     		str	r0, [r7, #4]
 407:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 408:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   UNUSED(hrtc);
 409:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 410:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 411:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    */ 
 412:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 587              		.loc 1 412 1
 588 0008 00BF     		nop
 589 000a 0C37     		adds	r7, r7, #12
 590              	.LCFI19:
 591              		.cfi_def_cfa_offset 4
 592 000c BD46     		mov	sp, r7
 593              	.LCFI20:
 594              		.cfi_def_cfa_register 13
 595              		@ sp needed
 596 000e 5DF8047B 		ldr	r7, [sp], #4
 597              	.LCFI21:
 598              		.cfi_restore 7
 599              		.cfi_def_cfa_offset 0
 600 0012 7047     		bx	lr
 601              		.cfi_endproc
 602              	.LFE129:
 604              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 605              		.align	1
 606              		.global	HAL_RTC_SetTime
 607              		.syntax unified
 608              		.thumb
 609              		.thumb_func
 610              		.fpu fpv4-sp-d16
 612              	HAL_RTC_SetTime:
 613              	.LFB130:
 413:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 414:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 415:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
 416:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 417:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 418:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group2 RTC Time and Date functions
ARM GAS  /tmp/ccw0H4H9.s 			page 19


 419:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 420:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *
 421:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim   
 422:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 423:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 424:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================  
 425:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  
 426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 427:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 428:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
 429:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 430:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 432:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 433:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets RTC current time.
 434:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 436:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 437:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 438:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 439:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 440:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 441:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 442:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 443:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 444:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 614              		.loc 1 444 1
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 24
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618 0000 90B5     		push	{r4, r7, lr}
 619              	.LCFI22:
 620              		.cfi_def_cfa_offset 12
 621              		.cfi_offset 4, -12
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 87B0     		sub	sp, sp, #28
 625              	.LCFI23:
 626              		.cfi_def_cfa_offset 40
 627 0004 00AF     		add	r7, sp, #0
 628              	.LCFI24:
 629              		.cfi_def_cfa_register 7
 630 0006 F860     		str	r0, [r7, #12]
 631 0008 B960     		str	r1, [r7, #8]
 632 000a 7A60     		str	r2, [r7, #4]
 445:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 633              		.loc 1 445 12
 634 000c 0023     		movs	r3, #0
 635 000e 7B61     		str	r3, [r7, #20]
 446:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 447:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  /* Check the parameters */
 448:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 449:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 450:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 451:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 452:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */ 
 453:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
ARM GAS  /tmp/ccw0H4H9.s 			page 20


 636              		.loc 1 453 3
 637 0010 FB68     		ldr	r3, [r7, #12]
 638 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 639 0014 012B     		cmp	r3, #1
 640 0016 01D1     		bne	.L18
 641              		.loc 1 453 3 is_stmt 0 discriminator 1
 642 0018 0223     		movs	r3, #2
 643 001a B2E0     		b	.L19
 644              	.L18:
 645              		.loc 1 453 3 discriminator 2
 646 001c FB68     		ldr	r3, [r7, #12]
 647 001e 0122     		movs	r2, #1
 648 0020 1A77     		strb	r2, [r3, #28]
 454:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 455:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 649              		.loc 1 455 15 is_stmt 1 discriminator 2
 650 0022 FB68     		ldr	r3, [r7, #12]
 651 0024 0222     		movs	r2, #2
 652 0026 5A77     		strb	r2, [r3, #29]
 456:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 457:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 653              		.loc 1 457 5 discriminator 2
 654 0028 7B68     		ldr	r3, [r7, #4]
 655 002a 002B     		cmp	r3, #0
 656 002c 26D1     		bne	.L20
 458:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 459:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 657              		.loc 1 459 13
 658 002e FB68     		ldr	r3, [r7, #12]
 659 0030 1B68     		ldr	r3, [r3]
 660              		.loc 1 459 23
 661 0032 9B68     		ldr	r3, [r3, #8]
 662              		.loc 1 459 28
 663 0034 03F04003 		and	r3, r3, #64
 664              		.loc 1 459 7
 665 0038 002B     		cmp	r3, #0
 666 003a 02D1     		bne	.L21
 460:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 461:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sTime->Hours));
 462:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 463:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
 464:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 465:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 466:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 667              		.loc 1 466 25
 668 003c BB68     		ldr	r3, [r7, #8]
 669 003e 0022     		movs	r2, #0
 670 0040 DA70     		strb	r2, [r3, #3]
 671              	.L21:
 467:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sTime->Hours));
 468:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 469:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sTime->Minutes));
 470:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sTime->Seconds));
 471:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 672              		.loc 1 472 36
 673 0042 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccw0H4H9.s 			page 21


 674 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 675 0046 1846     		mov	r0, r3
 676 0048 FFF7FEFF 		bl	RTC_ByteToBcd2
 677 004c 0346     		mov	r3, r0
 678              		.loc 1 472 65
 679 004e 1C04     		lsls	r4, r3, #16
 473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 680              		.loc 1 473 36
 681 0050 BB68     		ldr	r3, [r7, #8]
 682 0052 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 683 0054 1846     		mov	r0, r3
 684 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 685 005a 0346     		mov	r3, r0
 686              		.loc 1 473 67
 687 005c 1B02     		lsls	r3, r3, #8
 472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 688              		.loc 1 472 73
 689 005e 1C43     		orrs	r4, r4, r3
 474:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 690              		.loc 1 474 36
 691 0060 BB68     		ldr	r3, [r7, #8]
 692 0062 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 693 0064 1846     		mov	r0, r3
 694 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 695 006a 0346     		mov	r3, r0
 473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 696              		.loc 1 473 74
 697 006c 44EA0302 		orr	r2, r4, r3
 475:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         (((uint32_t)sTime->TimeFormat) << 16U));  
 698              		.loc 1 475 42
 699 0070 BB68     		ldr	r3, [r7, #8]
 700 0072 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 701              		.loc 1 475 56
 702 0074 1B04     		lsls	r3, r3, #16
 472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                         ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 703              		.loc 1 472 12
 704 0076 1343     		orrs	r3, r3, r2
 705 0078 7B61     		str	r3, [r7, #20]
 706 007a 20E0     		b	.L22
 707              	.L20:
 476:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 477:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 478:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 479:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 708              		.loc 1 479 13
 709 007c FB68     		ldr	r3, [r7, #12]
 710 007e 1B68     		ldr	r3, [r3]
 711              		.loc 1 479 23
 712 0080 9B68     		ldr	r3, [r3, #8]
 713              		.loc 1 479 28
 714 0082 03F04003 		and	r3, r3, #64
 715              		.loc 1 479 7
 716 0086 002B     		cmp	r3, #0
 717 0088 07D0     		beq	.L23
 480:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sTime->Hours);
 718              		.loc 1 481 16
ARM GAS  /tmp/ccw0H4H9.s 			page 22


 719 008a BB68     		ldr	r3, [r7, #8]
 720 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 721 008e 1846     		mov	r0, r3
 722 0090 FFF7FEFF 		bl	RTC_Bcd2ToByte
 723 0094 0346     		mov	r3, r0
 724              		.loc 1 481 14
 725 0096 7B61     		str	r3, [r7, #20]
 726 0098 02E0     		b	.L24
 727              	.L23:
 482:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 483:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat)); 
 484:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
 485:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 487:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sTime->TimeFormat = 0x00U;
 728              		.loc 1 487 25
 729 009a BB68     		ldr	r3, [r7, #8]
 730 009c 0022     		movs	r2, #0
 731 009e DA70     		strb	r2, [r3, #3]
 732              	.L24:
 488:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 490:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 491:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 733              		.loc 1 492 32
 734 00a0 BB68     		ldr	r3, [r7, #8]
 735 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 736              		.loc 1 492 41
 737 00a4 1A04     		lsls	r2, r3, #16
 493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 738              		.loc 1 493 32
 739 00a6 BB68     		ldr	r3, [r7, #8]
 740 00a8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 741              		.loc 1 493 43
 742 00aa 1B02     		lsls	r3, r3, #8
 492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 743              		.loc 1 492 49
 744 00ac 1343     		orrs	r3, r3, r2
 494:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sTime->Seconds) | \
 745              		.loc 1 494 31
 746 00ae BA68     		ldr	r2, [r7, #8]
 747 00b0 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 748              		.loc 1 493 50
 749 00b2 1A43     		orrs	r2, r2, r3
 495:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->TimeFormat) << 16U));   
 750              		.loc 1 495 32
 751 00b4 BB68     		ldr	r3, [r7, #8]
 752 00b6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 753              		.loc 1 495 46
 754 00b8 1B04     		lsls	r3, r3, #16
 492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sTime->Minutes) << 8U) | \
 755              		.loc 1 492 12
 756 00ba 1343     		orrs	r3, r3, r2
 757 00bc 7B61     		str	r3, [r7, #20]
 758              	.L22:
ARM GAS  /tmp/ccw0H4H9.s 			page 23


 496:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 497:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 498:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 499:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 759              		.loc 1 499 3
 760 00be FB68     		ldr	r3, [r7, #12]
 761 00c0 1B68     		ldr	r3, [r3]
 762 00c2 CA22     		movs	r2, #202
 763 00c4 5A62     		str	r2, [r3, #36]
 764 00c6 FB68     		ldr	r3, [r7, #12]
 765 00c8 1B68     		ldr	r3, [r3]
 766 00ca 5322     		movs	r2, #83
 767 00cc 5A62     		str	r2, [r3, #36]
 500:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set Initialization mode */
 502:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 768              		.loc 1 502 6
 769 00ce F868     		ldr	r0, [r7, #12]
 770 00d0 FFF7FEFF 		bl	RTC_EnterInitMode
 771 00d4 0346     		mov	r3, r0
 772              		.loc 1 502 5
 773 00d6 002B     		cmp	r3, #0
 774 00d8 0BD0     		beq	.L25
 503:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 504:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 505:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 775              		.loc 1 505 5
 776 00da FB68     		ldr	r3, [r7, #12]
 777 00dc 1B68     		ldr	r3, [r3]
 778 00de FF22     		movs	r2, #255
 779 00e0 5A62     		str	r2, [r3, #36]
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 507:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set RTC state */
 508:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 780              		.loc 1 508 17
 781 00e2 FB68     		ldr	r3, [r7, #12]
 782 00e4 0422     		movs	r2, #4
 783 00e6 5A77     		strb	r2, [r3, #29]
 509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 510:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Process Unlocked */ 
 511:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 784              		.loc 1 511 5
 785 00e8 FB68     		ldr	r3, [r7, #12]
 786 00ea 0022     		movs	r2, #0
 787 00ec 1A77     		strb	r2, [r3, #28]
 512:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 513:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_ERROR;
 788              		.loc 1 513 12
 789 00ee 0123     		movs	r3, #1
 790 00f0 47E0     		b	.L19
 791              	.L25:
 514:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   } 
 515:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 516:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 517:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set the RTC_TR register */
 518:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 792              		.loc 1 518 9
ARM GAS  /tmp/ccw0H4H9.s 			page 24


 793 00f2 FB68     		ldr	r3, [r7, #12]
 794 00f4 1A68     		ldr	r2, [r3]
 795              		.loc 1 518 26
 796 00f6 7B69     		ldr	r3, [r7, #20]
 797 00f8 03F07F33 		and	r3, r3, #2139062143
 798 00fc 23F0FE43 		bic	r3, r3, #2130706432
 799              		.loc 1 518 24
 800 0100 1360     		str	r3, [r2]
 519:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****      
 520:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear the bits to be configured */
 521:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 801              		.loc 1 521 9
 802 0102 FB68     		ldr	r3, [r7, #12]
 803 0104 1B68     		ldr	r3, [r3]
 804              		.loc 1 521 24
 805 0106 9A68     		ldr	r2, [r3, #8]
 806              		.loc 1 521 9
 807 0108 FB68     		ldr	r3, [r7, #12]
 808 010a 1B68     		ldr	r3, [r3]
 809              		.loc 1 521 24
 810 010c 22F48022 		bic	r2, r2, #262144
 811 0110 9A60     		str	r2, [r3, #8]
 522:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the RTC_CR register */
 524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 812              		.loc 1 524 9
 813 0112 FB68     		ldr	r3, [r7, #12]
 814 0114 1B68     		ldr	r3, [r3]
 815              		.loc 1 524 24
 816 0116 9968     		ldr	r1, [r3, #8]
 817              		.loc 1 524 43
 818 0118 BB68     		ldr	r3, [r7, #8]
 819 011a DA68     		ldr	r2, [r3, #12]
 820              		.loc 1 524 67
 821 011c BB68     		ldr	r3, [r7, #8]
 822 011e 1B69     		ldr	r3, [r3, #16]
 823              		.loc 1 524 60
 824 0120 1A43     		orrs	r2, r2, r3
 825              		.loc 1 524 9
 826 0122 FB68     		ldr	r3, [r7, #12]
 827 0124 1B68     		ldr	r3, [r3]
 828              		.loc 1 524 24
 829 0126 0A43     		orrs	r2, r2, r1
 830 0128 9A60     		str	r2, [r3, #8]
 525:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 526:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Exit Initialization mode */
 527:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 831              		.loc 1 527 9
 832 012a FB68     		ldr	r3, [r7, #12]
 833 012c 1B68     		ldr	r3, [r3]
 834              		.loc 1 527 25
 835 012e DA68     		ldr	r2, [r3, #12]
 836              		.loc 1 527 9
 837 0130 FB68     		ldr	r3, [r7, #12]
 838 0132 1B68     		ldr	r3, [r3]
 839              		.loc 1 527 25
 840 0134 22F08002 		bic	r2, r2, #128
ARM GAS  /tmp/ccw0H4H9.s 			page 25


 841 0138 DA60     		str	r2, [r3, #12]
 528:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 529:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 530:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 842              		.loc 1 530 13
 843 013a FB68     		ldr	r3, [r7, #12]
 844 013c 1B68     		ldr	r3, [r3]
 845              		.loc 1 530 23
 846 013e 9B68     		ldr	r3, [r3, #8]
 847              		.loc 1 530 28
 848 0140 03F02003 		and	r3, r3, #32
 849              		.loc 1 530 7
 850 0144 002B     		cmp	r3, #0
 851 0146 11D1     		bne	.L26
 531:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 532:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 852              		.loc 1 532 10
 853 0148 F868     		ldr	r0, [r7, #12]
 854 014a FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 855 014e 0346     		mov	r3, r0
 856              		.loc 1 532 9
 857 0150 002B     		cmp	r3, #0
 858 0152 0BD0     		beq	.L26
 533:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {        
 534:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 535:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 859              		.loc 1 535 9
 860 0154 FB68     		ldr	r3, [r7, #12]
 861 0156 1B68     		ldr	r3, [r3]
 862 0158 FF22     		movs	r2, #255
 863 015a 5A62     		str	r2, [r3, #36]
 536:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 537:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 864              		.loc 1 537 21
 865 015c FB68     		ldr	r3, [r7, #12]
 866 015e 0422     		movs	r2, #4
 867 0160 5A77     		strb	r2, [r3, #29]
 538:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 539:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */ 
 540:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 868              		.loc 1 540 9
 869 0162 FB68     		ldr	r3, [r7, #12]
 870 0164 0022     		movs	r2, #0
 871 0166 1A77     		strb	r2, [r3, #28]
 541:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 542:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_ERROR;
 872              		.loc 1 542 16
 873 0168 0123     		movs	r3, #1
 874 016a 0AE0     		b	.L19
 875              	.L26:
 543:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
 544:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 545:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 546:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 547:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 876              		.loc 1 547 5
 877 016c FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccw0H4H9.s 			page 26


 878 016e 1B68     		ldr	r3, [r3]
 879 0170 FF22     		movs	r2, #255
 880 0172 5A62     		str	r2, [r3, #36]
 548:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 549:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    hrtc->State = HAL_RTC_STATE_READY;
 881              		.loc 1 549 16
 882 0174 FB68     		ldr	r3, [r7, #12]
 883 0176 0122     		movs	r2, #1
 884 0178 5A77     		strb	r2, [r3, #29]
 550:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 551:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    __HAL_UNLOCK(hrtc); 
 885              		.loc 1 551 4
 886 017a FB68     		ldr	r3, [r7, #12]
 887 017c 0022     		movs	r2, #0
 888 017e 1A77     		strb	r2, [r3, #28]
 552:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****      
 553:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    return HAL_OK;
 889              		.loc 1 553 11
 890 0180 0023     		movs	r3, #0
 891              	.L19:
 554:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 555:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 892              		.loc 1 555 1
 893 0182 1846     		mov	r0, r3
 894 0184 1C37     		adds	r7, r7, #28
 895              	.LCFI25:
 896              		.cfi_def_cfa_offset 12
 897 0186 BD46     		mov	sp, r7
 898              	.LCFI26:
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 0188 90BD     		pop	{r4, r7, pc}
 902              		.cfi_endproc
 903              	.LFE130:
 905              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 906              		.align	1
 907              		.global	HAL_RTC_GetTime
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu fpv4-sp-d16
 913              	HAL_RTC_GetTime:
 914              	.LFB131:
 556:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 557:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 558:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Gets RTC current time.
 559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 560:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 561:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 562:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 563:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 564:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 565:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 566:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 567:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 568:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
ARM GAS  /tmp/ccw0H4H9.s 			page 27


 570:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 571:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 572:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until current dat
 573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 574:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 575:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 576:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 915              		.loc 1 576 1
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 24
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919 0000 80B5     		push	{r7, lr}
 920              	.LCFI27:
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 86B0     		sub	sp, sp, #24
 925              	.LCFI28:
 926              		.cfi_def_cfa_offset 32
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI29:
 929              		.cfi_def_cfa_register 7
 930 0006 F860     		str	r0, [r7, #12]
 931 0008 B960     		str	r1, [r7, #8]
 932 000a 7A60     		str	r2, [r7, #4]
 577:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U;
 933              		.loc 1 577 12
 934 000c 0023     		movs	r3, #0
 935 000e 7B61     		str	r3, [r7, #20]
 578:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 579:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 580:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 581:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 582:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register */
 583:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 936              		.loc 1 583 38
 937 0010 FB68     		ldr	r3, [r7, #12]
 938 0012 1B68     		ldr	r3, [r3]
 939              		.loc 1 583 48
 940 0014 9A6A     		ldr	r2, [r3, #40]
 941              		.loc 1 583 21
 942 0016 BB68     		ldr	r3, [r7, #8]
 943 0018 5A60     		str	r2, [r3, #4]
 584:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 585:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 586:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 944              		.loc 1 586 42
 945 001a FB68     		ldr	r3, [r7, #12]
 946 001c 1B68     		ldr	r3, [r3]
 947              		.loc 1 586 52
 948 001e 1B69     		ldr	r3, [r3, #16]
 949              		.loc 1 586 27
 950 0020 C3F30E02 		ubfx	r2, r3, #0, #15
 951              		.loc 1 586 25
 952 0024 BB68     		ldr	r3, [r7, #8]
 953 0026 9A60     		str	r2, [r3, #8]
 587:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
ARM GAS  /tmp/ccw0H4H9.s 			page 28


 588:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get the TR register */
 589:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 954              		.loc 1 589 27
 955 0028 FB68     		ldr	r3, [r7, #12]
 956 002a 1B68     		ldr	r3, [r3]
 957              		.loc 1 589 37
 958 002c 1B68     		ldr	r3, [r3]
 959              		.loc 1 589 10
 960 002e 03F07F33 		and	r3, r3, #2139062143
 961 0032 23F0FE43 		bic	r3, r3, #2130706432
 962 0036 7B61     		str	r3, [r7, #20]
 590:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 591:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 592:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 963              		.loc 1 592 63
 964 0038 7B69     		ldr	r3, [r7, #20]
 965 003a 1B0C     		lsrs	r3, r3, #16
 966              		.loc 1 592 18
 967 003c DBB2     		uxtb	r3, r3
 968 003e 03F03F03 		and	r3, r3, #63
 969 0042 DAB2     		uxtb	r2, r3
 970              		.loc 1 592 16
 971 0044 BB68     		ldr	r3, [r7, #8]
 972 0046 1A70     		strb	r2, [r3]
 593:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 973              		.loc 1 593 67
 974 0048 7B69     		ldr	r3, [r7, #20]
 975 004a 1B0A     		lsrs	r3, r3, #8
 976              		.loc 1 593 20
 977 004c DBB2     		uxtb	r3, r3
 978 004e 03F07F03 		and	r3, r3, #127
 979 0052 DAB2     		uxtb	r2, r3
 980              		.loc 1 593 18
 981 0054 BB68     		ldr	r3, [r7, #8]
 982 0056 5A70     		strb	r2, [r3, #1]
 594:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 983              		.loc 1 594 20
 984 0058 7B69     		ldr	r3, [r7, #20]
 985 005a DBB2     		uxtb	r3, r3
 986 005c 03F07F03 		and	r3, r3, #127
 987 0060 DAB2     		uxtb	r2, r3
 988              		.loc 1 594 18
 989 0062 BB68     		ldr	r3, [r7, #8]
 990 0064 9A70     		strb	r2, [r3, #2]
 595:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 991              		.loc 1 595 56
 992 0066 7B69     		ldr	r3, [r7, #20]
 993 0068 1B0C     		lsrs	r3, r3, #16
 994              		.loc 1 595 23
 995 006a DBB2     		uxtb	r3, r3
 996 006c 03F04003 		and	r3, r3, #64
 997 0070 DAB2     		uxtb	r2, r3
 998              		.loc 1 595 21
 999 0072 BB68     		ldr	r3, [r7, #8]
 1000 0074 DA70     		strb	r2, [r3, #3]
 596:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 597:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the input parameters format */
ARM GAS  /tmp/ccw0H4H9.s 			page 29


 598:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1001              		.loc 1 598 5
 1002 0076 7B68     		ldr	r3, [r7, #4]
 1003 0078 002B     		cmp	r3, #0
 1004 007a 1AD1     		bne	.L28
 599:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 600:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 601:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 1005              		.loc 1 601 29
 1006 007c BB68     		ldr	r3, [r7, #8]
 1007 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1008 0080 1846     		mov	r0, r3
 1009 0082 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1010 0086 0346     		mov	r3, r0
 1011 0088 1A46     		mov	r2, r3
 1012              		.loc 1 601 18
 1013 008a BB68     		ldr	r3, [r7, #8]
 1014 008c 1A70     		strb	r2, [r3]
 602:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 1015              		.loc 1 602 31
 1016 008e BB68     		ldr	r3, [r7, #8]
 1017 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1018 0092 1846     		mov	r0, r3
 1019 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1020 0098 0346     		mov	r3, r0
 1021 009a 1A46     		mov	r2, r3
 1022              		.loc 1 602 20
 1023 009c BB68     		ldr	r3, [r7, #8]
 1024 009e 5A70     		strb	r2, [r3, #1]
 603:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 1025              		.loc 1 603 31
 1026 00a0 BB68     		ldr	r3, [r7, #8]
 1027 00a2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1028 00a4 1846     		mov	r0, r3
 1029 00a6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1030 00aa 0346     		mov	r3, r0
 1031 00ac 1A46     		mov	r2, r3
 1032              		.loc 1 603 20
 1033 00ae BB68     		ldr	r3, [r7, #8]
 1034 00b0 9A70     		strb	r2, [r3, #2]
 1035              	.L28:
 604:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 605:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 606:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 1036              		.loc 1 606 10
 1037 00b2 0023     		movs	r3, #0
 607:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1038              		.loc 1 607 1
 1039 00b4 1846     		mov	r0, r3
 1040 00b6 1837     		adds	r7, r7, #24
 1041              	.LCFI30:
 1042              		.cfi_def_cfa_offset 8
 1043 00b8 BD46     		mov	sp, r7
 1044              	.LCFI31:
 1045              		.cfi_def_cfa_register 13
 1046              		@ sp needed
 1047 00ba 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccw0H4H9.s 			page 30


 1048              		.cfi_endproc
 1049              	.LFE131:
 1051              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 1052              		.align	1
 1053              		.global	HAL_RTC_SetDate
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	HAL_RTC_SetDate:
 1060              	.LFB132:
 608:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 609:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 610:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets RTC current date.
 611:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 612:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 613:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 614:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 615:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 616:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format 
 617:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 618:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 619:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 620:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 621:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 1061              		.loc 1 621 1
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 24
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065 0000 90B5     		push	{r4, r7, lr}
 1066              	.LCFI32:
 1067              		.cfi_def_cfa_offset 12
 1068              		.cfi_offset 4, -12
 1069              		.cfi_offset 7, -8
 1070              		.cfi_offset 14, -4
 1071 0002 87B0     		sub	sp, sp, #28
 1072              	.LCFI33:
 1073              		.cfi_def_cfa_offset 40
 1074 0004 00AF     		add	r7, sp, #0
 1075              	.LCFI34:
 1076              		.cfi_def_cfa_register 7
 1077 0006 F860     		str	r0, [r7, #12]
 1078 0008 B960     		str	r1, [r7, #8]
 1079 000a 7A60     		str	r2, [r7, #4]
 622:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t datetmpreg = 0U;
 1080              		.loc 1 622 12
 1081 000c 0023     		movs	r3, #0
 1082 000e 7B61     		str	r3, [r7, #20]
 623:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 624:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  /* Check the parameters */
 625:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 626:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 627:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  /* Process Locked */ 
 628:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  __HAL_LOCK(hrtc);
 1083              		.loc 1 628 2
 1084 0010 FB68     		ldr	r3, [r7, #12]
 1085 0012 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccw0H4H9.s 			page 31


 1086 0014 012B     		cmp	r3, #1
 1087 0016 01D1     		bne	.L31
 1088              		.loc 1 628 2 is_stmt 0 discriminator 1
 1089 0018 0223     		movs	r3, #2
 1090 001a 94E0     		b	.L32
 1091              	.L31:
 1092              		.loc 1 628 2 discriminator 2
 1093 001c FB68     		ldr	r3, [r7, #12]
 1094 001e 0122     		movs	r2, #1
 1095 0020 1A77     		strb	r2, [r3, #28]
 629:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 630:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY; 
 1096              		.loc 1 630 15 is_stmt 1 discriminator 2
 1097 0022 FB68     		ldr	r3, [r7, #12]
 1098 0024 0222     		movs	r2, #2
 1099 0026 5A77     		strb	r2, [r3, #29]
 631:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 632:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 1100              		.loc 1 632 5 discriminator 2
 1101 0028 7B68     		ldr	r3, [r7, #4]
 1102 002a 002B     		cmp	r3, #0
 1103 002c 0ED1     		bne	.L33
 1104              		.loc 1 632 43 discriminator 1
 1105 002e BB68     		ldr	r3, [r7, #8]
 1106 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1107              		.loc 1 632 51 discriminator 1
 1108 0032 03F01003 		and	r3, r3, #16
 1109              		.loc 1 632 33 discriminator 1
 1110 0036 002B     		cmp	r3, #0
 1111 0038 08D0     		beq	.L33
 633:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 634:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 1112              		.loc 1 634 36
 1113 003a BB68     		ldr	r3, [r7, #8]
 1114 003c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1115              		.loc 1 634 44
 1116 003e 23F01003 		bic	r3, r3, #16
 1117 0042 DBB2     		uxtb	r3, r3
 1118              		.loc 1 634 20
 1119 0044 0A33     		adds	r3, r3, #10
 1120 0046 DAB2     		uxtb	r2, r3
 1121              		.loc 1 634 18
 1122 0048 BB68     		ldr	r3, [r7, #8]
 1123 004a 5A70     		strb	r2, [r3, #1]
 1124              	.L33:
 635:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 636:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 637:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 639:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1125              		.loc 1 639 5
 1126 004c 7B68     		ldr	r3, [r7, #4]
 1127 004e 002B     		cmp	r3, #0
 1128 0050 1CD1     		bne	.L34
 640:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {   
 641:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
 642:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
ARM GAS  /tmp/ccw0H4H9.s 			page 32


 643:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date)); 
 644:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 1129              		.loc 1 645 29
 1130 0052 BB68     		ldr	r3, [r7, #8]
 1131 0054 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1132 0056 1846     		mov	r0, r3
 1133 0058 FFF7FEFF 		bl	RTC_ByteToBcd2
 1134 005c 0346     		mov	r3, r0
 1135              		.loc 1 645 57
 1136 005e 1C04     		lsls	r4, r3, #16
 646:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1137              		.loc 1 646 29
 1138 0060 BB68     		ldr	r3, [r7, #8]
 1139 0062 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1140 0064 1846     		mov	r0, r3
 1141 0066 FFF7FEFF 		bl	RTC_ByteToBcd2
 1142 006a 0346     		mov	r3, r0
 1143              		.loc 1 646 58
 1144 006c 1B02     		lsls	r3, r3, #8
 645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1145              		.loc 1 645 65
 1146 006e 1C43     		orrs	r4, r4, r3
 647:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 1147              		.loc 1 647 29
 1148 0070 BB68     		ldr	r3, [r7, #8]
 1149 0072 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1150 0074 1846     		mov	r0, r3
 1151 0076 FFF7FEFF 		bl	RTC_ByteToBcd2
 1152 007a 0346     		mov	r3, r0
 646:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1153              		.loc 1 646 65
 1154 007c 44EA0302 		orr	r2, r4, r3
 648:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ((uint32_t)sDate->WeekDay << 13U));   
 1155              		.loc 1 648 34
 1156 0080 BB68     		ldr	r3, [r7, #8]
 1157 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1158              		.loc 1 648 44
 1159 0084 5B03     		lsls	r3, r3, #13
 645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 1160              		.loc 1 645 15
 1161 0086 1343     		orrs	r3, r3, r2
 1162 0088 7B61     		str	r3, [r7, #20]
 1163 008a 0EE0     		b	.L35
 1164              	.L34:
 649:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 650:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 651:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {   
 652:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 653:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(datetmpreg));
 654:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(datetmpreg));
 655:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 1165              		.loc 1 656 36
 1166 008c BB68     		ldr	r3, [r7, #8]
 1167 008e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1168              		.loc 1 656 44
ARM GAS  /tmp/ccw0H4H9.s 			page 33


 1169 0090 1A04     		lsls	r2, r3, #16
 657:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1170              		.loc 1 657 36
 1171 0092 BB68     		ldr	r3, [r7, #8]
 1172 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1173              		.loc 1 657 45
 1174 0096 1B02     		lsls	r3, r3, #8
 656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1175              		.loc 1 656 52
 1176 0098 1343     		orrs	r3, r3, r2
 658:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   ((uint32_t)sDate->Date) | \
 1177              		.loc 1 658 35
 1178 009a BA68     		ldr	r2, [r7, #8]
 1179 009c 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 657:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1180              		.loc 1 657 52
 1181 009e 1A43     		orrs	r2, r2, r3
 659:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << 13U));  
 1182              		.loc 1 659 36
 1183 00a0 BB68     		ldr	r3, [r7, #8]
 1184 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1185              		.loc 1 659 47
 1186 00a4 5B03     		lsls	r3, r3, #13
 656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                   (((uint32_t)sDate->Month) << 8U) | \
 1187              		.loc 1 656 16
 1188 00a6 1343     		orrs	r3, r3, r2
 1189 00a8 7B61     		str	r3, [r7, #20]
 1190              	.L35:
 660:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 661:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 662:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 663:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1191              		.loc 1 663 3
 1192 00aa FB68     		ldr	r3, [r7, #12]
 1193 00ac 1B68     		ldr	r3, [r3]
 1194 00ae CA22     		movs	r2, #202
 1195 00b0 5A62     		str	r2, [r3, #36]
 1196 00b2 FB68     		ldr	r3, [r7, #12]
 1197 00b4 1B68     		ldr	r3, [r3]
 1198 00b6 5322     		movs	r2, #83
 1199 00b8 5A62     		str	r2, [r3, #36]
 664:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 665:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Set Initialization mode */
 666:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(RTC_EnterInitMode(hrtc) != HAL_OK)
 1200              		.loc 1 666 6
 1201 00ba F868     		ldr	r0, [r7, #12]
 1202 00bc FFF7FEFF 		bl	RTC_EnterInitMode
 1203 00c0 0346     		mov	r3, r0
 1204              		.loc 1 666 5
 1205 00c2 002B     		cmp	r3, #0
 1206 00c4 0BD0     		beq	.L36
 667:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 668:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 669:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 1207              		.loc 1 669 5
 1208 00c6 FB68     		ldr	r3, [r7, #12]
 1209 00c8 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccw0H4H9.s 			page 34


 1210 00ca FF22     		movs	r2, #255
 1211 00cc 5A62     		str	r2, [r3, #36]
 670:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 671:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set RTC state*/
 672:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_ERROR;
 1212              		.loc 1 672 17
 1213 00ce FB68     		ldr	r3, [r7, #12]
 1214 00d0 0422     		movs	r2, #4
 1215 00d2 5A77     		strb	r2, [r3, #29]
 673:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 674:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Process Unlocked */ 
 675:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1216              		.loc 1 675 5
 1217 00d4 FB68     		ldr	r3, [r7, #12]
 1218 00d6 0022     		movs	r2, #0
 1219 00d8 1A77     		strb	r2, [r3, #28]
 676:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 677:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_ERROR;
 1220              		.loc 1 677 12
 1221 00da 0123     		movs	r3, #1
 1222 00dc 33E0     		b	.L32
 1223              	.L36:
 678:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   } 
 679:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 680:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 681:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set the RTC_DR register */
 682:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 1224              		.loc 1 682 9
 1225 00de FB68     		ldr	r3, [r7, #12]
 1226 00e0 1A68     		ldr	r2, [r3]
 1227              		.loc 1 682 26
 1228 00e2 7B69     		ldr	r3, [r7, #20]
 1229 00e4 23F07F43 		bic	r3, r3, #-16777216
 1230 00e8 23F0C003 		bic	r3, r3, #192
 1231              		.loc 1 682 24
 1232 00ec 5360     		str	r3, [r2, #4]
 683:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 684:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Exit Initialization mode */
 685:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 1233              		.loc 1 685 9
 1234 00ee FB68     		ldr	r3, [r7, #12]
 1235 00f0 1B68     		ldr	r3, [r3]
 1236              		.loc 1 685 25
 1237 00f2 DA68     		ldr	r2, [r3, #12]
 1238              		.loc 1 685 9
 1239 00f4 FB68     		ldr	r3, [r7, #12]
 1240 00f6 1B68     		ldr	r3, [r3]
 1241              		.loc 1 685 25
 1242 00f8 22F08002 		bic	r2, r2, #128
 1243 00fc DA60     		str	r2, [r3, #12]
 686:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 687:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
 688:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 1244              		.loc 1 688 13
 1245 00fe FB68     		ldr	r3, [r7, #12]
 1246 0100 1B68     		ldr	r3, [r3]
 1247              		.loc 1 688 23
ARM GAS  /tmp/ccw0H4H9.s 			page 35


 1248 0102 9B68     		ldr	r3, [r3, #8]
 1249              		.loc 1 688 28
 1250 0104 03F02003 		and	r3, r3, #32
 1251              		.loc 1 688 7
 1252 0108 002B     		cmp	r3, #0
 1253 010a 11D1     		bne	.L37
 689:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 690:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 1254              		.loc 1 690 10
 1255 010c F868     		ldr	r0, [r7, #12]
 1256 010e FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 1257 0112 0346     		mov	r3, r0
 1258              		.loc 1 690 9
 1259 0114 002B     		cmp	r3, #0
 1260 0116 0BD0     		beq	.L37
 691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       { 
 692:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 693:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1261              		.loc 1 693 9
 1262 0118 FB68     		ldr	r3, [r7, #12]
 1263 011a 1B68     		ldr	r3, [r3]
 1264 011c FF22     		movs	r2, #255
 1265 011e 5A62     		str	r2, [r3, #36]
 694:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 695:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_ERROR;
 1266              		.loc 1 695 21
 1267 0120 FB68     		ldr	r3, [r7, #12]
 1268 0122 0422     		movs	r2, #4
 1269 0124 5A77     		strb	r2, [r3, #29]
 696:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 697:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */ 
 698:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1270              		.loc 1 698 9
 1271 0126 FB68     		ldr	r3, [r7, #12]
 1272 0128 0022     		movs	r2, #0
 1273 012a 1A77     		strb	r2, [r3, #28]
 699:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 700:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_ERROR;
 1274              		.loc 1 700 16
 1275 012c 0123     		movs	r3, #1
 1276 012e 0AE0     		b	.L32
 1277              	.L37:
 701:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
 702:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 703:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 705:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 1278              		.loc 1 705 5
 1279 0130 FB68     		ldr	r3, [r7, #12]
 1280 0132 1B68     		ldr	r3, [r3]
 1281 0134 FF22     		movs	r2, #255
 1282 0136 5A62     		str	r2, [r3, #36]
 706:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 707:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY ;
 1283              		.loc 1 707 17
 1284 0138 FB68     		ldr	r3, [r7, #12]
 1285 013a 0122     		movs	r2, #1
ARM GAS  /tmp/ccw0H4H9.s 			page 36


 1286 013c 5A77     		strb	r2, [r3, #29]
 708:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 709:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Process Unlocked */ 
 710:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_UNLOCK(hrtc);
 1287              		.loc 1 710 5
 1288 013e FB68     		ldr	r3, [r7, #12]
 1289 0140 0022     		movs	r2, #0
 1290 0142 1A77     		strb	r2, [r3, #28]
 711:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 712:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     return HAL_OK;    
 1291              		.loc 1 712 12
 1292 0144 0023     		movs	r3, #0
 1293              	.L32:
 713:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 714:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1294              		.loc 1 714 1
 1295 0146 1846     		mov	r0, r3
 1296 0148 1C37     		adds	r7, r7, #28
 1297              	.LCFI35:
 1298              		.cfi_def_cfa_offset 12
 1299 014a BD46     		mov	sp, r7
 1300              	.LCFI36:
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 014c 90BD     		pop	{r4, r7, pc}
 1304              		.cfi_endproc
 1305              	.LFE132:
 1307              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1308              		.align	1
 1309              		.global	HAL_RTC_GetDate
 1310              		.syntax unified
 1311              		.thumb
 1312              		.thumb_func
 1313              		.fpu fpv4-sp-d16
 1315              	HAL_RTC_GetDate:
 1316              	.LFB133:
 715:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 716:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 717:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Gets RTC current date.
 718:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 719:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 720:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
 721:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 722:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 723:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format 
 724:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
 725:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values 
 726:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * in the higher-order calendar shadow registers to ensure consistency between the time and date v
 727:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * Reading RTC current time locks the values in calendar shadow registers until Current date is re
 728:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 729:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 730:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 731:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 1317              		.loc 1 731 1
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 24
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccw0H4H9.s 			page 37


 1321 0000 80B5     		push	{r7, lr}
 1322              	.LCFI37:
 1323              		.cfi_def_cfa_offset 8
 1324              		.cfi_offset 7, -8
 1325              		.cfi_offset 14, -4
 1326 0002 86B0     		sub	sp, sp, #24
 1327              	.LCFI38:
 1328              		.cfi_def_cfa_offset 32
 1329 0004 00AF     		add	r7, sp, #0
 1330              	.LCFI39:
 1331              		.cfi_def_cfa_register 7
 1332 0006 F860     		str	r0, [r7, #12]
 1333 0008 B960     		str	r1, [r7, #8]
 1334 000a 7A60     		str	r2, [r7, #4]
 732:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t datetmpreg = 0U;
 1335              		.loc 1 732 12
 1336 000c 0023     		movs	r3, #0
 1337 000e 7B61     		str	r3, [r7, #20]
 733:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 734:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 735:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 736:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****           
 737:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Get the DR register */
 738:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 1338              		.loc 1 738 31
 1339 0010 FB68     		ldr	r3, [r7, #12]
 1340 0012 1B68     		ldr	r3, [r3]
 1341              		.loc 1 738 41
 1342 0014 5B68     		ldr	r3, [r3, #4]
 1343              		.loc 1 738 14
 1344 0016 23F07F43 		bic	r3, r3, #-16777216
 1345 001a 23F0C003 		bic	r3, r3, #192
 1346 001e 7B61     		str	r3, [r7, #20]
 739:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 740:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 741:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 1347              		.loc 1 741 66
 1348 0020 7B69     		ldr	r3, [r7, #20]
 1349 0022 1B0C     		lsrs	r3, r3, #16
 1350              		.loc 1 741 17
 1351 0024 DAB2     		uxtb	r2, r3
 1352              		.loc 1 741 15
 1353 0026 BB68     		ldr	r3, [r7, #8]
 1354 0028 DA70     		strb	r2, [r3, #3]
 742:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 1355              		.loc 1 742 67
 1356 002a 7B69     		ldr	r3, [r7, #20]
 1357 002c 1B0A     		lsrs	r3, r3, #8
 1358              		.loc 1 742 18
 1359 002e DBB2     		uxtb	r3, r3
 1360 0030 03F01F03 		and	r3, r3, #31
 1361 0034 DAB2     		uxtb	r2, r3
 1362              		.loc 1 742 16
 1363 0036 BB68     		ldr	r3, [r7, #8]
 1364 0038 5A70     		strb	r2, [r3, #1]
 743:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 1365              		.loc 1 743 17
ARM GAS  /tmp/ccw0H4H9.s 			page 38


 1366 003a 7B69     		ldr	r3, [r7, #20]
 1367 003c DBB2     		uxtb	r3, r3
 1368 003e 03F03F03 		and	r3, r3, #63
 1369 0042 DAB2     		uxtb	r2, r3
 1370              		.loc 1 743 15
 1371 0044 BB68     		ldr	r3, [r7, #8]
 1372 0046 9A70     		strb	r2, [r3, #2]
 744:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 1373              		.loc 1 744 58
 1374 0048 7B69     		ldr	r3, [r7, #20]
 1375 004a 5B0B     		lsrs	r3, r3, #13
 1376              		.loc 1 744 20
 1377 004c DBB2     		uxtb	r3, r3
 1378 004e 03F00703 		and	r3, r3, #7
 1379 0052 DAB2     		uxtb	r2, r3
 1380              		.loc 1 744 18
 1381 0054 BB68     		ldr	r3, [r7, #8]
 1382 0056 1A70     		strb	r2, [r3]
 745:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 746:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the input parameters format */
 747:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1383              		.loc 1 747 5
 1384 0058 7B68     		ldr	r3, [r7, #4]
 1385 005a 002B     		cmp	r3, #0
 1386 005c 1AD1     		bne	.L39
 748:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {    
 749:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
 750:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 1387              		.loc 1 750 28
 1388 005e BB68     		ldr	r3, [r7, #8]
 1389 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1390 0062 1846     		mov	r0, r3
 1391 0064 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1392 0068 0346     		mov	r3, r0
 1393 006a 1A46     		mov	r2, r3
 1394              		.loc 1 750 17
 1395 006c BB68     		ldr	r3, [r7, #8]
 1396 006e DA70     		strb	r2, [r3, #3]
 751:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 1397              		.loc 1 751 29
 1398 0070 BB68     		ldr	r3, [r7, #8]
 1399 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1400 0074 1846     		mov	r0, r3
 1401 0076 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1402 007a 0346     		mov	r3, r0
 1403 007c 1A46     		mov	r2, r3
 1404              		.loc 1 751 18
 1405 007e BB68     		ldr	r3, [r7, #8]
 1406 0080 5A70     		strb	r2, [r3, #1]
 752:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 1407              		.loc 1 752 28
 1408 0082 BB68     		ldr	r3, [r7, #8]
 1409 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1410 0086 1846     		mov	r0, r3
 1411 0088 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1412 008c 0346     		mov	r3, r0
 1413 008e 1A46     		mov	r2, r3
ARM GAS  /tmp/ccw0H4H9.s 			page 39


 1414              		.loc 1 752 17
 1415 0090 BB68     		ldr	r3, [r7, #8]
 1416 0092 9A70     		strb	r2, [r3, #2]
 1417              	.L39:
 753:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 754:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 1418              		.loc 1 754 10
 1419 0094 0023     		movs	r3, #0
 755:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1420              		.loc 1 755 1
 1421 0096 1846     		mov	r0, r3
 1422 0098 1837     		adds	r7, r7, #24
 1423              	.LCFI40:
 1424              		.cfi_def_cfa_offset 8
 1425 009a BD46     		mov	sp, r7
 1426              	.LCFI41:
 1427              		.cfi_def_cfa_register 13
 1428              		@ sp needed
 1429 009c 80BD     		pop	{r7, pc}
 1430              		.cfi_endproc
 1431              	.LFE133:
 1433              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1434              		.align	1
 1435              		.global	HAL_RTC_SetAlarm
 1436              		.syntax unified
 1437              		.thumb
 1438              		.thumb_func
 1439              		.fpu fpv4-sp-d16
 1441              	HAL_RTC_SetAlarm:
 1442              	.LFB134:
 756:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 757:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 758:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
 759:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 760:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 761:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group3 RTC Alarm functions
 762:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
 763:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *
 764:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim   
 765:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
 766:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
 767:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================  
 768:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
 770:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 771:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
 772:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
 773:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 774:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 775:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm.
 776:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 777:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 778:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
 779:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 780:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 781:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
 782:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
ARM GAS  /tmp/ccw0H4H9.s 			page 40


 783:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 784:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 785:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
 786:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 1443              		.loc 1 786 1
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 32
 1446              		@ frame_needed = 1, uses_anonymous_args = 0
 1447 0000 90B5     		push	{r4, r7, lr}
 1448              	.LCFI42:
 1449              		.cfi_def_cfa_offset 12
 1450              		.cfi_offset 4, -12
 1451              		.cfi_offset 7, -8
 1452              		.cfi_offset 14, -4
 1453 0002 89B0     		sub	sp, sp, #36
 1454              	.LCFI43:
 1455              		.cfi_def_cfa_offset 48
 1456 0004 00AF     		add	r7, sp, #0
 1457              	.LCFI44:
 1458              		.cfi_def_cfa_register 7
 1459 0006 F860     		str	r0, [r7, #12]
 1460 0008 B960     		str	r1, [r7, #8]
 1461 000a 7A60     		str	r2, [r7, #4]
 787:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 1462              		.loc 1 787 12
 1463 000c 0023     		movs	r3, #0
 1464 000e BB61     		str	r3, [r7, #24]
 788:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1465              		.loc 1 788 12
 1466 0010 0023     		movs	r3, #0
 1467 0012 FB61     		str	r3, [r7, #28]
 1468              		.loc 1 788 25
 1469 0014 0023     		movs	r3, #0
 1470 0016 7B61     		str	r3, [r7, #20]
 789:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 790:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 791:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 792:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 793:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 794:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 795:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 796:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 797:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 798:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */ 
 799:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 1471              		.loc 1 799 3
 1472 0018 FB68     		ldr	r3, [r7, #12]
 1473 001a 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1474 001c 012B     		cmp	r3, #1
 1475 001e 01D1     		bne	.L42
 1476              		.loc 1 799 3 is_stmt 0 discriminator 1
 1477 0020 0223     		movs	r3, #2
 1478 0022 1EE1     		b	.L43
 1479              	.L42:
 1480              		.loc 1 799 3 discriminator 2
 1481 0024 FB68     		ldr	r3, [r7, #12]
 1482 0026 0122     		movs	r2, #1
ARM GAS  /tmp/ccw0H4H9.s 			page 41


 1483 0028 1A77     		strb	r2, [r3, #28]
 800:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 801:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1484              		.loc 1 801 15 is_stmt 1 discriminator 2
 1485 002a FB68     		ldr	r3, [r7, #12]
 1486 002c 0222     		movs	r2, #2
 1487 002e 5A77     		strb	r2, [r3, #29]
 802:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 803:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1488              		.loc 1 803 5 discriminator 2
 1489 0030 7B68     		ldr	r3, [r7, #4]
 1490 0032 002B     		cmp	r3, #0
 1491 0034 37D1     		bne	.L44
 804:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 805:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1492              		.loc 1 805 13
 1493 0036 FB68     		ldr	r3, [r7, #12]
 1494 0038 1B68     		ldr	r3, [r3]
 1495              		.loc 1 805 23
 1496 003a 9B68     		ldr	r3, [r3, #8]
 1497              		.loc 1 805 28
 1498 003c 03F04003 		and	r3, r3, #64
 1499              		.loc 1 805 7
 1500 0040 002B     		cmp	r3, #0
 1501 0042 02D1     		bne	.L45
 806:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 807:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 808:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 809:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
 810:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 811:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 812:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1502              		.loc 1 812 36
 1503 0044 BB68     		ldr	r3, [r7, #8]
 1504 0046 0022     		movs	r2, #0
 1505 0048 DA70     		strb	r2, [r3, #3]
 1506              	.L45:
 813:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 814:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 815:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
 816:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
 817:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 819:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 820:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
 821:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 822:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 823:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 824:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
 825:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 826:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 827:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 1507              		.loc 1 827 26
 1508 004a BB68     		ldr	r3, [r7, #8]
 1509 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1510 004e 1846     		mov	r0, r3
 1511 0050 FFF7FEFF 		bl	RTC_ByteToBcd2
ARM GAS  /tmp/ccw0H4H9.s 			page 42


 1512 0054 0346     		mov	r3, r0
 1513              		.loc 1 827 66
 1514 0056 1C04     		lsls	r4, r3, #16
 828:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1515              		.loc 1 828 26
 1516 0058 BB68     		ldr	r3, [r7, #8]
 1517 005a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1518 005c 1846     		mov	r0, r3
 1519 005e FFF7FEFF 		bl	RTC_ByteToBcd2
 1520 0062 0346     		mov	r3, r0
 1521              		.loc 1 828 68
 1522 0064 1B02     		lsls	r3, r3, #8
 827:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1523              		.loc 1 827 74
 1524 0066 1C43     		orrs	r4, r4, r3
 829:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1525              		.loc 1 829 26
 1526 0068 BB68     		ldr	r3, [r7, #8]
 1527 006a 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1528 006c 1846     		mov	r0, r3
 1529 006e FFF7FEFF 		bl	RTC_ByteToBcd2
 1530 0072 0346     		mov	r3, r0
 828:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1531              		.loc 1 828 75
 1532 0074 44EA0302 		orr	r2, r4, r3
 830:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1533              		.loc 1 830 44
 1534 0078 BB68     		ldr	r3, [r7, #8]
 1535 007a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1536              		.loc 1 830 57
 1537 007c 1B04     		lsls	r3, r3, #16
 829:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1538              		.loc 1 829 69
 1539 007e 42EA0304 		orr	r4, r2, r3
 831:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1540              		.loc 1 831 26
 1541 0082 BB68     		ldr	r3, [r7, #8]
 1542 0084 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1543 0088 1846     		mov	r0, r3
 1544 008a FFF7FEFF 		bl	RTC_ByteToBcd2
 1545 008e 0346     		mov	r3, r0
 1546              		.loc 1 831 67
 1547 0090 1B06     		lsls	r3, r3, #24
 830:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1548              		.loc 1 830 65
 1549 0092 44EA0302 		orr	r2, r4, r3
 832:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1550              		.loc 1 832 32
 1551 0096 BB68     		ldr	r3, [r7, #8]
 1552 0098 DB69     		ldr	r3, [r3, #28]
 831:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1553              		.loc 1 831 75
 1554 009a 1A43     		orrs	r2, r2, r3
 833:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1555              		.loc 1 833 32
 1556 009c BB68     		ldr	r3, [r7, #8]
 1557 009e 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccw0H4H9.s 			page 43


 827:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1558              		.loc 1 827 12
 1559 00a0 1343     		orrs	r3, r3, r2
 1560 00a2 FB61     		str	r3, [r7, #28]
 1561 00a4 40E0     		b	.L46
 1562              	.L44:
 834:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 835:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 836:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 837:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1563              		.loc 1 837 13
 1564 00a6 FB68     		ldr	r3, [r7, #12]
 1565 00a8 1B68     		ldr	r3, [r3]
 1566              		.loc 1 837 23
 1567 00aa 9B68     		ldr	r3, [r3, #8]
 1568              		.loc 1 837 28
 1569 00ac 03F04003 		and	r3, r3, #64
 1570              		.loc 1 837 7
 1571 00b0 002B     		cmp	r3, #0
 1572 00b2 07D0     		beq	.L47
 838:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 839:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 1573              		.loc 1 839 16
 1574 00b4 BB68     		ldr	r3, [r7, #8]
 1575 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1576 00b8 1846     		mov	r0, r3
 1577 00ba FFF7FEFF 		bl	RTC_Bcd2ToByte
 1578 00be 0346     		mov	r3, r0
 1579              		.loc 1 839 14
 1580 00c0 FB61     		str	r3, [r7, #28]
 1581 00c2 02E0     		b	.L48
 1582              	.L47:
 840:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 841:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 842:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
 843:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 844:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 845:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1583              		.loc 1 845 36
 1584 00c4 BB68     		ldr	r3, [r7, #8]
 1585 00c6 0022     		movs	r2, #0
 1586 00c8 DA70     		strb	r2, [r3, #3]
 1587              	.L48:
 846:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 847:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 848:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 849:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
 850:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 851:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 852:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 1588              		.loc 1 852 14
 1589 00ca BB68     		ldr	r3, [r7, #8]
 1590 00cc DB69     		ldr	r3, [r3, #28]
 1591              		.loc 1 852 7
 1592 00ce 002B     		cmp	r3, #0
 1593 00d0 08D1     		bne	.L49
 853:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccw0H4H9.s 			page 44


 854:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1594              		.loc 1 854 16
 1595 00d2 BB68     		ldr	r3, [r7, #8]
 1596 00d4 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1597 00d8 1846     		mov	r0, r3
 1598 00da FFF7FEFF 		bl	RTC_Bcd2ToByte
 1599 00de 0346     		mov	r3, r0
 1600              		.loc 1 854 14
 1601 00e0 FB61     		str	r3, [r7, #28]
 1602 00e2 07E0     		b	.L50
 1603              	.L49:
 855:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
 856:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 857:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 858:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 859:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 1604              		.loc 1 859 16
 1605 00e4 BB68     		ldr	r3, [r7, #8]
 1606 00e6 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1607 00ea 1846     		mov	r0, r3
 1608 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 1609 00f0 0346     		mov	r3, r0
 1610              		.loc 1 859 14
 1611 00f2 FB61     		str	r3, [r7, #28]
 1612              	.L50:
 860:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
 861:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }  
 862:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 863:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 1613              		.loc 1 863 44
 1614 00f4 BB68     		ldr	r3, [r7, #8]
 1615 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1616              		.loc 1 863 52
 1617 00f8 1A04     		lsls	r2, r3, #16
 864:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1618              		.loc 1 864 44
 1619 00fa BB68     		ldr	r3, [r7, #8]
 1620 00fc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1621              		.loc 1 864 54
 1622 00fe 1B02     		lsls	r3, r3, #8
 863:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1623              		.loc 1 863 60
 1624 0100 1343     		orrs	r3, r3, r2
 865:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 1625              		.loc 1 865 44
 1626 0102 BA68     		ldr	r2, [r7, #8]
 1627 0104 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 864:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1628              		.loc 1 864 61
 1629 0106 1A43     		orrs	r2, r2, r3
 866:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1630              		.loc 1 866 44
 1631 0108 BB68     		ldr	r3, [r7, #8]
 1632 010a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1633              		.loc 1 866 57
 1634 010c 1B04     		lsls	r3, r3, #16
 865:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
ARM GAS  /tmp/ccw0H4H9.s 			page 45


 1635              		.loc 1 865 54
 1636 010e 1A43     		orrs	r2, r2, r3
 867:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1637              		.loc 1 867 33
 1638 0110 BB68     		ldr	r3, [r7, #8]
 1639 0112 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1640              		.loc 1 867 53
 1641 0116 1B06     		lsls	r3, r3, #24
 866:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1642              		.loc 1 866 65
 1643 0118 1A43     		orrs	r2, r2, r3
 868:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1644              		.loc 1 868 32
 1645 011a BB68     		ldr	r3, [r7, #8]
 1646 011c DB69     		ldr	r3, [r3, #28]
 867:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 1647              		.loc 1 867 61
 1648 011e 1A43     		orrs	r2, r2, r3
 869:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));   
 1649              		.loc 1 869 32
 1650 0120 BB68     		ldr	r3, [r7, #8]
 1651 0122 5B69     		ldr	r3, [r3, #20]
 863:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 1652              		.loc 1 863 12
 1653 0124 1343     		orrs	r3, r3, r2
 1654 0126 FB61     		str	r3, [r7, #28]
 1655              	.L46:
 870:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 871:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 872:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
 873:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 1656              		.loc 1 873 60
 1657 0128 BB68     		ldr	r3, [r7, #8]
 1658 012a 5A68     		ldr	r2, [r3, #4]
 1659              		.loc 1 873 92
 1660 012c BB68     		ldr	r3, [r7, #8]
 1661 012e 9B69     		ldr	r3, [r3, #24]
 1662              		.loc 1 873 19
 1663 0130 1343     		orrs	r3, r3, r2
 1664 0132 7B61     		str	r3, [r7, #20]
 874:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 875:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 876:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 1665              		.loc 1 876 3
 1666 0134 FB68     		ldr	r3, [r7, #12]
 1667 0136 1B68     		ldr	r3, [r3]
 1668 0138 CA22     		movs	r2, #202
 1669 013a 5A62     		str	r2, [r3, #36]
 1670 013c FB68     		ldr	r3, [r7, #12]
 1671 013e 1B68     		ldr	r3, [r3]
 1672 0140 5322     		movs	r2, #83
 1673 0142 5A62     		str	r2, [r3, #36]
 877:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 878:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Configure the Alarm register */
 879:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 1674              		.loc 1 879 12
 1675 0144 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccw0H4H9.s 			page 46


 1676 0146 5B6A     		ldr	r3, [r3, #36]
 1677              		.loc 1 879 5
 1678 0148 B3F5807F 		cmp	r3, #256
 1679 014c 3FD1     		bne	.L51
 880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 881:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
 882:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 1680              		.loc 1 882 5
 1681 014e FB68     		ldr	r3, [r7, #12]
 1682 0150 1B68     		ldr	r3, [r3]
 1683 0152 9A68     		ldr	r2, [r3, #8]
 1684 0154 FB68     		ldr	r3, [r7, #12]
 1685 0156 1B68     		ldr	r3, [r3]
 1686 0158 22F48072 		bic	r2, r2, #256
 1687 015c 9A60     		str	r2, [r3, #8]
 883:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 884:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 885:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 1688              		.loc 1 885 5
 1689 015e FB68     		ldr	r3, [r7, #12]
 1690 0160 1B68     		ldr	r3, [r3]
 1691 0162 9A68     		ldr	r2, [r3, #8]
 1692 0164 FB68     		ldr	r3, [r7, #12]
 1693 0166 1B68     		ldr	r3, [r3]
 1694 0168 22F48052 		bic	r2, r2, #4096
 1695 016c 9A60     		str	r2, [r3, #8]
 886:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 887:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
 888:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1696              		.loc 1 888 17
 1697 016e FFF7FEFF 		bl	HAL_GetTick
 1698 0172 B861     		str	r0, [r7, #24]
 889:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 890:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 891:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 1699              		.loc 1 891 10
 1700 0174 13E0     		b	.L52
 1701              	.L53:
 892:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 893:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1702              		.loc 1 893 11
 1703 0176 FFF7FEFF 		bl	HAL_GetTick
 1704 017a 0246     		mov	r2, r0
 1705              		.loc 1 893 25
 1706 017c BB69     		ldr	r3, [r7, #24]
 1707 017e D31A     		subs	r3, r2, r3
 1708              		.loc 1 893 9
 1709 0180 B3F57A7F 		cmp	r3, #1000
 1710 0184 0BD9     		bls	.L52
 894:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
 895:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 896:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1711              		.loc 1 896 9
 1712 0186 FB68     		ldr	r3, [r7, #12]
 1713 0188 1B68     		ldr	r3, [r3]
 1714 018a FF22     		movs	r2, #255
 1715 018c 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccw0H4H9.s 			page 47


 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 898:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1716              		.loc 1 898 21
 1717 018e FB68     		ldr	r3, [r7, #12]
 1718 0190 0322     		movs	r2, #3
 1719 0192 5A77     		strb	r2, [r3, #29]
 899:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 900:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */ 
 901:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1720              		.loc 1 901 9
 1721 0194 FB68     		ldr	r3, [r7, #12]
 1722 0196 0022     		movs	r2, #0
 1723 0198 1A77     		strb	r2, [r3, #28]
 902:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 903:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1724              		.loc 1 903 16
 1725 019a 0323     		movs	r3, #3
 1726 019c 61E0     		b	.L43
 1727              	.L52:
 891:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1728              		.loc 1 891 11
 1729 019e FB68     		ldr	r3, [r7, #12]
 1730 01a0 1B68     		ldr	r3, [r3]
 1731 01a2 DB68     		ldr	r3, [r3, #12]
 1732 01a4 03F00103 		and	r3, r3, #1
 891:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1733              		.loc 1 891 10
 1734 01a8 002B     		cmp	r3, #0
 1735 01aa E4D0     		beq	.L53
 904:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }   
 905:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
 906:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 907:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 1736              		.loc 1 907 9
 1737 01ac FB68     		ldr	r3, [r7, #12]
 1738 01ae 1B68     		ldr	r3, [r3]
 1739              		.loc 1 907 28
 1740 01b0 FA69     		ldr	r2, [r7, #28]
 1741 01b2 DA61     		str	r2, [r3, #28]
 908:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 909:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 1742              		.loc 1 909 9
 1743 01b4 FB68     		ldr	r3, [r7, #12]
 1744 01b6 1B68     		ldr	r3, [r3]
 1745              		.loc 1 909 30
 1746 01b8 7A69     		ldr	r2, [r7, #20]
 1747 01ba 5A64     		str	r2, [r3, #68]
 910:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 911:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 1748              		.loc 1 911 5
 1749 01bc FB68     		ldr	r3, [r7, #12]
 1750 01be 1B68     		ldr	r3, [r3]
 1751 01c0 9A68     		ldr	r2, [r3, #8]
 1752 01c2 FB68     		ldr	r3, [r7, #12]
 1753 01c4 1B68     		ldr	r3, [r3]
 1754 01c6 42F48072 		orr	r2, r2, #256
 1755 01ca 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccw0H4H9.s 			page 48


 1756 01cc 3EE0     		b	.L54
 1757              	.L51:
 912:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 913:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
 914:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 915:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
 916:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 1758              		.loc 1 916 5
 1759 01ce FB68     		ldr	r3, [r7, #12]
 1760 01d0 1B68     		ldr	r3, [r3]
 1761 01d2 9A68     		ldr	r2, [r3, #8]
 1762 01d4 FB68     		ldr	r3, [r7, #12]
 1763 01d6 1B68     		ldr	r3, [r3]
 1764 01d8 22F40072 		bic	r2, r2, #512
 1765 01dc 9A60     		str	r2, [r3, #8]
 917:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 918:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
 919:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 1766              		.loc 1 919 5
 1767 01de FB68     		ldr	r3, [r7, #12]
 1768 01e0 1B68     		ldr	r3, [r3]
 1769 01e2 9A68     		ldr	r2, [r3, #8]
 1770 01e4 FB68     		ldr	r3, [r7, #12]
 1771 01e6 1B68     		ldr	r3, [r3]
 1772 01e8 22F40052 		bic	r2, r2, #8192
 1773 01ec 9A60     		str	r2, [r3, #8]
 920:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 921:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
 922:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 1774              		.loc 1 922 17
 1775 01ee FFF7FEFF 		bl	HAL_GetTick
 1776 01f2 B861     		str	r0, [r7, #24]
 923:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 924:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 925:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 1777              		.loc 1 925 10
 1778 01f4 13E0     		b	.L55
 1779              	.L56:
 926:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 927:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 1780              		.loc 1 927 11
 1781 01f6 FFF7FEFF 		bl	HAL_GetTick
 1782 01fa 0246     		mov	r2, r0
 1783              		.loc 1 927 25
 1784 01fc BB69     		ldr	r3, [r7, #24]
 1785 01fe D31A     		subs	r3, r2, r3
 1786              		.loc 1 927 9
 1787 0200 B3F57A7F 		cmp	r3, #1000
 1788 0204 0BD9     		bls	.L55
 928:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
 929:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
 930:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 1789              		.loc 1 930 9
 1790 0206 FB68     		ldr	r3, [r7, #12]
 1791 0208 1B68     		ldr	r3, [r3]
 1792 020a FF22     		movs	r2, #255
 1793 020c 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccw0H4H9.s 			page 49


 931:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 932:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 1794              		.loc 1 932 21
 1795 020e FB68     		ldr	r3, [r7, #12]
 1796 0210 0322     		movs	r2, #3
 1797 0212 5A77     		strb	r2, [r3, #29]
 933:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 934:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */ 
 935:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 1798              		.loc 1 935 9
 1799 0214 FB68     		ldr	r3, [r7, #12]
 1800 0216 0022     		movs	r2, #0
 1801 0218 1A77     		strb	r2, [r3, #28]
 936:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
 937:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 1802              		.loc 1 937 16
 1803 021a 0323     		movs	r3, #3
 1804 021c 21E0     		b	.L43
 1805              	.L55:
 925:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1806              		.loc 1 925 11
 1807 021e FB68     		ldr	r3, [r7, #12]
 1808 0220 1B68     		ldr	r3, [r3]
 1809 0222 DB68     		ldr	r3, [r3, #12]
 1810 0224 03F00203 		and	r3, r3, #2
 925:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 1811              		.loc 1 925 10
 1812 0228 002B     		cmp	r3, #0
 1813 022a E4D0     		beq	.L56
 938:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }  
 939:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }    
 940:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
 941:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 1814              		.loc 1 941 9
 1815 022c FB68     		ldr	r3, [r7, #12]
 1816 022e 1B68     		ldr	r3, [r3]
 1817              		.loc 1 941 28
 1818 0230 FA69     		ldr	r2, [r7, #28]
 1819 0232 1A62     		str	r2, [r3, #32]
 942:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 943:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 1820              		.loc 1 943 9
 1821 0234 FB68     		ldr	r3, [r7, #12]
 1822 0236 1B68     		ldr	r3, [r3]
 1823              		.loc 1 943 30
 1824 0238 7A69     		ldr	r2, [r7, #20]
 1825 023a 9A64     		str	r2, [r3, #72]
 944:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc); 
 1826              		.loc 1 945 5
 1827 023c FB68     		ldr	r3, [r7, #12]
 1828 023e 1B68     		ldr	r3, [r3]
 1829 0240 9A68     		ldr	r2, [r3, #8]
 1830 0242 FB68     		ldr	r3, [r7, #12]
 1831 0244 1B68     		ldr	r3, [r3]
 1832 0246 42F40072 		orr	r2, r2, #512
 1833 024a 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccw0H4H9.s 			page 50


 1834              	.L54:
 946:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
 947:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 948:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 949:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 1835              		.loc 1 949 3
 1836 024c FB68     		ldr	r3, [r7, #12]
 1837 024e 1B68     		ldr	r3, [r3]
 1838 0250 FF22     		movs	r2, #255
 1839 0252 5A62     		str	r2, [r3, #36]
 950:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 951:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state */
 952:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 1840              		.loc 1 952 15
 1841 0254 FB68     		ldr	r3, [r7, #12]
 1842 0256 0122     		movs	r2, #1
 1843 0258 5A77     		strb	r2, [r3, #29]
 953:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 954:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */ 
 955:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 1844              		.loc 1 955 3
 1845 025a FB68     		ldr	r3, [r7, #12]
 1846 025c 0022     		movs	r2, #0
 1847 025e 1A77     		strb	r2, [r3, #28]
 956:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 957:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 1848              		.loc 1 957 10
 1849 0260 0023     		movs	r3, #0
 1850              	.L43:
 958:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 1851              		.loc 1 958 1
 1852 0262 1846     		mov	r0, r3
 1853 0264 2437     		adds	r7, r7, #36
 1854              	.LCFI45:
 1855              		.cfi_def_cfa_offset 12
 1856 0266 BD46     		mov	sp, r7
 1857              	.LCFI46:
 1858              		.cfi_def_cfa_register 13
 1859              		@ sp needed
 1860 0268 90BD     		pop	{r4, r7, pc}
 1861              		.cfi_endproc
 1862              	.LFE134:
 1864              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1865              		.align	1
 1866              		.global	HAL_RTC_SetAlarm_IT
 1867              		.syntax unified
 1868              		.thumb
 1869              		.thumb_func
 1870              		.fpu fpv4-sp-d16
 1872              	HAL_RTC_SetAlarm_IT:
 1873              	.LFB135:
 959:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
 960:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
 961:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Sets the specified RTC Alarm with Interrupt 
 962:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
 963:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
 964:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
ARM GAS  /tmp/ccw0H4H9.s 			page 51


 965:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 966:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 967:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
 968:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
 969:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
 970:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
 971:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
 972:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 1874              		.loc 1 972 1
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 32
 1877              		@ frame_needed = 1, uses_anonymous_args = 0
 1878 0000 90B5     		push	{r4, r7, lr}
 1879              	.LCFI47:
 1880              		.cfi_def_cfa_offset 12
 1881              		.cfi_offset 4, -12
 1882              		.cfi_offset 7, -8
 1883              		.cfi_offset 14, -4
 1884 0002 89B0     		sub	sp, sp, #36
 1885              	.LCFI48:
 1886              		.cfi_def_cfa_offset 48
 1887 0004 00AF     		add	r7, sp, #0
 1888              	.LCFI49:
 1889              		.cfi_def_cfa_register 7
 1890 0006 F860     		str	r0, [r7, #12]
 1891 0008 B960     		str	r1, [r7, #8]
 1892 000a 7A60     		str	r2, [r7, #4]
 973:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 1893              		.loc 1 973 12
 1894 000c 0023     		movs	r3, #0
 1895 000e FB61     		str	r3, [r7, #28]
 1896              		.loc 1 973 25
 1897 0010 0023     		movs	r3, #0
 1898 0012 BB61     		str	r3, [r7, #24]
 974:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 1899              		.loc 1 974 69
 1900 0014 844B     		ldr	r3, .L73
 1901 0016 1B68     		ldr	r3, [r3]
 1902 0018 844A     		ldr	r2, .L73+4
 1903 001a A2FB0323 		umull	r2, r3, r2, r3
 1904 001e DB0A     		lsrs	r3, r3, #11
 1905              		.loc 1 974 44
 1906 0020 4FF47A72 		mov	r2, #1000
 1907 0024 02FB03F3 		mul	r3, r2, r3
 1908              		.loc 1 974 17
 1909 0028 7B61     		str	r3, [r7, #20]
 975:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 976:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
 977:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 978:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
 979:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
 980:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
 981:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
 982:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
 983:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       
 984:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */ 
 985:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
ARM GAS  /tmp/ccw0H4H9.s 			page 52


 1910              		.loc 1 985 3
 1911 002a FB68     		ldr	r3, [r7, #12]
 1912 002c 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1913 002e 012B     		cmp	r3, #1
 1914 0030 01D1     		bne	.L58
 1915              		.loc 1 985 3 is_stmt 0 discriminator 1
 1916 0032 0223     		movs	r3, #2
 1917 0034 32E1     		b	.L59
 1918              	.L58:
 1919              		.loc 1 985 3 discriminator 2
 1920 0036 FB68     		ldr	r3, [r7, #12]
 1921 0038 0122     		movs	r2, #1
 1922 003a 1A77     		strb	r2, [r3, #28]
 986:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 987:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 1923              		.loc 1 987 15 is_stmt 1 discriminator 2
 1924 003c FB68     		ldr	r3, [r7, #12]
 1925 003e 0222     		movs	r2, #2
 1926 0040 5A77     		strb	r2, [r3, #29]
 988:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
 989:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 1927              		.loc 1 989 5 discriminator 2
 1928 0042 7B68     		ldr	r3, [r7, #4]
 1929 0044 002B     		cmp	r3, #0
 1930 0046 37D1     		bne	.L60
 990:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 991:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1931              		.loc 1 991 13
 1932 0048 FB68     		ldr	r3, [r7, #12]
 1933 004a 1B68     		ldr	r3, [r3]
 1934              		.loc 1 991 23
 1935 004c 9B68     		ldr	r3, [r3, #8]
 1936              		.loc 1 991 28
 1937 004e 03F04003 		and	r3, r3, #64
 1938              		.loc 1 991 7
 1939 0052 002B     		cmp	r3, #0
 1940 0054 02D1     		bne	.L61
 992:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 993:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
 994:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
 995:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
 996:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
 997:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 998:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 1941              		.loc 1 998 36
 1942 0056 BB68     		ldr	r3, [r7, #8]
 1943 0058 0022     		movs	r2, #0
 1944 005a DA70     		strb	r2, [r3, #3]
 1945              	.L61:
 999:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1000:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1001:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1002:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1003:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1004:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1005:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1006:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
ARM GAS  /tmp/ccw0H4H9.s 			page 53


1007:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1008:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1009:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1010:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1011:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1012:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 1946              		.loc 1 1012 26
 1947 005c BB68     		ldr	r3, [r7, #8]
 1948 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1949 0060 1846     		mov	r0, r3
 1950 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1951 0066 0346     		mov	r3, r0
 1952              		.loc 1 1012 66
 1953 0068 1C04     		lsls	r4, r3, #16
1013:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1954              		.loc 1 1013 26
 1955 006a BB68     		ldr	r3, [r7, #8]
 1956 006c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1957 006e 1846     		mov	r0, r3
 1958 0070 FFF7FEFF 		bl	RTC_ByteToBcd2
 1959 0074 0346     		mov	r3, r0
 1960              		.loc 1 1013 68
 1961 0076 1B02     		lsls	r3, r3, #8
1012:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1962              		.loc 1 1012 74
 1963 0078 1C43     		orrs	r4, r4, r3
1014:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1964              		.loc 1 1014 26
 1965 007a BB68     		ldr	r3, [r7, #8]
 1966 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1967 007e 1846     		mov	r0, r3
 1968 0080 FFF7FEFF 		bl	RTC_ByteToBcd2
 1969 0084 0346     		mov	r3, r0
1013:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1970              		.loc 1 1013 75
 1971 0086 44EA0302 		orr	r2, r4, r3
1015:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1972              		.loc 1 1015 44
 1973 008a BB68     		ldr	r3, [r7, #8]
 1974 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1975              		.loc 1 1015 57
 1976 008e 1B04     		lsls	r3, r3, #16
1014:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 1977              		.loc 1 1014 69
 1978 0090 42EA0304 		orr	r4, r2, r3
1016:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1979              		.loc 1 1016 26
 1980 0094 BB68     		ldr	r3, [r7, #8]
 1981 0096 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1982 009a 1846     		mov	r0, r3
 1983 009c FFF7FEFF 		bl	RTC_ByteToBcd2
 1984 00a0 0346     		mov	r3, r0
 1985              		.loc 1 1016 67
 1986 00a2 1B06     		lsls	r3, r3, #24
1015:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 1987              		.loc 1 1015 65
 1988 00a4 44EA0302 		orr	r2, r4, r3
ARM GAS  /tmp/ccw0H4H9.s 			page 54


1017:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 1989              		.loc 1 1017 32
 1990 00a8 BB68     		ldr	r3, [r7, #8]
 1991 00aa DB69     		ldr	r3, [r3, #28]
1016:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 1992              		.loc 1 1016 75
 1993 00ac 1A43     		orrs	r2, r2, r3
1018:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask)); 
 1994              		.loc 1 1018 32
 1995 00ae BB68     		ldr	r3, [r7, #8]
 1996 00b0 5B69     		ldr	r3, [r3, #20]
1012:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 1997              		.loc 1 1012 12
 1998 00b2 1343     		orrs	r3, r3, r2
 1999 00b4 FB61     		str	r3, [r7, #28]
 2000 00b6 40E0     		b	.L62
 2001              	.L60:
1019:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1020:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1021:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1022:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 2002              		.loc 1 1022 13
 2003 00b8 FB68     		ldr	r3, [r7, #12]
 2004 00ba 1B68     		ldr	r3, [r3]
 2005              		.loc 1 1022 23
 2006 00bc 9B68     		ldr	r3, [r3, #8]
 2007              		.loc 1 1022 28
 2008 00be 03F04003 		and	r3, r3, #64
 2009              		.loc 1 1022 7
 2010 00c2 002B     		cmp	r3, #0
 2011 00c4 07D0     		beq	.L63
1023:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1024:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2012              		.loc 1 1024 16
 2013 00c6 BB68     		ldr	r3, [r7, #8]
 2014 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2015 00ca 1846     		mov	r0, r3
 2016 00cc FFF7FEFF 		bl	RTC_Bcd2ToByte
 2017 00d0 0346     		mov	r3, r0
 2018              		.loc 1 1024 14
 2019 00d2 FB61     		str	r3, [r7, #28]
 2020 00d4 02E0     		b	.L64
 2021              	.L63:
1025:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1026:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
1028:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1029:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1030:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
 2022              		.loc 1 1030 36
 2023 00d6 BB68     		ldr	r3, [r7, #8]
 2024 00d8 0022     		movs	r2, #0
 2025 00da DA70     		strb	r2, [r3, #3]
 2026              	.L64:
1031:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1032:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1033:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
ARM GAS  /tmp/ccw0H4H9.s 			page 55


1034:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1035:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1036:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1037:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 2027              		.loc 1 1037 14
 2028 00dc BB68     		ldr	r3, [r7, #8]
 2029 00de DB69     		ldr	r3, [r3, #28]
 2030              		.loc 1 1037 7
 2031 00e0 002B     		cmp	r3, #0
 2032 00e2 08D1     		bne	.L65
1038:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1039:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2033              		.loc 1 1039 16
 2034 00e4 BB68     		ldr	r3, [r7, #8]
 2035 00e6 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2036 00ea 1846     		mov	r0, r3
 2037 00ec FFF7FEFF 		bl	RTC_Bcd2ToByte
 2038 00f0 0346     		mov	r3, r0
 2039              		.loc 1 1039 14
 2040 00f2 FB61     		str	r3, [r7, #28]
 2041 00f4 07E0     		b	.L66
 2042              	.L65:
1040:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1041:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1042:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     else
1043:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1044:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       tmpreg = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2043              		.loc 1 1044 16
 2044 00f6 BB68     		ldr	r3, [r7, #8]
 2045 00f8 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2046 00fc 1846     		mov	r0, r3
 2047 00fe FFF7FEFF 		bl	RTC_Bcd2ToByte
 2048 0102 0346     		mov	r3, r0
 2049              		.loc 1 1044 14
 2050 0104 FB61     		str	r3, [r7, #28]
 2051              	.L66:
1045:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1046:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1047:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 2052              		.loc 1 1047 44
 2053 0106 BB68     		ldr	r3, [r7, #8]
 2054 0108 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2055              		.loc 1 1047 52
 2056 010a 1A04     		lsls	r2, r3, #16
1048:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 2057              		.loc 1 1048 44
 2058 010c BB68     		ldr	r3, [r7, #8]
 2059 010e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2060              		.loc 1 1048 54
 2061 0110 1B02     		lsls	r3, r3, #8
1047:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 2062              		.loc 1 1047 60
 2063 0112 1343     		orrs	r3, r3, r2
1049:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 2064              		.loc 1 1049 44
 2065 0114 BA68     		ldr	r2, [r7, #8]
 2066 0116 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
ARM GAS  /tmp/ccw0H4H9.s 			page 56


1048:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 2067              		.loc 1 1048 61
 2068 0118 1A43     		orrs	r2, r2, r3
1050:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 2069              		.loc 1 1050 44
 2070 011a BB68     		ldr	r3, [r7, #8]
 2071 011c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2072              		.loc 1 1050 57
 2073 011e 1B04     		lsls	r3, r3, #16
1049:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 2074              		.loc 1 1049 54
 2075 0120 1A43     		orrs	r2, r2, r3
1051:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 2076              		.loc 1 1051 33
 2077 0122 BB68     		ldr	r3, [r7, #8]
 2078 0124 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2079              		.loc 1 1051 53
 2080 0128 1B06     		lsls	r3, r3, #24
1050:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 2081              		.loc 1 1050 65
 2082 012a 1A43     		orrs	r2, r2, r3
1052:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 2083              		.loc 1 1052 32
 2084 012c BB68     		ldr	r3, [r7, #8]
 2085 012e DB69     		ldr	r3, [r3, #28]
1051:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 2086              		.loc 1 1051 61
 2087 0130 1A43     		orrs	r2, r2, r3
1053:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));     
 2088              		.loc 1 1053 32
 2089 0132 BB68     		ldr	r3, [r7, #8]
 2090 0134 5B69     		ldr	r3, [r3, #20]
1047:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****               ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 2091              		.loc 1 1047 12
 2092 0136 1343     		orrs	r3, r3, r2
 2093 0138 FB61     		str	r3, [r7, #28]
 2094              	.L62:
1054:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1055:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1056:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
 2095              		.loc 1 1056 60
 2096 013a BB68     		ldr	r3, [r7, #8]
 2097 013c 5A68     		ldr	r2, [r3, #4]
 2098              		.loc 1 1056 92
 2099 013e BB68     		ldr	r3, [r7, #8]
 2100 0140 9B69     		ldr	r3, [r3, #24]
 2101              		.loc 1 1056 19
 2102 0142 1343     		orrs	r3, r3, r2
 2103 0144 BB61     		str	r3, [r7, #24]
1057:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1058:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1059:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2104              		.loc 1 1059 3
 2105 0146 FB68     		ldr	r3, [r7, #12]
 2106 0148 1B68     		ldr	r3, [r3]
 2107 014a CA22     		movs	r2, #202
 2108 014c 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccw0H4H9.s 			page 57


 2109 014e FB68     		ldr	r3, [r7, #12]
 2110 0150 1B68     		ldr	r3, [r3]
 2111 0152 5322     		movs	r2, #83
 2112 0154 5A62     		str	r2, [r3, #36]
1060:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1061:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Configure the Alarm register */
1062:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
 2113              		.loc 1 1062 12
 2114 0156 BB68     		ldr	r3, [r7, #8]
 2115 0158 5B6A     		ldr	r3, [r3, #36]
 2116              		.loc 1 1062 5
 2117 015a B3F5807F 		cmp	r3, #256
 2118 015e 41D1     		bne	.L67
1063:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1064:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1065:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2119              		.loc 1 1065 5
 2120 0160 FB68     		ldr	r3, [r7, #12]
 2121 0162 1B68     		ldr	r3, [r3]
 2122 0164 9A68     		ldr	r2, [r3, #8]
 2123 0166 FB68     		ldr	r3, [r7, #12]
 2124 0168 1B68     		ldr	r3, [r3]
 2125 016a 22F48072 		bic	r2, r2, #256
 2126 016e 9A60     		str	r2, [r3, #8]
1066:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1067:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear flag alarm A */
1068:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2127              		.loc 1 1068 5
 2128 0170 FB68     		ldr	r3, [r7, #12]
 2129 0172 1B68     		ldr	r3, [r3]
 2130 0174 DB68     		ldr	r3, [r3, #12]
 2131 0176 DAB2     		uxtb	r2, r3
 2132 0178 FB68     		ldr	r3, [r7, #12]
 2133 017a 1B68     		ldr	r3, [r3]
 2134 017c 62F4C072 		orn	r2, r2, #384
 2135 0180 DA60     		str	r2, [r3, #12]
 2136              	.L69:
1069:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1070:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1071:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     do
1072:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1073:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if (count-- == 0U)
 2137              		.loc 1 1073 16
 2138 0182 7B69     		ldr	r3, [r7, #20]
 2139 0184 5A1E     		subs	r2, r3, #1
 2140 0186 7A61     		str	r2, [r7, #20]
 2141              		.loc 1 1073 10
 2142 0188 002B     		cmp	r3, #0
 2143 018a 0BD1     		bne	.L68
1074:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1075:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1076:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2144              		.loc 1 1076 9
 2145 018c FB68     		ldr	r3, [r7, #12]
 2146 018e 1B68     		ldr	r3, [r3]
 2147 0190 FF22     		movs	r2, #255
 2148 0192 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccw0H4H9.s 			page 58


1077:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1078:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2149              		.loc 1 1078 21
 2150 0194 FB68     		ldr	r3, [r7, #12]
 2151 0196 0322     		movs	r2, #3
 2152 0198 5A77     		strb	r2, [r3, #29]
1079:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1080:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1081:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2153              		.loc 1 1081 9
 2154 019a FB68     		ldr	r3, [r7, #12]
 2155 019c 0022     		movs	r2, #0
 2156 019e 1A77     		strb	r2, [r3, #28]
1082:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1083:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2157              		.loc 1 1083 16
 2158 01a0 0323     		movs	r3, #3
 2159 01a2 7BE0     		b	.L59
 2160              	.L68:
1084:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1085:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
1086:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 2161              		.loc 1 1086 12
 2162 01a4 FB68     		ldr	r3, [r7, #12]
 2163 01a6 1B68     		ldr	r3, [r3]
 2164 01a8 DB68     		ldr	r3, [r3, #12]
 2165 01aa 03F00103 		and	r3, r3, #1
 2166              		.loc 1 1086 5
 2167 01ae 002B     		cmp	r3, #0
 2168 01b0 E7D0     		beq	.L69
1087:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1088:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 2169              		.loc 1 1088 9
 2170 01b2 FB68     		ldr	r3, [r7, #12]
 2171 01b4 1B68     		ldr	r3, [r3]
 2172              		.loc 1 1088 28
 2173 01b6 FA69     		ldr	r2, [r7, #28]
 2174 01b8 DA61     		str	r2, [r3, #28]
1089:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1090:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
 2175              		.loc 1 1090 9
 2176 01ba FB68     		ldr	r3, [r7, #12]
 2177 01bc 1B68     		ldr	r3, [r3]
 2178              		.loc 1 1090 30
 2179 01be BA69     		ldr	r2, [r7, #24]
 2180 01c0 5A64     		str	r2, [r3, #68]
1091:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1092:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
 2181              		.loc 1 1092 5
 2182 01c2 FB68     		ldr	r3, [r7, #12]
 2183 01c4 1B68     		ldr	r3, [r3]
 2184 01c6 9A68     		ldr	r2, [r3, #8]
 2185 01c8 FB68     		ldr	r3, [r7, #12]
 2186 01ca 1B68     		ldr	r3, [r3]
 2187 01cc 42F48072 		orr	r2, r2, #256
 2188 01d0 9A60     		str	r2, [r3, #8]
1093:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
ARM GAS  /tmp/ccw0H4H9.s 			page 59


1094:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 2189              		.loc 1 1094 5
 2190 01d2 FB68     		ldr	r3, [r7, #12]
 2191 01d4 1B68     		ldr	r3, [r3]
 2192 01d6 9A68     		ldr	r2, [r3, #8]
 2193 01d8 FB68     		ldr	r3, [r7, #12]
 2194 01da 1B68     		ldr	r3, [r3]
 2195 01dc 42F48052 		orr	r2, r2, #4096
 2196 01e0 9A60     		str	r2, [r3, #8]
 2197 01e2 44E0     		b	.L70
 2198              	.L67:
1095:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1096:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1097:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1098:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1099:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2199              		.loc 1 1099 5
 2200 01e4 FB68     		ldr	r3, [r7, #12]
 2201 01e6 1B68     		ldr	r3, [r3]
 2202 01e8 9A68     		ldr	r2, [r3, #8]
 2203 01ea FB68     		ldr	r3, [r7, #12]
 2204 01ec 1B68     		ldr	r3, [r3]
 2205 01ee 22F40072 		bic	r2, r2, #512
 2206 01f2 9A60     		str	r2, [r3, #8]
1100:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1101:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Clear flag alarm B */
1102:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 2207              		.loc 1 1102 5
 2208 01f4 FB68     		ldr	r3, [r7, #12]
 2209 01f6 1B68     		ldr	r3, [r3]
 2210 01f8 DB68     		ldr	r3, [r3, #12]
 2211 01fa DAB2     		uxtb	r2, r3
 2212 01fc FB68     		ldr	r3, [r7, #12]
 2213 01fe 1B68     		ldr	r3, [r3]
 2214 0200 62F42072 		orn	r2, r2, #640
 2215 0204 DA60     		str	r2, [r3, #12]
 2216              	.L72:
1103:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1104:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1105:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     do
1106:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1107:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if (count-- == 0U)
 2217              		.loc 1 1107 16
 2218 0206 7B69     		ldr	r3, [r7, #20]
 2219 0208 5A1E     		subs	r2, r3, #1
 2220 020a 7A61     		str	r2, [r7, #20]
 2221              		.loc 1 1107 10
 2222 020c 002B     		cmp	r3, #0
 2223 020e 0FD1     		bne	.L71
1108:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1109:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1110:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2224              		.loc 1 1110 9
 2225 0210 FB68     		ldr	r3, [r7, #12]
 2226 0212 1B68     		ldr	r3, [r3]
 2227 0214 FF22     		movs	r2, #255
 2228 0216 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccw0H4H9.s 			page 60


1111:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1112:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2229              		.loc 1 1112 21
 2230 0218 FB68     		ldr	r3, [r7, #12]
 2231 021a 0322     		movs	r2, #3
 2232 021c 5A77     		strb	r2, [r3, #29]
1113:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1114:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */
1115:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2233              		.loc 1 1115 9
 2234 021e FB68     		ldr	r3, [r7, #12]
 2235 0220 0022     		movs	r2, #0
 2236 0222 1A77     		strb	r2, [r3, #28]
1116:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1117:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2237              		.loc 1 1117 16
 2238 0224 0323     		movs	r3, #3
 2239 0226 39E0     		b	.L59
 2240              	.L74:
 2241              		.align	2
 2242              	.L73:
 2243 0228 00000000 		.word	SystemCoreClock
 2244 022c D34D6210 		.word	274877907
 2245              	.L71:
1118:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1119:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
1120:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 2246              		.loc 1 1120 12
 2247 0230 FB68     		ldr	r3, [r7, #12]
 2248 0232 1B68     		ldr	r3, [r3]
 2249 0234 DB68     		ldr	r3, [r3, #12]
 2250 0236 03F00203 		and	r3, r3, #2
 2251              		.loc 1 1120 5
 2252 023a 002B     		cmp	r3, #0
 2253 023c E3D0     		beq	.L72
1121:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1122:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 2254              		.loc 1 1122 9
 2255 023e FB68     		ldr	r3, [r7, #12]
 2256 0240 1B68     		ldr	r3, [r3]
 2257              		.loc 1 1122 28
 2258 0242 FA69     		ldr	r2, [r7, #28]
 2259 0244 1A62     		str	r2, [r3, #32]
1123:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1124:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 2260              		.loc 1 1124 9
 2261 0246 FB68     		ldr	r3, [r7, #12]
 2262 0248 1B68     		ldr	r3, [r3]
 2263              		.loc 1 1124 30
 2264 024a BA69     		ldr	r2, [r7, #24]
 2265 024c 9A64     		str	r2, [r3, #72]
1125:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1126:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
 2266              		.loc 1 1126 5
 2267 024e FB68     		ldr	r3, [r7, #12]
 2268 0250 1B68     		ldr	r3, [r3]
 2269 0252 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccw0H4H9.s 			page 61


 2270 0254 FB68     		ldr	r3, [r7, #12]
 2271 0256 1B68     		ldr	r3, [r3]
 2272 0258 42F40072 		orr	r2, r2, #512
 2273 025c 9A60     		str	r2, [r3, #8]
1127:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1128:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 2274              		.loc 1 1128 5
 2275 025e FB68     		ldr	r3, [r7, #12]
 2276 0260 1B68     		ldr	r3, [r3]
 2277 0262 9A68     		ldr	r2, [r3, #8]
 2278 0264 FB68     		ldr	r3, [r7, #12]
 2279 0266 1B68     		ldr	r3, [r3]
 2280 0268 42F40052 		orr	r2, r2, #8192
 2281 026c 9A60     		str	r2, [r3, #8]
 2282              	.L70:
1129:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1130:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1131:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1132:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 2283              		.loc 1 1132 3
 2284 026e 0D4B     		ldr	r3, .L75
 2285 0270 1B68     		ldr	r3, [r3]
 2286 0272 0C4A     		ldr	r2, .L75
 2287 0274 43F40033 		orr	r3, r3, #131072
 2288 0278 1360     		str	r3, [r2]
1133:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1134:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 2289              		.loc 1 1134 14
 2290 027a 0A4B     		ldr	r3, .L75
 2291 027c 9B68     		ldr	r3, [r3, #8]
 2292 027e 094A     		ldr	r2, .L75
 2293 0280 43F40033 		orr	r3, r3, #131072
 2294 0284 9360     		str	r3, [r2, #8]
1135:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1136:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1137:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 2295              		.loc 1 1137 3
 2296 0286 FB68     		ldr	r3, [r7, #12]
 2297 0288 1B68     		ldr	r3, [r3]
 2298 028a FF22     		movs	r2, #255
 2299 028c 5A62     		str	r2, [r3, #36]
1138:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1139:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2300              		.loc 1 1139 15
 2301 028e FB68     		ldr	r3, [r7, #12]
 2302 0290 0122     		movs	r2, #1
 2303 0292 5A77     		strb	r2, [r3, #29]
1140:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1141:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */ 
1142:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2304              		.loc 1 1142 3
 2305 0294 FB68     		ldr	r3, [r7, #12]
 2306 0296 0022     		movs	r2, #0
 2307 0298 1A77     		strb	r2, [r3, #28]
1143:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1144:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2308              		.loc 1 1144 10
ARM GAS  /tmp/ccw0H4H9.s 			page 62


 2309 029a 0023     		movs	r3, #0
 2310              	.L59:
1145:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2311              		.loc 1 1145 1
 2312 029c 1846     		mov	r0, r3
 2313 029e 2437     		adds	r7, r7, #36
 2314              	.LCFI50:
 2315              		.cfi_def_cfa_offset 12
 2316 02a0 BD46     		mov	sp, r7
 2317              	.LCFI51:
 2318              		.cfi_def_cfa_register 13
 2319              		@ sp needed
 2320 02a2 90BD     		pop	{r4, r7, pc}
 2321              	.L76:
 2322              		.align	2
 2323              	.L75:
 2324 02a4 003C0140 		.word	1073822720
 2325              		.cfi_endproc
 2326              	.LFE135:
 2328              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
 2329              		.align	1
 2330              		.global	HAL_RTC_DeactivateAlarm
 2331              		.syntax unified
 2332              		.thumb
 2333              		.thumb_func
 2334              		.fpu fpv4-sp-d16
 2336              	HAL_RTC_DeactivateAlarm:
 2337              	.LFB136:
1146:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1147:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1148:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm 
1149:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1150:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1151:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1152:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1153:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1154:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1155:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1156:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1157:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1158:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2338              		.loc 1 1158 1
 2339              		.cfi_startproc
 2340              		@ args = 0, pretend = 0, frame = 16
 2341              		@ frame_needed = 1, uses_anonymous_args = 0
 2342 0000 80B5     		push	{r7, lr}
 2343              	.LCFI52:
 2344              		.cfi_def_cfa_offset 8
 2345              		.cfi_offset 7, -8
 2346              		.cfi_offset 14, -4
 2347 0002 84B0     		sub	sp, sp, #16
 2348              	.LCFI53:
 2349              		.cfi_def_cfa_offset 24
 2350 0004 00AF     		add	r7, sp, #0
 2351              	.LCFI54:
 2352              		.cfi_def_cfa_register 7
 2353 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccw0H4H9.s 			page 63


 2354 0008 3960     		str	r1, [r7]
1159:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 2355              		.loc 1 1159 12
 2356 000a 0023     		movs	r3, #0
 2357 000c FB60     		str	r3, [r7, #12]
1160:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1161:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
1162:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1164:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Locked */ 
1165:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 2358              		.loc 1 1165 3
 2359 000e 7B68     		ldr	r3, [r7, #4]
 2360 0010 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 2361 0012 012B     		cmp	r3, #1
 2362 0014 01D1     		bne	.L78
 2363              		.loc 1 1165 3 is_stmt 0 discriminator 1
 2364 0016 0223     		movs	r3, #2
 2365 0018 7BE0     		b	.L79
 2366              	.L78:
 2367              		.loc 1 1165 3 discriminator 2
 2368 001a 7B68     		ldr	r3, [r7, #4]
 2369 001c 0122     		movs	r2, #1
 2370 001e 1A77     		strb	r2, [r3, #28]
1166:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1167:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 2371              		.loc 1 1167 15 is_stmt 1 discriminator 2
 2372 0020 7B68     		ldr	r3, [r7, #4]
 2373 0022 0222     		movs	r2, #2
 2374 0024 5A77     		strb	r2, [r3, #29]
1168:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1169:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1170:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 2375              		.loc 1 1170 3 discriminator 2
 2376 0026 7B68     		ldr	r3, [r7, #4]
 2377 0028 1B68     		ldr	r3, [r3]
 2378 002a CA22     		movs	r2, #202
 2379 002c 5A62     		str	r2, [r3, #36]
 2380 002e 7B68     		ldr	r3, [r7, #4]
 2381 0030 1B68     		ldr	r3, [r3]
 2382 0032 5322     		movs	r2, #83
 2383 0034 5A62     		str	r2, [r3, #36]
1171:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1172:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2384              		.loc 1 1172 5 discriminator 2
 2385 0036 3B68     		ldr	r3, [r7]
 2386 0038 B3F5807F 		cmp	r3, #256
 2387 003c 2FD1     		bne	.L80
1173:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1174:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* AlarmA */
1175:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
 2388              		.loc 1 1175 5
 2389 003e 7B68     		ldr	r3, [r7, #4]
 2390 0040 1B68     		ldr	r3, [r3]
 2391 0042 9A68     		ldr	r2, [r3, #8]
 2392 0044 7B68     		ldr	r3, [r7, #4]
 2393 0046 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccw0H4H9.s 			page 64


 2394 0048 22F48072 		bic	r2, r2, #256
 2395 004c 9A60     		str	r2, [r3, #8]
1176:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1177:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1178:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 2396              		.loc 1 1178 5
 2397 004e 7B68     		ldr	r3, [r7, #4]
 2398 0050 1B68     		ldr	r3, [r3]
 2399 0052 9A68     		ldr	r2, [r3, #8]
 2400 0054 7B68     		ldr	r3, [r7, #4]
 2401 0056 1B68     		ldr	r3, [r3]
 2402 0058 22F48052 		bic	r2, r2, #4096
 2403 005c 9A60     		str	r2, [r3, #8]
1179:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1180:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1181:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2404              		.loc 1 1181 17
 2405 005e FFF7FEFF 		bl	HAL_GetTick
 2406 0062 F860     		str	r0, [r7, #12]
1182:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1183:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 2407              		.loc 1 1184 10
 2408 0064 13E0     		b	.L81
 2409              	.L82:
1185:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1186:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2410              		.loc 1 1186 11
 2411 0066 FFF7FEFF 		bl	HAL_GetTick
 2412 006a 0246     		mov	r2, r0
 2413              		.loc 1 1186 25
 2414 006c FB68     		ldr	r3, [r7, #12]
 2415 006e D31A     		subs	r3, r2, r3
 2416              		.loc 1 1186 9
 2417 0070 B3F57A7F 		cmp	r3, #1000
 2418 0074 0BD9     		bls	.L81
1187:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       { 
1188:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1189:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2419              		.loc 1 1189 9
 2420 0076 7B68     		ldr	r3, [r7, #4]
 2421 0078 1B68     		ldr	r3, [r3]
 2422 007a FF22     		movs	r2, #255
 2423 007c 5A62     		str	r2, [r3, #36]
1190:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
1191:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2424              		.loc 1 1191 21
 2425 007e 7B68     		ldr	r3, [r7, #4]
 2426 0080 0322     		movs	r2, #3
 2427 0082 5A77     		strb	r2, [r3, #29]
1192:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
1193:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */ 
1194:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2428              		.loc 1 1194 9
 2429 0084 7B68     		ldr	r3, [r7, #4]
 2430 0086 0022     		movs	r2, #0
 2431 0088 1A77     		strb	r2, [r3, #28]
ARM GAS  /tmp/ccw0H4H9.s 			page 65


1195:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
1196:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2432              		.loc 1 1196 16
 2433 008a 0323     		movs	r3, #3
 2434 008c 41E0     		b	.L79
 2435              	.L81:
1184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2436              		.loc 1 1184 11
 2437 008e 7B68     		ldr	r3, [r7, #4]
 2438 0090 1B68     		ldr	r3, [r3]
 2439 0092 DB68     		ldr	r3, [r3, #12]
 2440 0094 03F00103 		and	r3, r3, #1
1184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2441              		.loc 1 1184 10
 2442 0098 002B     		cmp	r3, #0
 2443 009a E4D0     		beq	.L82
 2444 009c 2EE0     		b	.L83
 2445              	.L80:
1197:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }      
1198:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1199:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1200:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1201:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1202:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* AlarmB */
1203:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 2446              		.loc 1 1203 5
 2447 009e 7B68     		ldr	r3, [r7, #4]
 2448 00a0 1B68     		ldr	r3, [r3]
 2449 00a2 9A68     		ldr	r2, [r3, #8]
 2450 00a4 7B68     		ldr	r3, [r7, #4]
 2451 00a6 1B68     		ldr	r3, [r3]
 2452 00a8 22F40072 		bic	r2, r2, #512
 2453 00ac 9A60     		str	r2, [r3, #8]
1204:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1205:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */ 
1206:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc,RTC_IT_ALRB);
 2454              		.loc 1 1206 5
 2455 00ae 7B68     		ldr	r3, [r7, #4]
 2456 00b0 1B68     		ldr	r3, [r3]
 2457 00b2 9A68     		ldr	r2, [r3, #8]
 2458 00b4 7B68     		ldr	r3, [r7, #4]
 2459 00b6 1B68     		ldr	r3, [r3]
 2460 00b8 22F40052 		bic	r2, r2, #8192
 2461 00bc 9A60     		str	r2, [r3, #8]
1207:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1208:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1209:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2462              		.loc 1 1209 17
 2463 00be FFF7FEFF 		bl	HAL_GetTick
 2464 00c2 F860     		str	r0, [r7, #12]
1210:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1211:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 2465              		.loc 1 1212 10
 2466 00c4 13E0     		b	.L84
 2467              	.L85:
1213:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccw0H4H9.s 			page 66


1214:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 2468              		.loc 1 1214 11
 2469 00c6 FFF7FEFF 		bl	HAL_GetTick
 2470 00ca 0246     		mov	r2, r0
 2471              		.loc 1 1214 25
 2472 00cc FB68     		ldr	r3, [r7, #12]
 2473 00ce D31A     		subs	r3, r2, r3
 2474              		.loc 1 1214 9
 2475 00d0 B3F57A7F 		cmp	r3, #1000
 2476 00d4 0BD9     		bls	.L84
1215:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1216:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1217:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2477              		.loc 1 1217 9
 2478 00d6 7B68     		ldr	r3, [r7, #4]
 2479 00d8 1B68     		ldr	r3, [r3]
 2480 00da FF22     		movs	r2, #255
 2481 00dc 5A62     		str	r2, [r3, #36]
1218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
1219:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 2482              		.loc 1 1219 21
 2483 00de 7B68     		ldr	r3, [r7, #4]
 2484 00e0 0322     		movs	r2, #3
 2485 00e2 5A77     		strb	r2, [r3, #29]
1220:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
1221:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         /* Process Unlocked */ 
1222:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 2486              		.loc 1 1222 9
 2487 00e4 7B68     		ldr	r3, [r7, #4]
 2488 00e6 0022     		movs	r2, #0
 2489 00e8 1A77     		strb	r2, [r3, #28]
1223:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         
1224:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2490              		.loc 1 1224 16
 2491 00ea 0323     		movs	r3, #3
 2492 00ec 11E0     		b	.L79
 2493              	.L84:
1212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2494              		.loc 1 1212 11
 2495 00ee 7B68     		ldr	r3, [r7, #4]
 2496 00f0 1B68     		ldr	r3, [r3]
 2497 00f2 DB68     		ldr	r3, [r3, #12]
 2498 00f4 03F00203 		and	r3, r3, #2
1212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 2499              		.loc 1 1212 10
 2500 00f8 002B     		cmp	r3, #0
 2501 00fa E4D0     		beq	.L85
 2502              	.L83:
1225:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }    
1226:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1227:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1228:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1229:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 2503              		.loc 1 1229 3
 2504 00fc 7B68     		ldr	r3, [r7, #4]
 2505 00fe 1B68     		ldr	r3, [r3]
 2506 0100 FF22     		movs	r2, #255
ARM GAS  /tmp/ccw0H4H9.s 			page 67


 2507 0102 5A62     		str	r2, [r3, #36]
1230:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2508              		.loc 1 1231 15
 2509 0104 7B68     		ldr	r3, [r7, #4]
 2510 0106 0122     		movs	r2, #1
 2511 0108 5A77     		strb	r2, [r3, #29]
1232:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1233:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Process Unlocked */ 
1234:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);  
 2512              		.loc 1 1234 3
 2513 010a 7B68     		ldr	r3, [r7, #4]
 2514 010c 0022     		movs	r2, #0
 2515 010e 1A77     		strb	r2, [r3, #28]
1235:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1236:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK; 
 2516              		.loc 1 1236 10
 2517 0110 0023     		movs	r3, #0
 2518              	.L79:
1237:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2519              		.loc 1 1237 1
 2520 0112 1846     		mov	r0, r3
 2521 0114 1037     		adds	r7, r7, #16
 2522              	.LCFI55:
 2523              		.cfi_def_cfa_offset 8
 2524 0116 BD46     		mov	sp, r7
 2525              	.LCFI56:
 2526              		.cfi_def_cfa_register 13
 2527              		@ sp needed
 2528 0118 80BD     		pop	{r7, pc}
 2529              		.cfi_endproc
 2530              	.LFE136:
 2532              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2533              		.align	1
 2534              		.global	HAL_RTC_GetAlarm
 2535              		.syntax unified
 2536              		.thumb
 2537              		.thumb_func
 2538              		.fpu fpv4-sp-d16
 2540              	HAL_RTC_GetAlarm:
 2541              	.LFB137:
1238:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****            
1239:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1240:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Gets the RTC Alarm value and masks.
1241:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1242:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1243:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1244:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1245:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1246:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1247:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB  
1248:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1249:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1250:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format 
1251:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1252:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1253:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccw0H4H9.s 			page 68


1254:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1255:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2542              		.loc 1 1255 1
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 24
 2545              		@ frame_needed = 1, uses_anonymous_args = 0
 2546 0000 80B5     		push	{r7, lr}
 2547              	.LCFI57:
 2548              		.cfi_def_cfa_offset 8
 2549              		.cfi_offset 7, -8
 2550              		.cfi_offset 14, -4
 2551 0002 86B0     		sub	sp, sp, #24
 2552              	.LCFI58:
 2553              		.cfi_def_cfa_offset 32
 2554 0004 00AF     		add	r7, sp, #0
 2555              	.LCFI59:
 2556              		.cfi_def_cfa_register 7
 2557 0006 F860     		str	r0, [r7, #12]
 2558 0008 B960     		str	r1, [r7, #8]
 2559 000a 7A60     		str	r2, [r7, #4]
 2560 000c 3B60     		str	r3, [r7]
1256:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 2561              		.loc 1 1256 12
 2562 000e 0023     		movs	r3, #0
 2563 0010 7B61     		str	r3, [r7, #20]
 2564              		.loc 1 1256 25
 2565 0012 0023     		movs	r3, #0
 2566 0014 3B61     		str	r3, [r7, #16]
1257:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1258:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check the parameters */
1259:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1260:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1261:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1262:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
 2567              		.loc 1 1262 5
 2568 0016 7B68     		ldr	r3, [r7, #4]
 2569 0018 B3F5807F 		cmp	r3, #256
 2570 001c 0ED1     		bne	.L87
1263:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1264:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* AlarmA */
1265:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
 2571              		.loc 1 1265 19
 2572 001e BB68     		ldr	r3, [r7, #8]
 2573 0020 4FF48072 		mov	r2, #256
 2574 0024 5A62     		str	r2, [r3, #36]
1266:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1267:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 2575              		.loc 1 1267 29
 2576 0026 FB68     		ldr	r3, [r7, #12]
 2577 0028 1B68     		ldr	r3, [r3]
 2578              		.loc 1 1267 12
 2579 002a DB69     		ldr	r3, [r3, #28]
 2580 002c 7B61     		str	r3, [r7, #20]
1268:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR ) & RTC_ALRMASSR_SS);
 2581              		.loc 1 1268 39
 2582 002e FB68     		ldr	r3, [r7, #12]
 2583 0030 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccw0H4H9.s 			page 69


 2584              		.loc 1 1268 49
 2585 0032 5B6C     		ldr	r3, [r3, #68]
 2586              		.loc 1 1268 21
 2587 0034 C3F30E03 		ubfx	r3, r3, #0, #15
 2588 0038 3B61     		str	r3, [r7, #16]
 2589 003a 0DE0     		b	.L88
 2590              	.L87:
1269:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1270:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   else
1271:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1272:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
 2591              		.loc 1 1272 19
 2592 003c BB68     		ldr	r3, [r7, #8]
 2593 003e 4FF40072 		mov	r2, #512
 2594 0042 5A62     		str	r2, [r3, #36]
1273:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1274:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 2595              		.loc 1 1274 29
 2596 0044 FB68     		ldr	r3, [r7, #12]
 2597 0046 1B68     		ldr	r3, [r3]
 2598              		.loc 1 1274 12
 2599 0048 1B6A     		ldr	r3, [r3, #32]
 2600 004a 7B61     		str	r3, [r7, #20]
1275:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2601              		.loc 1 1275 39
 2602 004c FB68     		ldr	r3, [r7, #12]
 2603 004e 1B68     		ldr	r3, [r3]
 2604              		.loc 1 1275 49
 2605 0050 9B6C     		ldr	r3, [r3, #72]
 2606              		.loc 1 1275 21
 2607 0052 C3F30E03 		ubfx	r3, r3, #0, #15
 2608 0056 3B61     		str	r3, [r7, #16]
 2609              	.L88:
1276:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1277:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1278:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Fill the structure with the read parameters */
1279:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> 16U);
 2610              		.loc 1 1279 29
 2611 0058 7B69     		ldr	r3, [r7, #20]
 2612 005a 1B0C     		lsrs	r3, r3, #16
 2613 005c DBB2     		uxtb	r3, r3
 2614 005e 03F03F03 		and	r3, r3, #63
 2615 0062 DAB2     		uxtb	r2, r3
 2616              		.loc 1 1279 27
 2617 0064 BB68     		ldr	r3, [r7, #8]
 2618 0066 1A70     		strb	r2, [r3]
1280:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> 8U);
 2619              		.loc 1 1280 31
 2620 0068 7B69     		ldr	r3, [r7, #20]
 2621 006a 1B0A     		lsrs	r3, r3, #8
 2622 006c DBB2     		uxtb	r3, r3
 2623 006e 03F07F03 		and	r3, r3, #127
 2624 0072 DAB2     		uxtb	r2, r3
 2625              		.loc 1 1280 29
 2626 0074 BB68     		ldr	r3, [r7, #8]
 2627 0076 5A70     		strb	r2, [r3, #1]
1281:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU));
ARM GAS  /tmp/ccw0H4H9.s 			page 70


 2628              		.loc 1 1281 31
 2629 0078 7B69     		ldr	r3, [r7, #20]
 2630 007a DBB2     		uxtb	r3, r3
 2631 007c 03F07F03 		and	r3, r3, #127
 2632 0080 DAB2     		uxtb	r2, r3
 2633              		.loc 1 1281 29
 2634 0082 BB68     		ldr	r3, [r7, #8]
 2635 0084 9A70     		strb	r2, [r3, #2]
1282:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.TimeFormat = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16U);
 2636              		.loc 1 1282 34
 2637 0086 7B69     		ldr	r3, [r7, #20]
 2638 0088 1B0C     		lsrs	r3, r3, #16
 2639 008a DBB2     		uxtb	r3, r3
 2640 008c 03F04003 		and	r3, r3, #64
 2641 0090 DAB2     		uxtb	r2, r3
 2642              		.loc 1 1282 32
 2643 0092 BB68     		ldr	r3, [r7, #8]
 2644 0094 DA70     		strb	r2, [r3, #3]
1283:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2645              		.loc 1 1283 32
 2646 0096 BB68     		ldr	r3, [r7, #8]
 2647 0098 3A69     		ldr	r2, [r7, #16]
 2648 009a 5A60     		str	r2, [r3, #4]
1284:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24U);
 2649              		.loc 1 1284 30
 2650 009c 7B69     		ldr	r3, [r7, #20]
 2651 009e 1B0E     		lsrs	r3, r3, #24
 2652 00a0 DBB2     		uxtb	r3, r3
 2653 00a2 03F03F03 		and	r3, r3, #63
 2654 00a6 DAB2     		uxtb	r2, r3
 2655              		.loc 1 1284 28
 2656 00a8 BB68     		ldr	r3, [r7, #8]
 2657 00aa 83F82020 		strb	r2, [r3, #32]
1285:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 2658              		.loc 1 1285 33
 2659 00ae 7B69     		ldr	r3, [r7, #20]
 2660 00b0 03F08042 		and	r2, r3, #1073741824
 2661              		.loc 1 1285 31
 2662 00b4 BB68     		ldr	r3, [r7, #8]
 2663 00b6 DA61     		str	r2, [r3, #28]
1286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 2664              		.loc 1 1286 23
 2665 00b8 7B69     		ldr	r3, [r7, #20]
 2666 00ba 03F08032 		and	r2, r3, #-2139062144
 2667              		.loc 1 1286 21
 2668 00be BB68     		ldr	r3, [r7, #8]
 2669 00c0 5A61     		str	r2, [r3, #20]
1287:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1288:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 2670              		.loc 1 1288 5
 2671 00c2 3B68     		ldr	r3, [r7]
 2672 00c4 002B     		cmp	r3, #0
 2673 00c6 25D1     		bne	.L89
1289:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1290:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 2674              		.loc 1 1290 31
 2675 00c8 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccw0H4H9.s 			page 71


 2676 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2677 00cc 1846     		mov	r0, r3
 2678 00ce FFF7FEFF 		bl	RTC_Bcd2ToByte
 2679 00d2 0346     		mov	r3, r0
 2680 00d4 1A46     		mov	r2, r3
 2681              		.loc 1 1290 29
 2682 00d6 BB68     		ldr	r3, [r7, #8]
 2683 00d8 1A70     		strb	r2, [r3]
1291:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2684              		.loc 1 1291 33
 2685 00da BB68     		ldr	r3, [r7, #8]
 2686 00dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2687 00de 1846     		mov	r0, r3
 2688 00e0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2689 00e4 0346     		mov	r3, r0
 2690 00e6 1A46     		mov	r2, r3
 2691              		.loc 1 1291 31
 2692 00e8 BB68     		ldr	r3, [r7, #8]
 2693 00ea 5A70     		strb	r2, [r3, #1]
1292:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2694              		.loc 1 1292 33
 2695 00ec BB68     		ldr	r3, [r7, #8]
 2696 00ee 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2697 00f0 1846     		mov	r0, r3
 2698 00f2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2699 00f6 0346     		mov	r3, r0
 2700 00f8 1A46     		mov	r2, r3
 2701              		.loc 1 1292 31
 2702 00fa BB68     		ldr	r3, [r7, #8]
 2703 00fc 9A70     		strb	r2, [r3, #2]
1293:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2704              		.loc 1 1293 32
 2705 00fe BB68     		ldr	r3, [r7, #8]
 2706 0100 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2707 0104 1846     		mov	r0, r3
 2708 0106 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2709 010a 0346     		mov	r3, r0
 2710 010c 1A46     		mov	r2, r3
 2711              		.loc 1 1293 30
 2712 010e BB68     		ldr	r3, [r7, #8]
 2713 0110 83F82020 		strb	r2, [r3, #32]
 2714              	.L89:
1294:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }  
1295:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     
1296:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 2715              		.loc 1 1296 10
 2716 0114 0023     		movs	r3, #0
1297:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2717              		.loc 1 1297 1
 2718 0116 1846     		mov	r0, r3
 2719 0118 1837     		adds	r7, r7, #24
 2720              	.LCFI60:
 2721              		.cfi_def_cfa_offset 8
 2722 011a BD46     		mov	sp, r7
 2723              	.LCFI61:
 2724              		.cfi_def_cfa_register 13
 2725              		@ sp needed
ARM GAS  /tmp/ccw0H4H9.s 			page 72


 2726 011c 80BD     		pop	{r7, pc}
 2727              		.cfi_endproc
 2728              	.LFE137:
 2730              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 2731              		.align	1
 2732              		.global	HAL_RTC_AlarmIRQHandler
 2733              		.syntax unified
 2734              		.thumb
 2735              		.thumb_func
 2736              		.fpu fpv4-sp-d16
 2738              	HAL_RTC_AlarmIRQHandler:
 2739              	.LFB138:
1298:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1300:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  This function handles Alarm interrupt request.
1301:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1302:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1303:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1304:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1305:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
1306:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {  
 2740              		.loc 1 1306 1
 2741              		.cfi_startproc
 2742              		@ args = 0, pretend = 0, frame = 8
 2743              		@ frame_needed = 1, uses_anonymous_args = 0
 2744 0000 80B5     		push	{r7, lr}
 2745              	.LCFI62:
 2746              		.cfi_def_cfa_offset 8
 2747              		.cfi_offset 7, -8
 2748              		.cfi_offset 14, -4
 2749 0002 82B0     		sub	sp, sp, #8
 2750              	.LCFI63:
 2751              		.cfi_def_cfa_offset 16
 2752 0004 00AF     		add	r7, sp, #0
 2753              	.LCFI64:
 2754              		.cfi_def_cfa_register 7
 2755 0006 7860     		str	r0, [r7, #4]
1307:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRA))
 2756              		.loc 1 1307 6
 2757 0008 7B68     		ldr	r3, [r7, #4]
 2758 000a 1B68     		ldr	r3, [r3]
 2759 000c DB68     		ldr	r3, [r3, #12]
 2760 000e 03F48073 		and	r3, r3, #256
 2761              		.loc 1 1307 5
 2762 0012 002B     		cmp	r3, #0
 2763 0014 12D0     		beq	.L92
1308:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1309:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1310:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRA) != (uint32_t)RESET)
 2764              		.loc 1 1310 23
 2765 0016 7B68     		ldr	r3, [r7, #4]
 2766 0018 1B68     		ldr	r3, [r3]
 2767              		.loc 1 1310 33
 2768 001a 9B68     		ldr	r3, [r3, #8]
 2769              		.loc 1 1310 8
 2770 001c 03F48053 		and	r3, r3, #4096
 2771              		.loc 1 1310 7
ARM GAS  /tmp/ccw0H4H9.s 			page 73


 2772 0020 002B     		cmp	r3, #0
 2773 0022 0BD0     		beq	.L92
1311:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1312:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* AlarmA callback */ 
1313:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
 2774              		.loc 1 1313 7
 2775 0024 7868     		ldr	r0, [r7, #4]
 2776 0026 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
1314:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       
1315:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1316:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 2777              		.loc 1 1316 7
 2778 002a 7B68     		ldr	r3, [r7, #4]
 2779 002c 1B68     		ldr	r3, [r3]
 2780 002e DB68     		ldr	r3, [r3, #12]
 2781 0030 DAB2     		uxtb	r2, r3
 2782 0032 7B68     		ldr	r3, [r7, #4]
 2783 0034 1B68     		ldr	r3, [r3]
 2784 0036 62F4C072 		orn	r2, r2, #384
 2785 003a DA60     		str	r2, [r3, #12]
 2786              	.L92:
1317:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1318:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1319:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1320:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT(hrtc, RTC_IT_ALRB))
 2787              		.loc 1 1320 6
 2788 003c 7B68     		ldr	r3, [r7, #4]
 2789 003e 1B68     		ldr	r3, [r3]
 2790 0040 DB68     		ldr	r3, [r3, #12]
 2791 0042 03F40073 		and	r3, r3, #512
 2792              		.loc 1 1320 5
 2793 0046 002B     		cmp	r3, #0
 2794 0048 12D0     		beq	.L93
1321:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1322:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get the status of the Interrupt */
1323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((uint32_t)(hrtc->Instance->CR & RTC_IT_ALRB) != (uint32_t)RESET)
 2795              		.loc 1 1323 23
 2796 004a 7B68     		ldr	r3, [r7, #4]
 2797 004c 1B68     		ldr	r3, [r3]
 2798              		.loc 1 1323 33
 2799 004e 9B68     		ldr	r3, [r3, #8]
 2800              		.loc 1 1323 8
 2801 0050 03F40053 		and	r3, r3, #8192
 2802              		.loc 1 1323 7
 2803 0054 002B     		cmp	r3, #0
 2804 0056 0BD0     		beq	.L93
1324:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1325:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* AlarmB callback */ 
1326:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
 2805              		.loc 1 1326 7
 2806 0058 7868     		ldr	r0, [r7, #4]
 2807 005a FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
1327:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       
1328:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       /* Clear the Alarm interrupt pending bit */
1329:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 2808              		.loc 1 1329 7
 2809 005e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccw0H4H9.s 			page 74


 2810 0060 1B68     		ldr	r3, [r3]
 2811 0062 DB68     		ldr	r3, [r3, #12]
 2812 0064 DAB2     		uxtb	r2, r3
 2813 0066 7B68     		ldr	r3, [r7, #4]
 2814 0068 1B68     		ldr	r3, [r3]
 2815 006a 62F42072 		orn	r2, r2, #640
 2816 006e DA60     		str	r2, [r3, #12]
 2817              	.L93:
1330:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1331:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1332:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1333:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1334:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 2818              		.loc 1 1334 3
 2819 0070 054B     		ldr	r3, .L94
 2820 0072 4FF40032 		mov	r2, #131072
 2821 0076 5A61     		str	r2, [r3, #20]
1335:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1336:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state */
1337:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2822              		.loc 1 1337 15
 2823 0078 7B68     		ldr	r3, [r7, #4]
 2824 007a 0122     		movs	r2, #1
 2825 007c 5A77     		strb	r2, [r3, #29]
1338:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2826              		.loc 1 1338 1
 2827 007e 00BF     		nop
 2828 0080 0837     		adds	r7, r7, #8
 2829              	.LCFI65:
 2830              		.cfi_def_cfa_offset 8
 2831 0082 BD46     		mov	sp, r7
 2832              	.LCFI66:
 2833              		.cfi_def_cfa_register 13
 2834              		@ sp needed
 2835 0084 80BD     		pop	{r7, pc}
 2836              	.L95:
 2837 0086 00BF     		.align	2
 2838              	.L94:
 2839 0088 003C0140 		.word	1073822720
 2840              		.cfi_endproc
 2841              	.LFE138:
 2843              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 2844              		.align	1
 2845              		.weak	HAL_RTC_AlarmAEventCallback
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2849              		.fpu fpv4-sp-d16
 2851              	HAL_RTC_AlarmAEventCallback:
 2852              	.LFB139:
1339:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1340:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1341:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Alarm A callback.
1342:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1343:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1344:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval None
1345:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccw0H4H9.s 			page 75


1346:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1347:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2853              		.loc 1 1347 1
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 8
 2856              		@ frame_needed = 1, uses_anonymous_args = 0
 2857              		@ link register save eliminated.
 2858 0000 80B4     		push	{r7}
 2859              	.LCFI67:
 2860              		.cfi_def_cfa_offset 4
 2861              		.cfi_offset 7, -4
 2862 0002 83B0     		sub	sp, sp, #12
 2863              	.LCFI68:
 2864              		.cfi_def_cfa_offset 16
 2865 0004 00AF     		add	r7, sp, #0
 2866              	.LCFI69:
 2867              		.cfi_def_cfa_register 7
 2868 0006 7860     		str	r0, [r7, #4]
1348:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   UNUSED(hrtc);
1350:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1351:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1352:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****    */
1353:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2869              		.loc 1 1353 1
 2870 0008 00BF     		nop
 2871 000a 0C37     		adds	r7, r7, #12
 2872              	.LCFI70:
 2873              		.cfi_def_cfa_offset 4
 2874 000c BD46     		mov	sp, r7
 2875              	.LCFI71:
 2876              		.cfi_def_cfa_register 13
 2877              		@ sp needed
 2878 000e 5DF8047B 		ldr	r7, [sp], #4
 2879              	.LCFI72:
 2880              		.cfi_restore 7
 2881              		.cfi_def_cfa_offset 0
 2882 0012 7047     		bx	lr
 2883              		.cfi_endproc
 2884              	.LFE139:
 2886              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 2887              		.align	1
 2888              		.global	HAL_RTC_PollForAlarmAEvent
 2889              		.syntax unified
 2890              		.thumb
 2891              		.thumb_func
 2892              		.fpu fpv4-sp-d16
 2894              	HAL_RTC_PollForAlarmAEvent:
 2895              	.LFB140:
1354:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1355:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1356:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  This function handles AlarmA Polling request.
1357:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1358:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1359:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1361:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
ARM GAS  /tmp/ccw0H4H9.s 			page 76


1362:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1363:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2896              		.loc 1 1363 1
 2897              		.cfi_startproc
 2898              		@ args = 0, pretend = 0, frame = 16
 2899              		@ frame_needed = 1, uses_anonymous_args = 0
 2900 0000 80B5     		push	{r7, lr}
 2901              	.LCFI73:
 2902              		.cfi_def_cfa_offset 8
 2903              		.cfi_offset 7, -8
 2904              		.cfi_offset 14, -4
 2905 0002 84B0     		sub	sp, sp, #16
 2906              	.LCFI74:
 2907              		.cfi_def_cfa_offset 24
 2908 0004 00AF     		add	r7, sp, #0
 2909              	.LCFI75:
 2910              		.cfi_def_cfa_register 7
 2911 0006 7860     		str	r0, [r7, #4]
 2912 0008 3960     		str	r1, [r7]
1364:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U; 
 2913              		.loc 1 1364 12
 2914 000a 0023     		movs	r3, #0
 2915 000c FB60     		str	r3, [r7, #12]
1365:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1366:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1367:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 2916              		.loc 1 1367 17
 2917 000e FFF7FEFF 		bl	HAL_GetTick
 2918 0012 F860     		str	r0, [r7, #12]
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == RESET)
 2919              		.loc 1 1369 8
 2920 0014 13E0     		b	.L98
 2921              	.L101:
1370:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1371:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 2922              		.loc 1 1371 7
 2923 0016 3B68     		ldr	r3, [r7]
 2924 0018 B3F1FF3F 		cmp	r3, #-1
 2925 001c 0FD0     		beq	.L98
1372:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1373:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 2926              		.loc 1 1373 9
 2927 001e 3B68     		ldr	r3, [r7]
 2928 0020 002B     		cmp	r3, #0
 2929 0022 07D0     		beq	.L99
 2930              		.loc 1 1373 29 discriminator 1
 2931 0024 FFF7FEFF 		bl	HAL_GetTick
 2932 0028 0246     		mov	r2, r0
 2933              		.loc 1 1373 43 discriminator 1
 2934 002a FB68     		ldr	r3, [r7, #12]
 2935 002c D31A     		subs	r3, r2, r3
 2936              		.loc 1 1373 25 discriminator 1
 2937 002e 3A68     		ldr	r2, [r7]
 2938 0030 9A42     		cmp	r2, r3
 2939 0032 04D2     		bcs	.L98
 2940              	.L99:
ARM GAS  /tmp/ccw0H4H9.s 			page 77


1374:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {
1375:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 2941              		.loc 1 1375 21
 2942 0034 7B68     		ldr	r3, [r7, #4]
 2943 0036 0322     		movs	r2, #3
 2944 0038 5A77     		strb	r2, [r3, #29]
1376:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 2945              		.loc 1 1376 16
 2946 003a 0323     		movs	r3, #3
 2947 003c 13E0     		b	.L100
 2948              	.L98:
1369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2949              		.loc 1 1369 9
 2950 003e 7B68     		ldr	r3, [r7, #4]
 2951 0040 1B68     		ldr	r3, [r3]
 2952 0042 DB68     		ldr	r3, [r3, #12]
 2953 0044 03F48073 		and	r3, r3, #256
1369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 2954              		.loc 1 1369 8
 2955 0048 002B     		cmp	r3, #0
 2956 004a E4D0     		beq	.L101
1377:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       }
1378:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1379:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1380:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1381:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1382:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 2957              		.loc 1 1382 3
 2958 004c 7B68     		ldr	r3, [r7, #4]
 2959 004e 1B68     		ldr	r3, [r3]
 2960 0050 DB68     		ldr	r3, [r3, #12]
 2961 0052 DAB2     		uxtb	r2, r3
 2962 0054 7B68     		ldr	r3, [r7, #4]
 2963 0056 1B68     		ldr	r3, [r3]
 2964 0058 62F4C072 		orn	r2, r2, #384
 2965 005c DA60     		str	r2, [r3, #12]
1383:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1384:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Change RTC state */
1385:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY; 
 2966              		.loc 1 1385 15
 2967 005e 7B68     		ldr	r3, [r7, #4]
 2968 0060 0122     		movs	r2, #1
 2969 0062 5A77     		strb	r2, [r3, #29]
1386:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1387:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;  
 2970              		.loc 1 1387 10
 2971 0064 0023     		movs	r3, #0
 2972              	.L100:
1388:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 2973              		.loc 1 1388 1
 2974 0066 1846     		mov	r0, r3
 2975 0068 1037     		adds	r7, r7, #16
 2976              	.LCFI76:
 2977              		.cfi_def_cfa_offset 8
 2978 006a BD46     		mov	sp, r7
 2979              	.LCFI77:
 2980              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccw0H4H9.s 			page 78


 2981              		@ sp needed
 2982 006c 80BD     		pop	{r7, pc}
 2983              		.cfi_endproc
 2984              	.LFE140:
 2986              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 2987              		.align	1
 2988              		.global	HAL_RTC_WaitForSynchro
 2989              		.syntax unified
 2990              		.thumb
 2991              		.thumb_func
 2992              		.fpu fpv4-sp-d16
 2994              	HAL_RTC_WaitForSynchro:
 2995              	.LFB141:
1389:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1390:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1391:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1392:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1393:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1394:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group4 Peripheral Control functions 
1395:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *  @brief   Peripheral Control functions 
1396:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *
1397:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim   
1398:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
1399:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1400:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================  
1401:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     [..]
1402:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     This subsection provides functions allowing to
1403:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1404:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
1406:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
1407:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1408:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1409:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1410:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
1411:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1412:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
1413:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function. 
1414:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
1415:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         initialization, calendar update or after wake-up from low power modes 
1416:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         the software must first clear the RSF flag. 
1417:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading 
1418:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been 
1419:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
1420:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1421:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1422:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1423:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1424:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
1425:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 2996              		.loc 1 1425 1
 2997              		.cfi_startproc
 2998              		@ args = 0, pretend = 0, frame = 16
 2999              		@ frame_needed = 1, uses_anonymous_args = 0
 3000 0000 80B5     		push	{r7, lr}
 3001              	.LCFI78:
 3002              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccw0H4H9.s 			page 79


 3003              		.cfi_offset 7, -8
 3004              		.cfi_offset 14, -4
 3005 0002 84B0     		sub	sp, sp, #16
 3006              	.LCFI79:
 3007              		.cfi_def_cfa_offset 24
 3008 0004 00AF     		add	r7, sp, #0
 3009              	.LCFI80:
 3010              		.cfi_def_cfa_register 7
 3011 0006 7860     		str	r0, [r7, #4]
1426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U;
 3012              		.loc 1 1426 12
 3013 0008 0023     		movs	r3, #0
 3014 000a FB60     		str	r3, [r7, #12]
1427:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1428:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Clear RSF flag */
1429:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 3015              		.loc 1 1429 7
 3016 000c 7B68     		ldr	r3, [r7, #4]
 3017 000e 1B68     		ldr	r3, [r3]
 3018              		.loc 1 1429 23
 3019 0010 DA68     		ldr	r2, [r3, #12]
 3020              		.loc 1 1429 7
 3021 0012 7B68     		ldr	r3, [r7, #4]
 3022 0014 1B68     		ldr	r3, [r3]
 3023              		.loc 1 1429 23
 3024 0016 22F0A002 		bic	r2, r2, #160
 3025 001a DA60     		str	r2, [r3, #12]
1430:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1432:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 3026              		.loc 1 1432 17
 3027 001c FFF7FEFF 		bl	HAL_GetTick
 3028 0020 F860     		str	r0, [r7, #12]
1433:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1434:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 3029              		.loc 1 1435 8
 3030 0022 09E0     		b	.L103
 3031              	.L105:
1436:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1437:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 3032              		.loc 1 1437 9
 3033 0024 FFF7FEFF 		bl	HAL_GetTick
 3034 0028 0246     		mov	r2, r0
 3035              		.loc 1 1437 23
 3036 002a FB68     		ldr	r3, [r7, #12]
 3037 002c D31A     		subs	r3, r2, r3
 3038              		.loc 1 1437 7
 3039 002e B3F57A7F 		cmp	r3, #1000
 3040 0032 01D9     		bls	.L103
1438:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {       
1439:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       return HAL_TIMEOUT;
 3041              		.loc 1 1439 14
 3042 0034 0323     		movs	r3, #3
 3043 0036 07E0     		b	.L104
 3044              	.L103:
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccw0H4H9.s 			page 80


 3045              		.loc 1 1435 14
 3046 0038 7B68     		ldr	r3, [r7, #4]
 3047 003a 1B68     		ldr	r3, [r3]
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 3048              		.loc 1 1435 24
 3049 003c DB68     		ldr	r3, [r3, #12]
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 3050              		.loc 1 1435 30
 3051 003e 03F02003 		and	r3, r3, #32
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 3052              		.loc 1 1435 8
 3053 0042 002B     		cmp	r3, #0
 3054 0044 EED0     		beq	.L105
1440:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     } 
1441:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1442:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1443:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;
 3055              		.loc 1 1443 10
 3056 0046 0023     		movs	r3, #0
 3057              	.L104:
1444:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3058              		.loc 1 1444 1
 3059 0048 1846     		mov	r0, r3
 3060 004a 1037     		adds	r7, r7, #16
 3061              	.LCFI81:
 3062              		.cfi_def_cfa_offset 8
 3063 004c BD46     		mov	sp, r7
 3064              	.LCFI82:
 3065              		.cfi_def_cfa_register 13
 3066              		@ sp needed
 3067 004e 80BD     		pop	{r7, pc}
 3068              		.cfi_endproc
 3069              	.LFE141:
 3071              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 3072              		.align	1
 3073              		.global	HAL_RTC_GetState
 3074              		.syntax unified
 3075              		.thumb
 3076              		.thumb_func
 3077              		.fpu fpv4-sp-d16
 3079              	HAL_RTC_GetState:
 3080              	.LFB142:
1445:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1446:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1447:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1448:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1449:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1450:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /** @defgroup RTC_Exported_Functions_Group5 Peripheral State functions 
1451:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *  @brief   Peripheral State functions 
1452:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  *
1453:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @verbatim   
1454:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================
1455:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1456:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****  ===============================================================================  
1457:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     [..]
1458:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     This subsection provides functions allowing to
1459:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       (+) Get RTC state
ARM GAS  /tmp/ccw0H4H9.s 			page 81


1460:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1461:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** @endverbatim
1462:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @{
1463:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1464:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1465:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Returns the RTC state.
1466:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1467:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1468:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL state
1469:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1470:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef* hrtc)
1471:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3081              		.loc 1 1471 1
 3082              		.cfi_startproc
 3083              		@ args = 0, pretend = 0, frame = 8
 3084              		@ frame_needed = 1, uses_anonymous_args = 0
 3085              		@ link register save eliminated.
 3086 0000 80B4     		push	{r7}
 3087              	.LCFI83:
 3088              		.cfi_def_cfa_offset 4
 3089              		.cfi_offset 7, -4
 3090 0002 83B0     		sub	sp, sp, #12
 3091              	.LCFI84:
 3092              		.cfi_def_cfa_offset 16
 3093 0004 00AF     		add	r7, sp, #0
 3094              	.LCFI85:
 3095              		.cfi_def_cfa_register 7
 3096 0006 7860     		str	r0, [r7, #4]
1472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return hrtc->State;
 3097              		.loc 1 1472 14
 3098 0008 7B68     		ldr	r3, [r7, #4]
 3099 000a 5B7F     		ldrb	r3, [r3, #29]
 3100 000c DBB2     		uxtb	r3, r3
1473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3101              		.loc 1 1473 1
 3102 000e 1846     		mov	r0, r3
 3103 0010 0C37     		adds	r7, r7, #12
 3104              	.LCFI86:
 3105              		.cfi_def_cfa_offset 4
 3106 0012 BD46     		mov	sp, r7
 3107              	.LCFI87:
 3108              		.cfi_def_cfa_register 13
 3109              		@ sp needed
 3110 0014 5DF8047B 		ldr	r7, [sp], #4
 3111              	.LCFI88:
 3112              		.cfi_restore 7
 3113              		.cfi_def_cfa_offset 0
 3114 0018 7047     		bx	lr
 3115              		.cfi_endproc
 3116              	.LFE142:
 3118              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 3119              		.align	1
 3120              		.global	RTC_EnterInitMode
 3121              		.syntax unified
 3122              		.thumb
 3123              		.thumb_func
 3124              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccw0H4H9.s 			page 82


 3126              	RTC_EnterInitMode:
 3127              	.LFB143:
1474:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1475:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1476:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @}
1477:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1478:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1479:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1480:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Enters the RTC Initialization mode.
1481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1482:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1483:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
1484:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   *                the configuration information for RTC.
1485:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval HAL status
1486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1487:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
1488:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3128              		.loc 1 1488 1
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 16
 3131              		@ frame_needed = 1, uses_anonymous_args = 0
 3132 0000 80B5     		push	{r7, lr}
 3133              	.LCFI89:
 3134              		.cfi_def_cfa_offset 8
 3135              		.cfi_offset 7, -8
 3136              		.cfi_offset 14, -4
 3137 0002 84B0     		sub	sp, sp, #16
 3138              	.LCFI90:
 3139              		.cfi_def_cfa_offset 24
 3140 0004 00AF     		add	r7, sp, #0
 3141              	.LCFI91:
 3142              		.cfi_def_cfa_register 7
 3143 0006 7860     		str	r0, [r7, #4]
1489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tickstart = 0U; 
 3144              		.loc 1 1489 12
 3145 0008 0023     		movs	r3, #0
 3146 000a FB60     		str	r3, [r7, #12]
1490:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1491:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 3147              		.loc 1 1492 11
 3148 000c 7B68     		ldr	r3, [r7, #4]
 3149 000e 1B68     		ldr	r3, [r3]
 3150              		.loc 1 1492 21
 3151 0010 DB68     		ldr	r3, [r3, #12]
 3152              		.loc 1 1492 27
 3153 0012 03F04003 		and	r3, r3, #64
 3154              		.loc 1 1492 5
 3155 0016 002B     		cmp	r3, #0
 3156 0018 19D1     		bne	.L109
1493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1494:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Set the Initialization mode */
1495:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 3157              		.loc 1 1495 9
 3158 001a 7B68     		ldr	r3, [r7, #4]
 3159 001c 1B68     		ldr	r3, [r3]
 3160              		.loc 1 1495 25
ARM GAS  /tmp/ccw0H4H9.s 			page 83


 3161 001e 4FF0FF32 		mov	r2, #-1
 3162 0022 DA60     		str	r2, [r3, #12]
1496:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1497:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Get tick */
1498:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 3163              		.loc 1 1498 17
 3164 0024 FFF7FEFF 		bl	HAL_GetTick
 3165 0028 F860     		str	r0, [r7, #12]
1499:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1500:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 3166              		.loc 1 1501 10
 3167 002a 09E0     		b	.L110
 3168              	.L112:
1502:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
1503:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 3169              		.loc 1 1503 11
 3170 002c FFF7FEFF 		bl	HAL_GetTick
 3171 0030 0246     		mov	r2, r0
 3172              		.loc 1 1503 25
 3173 0032 FB68     		ldr	r3, [r7, #12]
 3174 0034 D31A     		subs	r3, r2, r3
 3175              		.loc 1 1503 9
 3176 0036 B3F57A7F 		cmp	r3, #1000
 3177 003a 01D9     		bls	.L110
1504:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       {       
1505:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****         return HAL_TIMEOUT;
 3178              		.loc 1 1505 16
 3179 003c 0323     		movs	r3, #3
 3180 003e 07E0     		b	.L111
 3181              	.L110:
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3182              		.loc 1 1501 16
 3183 0040 7B68     		ldr	r3, [r7, #4]
 3184 0042 1B68     		ldr	r3, [r3]
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3185              		.loc 1 1501 26
 3186 0044 DB68     		ldr	r3, [r3, #12]
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3187              		.loc 1 1501 32
 3188 0046 03F04003 		and	r3, r3, #64
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     {
 3189              		.loc 1 1501 10
 3190 004a 002B     		cmp	r3, #0
 3191 004c EED0     		beq	.L112
 3192              	.L109:
1506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****       } 
1507:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     }
1508:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1510:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return HAL_OK;  
 3193              		.loc 1 1510 10
 3194 004e 0023     		movs	r3, #0
 3195              	.L111:
1511:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3196              		.loc 1 1511 1
 3197 0050 1846     		mov	r0, r3
ARM GAS  /tmp/ccw0H4H9.s 			page 84


 3198 0052 1037     		adds	r7, r7, #16
 3199              	.LCFI92:
 3200              		.cfi_def_cfa_offset 8
 3201 0054 BD46     		mov	sp, r7
 3202              	.LCFI93:
 3203              		.cfi_def_cfa_register 13
 3204              		@ sp needed
 3205 0056 80BD     		pop	{r7, pc}
 3206              		.cfi_endproc
 3207              	.LFE143:
 3209              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 3210              		.align	1
 3211              		.global	RTC_ByteToBcd2
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	RTC_ByteToBcd2:
 3218              	.LFB144:
1512:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1513:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1514:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1515:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
1516:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Value Byte to be converted
1517:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval Converted byte
1518:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1519:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
1520:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3219              		.loc 1 1520 1
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 16
 3222              		@ frame_needed = 1, uses_anonymous_args = 0
 3223              		@ link register save eliminated.
 3224 0000 80B4     		push	{r7}
 3225              	.LCFI94:
 3226              		.cfi_def_cfa_offset 4
 3227              		.cfi_offset 7, -4
 3228 0002 85B0     		sub	sp, sp, #20
 3229              	.LCFI95:
 3230              		.cfi_def_cfa_offset 24
 3231 0004 00AF     		add	r7, sp, #0
 3232              	.LCFI96:
 3233              		.cfi_def_cfa_register 7
 3234 0006 0346     		mov	r3, r0
 3235 0008 FB71     		strb	r3, [r7, #7]
1521:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 3236              		.loc 1 1521 12
 3237 000a 0023     		movs	r3, #0
 3238 000c FB60     		str	r3, [r7, #12]
1522:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   while(Value >= 10U)
 3239              		.loc 1 1523 8
 3240 000e 05E0     		b	.L114
 3241              	.L115:
1524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
1525:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     bcdhigh++;
 3242              		.loc 1 1525 12
ARM GAS  /tmp/ccw0H4H9.s 			page 85


 3243 0010 FB68     		ldr	r3, [r7, #12]
 3244 0012 0133     		adds	r3, r3, #1
 3245 0014 FB60     		str	r3, [r7, #12]
1526:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****     Value -= 10U;
 3246              		.loc 1 1526 11
 3247 0016 FB79     		ldrb	r3, [r7, #7]
 3248 0018 0A3B     		subs	r3, r3, #10
 3249 001a FB71     		strb	r3, [r7, #7]
 3250              	.L114:
1523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   {
 3251              		.loc 1 1523 8
 3252 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3253 001e 092B     		cmp	r3, #9
 3254 0020 F6D8     		bhi	.L115
1527:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   }
1528:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   
1529:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return  ((uint8_t)(bcdhigh << 4U) | Value);
 3255              		.loc 1 1529 12
 3256 0022 FB68     		ldr	r3, [r7, #12]
 3257 0024 DBB2     		uxtb	r3, r3
 3258 0026 1B01     		lsls	r3, r3, #4
 3259 0028 DAB2     		uxtb	r2, r3
 3260              		.loc 1 1529 37
 3261 002a FB79     		ldrb	r3, [r7, #7]
 3262 002c 1343     		orrs	r3, r3, r2
 3263 002e DBB2     		uxtb	r3, r3
1530:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3264              		.loc 1 1530 1
 3265 0030 1846     		mov	r0, r3
 3266 0032 1437     		adds	r7, r7, #20
 3267              	.LCFI97:
 3268              		.cfi_def_cfa_offset 4
 3269 0034 BD46     		mov	sp, r7
 3270              	.LCFI98:
 3271              		.cfi_def_cfa_register 13
 3272              		@ sp needed
 3273 0036 5DF8047B 		ldr	r7, [sp], #4
 3274              	.LCFI99:
 3275              		.cfi_restore 7
 3276              		.cfi_def_cfa_offset 0
 3277 003a 7047     		bx	lr
 3278              		.cfi_endproc
 3279              	.LFE144:
 3281              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 3282              		.align	1
 3283              		.global	RTC_Bcd2ToByte
 3284              		.syntax unified
 3285              		.thumb
 3286              		.thumb_func
 3287              		.fpu fpv4-sp-d16
 3289              	RTC_Bcd2ToByte:
 3290              	.LFB145:
1531:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** 
1532:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** /**
1533:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @brief  Converts from 2 digit BCD to Binary.
1534:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @param  Value BCD value to be converted
1535:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   * @retval Converted word
ARM GAS  /tmp/ccw0H4H9.s 			page 86


1536:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   */
1537:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
1538:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** {
 3291              		.loc 1 1538 1
 3292              		.cfi_startproc
 3293              		@ args = 0, pretend = 0, frame = 16
 3294              		@ frame_needed = 1, uses_anonymous_args = 0
 3295              		@ link register save eliminated.
 3296 0000 80B4     		push	{r7}
 3297              	.LCFI100:
 3298              		.cfi_def_cfa_offset 4
 3299              		.cfi_offset 7, -4
 3300 0002 85B0     		sub	sp, sp, #20
 3301              	.LCFI101:
 3302              		.cfi_def_cfa_offset 24
 3303 0004 00AF     		add	r7, sp, #0
 3304              	.LCFI102:
 3305              		.cfi_def_cfa_register 7
 3306 0006 0346     		mov	r3, r0
 3307 0008 FB71     		strb	r3, [r7, #7]
1539:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   uint32_t tmp = 0U;
 3308              		.loc 1 1539 12
 3309 000a 0023     		movs	r3, #0
 3310 000c FB60     		str	r3, [r7, #12]
1540:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 3311              		.loc 1 1540 43
 3312 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3313 0010 1B09     		lsrs	r3, r3, #4
 3314 0012 DBB2     		uxtb	r3, r3
 3315 0014 1A46     		mov	r2, r3
 3316              		.loc 1 1540 60
 3317 0016 1346     		mov	r3, r2
 3318 0018 9B00     		lsls	r3, r3, #2
 3319 001a 1344     		add	r3, r3, r2
 3320 001c 5B00     		lsls	r3, r3, #1
 3321              		.loc 1 1540 7
 3322 001e FB60     		str	r3, [r7, #12]
1541:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 3323              		.loc 1 1541 24
 3324 0020 FB79     		ldrb	r3, [r7, #7]
 3325 0022 03F00F03 		and	r3, r3, #15
 3326 0026 DAB2     		uxtb	r2, r3
 3327              		.loc 1 1541 15
 3328 0028 FB68     		ldr	r3, [r7, #12]
 3329 002a DBB2     		uxtb	r3, r3
 3330 002c 1344     		add	r3, r3, r2
 3331 002e DBB2     		uxtb	r3, r3
1542:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_rtc.c **** }
 3332              		.loc 1 1542 1
 3333 0030 1846     		mov	r0, r3
 3334 0032 1437     		adds	r7, r7, #20
 3335              	.LCFI103:
 3336              		.cfi_def_cfa_offset 4
 3337 0034 BD46     		mov	sp, r7
 3338              	.LCFI104:
 3339              		.cfi_def_cfa_register 13
 3340              		@ sp needed
ARM GAS  /tmp/ccw0H4H9.s 			page 87


 3341 0036 5DF8047B 		ldr	r7, [sp], #4
 3342              	.LCFI105:
 3343              		.cfi_restore 7
 3344              		.cfi_def_cfa_offset 0
 3345 003a 7047     		bx	lr
 3346              		.cfi_endproc
 3347              	.LFE145:
 3349              		.text
 3350              	.Letext0:
 3351              		.file 2 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 3352              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 3353              		.file 4 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 3354              		.file 5 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3355              		.file 6 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3356              		.file 7 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rtc.h"
 3357              		.file 8 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
ARM GAS  /tmp/ccw0H4H9.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_rtc.c
     /tmp/ccw0H4H9.s:18     .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccw0H4H9.s:26     .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccw0H4H9.s:526    .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccw0H4H9.s:3126   .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccw0H4H9.s:2994   .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccw0H4H9.s:253    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccw0H4H9.s:260    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccw0H4H9.s:569    .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccw0H4H9.s:514    .text.HAL_RTC_DeInit:0000000000000154 $d
     /tmp/ccw0H4H9.s:519    .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccw0H4H9.s:562    .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccw0H4H9.s:605    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccw0H4H9.s:612    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccw0H4H9.s:3217   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccw0H4H9.s:3289   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccw0H4H9.s:906    .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccw0H4H9.s:913    .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccw0H4H9.s:1052   .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccw0H4H9.s:1059   .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccw0H4H9.s:1308   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccw0H4H9.s:1315   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccw0H4H9.s:1434   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccw0H4H9.s:1441   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccw0H4H9.s:1865   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccw0H4H9.s:1872   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccw0H4H9.s:2243   .text.HAL_RTC_SetAlarm_IT:0000000000000228 $d
     /tmp/ccw0H4H9.s:2247   .text.HAL_RTC_SetAlarm_IT:0000000000000230 $t
     /tmp/ccw0H4H9.s:2324   .text.HAL_RTC_SetAlarm_IT:00000000000002a4 $d
     /tmp/ccw0H4H9.s:2329   .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccw0H4H9.s:2336   .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccw0H4H9.s:2533   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccw0H4H9.s:2540   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm
     /tmp/ccw0H4H9.s:2731   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccw0H4H9.s:2738   .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccw0H4H9.s:2851   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccw0H4H9.s:2839   .text.HAL_RTC_AlarmIRQHandler:0000000000000088 $d
     /tmp/ccw0H4H9.s:2844   .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccw0H4H9.s:2887   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccw0H4H9.s:2894   .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccw0H4H9.s:2987   .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccw0H4H9.s:3072   .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccw0H4H9.s:3079   .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccw0H4H9.s:3119   .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccw0H4H9.s:3210   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccw0H4H9.s:3282   .text.RTC_Bcd2ToByte:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_GetTick
SystemCoreClock
HAL_RTCEx_AlarmBEventCallback
