ARM GAS  /tmp/cctn6Mqs.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"list.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.vListInitialise,"ax",%progbits
  18              		.align	1
  19              		.global	vListInitialise
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	vListInitialise:
  27              	.LVL0:
  28              	.LFB131:
  29              		.file 1 "./FreeRtos/src/list.c"
   1:./FreeRtos/src/list.c **** /*
   2:./FreeRtos/src/list.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./FreeRtos/src/list.c ****     All rights reserved
   4:./FreeRtos/src/list.c **** 
   5:./FreeRtos/src/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./FreeRtos/src/list.c **** 
   7:./FreeRtos/src/list.c ****     This file is part of the FreeRTOS distribution.
   8:./FreeRtos/src/list.c **** 
   9:./FreeRtos/src/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./FreeRtos/src/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./FreeRtos/src/list.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./FreeRtos/src/list.c **** 
  13:./FreeRtos/src/list.c ****     ***************************************************************************
  14:./FreeRtos/src/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./FreeRtos/src/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./FreeRtos/src/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./FreeRtos/src/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./FreeRtos/src/list.c ****     ***************************************************************************
  19:./FreeRtos/src/list.c **** 
  20:./FreeRtos/src/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./FreeRtos/src/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./FreeRtos/src/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./FreeRtos/src/list.c ****     link: http://www.freertos.org/a00114.html
  24:./FreeRtos/src/list.c **** 
  25:./FreeRtos/src/list.c ****     ***************************************************************************
  26:./FreeRtos/src/list.c ****      *                                                                       *
  27:./FreeRtos/src/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./FreeRtos/src/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./FreeRtos/src/list.c ****      *    platform software that is more than just the market leader, it     *
ARM GAS  /tmp/cctn6Mqs.s 			page 2


  30:./FreeRtos/src/list.c ****      *    is the industry's de facto standard.                               *
  31:./FreeRtos/src/list.c ****      *                                                                       *
  32:./FreeRtos/src/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./FreeRtos/src/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./FreeRtos/src/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:./FreeRtos/src/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./FreeRtos/src/list.c ****      *                                                                       *
  37:./FreeRtos/src/list.c ****     ***************************************************************************
  38:./FreeRtos/src/list.c **** 
  39:./FreeRtos/src/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./FreeRtos/src/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./FreeRtos/src/list.c ****     defined configASSERT()?
  42:./FreeRtos/src/list.c **** 
  43:./FreeRtos/src/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./FreeRtos/src/list.c ****     embedded software for free we request you assist our global community by
  45:./FreeRtos/src/list.c ****     participating in the support forum.
  46:./FreeRtos/src/list.c **** 
  47:./FreeRtos/src/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./FreeRtos/src/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./FreeRtos/src/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./FreeRtos/src/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./FreeRtos/src/list.c **** 
  52:./FreeRtos/src/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./FreeRtos/src/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./FreeRtos/src/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./FreeRtos/src/list.c **** 
  56:./FreeRtos/src/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./FreeRtos/src/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./FreeRtos/src/list.c **** 
  59:./FreeRtos/src/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./FreeRtos/src/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./FreeRtos/src/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./FreeRtos/src/list.c **** 
  63:./FreeRtos/src/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./FreeRtos/src/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./FreeRtos/src/list.c ****     mission critical applications that require provable dependability.
  66:./FreeRtos/src/list.c **** 
  67:./FreeRtos/src/list.c ****     1 tab == 4 spaces!
  68:./FreeRtos/src/list.c **** */
  69:./FreeRtos/src/list.c **** 
  70:./FreeRtos/src/list.c **** 
  71:./FreeRtos/src/list.c **** #include <stdlib.h>
  72:./FreeRtos/src/list.c **** #include "FreeRTOS.h"
  73:./FreeRtos/src/list.c **** #include "list.h"
  74:./FreeRtos/src/list.c **** 
  75:./FreeRtos/src/list.c **** /*-----------------------------------------------------------
  76:./FreeRtos/src/list.c ****  * PUBLIC LIST API documented in list.h
  77:./FreeRtos/src/list.c ****  *----------------------------------------------------------*/
  78:./FreeRtos/src/list.c **** 
  79:./FreeRtos/src/list.c **** void vListInitialise( List_t * const pxList )
  80:./FreeRtos/src/list.c **** {
  30              		.loc 1 80 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  81:./FreeRtos/src/list.c **** 	/* The list structure contains a list item which is used to mark the
ARM GAS  /tmp/cctn6Mqs.s 			page 3


  82:./FreeRtos/src/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:./FreeRtos/src/list.c **** 	as the only list entry. */
  84:./FreeRtos/src/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  35              		.loc 1 84 2 view .LVU1
  36              		.loc 1 84 37 is_stmt 0 view .LVU2
  37 0000 00F10803 		add	r3, r0, #8
  38              		.loc 1 84 18 view .LVU3
  39 0004 4360     		str	r3, [r0, #4]
  85:./FreeRtos/src/list.c **** 
  86:./FreeRtos/src/list.c **** 	/* The list end value is the highest possible value in the list to
  87:./FreeRtos/src/list.c **** 	ensure it remains at the end of the list. */
  88:./FreeRtos/src/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  40              		.loc 1 88 2 is_stmt 1 view .LVU4
  41              		.loc 1 88 30 is_stmt 0 view .LVU5
  42 0006 4FF0FF32 		mov	r2, #-1
  43 000a 8260     		str	r2, [r0, #8]
  89:./FreeRtos/src/list.c **** 
  90:./FreeRtos/src/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:./FreeRtos/src/list.c **** 	when the list is empty. */
  92:./FreeRtos/src/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  44              		.loc 1 92 2 is_stmt 1 view .LVU6
  45              		.loc 1 92 26 is_stmt 0 view .LVU7
  46 000c C360     		str	r3, [r0, #12]
  93:./FreeRtos/src/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  47              		.loc 1 93 2 is_stmt 1 view .LVU8
  48              		.loc 1 93 30 is_stmt 0 view .LVU9
  49 000e 0361     		str	r3, [r0, #16]
  94:./FreeRtos/src/list.c **** 
  95:./FreeRtos/src/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  50              		.loc 1 95 2 is_stmt 1 view .LVU10
  51              		.loc 1 95 26 is_stmt 0 view .LVU11
  52 0010 0023     		movs	r3, #0
  53 0012 0360     		str	r3, [r0]
  96:./FreeRtos/src/list.c **** 
  97:./FreeRtos/src/list.c **** 	/* Write known values into the list if
  98:./FreeRtos/src/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:./FreeRtos/src/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  54              		.loc 1 99 48 is_stmt 1 view .LVU12
 100:./FreeRtos/src/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  55              		.loc 1 100 48 view .LVU13
 101:./FreeRtos/src/list.c **** }
  56              		.loc 1 101 1 is_stmt 0 view .LVU14
  57 0014 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE131:
  61              		.section	.text.vListInitialiseItem,"ax",%progbits
  62              		.align	1
  63              		.global	vListInitialiseItem
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu fpv4-sp-d16
  69              	vListInitialiseItem:
  70              	.LVL1:
  71              	.LFB132:
 102:./FreeRtos/src/list.c **** /*-----------------------------------------------------------*/
 103:./FreeRtos/src/list.c **** 
ARM GAS  /tmp/cctn6Mqs.s 			page 4


 104:./FreeRtos/src/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:./FreeRtos/src/list.c **** {
  72              		.loc 1 105 1 is_stmt 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
 106:./FreeRtos/src/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:./FreeRtos/src/list.c **** 	pxItem->pvContainer = NULL;
  77              		.loc 1 107 2 view .LVU16
  78              		.loc 1 107 22 is_stmt 0 view .LVU17
  79 0000 0023     		movs	r3, #0
  80 0002 0361     		str	r3, [r0, #16]
 108:./FreeRtos/src/list.c **** 
 109:./FreeRtos/src/list.c **** 	/* Write known values into the list item if
 110:./FreeRtos/src/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:./FreeRtos/src/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  81              		.loc 1 111 57 is_stmt 1 view .LVU18
 112:./FreeRtos/src/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  82              		.loc 1 112 58 view .LVU19
 113:./FreeRtos/src/list.c **** }
  83              		.loc 1 113 1 is_stmt 0 view .LVU20
  84 0004 7047     		bx	lr
  85              		.cfi_endproc
  86              	.LFE132:
  88              		.section	.text.vListInsertEnd,"ax",%progbits
  89              		.align	1
  90              		.global	vListInsertEnd
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	vListInsertEnd:
  97              	.LVL2:
  98              	.LFB133:
 114:./FreeRtos/src/list.c **** /*-----------------------------------------------------------*/
 115:./FreeRtos/src/list.c **** 
 116:./FreeRtos/src/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:./FreeRtos/src/list.c **** {
  99              		.loc 1 117 1 is_stmt 1 view -0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 118:./FreeRtos/src/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 104              		.loc 1 118 1 view .LVU22
 105              		.loc 1 118 20 is_stmt 0 view .LVU23
 106 0000 4368     		ldr	r3, [r0, #4]
 107              	.LVL3:
 119:./FreeRtos/src/list.c **** 
 120:./FreeRtos/src/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:./FreeRtos/src/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:./FreeRtos/src/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:./FreeRtos/src/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 108              		.loc 1 123 35 is_stmt 1 view .LVU24
 124:./FreeRtos/src/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 109              		.loc 1 124 47 view .LVU25
ARM GAS  /tmp/cctn6Mqs.s 			page 5


 125:./FreeRtos/src/list.c **** 
 126:./FreeRtos/src/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:./FreeRtos/src/list.c **** 	makes the new list item the last item to be removed by a call to
 128:./FreeRtos/src/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:./FreeRtos/src/list.c **** 	pxNewListItem->pxNext = pxIndex;
 110              		.loc 1 129 2 view .LVU26
 111              		.loc 1 129 24 is_stmt 0 view .LVU27
 112 0002 4B60     		str	r3, [r1, #4]
 130:./FreeRtos/src/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 113              		.loc 1 130 2 is_stmt 1 view .LVU28
 114              		.loc 1 130 37 is_stmt 0 view .LVU29
 115 0004 9A68     		ldr	r2, [r3, #8]
 116              		.loc 1 130 28 view .LVU30
 117 0006 8A60     		str	r2, [r1, #8]
 131:./FreeRtos/src/list.c **** 
 132:./FreeRtos/src/list.c **** 	/* Only used during decision coverage testing. */
 133:./FreeRtos/src/list.c **** 	mtCOVERAGE_TEST_DELAY();
 118              		.loc 1 133 25 is_stmt 1 view .LVU31
 134:./FreeRtos/src/list.c **** 
 135:./FreeRtos/src/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 119              		.loc 1 135 2 view .LVU32
 120              		.loc 1 135 30 is_stmt 0 view .LVU33
 121 0008 5160     		str	r1, [r2, #4]
 136:./FreeRtos/src/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 122              		.loc 1 136 2 is_stmt 1 view .LVU34
 123              		.loc 1 136 22 is_stmt 0 view .LVU35
 124 000a 9960     		str	r1, [r3, #8]
 137:./FreeRtos/src/list.c **** 
 138:./FreeRtos/src/list.c **** 	/* Remember which list the item is in. */
 139:./FreeRtos/src/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 125              		.loc 1 139 2 is_stmt 1 view .LVU36
 126              		.loc 1 139 29 is_stmt 0 view .LVU37
 127 000c 0861     		str	r0, [r1, #16]
 140:./FreeRtos/src/list.c **** 
 141:./FreeRtos/src/list.c **** 	( pxList->uxNumberOfItems )++;
 128              		.loc 1 141 2 is_stmt 1 view .LVU38
 129              		.loc 1 141 10 is_stmt 0 view .LVU39
 130 000e 0368     		ldr	r3, [r0]
 131              	.LVL4:
 132              		.loc 1 141 29 view .LVU40
 133 0010 0133     		adds	r3, r3, #1
 134 0012 0360     		str	r3, [r0]
 142:./FreeRtos/src/list.c **** }
 135              		.loc 1 142 1 view .LVU41
 136 0014 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE133:
 140              		.section	.text.vListInsert,"ax",%progbits
 141              		.align	1
 142              		.global	vListInsert
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	vListInsert:
 149              	.LVL5:
 150              	.LFB134:
ARM GAS  /tmp/cctn6Mqs.s 			page 6


 143:./FreeRtos/src/list.c **** /*-----------------------------------------------------------*/
 144:./FreeRtos/src/list.c **** 
 145:./FreeRtos/src/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:./FreeRtos/src/list.c **** {
 151              		.loc 1 146 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              		.loc 1 146 1 is_stmt 0 view .LVU43
 157 0000 30B4     		push	{r4, r5}
 158              	.LCFI0:
 159              		.cfi_def_cfa_offset 8
 160              		.cfi_offset 4, -8
 161              		.cfi_offset 5, -4
 147:./FreeRtos/src/list.c **** ListItem_t *pxIterator;
 162              		.loc 1 147 1 is_stmt 1 view .LVU44
 148:./FreeRtos/src/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 163              		.loc 1 148 1 view .LVU45
 164              		.loc 1 148 18 is_stmt 0 view .LVU46
 165 0002 0D68     		ldr	r5, [r1]
 166              	.LVL6:
 149:./FreeRtos/src/list.c **** 
 150:./FreeRtos/src/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:./FreeRtos/src/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:./FreeRtos/src/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:./FreeRtos/src/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 167              		.loc 1 153 35 is_stmt 1 view .LVU47
 154:./FreeRtos/src/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 168              		.loc 1 154 47 view .LVU48
 155:./FreeRtos/src/list.c **** 
 156:./FreeRtos/src/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:./FreeRtos/src/list.c **** 
 158:./FreeRtos/src/list.c **** 	If the list already contains a list item with the same item value then the
 159:./FreeRtos/src/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 160:./FreeRtos/src/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:./FreeRtos/src/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:./FreeRtos/src/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:./FreeRtos/src/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:./FreeRtos/src/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 169              		.loc 1 164 2 view .LVU49
 170              		.loc 1 164 4 is_stmt 0 view .LVU50
 171 0004 B5F1FF3F 		cmp	r5, #-1
 172 0008 11D0     		beq	.L9
 165:./FreeRtos/src/list.c **** 	{
 166:./FreeRtos/src/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 167:./FreeRtos/src/list.c **** 	}
 168:./FreeRtos/src/list.c **** 	else
 169:./FreeRtos/src/list.c **** 	{
 170:./FreeRtos/src/list.c **** 		/* *** NOTE ***********************************************************
 171:./FreeRtos/src/list.c **** 		If you find your application is crashing here then likely causes are
 172:./FreeRtos/src/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:./FreeRtos/src/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:./FreeRtos/src/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:./FreeRtos/src/list.c **** 
 176:./FreeRtos/src/list.c **** 			1) Stack overflow -
 177:./FreeRtos/src/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
ARM GAS  /tmp/cctn6Mqs.s 			page 7


 178:./FreeRtos/src/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:./FreeRtos/src/list.c **** 			   parts where numerically high priority values denote low actual
 180:./FreeRtos/src/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:./FreeRtos/src/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:./FreeRtos/src/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 183:./FreeRtos/src/list.c **** 			   http://www.freertos.org/a00110.html
 184:./FreeRtos/src/list.c **** 			3) Calling an API function from within a critical section or when
 185:./FreeRtos/src/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:./FreeRtos/src/list.c **** 			   not end in "FromISR" from an interrupt.
 187:./FreeRtos/src/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:./FreeRtos/src/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:./FreeRtos/src/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:./FreeRtos/src/list.c **** 		**********************************************************************/
 191:./FreeRtos/src/list.c **** 
 192:./FreeRtos/src/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 173              		.loc 1 192 3 is_stmt 1 view .LVU51
 174              		.loc 1 192 19 is_stmt 0 view .LVU52
 175 000a 00F10803 		add	r3, r0, #8
 176              	.LVL7:
 177              	.L7:
 178              		.loc 1 192 61 is_stmt 1 discriminator 1 view .LVU53
 179 000e 1C46     		mov	r4, r3
 180              		.loc 1 192 71 is_stmt 0 discriminator 1 view .LVU54
 181 0010 5B68     		ldr	r3, [r3, #4]
 182              	.LVL8:
 183              		.loc 1 192 79 discriminator 1 view .LVU55
 184 0012 1A68     		ldr	r2, [r3]
 185              		.loc 1 192 3 discriminator 1 view .LVU56
 186 0014 AA42     		cmp	r2, r5
 187 0016 FAD9     		bls	.L7
 188              	.L6:
 193:./FreeRtos/src/list.c **** 		{
 194:./FreeRtos/src/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:./FreeRtos/src/list.c **** 			insertion position. */
 196:./FreeRtos/src/list.c **** 		}
 197:./FreeRtos/src/list.c **** 	}
 198:./FreeRtos/src/list.c **** 
 199:./FreeRtos/src/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 189              		.loc 1 199 2 is_stmt 1 view .LVU57
 190              		.loc 1 199 36 is_stmt 0 view .LVU58
 191 0018 6368     		ldr	r3, [r4, #4]
 192              		.loc 1 199 24 view .LVU59
 193 001a 4B60     		str	r3, [r1, #4]
 200:./FreeRtos/src/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 194              		.loc 1 200 2 is_stmt 1 view .LVU60
 195              		.loc 1 200 36 is_stmt 0 view .LVU61
 196 001c 9960     		str	r1, [r3, #8]
 201:./FreeRtos/src/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 197              		.loc 1 201 2 is_stmt 1 view .LVU62
 198              		.loc 1 201 28 is_stmt 0 view .LVU63
 199 001e 8C60     		str	r4, [r1, #8]
 202:./FreeRtos/src/list.c **** 	pxIterator->pxNext = pxNewListItem;
 200              		.loc 1 202 2 is_stmt 1 view .LVU64
 201              		.loc 1 202 21 is_stmt 0 view .LVU65
 202 0020 6160     		str	r1, [r4, #4]
 203:./FreeRtos/src/list.c **** 
 204:./FreeRtos/src/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
ARM GAS  /tmp/cctn6Mqs.s 			page 8


 205:./FreeRtos/src/list.c **** 	item later. */
 206:./FreeRtos/src/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 203              		.loc 1 206 2 is_stmt 1 view .LVU66
 204              		.loc 1 206 29 is_stmt 0 view .LVU67
 205 0022 0861     		str	r0, [r1, #16]
 207:./FreeRtos/src/list.c **** 
 208:./FreeRtos/src/list.c **** 	( pxList->uxNumberOfItems )++;
 206              		.loc 1 208 2 is_stmt 1 view .LVU68
 207              		.loc 1 208 10 is_stmt 0 view .LVU69
 208 0024 0368     		ldr	r3, [r0]
 209              		.loc 1 208 29 view .LVU70
 210 0026 0133     		adds	r3, r3, #1
 211 0028 0360     		str	r3, [r0]
 209:./FreeRtos/src/list.c **** }
 212              		.loc 1 209 1 view .LVU71
 213 002a 30BC     		pop	{r4, r5}
 214              	.LCFI1:
 215              		.cfi_remember_state
 216              		.cfi_restore 5
 217              		.cfi_restore 4
 218              		.cfi_def_cfa_offset 0
 219              	.LVL9:
 220              		.loc 1 209 1 view .LVU72
 221 002c 7047     		bx	lr
 222              	.LVL10:
 223              	.L9:
 224              	.LCFI2:
 225              		.cfi_restore_state
 166:./FreeRtos/src/list.c **** 	}
 226              		.loc 1 166 3 is_stmt 1 view .LVU73
 166:./FreeRtos/src/list.c **** 	}
 227              		.loc 1 166 14 is_stmt 0 view .LVU74
 228 002e 0469     		ldr	r4, [r0, #16]
 229              	.LVL11:
 166:./FreeRtos/src/list.c **** 	}
 230              		.loc 1 166 14 view .LVU75
 231 0030 F2E7     		b	.L6
 232              		.cfi_endproc
 233              	.LFE134:
 235              		.section	.text.uxListRemove,"ax",%progbits
 236              		.align	1
 237              		.global	uxListRemove
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu fpv4-sp-d16
 243              	uxListRemove:
 244              	.LVL12:
 245              	.LFB135:
 210:./FreeRtos/src/list.c **** /*-----------------------------------------------------------*/
 211:./FreeRtos/src/list.c **** 
 212:./FreeRtos/src/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:./FreeRtos/src/list.c **** {
 246              		.loc 1 213 1 is_stmt 1 view -0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cctn6Mqs.s 			page 9


 250              		@ link register save eliminated.
 214:./FreeRtos/src/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:./FreeRtos/src/list.c **** item. */
 216:./FreeRtos/src/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 251              		.loc 1 216 1 view .LVU77
 252              		.loc 1 216 16 is_stmt 0 view .LVU78
 253 0000 0369     		ldr	r3, [r0, #16]
 254              	.LVL13:
 217:./FreeRtos/src/list.c **** 
 218:./FreeRtos/src/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 255              		.loc 1 218 2 is_stmt 1 view .LVU79
 256              		.loc 1 218 16 is_stmt 0 view .LVU80
 257 0002 4168     		ldr	r1, [r0, #4]
 258              		.loc 1 218 53 view .LVU81
 259 0004 8268     		ldr	r2, [r0, #8]
 260              		.loc 1 218 37 view .LVU82
 261 0006 8A60     		str	r2, [r1, #8]
 219:./FreeRtos/src/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 262              		.loc 1 219 2 is_stmt 1 view .LVU83
 263              		.loc 1 219 53 is_stmt 0 view .LVU84
 264 0008 4168     		ldr	r1, [r0, #4]
 265              		.loc 1 219 37 view .LVU85
 266 000a 5160     		str	r1, [r2, #4]
 220:./FreeRtos/src/list.c **** 
 221:./FreeRtos/src/list.c **** 	/* Only used during decision coverage testing. */
 222:./FreeRtos/src/list.c **** 	mtCOVERAGE_TEST_DELAY();
 267              		.loc 1 222 25 is_stmt 1 view .LVU86
 223:./FreeRtos/src/list.c **** 
 224:./FreeRtos/src/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:./FreeRtos/src/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 268              		.loc 1 225 2 view .LVU87
 269              		.loc 1 225 12 is_stmt 0 view .LVU88
 270 000c 5A68     		ldr	r2, [r3, #4]
 271              		.loc 1 225 4 view .LVU89
 272 000e 8242     		cmp	r2, r0
 273 0010 05D0     		beq	.L12
 274              	.L11:
 226:./FreeRtos/src/list.c **** 	{
 227:./FreeRtos/src/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 228:./FreeRtos/src/list.c **** 	}
 229:./FreeRtos/src/list.c **** 	else
 230:./FreeRtos/src/list.c **** 	{
 231:./FreeRtos/src/list.c **** 		mtCOVERAGE_TEST_MARKER();
 275              		.loc 1 231 27 is_stmt 1 view .LVU90
 232:./FreeRtos/src/list.c **** 	}
 233:./FreeRtos/src/list.c **** 
 234:./FreeRtos/src/list.c **** 	pxItemToRemove->pvContainer = NULL;
 276              		.loc 1 234 2 view .LVU91
 277              		.loc 1 234 30 is_stmt 0 view .LVU92
 278 0012 0022     		movs	r2, #0
 279 0014 0261     		str	r2, [r0, #16]
 235:./FreeRtos/src/list.c **** 	( pxList->uxNumberOfItems )--;
 280              		.loc 1 235 2 is_stmt 1 view .LVU93
 281              		.loc 1 235 10 is_stmt 0 view .LVU94
 282 0016 1868     		ldr	r0, [r3]
 283              	.LVL14:
 284              		.loc 1 235 29 view .LVU95
ARM GAS  /tmp/cctn6Mqs.s 			page 10


 285 0018 0138     		subs	r0, r0, #1
 286 001a 1860     		str	r0, [r3]
 236:./FreeRtos/src/list.c **** 
 237:./FreeRtos/src/list.c **** 	return pxList->uxNumberOfItems;
 287              		.loc 1 237 2 is_stmt 1 view .LVU96
 238:./FreeRtos/src/list.c **** }
 288              		.loc 1 238 1 is_stmt 0 view .LVU97
 289 001c 7047     		bx	lr
 290              	.LVL15:
 291              	.L12:
 227:./FreeRtos/src/list.c **** 	}
 292              		.loc 1 227 3 is_stmt 1 view .LVU98
 227:./FreeRtos/src/list.c **** 	}
 293              		.loc 1 227 35 is_stmt 0 view .LVU99
 294 001e 8268     		ldr	r2, [r0, #8]
 227:./FreeRtos/src/list.c **** 	}
 295              		.loc 1 227 19 view .LVU100
 296 0020 5A60     		str	r2, [r3, #4]
 297 0022 F6E7     		b	.L11
 298              		.cfi_endproc
 299              	.LFE135:
 301              		.text
 302              	.Letext0:
 303              		.file 2 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 304              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 305              		.file 4 "./FreeRtos/port/ARM_CM4F/portmacro.h"
 306              		.file 5 "./FreeRtos/port/include/list.h"
ARM GAS  /tmp/cctn6Mqs.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/cctn6Mqs.s:18     .text.vListInitialise:0000000000000000 $t
     /tmp/cctn6Mqs.s:26     .text.vListInitialise:0000000000000000 vListInitialise
     /tmp/cctn6Mqs.s:62     .text.vListInitialiseItem:0000000000000000 $t
     /tmp/cctn6Mqs.s:69     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
     /tmp/cctn6Mqs.s:89     .text.vListInsertEnd:0000000000000000 $t
     /tmp/cctn6Mqs.s:96     .text.vListInsertEnd:0000000000000000 vListInsertEnd
     /tmp/cctn6Mqs.s:141    .text.vListInsert:0000000000000000 $t
     /tmp/cctn6Mqs.s:148    .text.vListInsert:0000000000000000 vListInsert
     /tmp/cctn6Mqs.s:236    .text.uxListRemove:0000000000000000 $t
     /tmp/cctn6Mqs.s:243    .text.uxListRemove:0000000000000000 uxListRemove

NO UNDEFINED SYMBOLS
