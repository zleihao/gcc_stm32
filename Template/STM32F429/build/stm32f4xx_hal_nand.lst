ARM GAS  /tmp/ccmBJYMF.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_nand.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_NAND_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_NAND_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_NAND_Init:
  27              	.LFB126:
  28              		.file 1 "./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c"
   1:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
   2:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ******************************************************************************
   3:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @file    stm32f4xx_hal_nand.c
   4:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @author  MCD Application Team
   5:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief   NAND HAL module driver.
   6:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *          This file provides a generic firmware to drive NAND memories mounted 
   7:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *          as external device.
   8:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *         
   9:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   @verbatim
  10:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
  11:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****                          ##### How to use this driver #####
  12:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================    
  13:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     [..]
  14:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       This driver is a generic layered driver which contains a set of APIs used to 
  15:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       control NAND flash memories. It uses the FMC/FSMC layer functions to interface 
  16:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       with NAND devices. This driver is used as follows:
  17:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
  18:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) NAND flash memory configuration sequence using the function HAL_NAND_Init() 
  19:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           with control and timing parameters for both common and attribute spaces.
  20:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****             
  21:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) Read NAND flash memory maker and device IDs using the function
  22:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_Read_ID(). The read information is stored in the NAND_ID_TypeDef 
  23:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           structure declared by the function caller. 
  24:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         
  25:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) Access NAND flash memory by read/write operations using the functions
  26:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_Read_Page_8b()/HAL_NAND_Read_SpareArea_8b(), 
  27:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_Write_Page_8b()/HAL_NAND_Write_SpareArea_8b(),
  28:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_Read_Page_16b()/HAL_NAND_Read_SpareArea_16b(), 
  29:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_Write_Page_16b()/HAL_NAND_Write_SpareArea_16b()
  30:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           to read/write page(s)/spare area(s). These functions use specific device 
ARM GAS  /tmp/ccmBJYMF.s 			page 2


  31:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           information (Block, page size..) predefined by the user in the HAL_NAND_Info_TypeDef 
  32:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           structure. The read/write address information is contained by the Nand_Address_Typedef
  33:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           structure passed as parameter.
  34:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         
  35:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) Perform NAND flash Reset chip operation using the function HAL_NAND_Reset().
  36:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         
  37:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) Perform NAND flash erase block operation using the function HAL_NAND_Erase_Block().
  38:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           The erase block address information is contained in the Nand_Address_Typedef 
  39:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           structure passed as parameter.
  40:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
  41:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) Read the NAND flash status operation using the function HAL_NAND_Read_Status().
  42:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         
  43:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) You can also control the NAND device by calling the control APIs HAL_NAND_ECC_Enable()/
  44:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_ECC_Disable() to respectively enable/disable the ECC code correction
  45:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           feature or the function HAL_NAND_GetECC() to get the ECC correction code. 
  46:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****        
  47:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (+) You can monitor the NAND device HAL state by calling the function
  48:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           HAL_NAND_GetState()  
  49:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  50:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     [..]
  51:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       (@) This driver is a set of generic APIs which handle standard NAND flash operations.
  52:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           If a NAND flash device contains different operations and/or implementations, 
  53:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           it should be implemented separately.
  54:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  55:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   @endverbatim
  56:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ******************************************************************************
  57:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @attention
  58:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *
  59:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  60:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *
  61:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * Redistribution and use in source and binary forms, with or without modification,
  62:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * are permitted provided that the following conditions are met:
  63:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  64:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *      this list of conditions and the following disclaimer.
  65:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  66:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *      this list of conditions and the following disclaimer in the documentation
  67:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *      and/or other materials provided with the distribution.
  68:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  69:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *      may be used to endorse or promote products derived from this software
  70:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *      without specific prior written permission.
  71:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *
  72:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  73:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  74:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  75:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  76:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  77:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  78:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  79:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  80:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  81:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  82:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *
  83:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ******************************************************************************
  84:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */ 
  85:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  86:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Includes ------------------------------------------------------------------*/
  87:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** #include "stm32f4xx_hal.h"
ARM GAS  /tmp/ccmBJYMF.s 			page 3


  88:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  89:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @addtogroup STM32F4xx_HAL_Driver
  90:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
  91:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
  92:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  93:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  94:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** #ifdef HAL_NAND_MODULE_ENABLED
  95:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
  96:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** #if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx) ||
  97:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
  98:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  99:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 100:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND NAND 
 101:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief NAND HAL module driver
 102:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
 103:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 104:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 105:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Private typedef -----------------------------------------------------------*/
 106:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Private define ------------------------------------------------------------*/
 107:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Private_Constants NAND Private Constants
 108:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
 109:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 110:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 111:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 112:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @}
 113:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 114:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 115:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Private macro -------------------------------------------------------------*/    
 116:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Private_Macros NAND Private Macros
 117:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
 118:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 119:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 120:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 121:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @}
 122:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 123:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Private variables ---------------------------------------------------------*/
 124:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Private function prototypes -----------------------------------------------*/
 125:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /* Exported functions --------------------------------------------------------*/
 126:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions NAND Exported Functions
 127:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
 128:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 129:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 130:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group1 Initialization and de-initialization functions 
 131:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief    Initialization and Configuration functions 
 132:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *
 133:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   @verbatim    
 134:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
 135:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****             ##### NAND Initialization and de-initialization functions #####
 136:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
 137:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   [..]  
 138:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     This section provides functions allowing to initialize/de-initialize
 139:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     the NAND memory
 140:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 141:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** @endverbatim
 142:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
 143:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 144:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
ARM GAS  /tmp/ccmBJYMF.s 			page 4


 145:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 146:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Perform NAND memory Initialization sequence
 147:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 148:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 149:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  ComSpace_Timing pointer to Common space timing structure
 150:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  AttSpace_Timing pointer to Attribute space timing structure
 151:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 152:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 153:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Ti
 154:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
  29              		.loc 1 154 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 84B0     		sub	sp, sp, #16
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 24
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 F860     		str	r0, [r7, #12]
  45 0008 B960     		str	r1, [r7, #8]
  46 000a 7A60     		str	r2, [r7, #4]
 155:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND handle state */
 156:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand == NULL)
  47              		.loc 1 156 5
  48 000c FB68     		ldr	r3, [r7, #12]
  49 000e 002B     		cmp	r3, #0
  50 0010 01D1     		bne	.L2
 157:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 158:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_ERROR;
  51              		.loc 1 158 13
  52 0012 0123     		movs	r3, #1
  53 0014 3EE0     		b	.L3
  54              	.L2:
 159:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 160:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 161:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_RESET)
  55              		.loc 1 161 11
  56 0016 FB68     		ldr	r3, [r7, #12]
  57 0018 93F82130 		ldrb	r3, [r3, #33]
  58 001c DBB2     		uxtb	r3, r3
  59              		.loc 1 161 5
  60 001e 002B     		cmp	r3, #0
  61 0020 06D1     		bne	.L4
 162:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Allocate lock resource and initialize it */
 164:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     hnand->Lock = HAL_UNLOCKED;
  62              		.loc 1 164 17
  63 0022 FB68     		ldr	r3, [r7, #12]
  64 0024 0022     		movs	r2, #0
  65 0026 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/ccmBJYMF.s 			page 5


 165:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Initialize the low level hardware (MSP) */
 166:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     HAL_NAND_MspInit(hnand);
  66              		.loc 1 166 5
  67 002a F868     		ldr	r0, [r7, #12]
  68 002c FFF7FEFF 		bl	HAL_NAND_MspInit
  69              	.L4:
 167:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   } 
 168:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 169:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Initialize NAND control Interface */
 170:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   FMC_NAND_Init(hnand->Instance, &(hnand->Init));
  70              		.loc 1 170 3
  71 0030 FB68     		ldr	r3, [r7, #12]
  72 0032 1A68     		ldr	r2, [r3]
  73 0034 FB68     		ldr	r3, [r7, #12]
  74 0036 0433     		adds	r3, r3, #4
  75 0038 1946     		mov	r1, r3
  76 003a 1046     		mov	r0, r2
  77 003c FFF7FEFF 		bl	FMC_NAND_Init
 171:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 172:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Initialize NAND common space timing Interface */  
 173:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
  78              		.loc 1 173 3
  79 0040 FB68     		ldr	r3, [r7, #12]
  80 0042 1868     		ldr	r0, [r3]
  81 0044 FB68     		ldr	r3, [r7, #12]
  82 0046 5B68     		ldr	r3, [r3, #4]
  83 0048 1A46     		mov	r2, r3
  84 004a B968     		ldr	r1, [r7, #8]
  85 004c FFF7FEFF 		bl	FMC_NAND_CommonSpace_Timing_Init
 174:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 175:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Initialize NAND attribute space timing Interface */  
 176:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
  86              		.loc 1 176 3
  87 0050 FB68     		ldr	r3, [r7, #12]
  88 0052 1868     		ldr	r0, [r3]
  89 0054 FB68     		ldr	r3, [r7, #12]
  90 0056 5B68     		ldr	r3, [r3, #4]
  91 0058 1A46     		mov	r2, r3
  92 005a 7968     		ldr	r1, [r7, #4]
  93 005c FFF7FEFF 		bl	FMC_NAND_AttributeSpace_Timing_Init
 177:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 178:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Enable the NAND device */
 179:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
  94              		.loc 1 179 3
  95 0060 FB68     		ldr	r3, [r7, #12]
  96 0062 5B68     		ldr	r3, [r3, #4]
  97 0064 102B     		cmp	r3, #16
  98 0066 08D1     		bne	.L5
  99              		.loc 1 179 3 is_stmt 0 discriminator 1
 100 0068 FB68     		ldr	r3, [r7, #12]
 101 006a 1B68     		ldr	r3, [r3]
 102 006c 1A68     		ldr	r2, [r3]
 103 006e FB68     		ldr	r3, [r7, #12]
 104 0070 1B68     		ldr	r3, [r3]
 105 0072 42F00402 		orr	r2, r2, #4
 106 0076 1A60     		str	r2, [r3]
 107 0078 07E0     		b	.L6
ARM GAS  /tmp/ccmBJYMF.s 			page 6


 108              	.L5:
 109              		.loc 1 179 3 discriminator 2
 110 007a FB68     		ldr	r3, [r7, #12]
 111 007c 1B68     		ldr	r3, [r3]
 112 007e 1A6A     		ldr	r2, [r3, #32]
 113 0080 FB68     		ldr	r3, [r7, #12]
 114 0082 1B68     		ldr	r3, [r3]
 115 0084 42F00402 		orr	r2, r2, #4
 116 0088 1A62     		str	r2, [r3, #32]
 117              	.L6:
 180:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 181:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
 182:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 118              		.loc 1 182 16 is_stmt 1
 119 008a FB68     		ldr	r3, [r7, #12]
 120 008c 0122     		movs	r2, #1
 121 008e 83F82120 		strb	r2, [r3, #33]
 183:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 122              		.loc 1 184 10
 123 0092 0023     		movs	r3, #0
 124              	.L3:
 185:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 125              		.loc 1 185 1
 126 0094 1846     		mov	r0, r3
 127 0096 1037     		adds	r7, r7, #16
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 8
 130 0098 BD46     		mov	sp, r7
 131              	.LCFI4:
 132              		.cfi_def_cfa_register 13
 133              		@ sp needed
 134 009a 80BD     		pop	{r7, pc}
 135              		.cfi_endproc
 136              	.LFE126:
 138              		.section	.text.HAL_NAND_DeInit,"ax",%progbits
 139              		.align	1
 140              		.global	HAL_NAND_DeInit
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv4-sp-d16
 146              	HAL_NAND_DeInit:
 147              	.LFB127:
 186:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 187:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 188:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Perform NAND memory De-Initialization sequence
 189:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 190:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 191:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 192:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 193:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_DeInit(NAND_HandleTypeDef *hnand)  
 194:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 148              		.loc 1 194 1
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 8
 151              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccmBJYMF.s 			page 7


 152 0000 80B5     		push	{r7, lr}
 153              	.LCFI5:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 7, -8
 156              		.cfi_offset 14, -4
 157 0002 82B0     		sub	sp, sp, #8
 158              	.LCFI6:
 159              		.cfi_def_cfa_offset 16
 160 0004 00AF     		add	r7, sp, #0
 161              	.LCFI7:
 162              		.cfi_def_cfa_register 7
 163 0006 7860     		str	r0, [r7, #4]
 195:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Initialize the low level hardware (MSP) */
 196:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   HAL_NAND_MspDeInit(hnand);
 164              		.loc 1 196 3
 165 0008 7868     		ldr	r0, [r7, #4]
 166 000a FFF7FEFF 		bl	HAL_NAND_MspDeInit
 197:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 198:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Configure the NAND registers with their reset values */
 199:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   FMC_NAND_DeInit(hnand->Instance, hnand->Init.NandBank);
 167              		.loc 1 199 3
 168 000e 7B68     		ldr	r3, [r7, #4]
 169 0010 1A68     		ldr	r2, [r3]
 170 0012 7B68     		ldr	r3, [r7, #4]
 171 0014 5B68     		ldr	r3, [r3, #4]
 172 0016 1946     		mov	r1, r3
 173 0018 1046     		mov	r0, r2
 174 001a FFF7FEFF 		bl	FMC_NAND_DeInit
 200:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 201:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Reset the NAND controller state */
 202:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_RESET;
 175              		.loc 1 202 16
 176 001e 7B68     		ldr	r3, [r7, #4]
 177 0020 0022     		movs	r2, #0
 178 0022 83F82120 		strb	r2, [r3, #33]
 203:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 204:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Release Lock */
 205:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 179              		.loc 1 205 3
 180 0026 7B68     		ldr	r3, [r7, #4]
 181 0028 0022     		movs	r2, #0
 182 002a 83F82020 		strb	r2, [r3, #32]
 206:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 207:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 183              		.loc 1 207 10
 184 002e 0023     		movs	r3, #0
 208:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 185              		.loc 1 208 1
 186 0030 1846     		mov	r0, r3
 187 0032 0837     		adds	r7, r7, #8
 188              	.LCFI8:
 189              		.cfi_def_cfa_offset 8
 190 0034 BD46     		mov	sp, r7
 191              	.LCFI9:
 192              		.cfi_def_cfa_register 13
 193              		@ sp needed
 194 0036 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccmBJYMF.s 			page 8


 195              		.cfi_endproc
 196              	.LFE127:
 198              		.section	.text.HAL_NAND_MspInit,"ax",%progbits
 199              		.align	1
 200              		.weak	HAL_NAND_MspInit
 201              		.syntax unified
 202              		.thumb
 203              		.thumb_func
 204              		.fpu fpv4-sp-d16
 206              	HAL_NAND_MspInit:
 207              	.LFB128:
 209:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 210:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 211:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  NAND MSP Init
 212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 213:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 214:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval None
 215:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 216:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** __weak void HAL_NAND_MspInit(NAND_HandleTypeDef *hnand)
 217:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 208              		.loc 1 217 1
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 1, uses_anonymous_args = 0
 212              		@ link register save eliminated.
 213 0000 80B4     		push	{r7}
 214              	.LCFI10:
 215              		.cfi_def_cfa_offset 4
 216              		.cfi_offset 7, -4
 217 0002 83B0     		sub	sp, sp, #12
 218              	.LCFI11:
 219              		.cfi_def_cfa_offset 16
 220 0004 00AF     		add	r7, sp, #0
 221              	.LCFI12:
 222              		.cfi_def_cfa_register 7
 223 0006 7860     		str	r0, [r7, #4]
 218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 219:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   UNUSED(hnand);
 220:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 221:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****             the HAL_NAND_MspInit could be implemented in the user file
 222:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    */ 
 223:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 224              		.loc 1 223 1
 225 0008 00BF     		nop
 226 000a 0C37     		adds	r7, r7, #12
 227              	.LCFI13:
 228              		.cfi_def_cfa_offset 4
 229 000c BD46     		mov	sp, r7
 230              	.LCFI14:
 231              		.cfi_def_cfa_register 13
 232              		@ sp needed
 233 000e 5DF8047B 		ldr	r7, [sp], #4
 234              	.LCFI15:
 235              		.cfi_restore 7
 236              		.cfi_def_cfa_offset 0
 237 0012 7047     		bx	lr
 238              		.cfi_endproc
ARM GAS  /tmp/ccmBJYMF.s 			page 9


 239              	.LFE128:
 241              		.section	.text.HAL_NAND_MspDeInit,"ax",%progbits
 242              		.align	1
 243              		.weak	HAL_NAND_MspDeInit
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	HAL_NAND_MspDeInit:
 250              	.LFB129:
 224:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 225:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 226:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  NAND MSP DeInit
 227:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 228:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 229:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval None
 230:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** __weak void HAL_NAND_MspDeInit(NAND_HandleTypeDef *hnand)
 232:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 251              		.loc 1 232 1
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 8
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256 0000 80B4     		push	{r7}
 257              	.LCFI16:
 258              		.cfi_def_cfa_offset 4
 259              		.cfi_offset 7, -4
 260 0002 83B0     		sub	sp, sp, #12
 261              	.LCFI17:
 262              		.cfi_def_cfa_offset 16
 263 0004 00AF     		add	r7, sp, #0
 264              	.LCFI18:
 265              		.cfi_def_cfa_register 7
 266 0006 7860     		str	r0, [r7, #4]
 233:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 234:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   UNUSED(hnand);
 235:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 236:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****             the HAL_NAND_MspDeInit could be implemented in the user file
 237:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    */ 
 238:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 267              		.loc 1 238 1
 268 0008 00BF     		nop
 269 000a 0C37     		adds	r7, r7, #12
 270              	.LCFI19:
 271              		.cfi_def_cfa_offset 4
 272 000c BD46     		mov	sp, r7
 273              	.LCFI20:
 274              		.cfi_def_cfa_register 13
 275              		@ sp needed
 276 000e 5DF8047B 		ldr	r7, [sp], #4
 277              	.LCFI21:
 278              		.cfi_restore 7
 279              		.cfi_def_cfa_offset 0
 280 0012 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE129:
ARM GAS  /tmp/ccmBJYMF.s 			page 10


 284              		.section	.text.HAL_NAND_IRQHandler,"ax",%progbits
 285              		.align	1
 286              		.global	HAL_NAND_IRQHandler
 287              		.syntax unified
 288              		.thumb
 289              		.thumb_func
 290              		.fpu fpv4-sp-d16
 292              	HAL_NAND_IRQHandler:
 293              	.LFB130:
 239:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 240:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 241:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 242:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  This function handles NAND device interrupt request.
 243:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 244:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 245:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 246:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** */
 247:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
 248:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 294              		.loc 1 248 1
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 0000 80B5     		push	{r7, lr}
 299              	.LCFI22:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 7, -8
 302              		.cfi_offset 14, -4
 303 0002 82B0     		sub	sp, sp, #8
 304              	.LCFI23:
 305              		.cfi_def_cfa_offset 16
 306 0004 00AF     		add	r7, sp, #0
 307              	.LCFI24:
 308              		.cfi_def_cfa_register 7
 309 0006 7860     		str	r0, [r7, #4]
 249:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check NAND interrupt Rising edge flag */
 250:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 310              		.loc 1 250 6
 311 0008 7B68     		ldr	r3, [r7, #4]
 312 000a 5B68     		ldr	r3, [r3, #4]
 313 000c 102B     		cmp	r3, #16
 314 000e 0AD1     		bne	.L12
 315              		.loc 1 250 6 is_stmt 0 discriminator 1
 316 0010 7B68     		ldr	r3, [r7, #4]
 317 0012 1B68     		ldr	r3, [r3]
 318 0014 5B68     		ldr	r3, [r3, #4]
 319 0016 03F00103 		and	r3, r3, #1
 320 001a 012B     		cmp	r3, #1
 321 001c 0CBF     		ite	eq
 322 001e 0123     		moveq	r3, #1
 323 0020 0023     		movne	r3, #0
 324 0022 DBB2     		uxtb	r3, r3
 325 0024 09E0     		b	.L13
 326              	.L12:
 327              		.loc 1 250 6 discriminator 2
 328 0026 7B68     		ldr	r3, [r7, #4]
 329 0028 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccmBJYMF.s 			page 11


 330 002a 5B6A     		ldr	r3, [r3, #36]
 331 002c 03F00103 		and	r3, r3, #1
 332 0030 012B     		cmp	r3, #1
 333 0032 0CBF     		ite	eq
 334 0034 0123     		moveq	r3, #1
 335 0036 0023     		movne	r3, #0
 336 0038 DBB2     		uxtb	r3, r3
 337              	.L13:
 338              		.loc 1 250 5 is_stmt 1 discriminator 4
 339 003a 002B     		cmp	r3, #0
 340 003c 17D0     		beq	.L14
 251:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 252:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* NAND interrupt callback*/
 253:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 341              		.loc 1 253 5
 342 003e 7868     		ldr	r0, [r7, #4]
 343 0040 FFF7FEFF 		bl	HAL_NAND_ITCallback
 254:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 255:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Clear NAND interrupt Rising edge pending bit */
 256:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 344              		.loc 1 256 5
 345 0044 7B68     		ldr	r3, [r7, #4]
 346 0046 5B68     		ldr	r3, [r3, #4]
 347 0048 102B     		cmp	r3, #16
 348 004a 08D1     		bne	.L15
 349              		.loc 1 256 5 is_stmt 0 discriminator 1
 350 004c 7B68     		ldr	r3, [r7, #4]
 351 004e 1B68     		ldr	r3, [r3]
 352 0050 5A68     		ldr	r2, [r3, #4]
 353 0052 7B68     		ldr	r3, [r7, #4]
 354 0054 1B68     		ldr	r3, [r3]
 355 0056 22F00102 		bic	r2, r2, #1
 356 005a 5A60     		str	r2, [r3, #4]
 357 005c 07E0     		b	.L14
 358              	.L15:
 359              		.loc 1 256 5 discriminator 2
 360 005e 7B68     		ldr	r3, [r7, #4]
 361 0060 1B68     		ldr	r3, [r3]
 362 0062 5A6A     		ldr	r2, [r3, #36]
 363 0064 7B68     		ldr	r3, [r7, #4]
 364 0066 1B68     		ldr	r3, [r3]
 365 0068 22F00102 		bic	r2, r2, #1
 366 006c 5A62     		str	r2, [r3, #36]
 367              	.L14:
 257:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 258:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 259:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check NAND interrupt Level flag */
 260:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 368              		.loc 1 260 6 is_stmt 1
 369 006e 7B68     		ldr	r3, [r7, #4]
 370 0070 5B68     		ldr	r3, [r3, #4]
 371 0072 102B     		cmp	r3, #16
 372 0074 0AD1     		bne	.L16
 373              		.loc 1 260 6 is_stmt 0 discriminator 1
 374 0076 7B68     		ldr	r3, [r7, #4]
 375 0078 1B68     		ldr	r3, [r3]
 376 007a 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccmBJYMF.s 			page 12


 377 007c 03F00203 		and	r3, r3, #2
 378 0080 022B     		cmp	r3, #2
 379 0082 0CBF     		ite	eq
 380 0084 0123     		moveq	r3, #1
 381 0086 0023     		movne	r3, #0
 382 0088 DBB2     		uxtb	r3, r3
 383 008a 09E0     		b	.L17
 384              	.L16:
 385              		.loc 1 260 6 discriminator 2
 386 008c 7B68     		ldr	r3, [r7, #4]
 387 008e 1B68     		ldr	r3, [r3]
 388 0090 5B6A     		ldr	r3, [r3, #36]
 389 0092 03F00203 		and	r3, r3, #2
 390 0096 022B     		cmp	r3, #2
 391 0098 0CBF     		ite	eq
 392 009a 0123     		moveq	r3, #1
 393 009c 0023     		movne	r3, #0
 394 009e DBB2     		uxtb	r3, r3
 395              	.L17:
 396              		.loc 1 260 5 is_stmt 1 discriminator 4
 397 00a0 002B     		cmp	r3, #0
 398 00a2 17D0     		beq	.L18
 261:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 262:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* NAND interrupt callback*/
 263:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 399              		.loc 1 263 5
 400 00a4 7868     		ldr	r0, [r7, #4]
 401 00a6 FFF7FEFF 		bl	HAL_NAND_ITCallback
 264:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 265:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Clear NAND interrupt Level pending bit */
 266:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 402              		.loc 1 266 5
 403 00aa 7B68     		ldr	r3, [r7, #4]
 404 00ac 5B68     		ldr	r3, [r3, #4]
 405 00ae 102B     		cmp	r3, #16
 406 00b0 08D1     		bne	.L19
 407              		.loc 1 266 5 is_stmt 0 discriminator 1
 408 00b2 7B68     		ldr	r3, [r7, #4]
 409 00b4 1B68     		ldr	r3, [r3]
 410 00b6 5A68     		ldr	r2, [r3, #4]
 411 00b8 7B68     		ldr	r3, [r7, #4]
 412 00ba 1B68     		ldr	r3, [r3]
 413 00bc 22F00202 		bic	r2, r2, #2
 414 00c0 5A60     		str	r2, [r3, #4]
 415 00c2 07E0     		b	.L18
 416              	.L19:
 417              		.loc 1 266 5 discriminator 2
 418 00c4 7B68     		ldr	r3, [r7, #4]
 419 00c6 1B68     		ldr	r3, [r3]
 420 00c8 5A6A     		ldr	r2, [r3, #36]
 421 00ca 7B68     		ldr	r3, [r7, #4]
 422 00cc 1B68     		ldr	r3, [r3]
 423 00ce 22F00202 		bic	r2, r2, #2
 424 00d2 5A62     		str	r2, [r3, #36]
 425              	.L18:
 267:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 268:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
ARM GAS  /tmp/ccmBJYMF.s 			page 13


 269:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check NAND interrupt Falling edge flag */
 270:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 426              		.loc 1 270 6 is_stmt 1
 427 00d4 7B68     		ldr	r3, [r7, #4]
 428 00d6 5B68     		ldr	r3, [r3, #4]
 429 00d8 102B     		cmp	r3, #16
 430 00da 0AD1     		bne	.L20
 431              		.loc 1 270 6 is_stmt 0 discriminator 1
 432 00dc 7B68     		ldr	r3, [r7, #4]
 433 00de 1B68     		ldr	r3, [r3]
 434 00e0 5B68     		ldr	r3, [r3, #4]
 435 00e2 03F00403 		and	r3, r3, #4
 436 00e6 042B     		cmp	r3, #4
 437 00e8 0CBF     		ite	eq
 438 00ea 0123     		moveq	r3, #1
 439 00ec 0023     		movne	r3, #0
 440 00ee DBB2     		uxtb	r3, r3
 441 00f0 09E0     		b	.L21
 442              	.L20:
 443              		.loc 1 270 6 discriminator 2
 444 00f2 7B68     		ldr	r3, [r7, #4]
 445 00f4 1B68     		ldr	r3, [r3]
 446 00f6 5B6A     		ldr	r3, [r3, #36]
 447 00f8 03F00403 		and	r3, r3, #4
 448 00fc 042B     		cmp	r3, #4
 449 00fe 0CBF     		ite	eq
 450 0100 0123     		moveq	r3, #1
 451 0102 0023     		movne	r3, #0
 452 0104 DBB2     		uxtb	r3, r3
 453              	.L21:
 454              		.loc 1 270 5 is_stmt 1 discriminator 4
 455 0106 002B     		cmp	r3, #0
 456 0108 17D0     		beq	.L22
 271:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 272:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* NAND interrupt callback*/
 273:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 457              		.loc 1 273 5
 458 010a 7868     		ldr	r0, [r7, #4]
 459 010c FFF7FEFF 		bl	HAL_NAND_ITCallback
 274:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 275:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Clear NAND interrupt Falling edge pending bit */
 276:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 460              		.loc 1 276 5
 461 0110 7B68     		ldr	r3, [r7, #4]
 462 0112 5B68     		ldr	r3, [r3, #4]
 463 0114 102B     		cmp	r3, #16
 464 0116 08D1     		bne	.L23
 465              		.loc 1 276 5 is_stmt 0 discriminator 1
 466 0118 7B68     		ldr	r3, [r7, #4]
 467 011a 1B68     		ldr	r3, [r3]
 468 011c 5A68     		ldr	r2, [r3, #4]
 469 011e 7B68     		ldr	r3, [r7, #4]
 470 0120 1B68     		ldr	r3, [r3]
 471 0122 22F00402 		bic	r2, r2, #4
 472 0126 5A60     		str	r2, [r3, #4]
 473 0128 07E0     		b	.L22
 474              	.L23:
ARM GAS  /tmp/ccmBJYMF.s 			page 14


 475              		.loc 1 276 5 discriminator 2
 476 012a 7B68     		ldr	r3, [r7, #4]
 477 012c 1B68     		ldr	r3, [r3]
 478 012e 5A6A     		ldr	r2, [r3, #36]
 479 0130 7B68     		ldr	r3, [r7, #4]
 480 0132 1B68     		ldr	r3, [r3]
 481 0134 22F00402 		bic	r2, r2, #4
 482 0138 5A62     		str	r2, [r3, #36]
 483              	.L22:
 277:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 278:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 279:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check NAND interrupt FIFO empty flag */
 280:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 484              		.loc 1 280 6 is_stmt 1
 485 013a 7B68     		ldr	r3, [r7, #4]
 486 013c 5B68     		ldr	r3, [r3, #4]
 487 013e 102B     		cmp	r3, #16
 488 0140 0AD1     		bne	.L24
 489              		.loc 1 280 6 is_stmt 0 discriminator 1
 490 0142 7B68     		ldr	r3, [r7, #4]
 491 0144 1B68     		ldr	r3, [r3]
 492 0146 5B68     		ldr	r3, [r3, #4]
 493 0148 03F04003 		and	r3, r3, #64
 494 014c 402B     		cmp	r3, #64
 495 014e 0CBF     		ite	eq
 496 0150 0123     		moveq	r3, #1
 497 0152 0023     		movne	r3, #0
 498 0154 DBB2     		uxtb	r3, r3
 499 0156 09E0     		b	.L25
 500              	.L24:
 501              		.loc 1 280 6 discriminator 2
 502 0158 7B68     		ldr	r3, [r7, #4]
 503 015a 1B68     		ldr	r3, [r3]
 504 015c 5B6A     		ldr	r3, [r3, #36]
 505 015e 03F04003 		and	r3, r3, #64
 506 0162 402B     		cmp	r3, #64
 507 0164 0CBF     		ite	eq
 508 0166 0123     		moveq	r3, #1
 509 0168 0023     		movne	r3, #0
 510 016a DBB2     		uxtb	r3, r3
 511              	.L25:
 512              		.loc 1 280 5 is_stmt 1 discriminator 4
 513 016c 002B     		cmp	r3, #0
 514 016e 17D0     		beq	.L28
 281:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 282:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* NAND interrupt callback*/
 283:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     HAL_NAND_ITCallback(hnand);
 515              		.loc 1 283 5
 516 0170 7868     		ldr	r0, [r7, #4]
 517 0172 FFF7FEFF 		bl	HAL_NAND_ITCallback
 284:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 285:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Clear NAND interrupt FIFO empty pending bit */
 286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 518              		.loc 1 286 5
 519 0176 7B68     		ldr	r3, [r7, #4]
 520 0178 5B68     		ldr	r3, [r3, #4]
 521 017a 102B     		cmp	r3, #16
ARM GAS  /tmp/ccmBJYMF.s 			page 15


 522 017c 08D1     		bne	.L27
 523              		.loc 1 286 5 is_stmt 0 discriminator 1
 524 017e 7B68     		ldr	r3, [r7, #4]
 525 0180 1B68     		ldr	r3, [r3]
 526 0182 5A68     		ldr	r2, [r3, #4]
 527 0184 7B68     		ldr	r3, [r7, #4]
 528 0186 1B68     		ldr	r3, [r3]
 529 0188 22F04002 		bic	r2, r2, #64
 530 018c 5A60     		str	r2, [r3, #4]
 287:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 288:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 531              		.loc 1 288 1 is_stmt 1 discriminator 1
 532 018e 07E0     		b	.L28
 533              	.L27:
 286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 534              		.loc 1 286 5 discriminator 2
 535 0190 7B68     		ldr	r3, [r7, #4]
 536 0192 1B68     		ldr	r3, [r3]
 537 0194 5A6A     		ldr	r2, [r3, #36]
 538 0196 7B68     		ldr	r3, [r7, #4]
 539 0198 1B68     		ldr	r3, [r3]
 540 019a 22F04002 		bic	r2, r2, #64
 541 019e 5A62     		str	r2, [r3, #36]
 542              	.L28:
 543              		.loc 1 288 1
 544 01a0 00BF     		nop
 545 01a2 0837     		adds	r7, r7, #8
 546              	.LCFI25:
 547              		.cfi_def_cfa_offset 8
 548 01a4 BD46     		mov	sp, r7
 549              	.LCFI26:
 550              		.cfi_def_cfa_register 13
 551              		@ sp needed
 552 01a6 80BD     		pop	{r7, pc}
 553              		.cfi_endproc
 554              	.LFE130:
 556              		.section	.text.HAL_NAND_ITCallback,"ax",%progbits
 557              		.align	1
 558              		.weak	HAL_NAND_ITCallback
 559              		.syntax unified
 560              		.thumb
 561              		.thumb_func
 562              		.fpu fpv4-sp-d16
 564              	HAL_NAND_ITCallback:
 565              	.LFB131:
 289:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 290:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 291:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  NAND interrupt feature callback
 292:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 293:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 294:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval None
 295:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 296:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** __weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
 297:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 566              		.loc 1 297 1
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccmBJYMF.s 			page 16


 569              		@ frame_needed = 1, uses_anonymous_args = 0
 570              		@ link register save eliminated.
 571 0000 80B4     		push	{r7}
 572              	.LCFI27:
 573              		.cfi_def_cfa_offset 4
 574              		.cfi_offset 7, -4
 575 0002 83B0     		sub	sp, sp, #12
 576              	.LCFI28:
 577              		.cfi_def_cfa_offset 16
 578 0004 00AF     		add	r7, sp, #0
 579              	.LCFI29:
 580              		.cfi_def_cfa_register 7
 581 0006 7860     		str	r0, [r7, #4]
 298:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Prevent unused argument(s) compilation warning */
 299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   UNUSED(hnand);
 300:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 301:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****             the HAL_NAND_ITCallback could be implemented in the user file
 302:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    */
 303:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 582              		.loc 1 303 1
 583 0008 00BF     		nop
 584 000a 0C37     		adds	r7, r7, #12
 585              	.LCFI30:
 586              		.cfi_def_cfa_offset 4
 587 000c BD46     		mov	sp, r7
 588              	.LCFI31:
 589              		.cfi_def_cfa_register 13
 590              		@ sp needed
 591 000e 5DF8047B 		ldr	r7, [sp], #4
 592              	.LCFI32:
 593              		.cfi_restore 7
 594              		.cfi_def_cfa_offset 0
 595 0012 7047     		bx	lr
 596              		.cfi_endproc
 597              	.LFE131:
 599              		.section	.text.HAL_NAND_Read_ID,"ax",%progbits
 600              		.align	1
 601              		.global	HAL_NAND_Read_ID
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv4-sp-d16
 607              	HAL_NAND_Read_ID:
 608              	.LFB132:
 304:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  
 305:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 306:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @}
 307:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 308:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 309:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group2 Input and Output functions 
 310:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief    Input Output and memory control functions 
 311:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *
 312:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   @verbatim    
 313:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
 314:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****                     ##### NAND Input and Output functions #####
 315:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
 316:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   [..]  
ARM GAS  /tmp/ccmBJYMF.s 			page 17


 317:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     This section provides functions allowing to use and control the NAND 
 318:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     memory
 319:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 320:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** @endverbatim
 321:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
 322:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 324:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 325:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Read the NAND memory electronic signature
 326:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 327:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 328:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pNAND_ID NAND ID structure
 329:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 330:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 331:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDTypeDef *pNAND_ID)
 332:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 609              		.loc 1 332 1
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 24
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              	.LCFI33:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 7, -4
 618 0002 87B0     		sub	sp, sp, #28
 619              	.LCFI34:
 620              		.cfi_def_cfa_offset 32
 621 0004 00AF     		add	r7, sp, #0
 622              	.LCFI35:
 623              		.cfi_def_cfa_register 7
 624 0006 7860     		str	r0, [r7, #4]
 625 0008 3960     		str	r1, [r7]
 333:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t data = 0U;
 626              		.loc 1 333 17
 627 000a 0023     		movs	r3, #0
 628 000c 3B61     		str	r3, [r7, #16]
 334:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t data1 = 0U;
 629              		.loc 1 334 17
 630 000e 0023     		movs	r3, #0
 631 0010 FB60     		str	r3, [r7, #12]
 335:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U;
 632              		.loc 1 335 12
 633 0012 0023     		movs	r3, #0
 634 0014 7B61     		str	r3, [r7, #20]
 336:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 337:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 338:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 635              		.loc 1 338 3
 636 0016 7B68     		ldr	r3, [r7, #4]
 637 0018 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 638 001c 012B     		cmp	r3, #1
 639 001e 01D1     		bne	.L31
 640              		.loc 1 338 3 is_stmt 0 discriminator 1
 641 0020 0223     		movs	r3, #2
 642 0022 61E0     		b	.L32
 643              	.L31:
ARM GAS  /tmp/ccmBJYMF.s 			page 18


 644              		.loc 1 338 3 discriminator 2
 645 0024 7B68     		ldr	r3, [r7, #4]
 646 0026 0122     		movs	r2, #1
 647 0028 83F82020 		strb	r2, [r3, #32]
 339:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 340:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
 341:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 648              		.loc 1 341 11 is_stmt 1 discriminator 2
 649 002c 7B68     		ldr	r3, [r7, #4]
 650 002e 93F82130 		ldrb	r3, [r3, #33]
 651 0032 DBB2     		uxtb	r3, r3
 652              		.loc 1 341 5 discriminator 2
 653 0034 022B     		cmp	r3, #2
 654 0036 01D1     		bne	.L33
 342:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 343:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 655              		.loc 1 343 13
 656 0038 0223     		movs	r3, #2
 657 003a 55E0     		b	.L32
 658              	.L33:
 344:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 345:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 346:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
 347:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 659              		.loc 1 347 17
 660 003c 7B68     		ldr	r3, [r7, #4]
 661 003e 5B68     		ldr	r3, [r3, #4]
 662              		.loc 1 347 5
 663 0040 102B     		cmp	r3, #16
 664 0042 03D1     		bne	.L34
 348:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 665              		.loc 1 349 19
 666 0044 4FF0E043 		mov	r3, #1879048192
 667 0048 7B61     		str	r3, [r7, #20]
 668 004a 02E0     		b	.L35
 669              	.L34:
 350:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 351:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 352:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 353:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 670              		.loc 1 353 19
 671 004c 4FF00043 		mov	r3, #-2147483648
 672 0050 7B61     		str	r3, [r7, #20]
 673              	.L35:
 354:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 355:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 356:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 357:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 674              		.loc 1 357 16
 675 0052 7B68     		ldr	r3, [r7, #4]
 676 0054 0222     		movs	r2, #2
 677 0056 83F82120 		strb	r2, [r3, #33]
 358:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 359:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Send Read ID command sequence */   
 360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 678              		.loc 1 360 21
ARM GAS  /tmp/ccmBJYMF.s 			page 19


 679 005a 7B69     		ldr	r3, [r7, #20]
 680 005c 43F48033 		orr	r3, r3, #65536
 681              		.loc 1 360 60
 682 0060 9022     		movs	r2, #144
 683 0062 1A70     		strb	r2, [r3]
 361:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 684              		.loc 1 361 21
 685 0064 7B69     		ldr	r3, [r7, #20]
 686 0066 43F40033 		orr	r3, r3, #131072
 687              		.loc 1 361 60
 688 006a 0022     		movs	r2, #0
 689 006c 1A70     		strb	r2, [r3]
 362:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 363:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Read the electronic signature from NAND flash */
 364:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** #ifdef FSMC_PCR2_PWID
 365:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8)
 366:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** #else /* FMC_PCR2_PWID is defined */
 367:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if (hnand->Init.MemoryDataWidth == FMC_NAND_PCC_MEM_BUS_WIDTH_8)
 690              		.loc 1 367 18
 691 006e 7B68     		ldr	r3, [r7, #4]
 692 0070 DB68     		ldr	r3, [r3, #12]
 693              		.loc 1 367 6
 694 0072 002B     		cmp	r3, #0
 695 0074 16D1     		bne	.L36
 368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** #endif
 369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 370:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     data = *(__IO uint32_t *)deviceaddress;
 696              		.loc 1 370 13
 697 0076 7B69     		ldr	r3, [r7, #20]
 698              		.loc 1 370 12
 699 0078 1B68     		ldr	r3, [r3]
 700              		.loc 1 370 10
 701 007a 3B61     		str	r3, [r7, #16]
 371:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 372:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Return the data read */
 373:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 702              		.loc 1 373 28
 703 007c 3B69     		ldr	r3, [r7, #16]
 704 007e DAB2     		uxtb	r2, r3
 705              		.loc 1 373 26
 706 0080 3B68     		ldr	r3, [r7]
 707 0082 1A70     		strb	r2, [r3]
 374:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 708              		.loc 1 374 28
 709 0084 3B69     		ldr	r3, [r7, #16]
 710 0086 1B0A     		lsrs	r3, r3, #8
 711 0088 DAB2     		uxtb	r2, r3
 712              		.loc 1 374 26
 713 008a 3B68     		ldr	r3, [r7]
 714 008c 5A70     		strb	r2, [r3, #1]
 375:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 715              		.loc 1 375 28
 716 008e 3B69     		ldr	r3, [r7, #16]
 717 0090 1B0C     		lsrs	r3, r3, #16
 718 0092 DAB2     		uxtb	r2, r3
 719              		.loc 1 375 26
 720 0094 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccmBJYMF.s 			page 20


 721 0096 9A70     		strb	r2, [r3, #2]
 376:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 722              		.loc 1 376 28
 723 0098 3B69     		ldr	r3, [r7, #16]
 724 009a 1B0E     		lsrs	r3, r3, #24
 725 009c DAB2     		uxtb	r2, r3
 726              		.loc 1 376 26
 727 009e 3B68     		ldr	r3, [r7]
 728 00a0 DA70     		strb	r2, [r3, #3]
 729 00a2 18E0     		b	.L37
 730              	.L36:
 377:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 378:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 379:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 380:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     data = *(__IO uint32_t *)deviceaddress;
 731              		.loc 1 380 13
 732 00a4 7B69     		ldr	r3, [r7, #20]
 733              		.loc 1 380 12
 734 00a6 1B68     		ldr	r3, [r3]
 735              		.loc 1 380 10
 736 00a8 3B61     		str	r3, [r7, #16]
 381:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     data1 = *((__IO uint32_t *)deviceaddress + 4U);
 737              		.loc 1 381 46
 738 00aa 7B69     		ldr	r3, [r7, #20]
 739 00ac 1033     		adds	r3, r3, #16
 740              		.loc 1 381 13
 741 00ae 1B68     		ldr	r3, [r3]
 742              		.loc 1 381 11
 743 00b0 FB60     		str	r3, [r7, #12]
 382:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 383:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Return the data read */
 384:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 744              		.loc 1 384 28
 745 00b2 3B69     		ldr	r3, [r7, #16]
 746 00b4 DAB2     		uxtb	r2, r3
 747              		.loc 1 384 26
 748 00b6 3B68     		ldr	r3, [r7]
 749 00b8 1A70     		strb	r2, [r3]
 385:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Device_Id  = ADDR_3RD_CYCLE(data);
 750              		.loc 1 385 28
 751 00ba 3B69     		ldr	r3, [r7, #16]
 752 00bc 1B0C     		lsrs	r3, r3, #16
 753 00be DAB2     		uxtb	r2, r3
 754              		.loc 1 385 26
 755 00c0 3B68     		ldr	r3, [r7]
 756 00c2 5A70     		strb	r2, [r3, #1]
 386:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Third_Id   = ADDR_1ST_CYCLE(data1);
 757              		.loc 1 386 28
 758 00c4 FB68     		ldr	r3, [r7, #12]
 759 00c6 DAB2     		uxtb	r2, r3
 760              		.loc 1 386 26
 761 00c8 3B68     		ldr	r3, [r7]
 762 00ca 9A70     		strb	r2, [r3, #2]
 387:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pNAND_ID->Fourth_Id  = ADDR_3RD_CYCLE(data1);
 763              		.loc 1 387 28
 764 00cc FB68     		ldr	r3, [r7, #12]
 765 00ce 1B0C     		lsrs	r3, r3, #16
ARM GAS  /tmp/ccmBJYMF.s 			page 21


 766 00d0 DAB2     		uxtb	r2, r3
 767              		.loc 1 387 26
 768 00d2 3B68     		ldr	r3, [r7]
 769 00d4 DA70     		strb	r2, [r3, #3]
 770              	.L37:
 388:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 389:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 390:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 391:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 771              		.loc 1 391 16
 772 00d6 7B68     		ldr	r3, [r7, #4]
 773 00d8 0122     		movs	r2, #1
 774 00da 83F82120 		strb	r2, [r3, #33]
 392:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 393:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
 394:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 775              		.loc 1 394 3
 776 00de 7B68     		ldr	r3, [r7, #4]
 777 00e0 0022     		movs	r2, #0
 778 00e2 83F82020 		strb	r2, [r3, #32]
 395:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
 396:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 779              		.loc 1 396 10
 780 00e6 0023     		movs	r3, #0
 781              	.L32:
 397:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 782              		.loc 1 397 1
 783 00e8 1846     		mov	r0, r3
 784 00ea 1C37     		adds	r7, r7, #28
 785              	.LCFI36:
 786              		.cfi_def_cfa_offset 4
 787 00ec BD46     		mov	sp, r7
 788              	.LCFI37:
 789              		.cfi_def_cfa_register 13
 790              		@ sp needed
 791 00ee 5DF8047B 		ldr	r7, [sp], #4
 792              	.LCFI38:
 793              		.cfi_restore 7
 794              		.cfi_def_cfa_offset 0
 795 00f2 7047     		bx	lr
 796              		.cfi_endproc
 797              	.LFE132:
 799              		.section	.text.HAL_NAND_Reset,"ax",%progbits
 800              		.align	1
 801              		.global	HAL_NAND_Reset
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu fpv4-sp-d16
 807              	HAL_NAND_Reset:
 808              	.LFB133:
 398:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 399:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 400:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  NAND memory reset
 401:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 402:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 403:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
ARM GAS  /tmp/ccmBJYMF.s 			page 22


 404:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Reset(NAND_HandleTypeDef *hnand)
 406:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 809              		.loc 1 406 1
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 16
 812              		@ frame_needed = 1, uses_anonymous_args = 0
 813              		@ link register save eliminated.
 814 0000 80B4     		push	{r7}
 815              	.LCFI39:
 816              		.cfi_def_cfa_offset 4
 817              		.cfi_offset 7, -4
 818 0002 85B0     		sub	sp, sp, #20
 819              	.LCFI40:
 820              		.cfi_def_cfa_offset 24
 821 0004 00AF     		add	r7, sp, #0
 822              	.LCFI41:
 823              		.cfi_def_cfa_register 7
 824 0006 7860     		str	r0, [r7, #4]
 407:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U;
 825              		.loc 1 407 12
 826 0008 0023     		movs	r3, #0
 827 000a FB60     		str	r3, [r7, #12]
 408:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 409:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 410:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);
 828              		.loc 1 410 3
 829 000c 7B68     		ldr	r3, [r7, #4]
 830 000e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 831 0012 012B     		cmp	r3, #1
 832 0014 01D1     		bne	.L39
 833              		.loc 1 410 3 is_stmt 0 discriminator 1
 834 0016 0223     		movs	r3, #2
 835 0018 28E0     		b	.L40
 836              	.L39:
 837              		.loc 1 410 3 discriminator 2
 838 001a 7B68     		ldr	r3, [r7, #4]
 839 001c 0122     		movs	r2, #1
 840 001e 83F82020 		strb	r2, [r3, #32]
 411:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 412:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
 413:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 841              		.loc 1 413 11 is_stmt 1 discriminator 2
 842 0022 7B68     		ldr	r3, [r7, #4]
 843 0024 93F82130 		ldrb	r3, [r3, #33]
 844 0028 DBB2     		uxtb	r3, r3
 845              		.loc 1 413 5 discriminator 2
 846 002a 022B     		cmp	r3, #2
 847 002c 01D1     		bne	.L41
 414:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 415:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 848              		.loc 1 415 13
 849 002e 0223     		movs	r3, #2
 850 0030 1CE0     		b	.L40
 851              	.L41:
 416:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 417:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
ARM GAS  /tmp/ccmBJYMF.s 			page 23


 418:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
 419:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 852              		.loc 1 419 17
 853 0032 7B68     		ldr	r3, [r7, #4]
 854 0034 5B68     		ldr	r3, [r3, #4]
 855              		.loc 1 419 5
 856 0036 102B     		cmp	r3, #16
 857 0038 03D1     		bne	.L42
 420:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 421:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 858              		.loc 1 421 19
 859 003a 4FF0E043 		mov	r3, #1879048192
 860 003e FB60     		str	r3, [r7, #12]
 861 0040 02E0     		b	.L43
 862              	.L42:
 422:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 423:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 424:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 425:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 863              		.loc 1 425 19
 864 0042 4FF00043 		mov	r3, #-2147483648
 865 0046 FB60     		str	r3, [r7, #12]
 866              	.L43:
 426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }  
 427:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 428:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
 429:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY; 
 867              		.loc 1 429 16
 868 0048 7B68     		ldr	r3, [r7, #4]
 869 004a 0222     		movs	r2, #2
 870 004c 83F82120 		strb	r2, [r3, #33]
 430:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Send NAND reset command */  
 432:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = 0xFF;
 871              		.loc 1 432 21
 872 0050 FB68     		ldr	r3, [r7, #12]
 873 0052 43F48033 		orr	r3, r3, #65536
 874              		.loc 1 432 59
 875 0056 FF22     		movs	r2, #255
 876 0058 1A70     		strb	r2, [r3]
 433:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 434:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
 436:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 877              		.loc 1 436 16
 878 005a 7B68     		ldr	r3, [r7, #4]
 879 005c 0122     		movs	r2, #1
 880 005e 83F82120 		strb	r2, [r3, #33]
 437:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 438:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
 439:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 881              		.loc 1 439 3
 882 0062 7B68     		ldr	r3, [r7, #4]
 883 0064 0022     		movs	r2, #0
 884 0066 83F82020 		strb	r2, [r3, #32]
 440:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 441:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
ARM GAS  /tmp/ccmBJYMF.s 			page 24


 885              		.loc 1 441 10
 886 006a 0023     		movs	r3, #0
 887              	.L40:
 442:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 443:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 888              		.loc 1 443 1
 889 006c 1846     		mov	r0, r3
 890 006e 1437     		adds	r7, r7, #20
 891              	.LCFI42:
 892              		.cfi_def_cfa_offset 4
 893 0070 BD46     		mov	sp, r7
 894              	.LCFI43:
 895              		.cfi_def_cfa_register 13
 896              		@ sp needed
 897 0072 5DF8047B 		ldr	r7, [sp], #4
 898              	.LCFI44:
 899              		.cfi_restore 7
 900              		.cfi_def_cfa_offset 0
 901 0076 7047     		bx	lr
 902              		.cfi_endproc
 903              	.LFE133:
 905              		.section	.text.HAL_NAND_ConfigDevice,"ax",%progbits
 906              		.align	1
 907              		.global	HAL_NAND_ConfigDevice
 908              		.syntax unified
 909              		.thumb
 910              		.thumb_func
 911              		.fpu fpv4-sp-d16
 913              	HAL_NAND_ConfigDevice:
 914              	.LFB134:
 444:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 445:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 446:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Configure the device: Enter the physical parameters of the device
 447:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 448:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 449:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pDeviceConfig  pointer to NAND_DeviceConfigTypeDef structure
 450:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 451:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 452:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ConfigDevice(NAND_HandleTypeDef *hnand, NAND_DeviceConfigTypeDef *pDevi
 453:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 915              		.loc 1 453 1
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 8
 918              		@ frame_needed = 1, uses_anonymous_args = 0
 919              		@ link register save eliminated.
 920 0000 80B4     		push	{r7}
 921              	.LCFI45:
 922              		.cfi_def_cfa_offset 4
 923              		.cfi_offset 7, -4
 924 0002 83B0     		sub	sp, sp, #12
 925              	.LCFI46:
 926              		.cfi_def_cfa_offset 16
 927 0004 00AF     		add	r7, sp, #0
 928              	.LCFI47:
 929              		.cfi_def_cfa_register 7
 930 0006 7860     		str	r0, [r7, #4]
 931 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccmBJYMF.s 			page 25


 454:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.PageSize           = pDeviceConfig->PageSize;
 932              		.loc 1 454 51
 933 000a 3B68     		ldr	r3, [r7]
 934 000c 1A68     		ldr	r2, [r3]
 935              		.loc 1 454 36
 936 000e 7B68     		ldr	r3, [r7, #4]
 937 0010 5A62     		str	r2, [r3, #36]
 455:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.SpareAreaSize      = pDeviceConfig->SpareAreaSize;
 938              		.loc 1 455 51
 939 0012 3B68     		ldr	r3, [r7]
 940 0014 5A68     		ldr	r2, [r3, #4]
 941              		.loc 1 455 36
 942 0016 7B68     		ldr	r3, [r7, #4]
 943 0018 9A62     		str	r2, [r3, #40]
 456:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.BlockSize          = pDeviceConfig->BlockSize;
 944              		.loc 1 456 51
 945 001a 3B68     		ldr	r3, [r7]
 946 001c 9A68     		ldr	r2, [r3, #8]
 947              		.loc 1 456 36
 948 001e 7B68     		ldr	r3, [r7, #4]
 949 0020 DA62     		str	r2, [r3, #44]
 457:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.BlockNbr           = pDeviceConfig->BlockNbr;
 950              		.loc 1 457 51
 951 0022 3B68     		ldr	r3, [r7]
 952 0024 DA68     		ldr	r2, [r3, #12]
 953              		.loc 1 457 36
 954 0026 7B68     		ldr	r3, [r7, #4]
 955 0028 1A63     		str	r2, [r3, #48]
 458:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.PlaneSize          = pDeviceConfig->PlaneSize;
 956              		.loc 1 458 51
 957 002a 3B68     		ldr	r3, [r7]
 958 002c 5A69     		ldr	r2, [r3, #20]
 959              		.loc 1 458 36
 960 002e 7B68     		ldr	r3, [r7, #4]
 961 0030 9A63     		str	r2, [r3, #56]
 459:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.PlaneNbr           = pDeviceConfig->PlaneNbr;
 962              		.loc 1 459 51
 963 0032 3B68     		ldr	r3, [r7]
 964 0034 1A69     		ldr	r2, [r3, #16]
 965              		.loc 1 459 36
 966 0036 7B68     		ldr	r3, [r7, #4]
 967 0038 5A63     		str	r2, [r3, #52]
 460:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->Config.ExtraCommandEnable = pDeviceConfig->ExtraCommandEnable;
 968              		.loc 1 460 51
 969 003a 3B68     		ldr	r3, [r7]
 970 003c 1A7E     		ldrb	r2, [r3, #24]	@ zero_extendqisi2
 971              		.loc 1 460 36
 972 003e 7B68     		ldr	r3, [r7, #4]
 973 0040 83F83C20 		strb	r2, [r3, #60]
 461:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 462:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 974              		.loc 1 462 10
 975 0044 0023     		movs	r3, #0
 463:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 976              		.loc 1 463 1
 977 0046 1846     		mov	r0, r3
 978 0048 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/ccmBJYMF.s 			page 26


 979              	.LCFI48:
 980              		.cfi_def_cfa_offset 4
 981 004a BD46     		mov	sp, r7
 982              	.LCFI49:
 983              		.cfi_def_cfa_register 13
 984              		@ sp needed
 985 004c 5DF8047B 		ldr	r7, [sp], #4
 986              	.LCFI50:
 987              		.cfi_restore 7
 988              		.cfi_def_cfa_offset 0
 989 0050 7047     		bx	lr
 990              		.cfi_endproc
 991              	.LFE134:
 993              		.section	.text.HAL_NAND_Read_Page_8b,"ax",%progbits
 994              		.align	1
 995              		.global	HAL_NAND_Read_Page_8b
 996              		.syntax unified
 997              		.thumb
 998              		.thumb_func
 999              		.fpu fpv4-sp-d16
 1001              	HAL_NAND_Read_Page_8b:
 1002              	.LFB135:
 464:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 465:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 466:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Read Page(s) from NAND memory block (8-bits addressing)
 467:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 468:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 469:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 470:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer  pointer to destination read buffer
 471:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumPageToRead  number of pages to read from block 
 472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 474:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, u
 475:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {   
 1003              		.loc 1 475 1
 1004              		.cfi_startproc
 1005              		@ args = 0, pretend = 0, frame = 40
 1006              		@ frame_needed = 1, uses_anonymous_args = 0
 1007 0000 80B5     		push	{r7, lr}
 1008              	.LCFI51:
 1009              		.cfi_def_cfa_offset 8
 1010              		.cfi_offset 7, -8
 1011              		.cfi_offset 14, -4
 1012 0002 8AB0     		sub	sp, sp, #40
 1013              	.LCFI52:
 1014              		.cfi_def_cfa_offset 48
 1015 0004 00AF     		add	r7, sp, #0
 1016              	.LCFI53:
 1017              		.cfi_def_cfa_register 7
 1018 0006 F860     		str	r0, [r7, #12]
 1019 0008 B960     		str	r1, [r7, #8]
 1020 000a 7A60     		str	r2, [r7, #4]
 1021 000c 3B60     		str	r3, [r7]
 476:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index  = 0U;
 1022              		.loc 1 476 17
 1023 000e 0023     		movs	r3, #0
 1024 0010 3B61     		str	r3, [r7, #16]
ARM GAS  /tmp/ccmBJYMF.s 			page 27


 477:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 1025              		.loc 1 477 12
 1026 0012 0023     		movs	r3, #0
 1027 0014 BB61     		str	r3, [r7, #24]
 478:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 1028              		.loc 1 478 12
 1029 0016 0023     		movs	r3, #0
 1030 0018 7B62     		str	r3, [r7, #36]
 1031              		.loc 1 478 32
 1032 001a 0023     		movs	r3, #0
 1033 001c 7B61     		str	r3, [r7, #20]
 1034              		.loc 1 478 43
 1035 001e 0023     		movs	r3, #0
 1036 0020 3B62     		str	r3, [r7, #32]
 1037              		.loc 1 478 62
 1038 0022 0023     		movs	r3, #0
 1039 0024 FB61     		str	r3, [r7, #28]
 479:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 480:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand); 
 1040              		.loc 1 481 3
 1041 0026 FB68     		ldr	r3, [r7, #12]
 1042 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1043 002c 012B     		cmp	r3, #1
 1044 002e 01D1     		bne	.L47
 1045              		.loc 1 481 3 is_stmt 0 discriminator 1
 1046 0030 0223     		movs	r3, #2
 1047 0032 08E1     		b	.L48
 1048              	.L47:
 1049              		.loc 1 481 3 discriminator 2
 1050 0034 FB68     		ldr	r3, [r7, #12]
 1051 0036 0122     		movs	r2, #1
 1052 0038 83F82020 		strb	r2, [r3, #32]
 482:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 483:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
 484:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 1053              		.loc 1 484 11 is_stmt 1 discriminator 2
 1054 003c FB68     		ldr	r3, [r7, #12]
 1055 003e 93F82130 		ldrb	r3, [r3, #33]
 1056 0042 DBB2     		uxtb	r3, r3
 1057              		.loc 1 484 5 discriminator 2
 1058 0044 022B     		cmp	r3, #2
 1059 0046 01D1     		bne	.L49
 485:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 1060              		.loc 1 486 13
 1061 0048 0223     		movs	r3, #2
 1062 004a FCE0     		b	.L48
 1063              	.L49:
 487:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 488:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
 490:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 1064              		.loc 1 490 17
 1065 004c FB68     		ldr	r3, [r7, #12]
 1066 004e 5B68     		ldr	r3, [r3, #4]
 1067              		.loc 1 490 5
ARM GAS  /tmp/ccmBJYMF.s 			page 28


 1068 0050 102B     		cmp	r3, #16
 1069 0052 03D1     		bne	.L50
 491:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 1070              		.loc 1 492 19
 1071 0054 4FF0E043 		mov	r3, #1879048192
 1072 0058 7B62     		str	r3, [r7, #36]
 1073 005a 02E0     		b	.L51
 1074              	.L50:
 493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 494:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 495:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 496:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 1075              		.loc 1 496 19
 1076 005c 4FF00043 		mov	r3, #-2147483648
 1077 0060 7B62     		str	r3, [r7, #36]
 1078              	.L51:
 497:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 498:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 499:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
 500:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 1079              		.loc 1 500 16
 1080 0062 FB68     		ldr	r3, [r7, #12]
 1081 0064 0222     		movs	r2, #2
 1082 0066 83F82120 		strb	r2, [r3, #33]
 501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 502:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
 503:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 1083              		.loc 1 503 17
 1084 006a BB68     		ldr	r3, [r7, #8]
 1085 006c 1B88     		ldrh	r3, [r3]
 1086 006e 1946     		mov	r1, r3
 1087 0070 BB68     		ldr	r3, [r7, #8]
 1088 0072 9B88     		ldrh	r3, [r3, #4]
 1089 0074 1A46     		mov	r2, r3
 1090 0076 BB68     		ldr	r3, [r7, #8]
 1091 0078 5B88     		ldrh	r3, [r3, #2]
 1092 007a 1846     		mov	r0, r3
 1093 007c FB68     		ldr	r3, [r7, #12]
 1094 007e 9B6B     		ldr	r3, [r3, #56]
 1095 0080 00FB03F3 		mul	r3, r0, r3
 1096 0084 1344     		add	r3, r3, r2
 1097 0086 FA68     		ldr	r2, [r7, #12]
 1098 0088 D26A     		ldr	r2, [r2, #44]
 1099 008a 02FB03F3 		mul	r3, r2, r3
 1100              		.loc 1 503 15
 1101 008e 0B44     		add	r3, r3, r1
 1102 0090 FB61     		str	r3, [r7, #28]
 504:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 505:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Page(s) read loop */  
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNb
 1103              		.loc 1 506 8
 1104 0092 C2E0     		b	.L52
 1105              	.L63:
 507:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 508:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
 509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
ARM GAS  /tmp/ccmBJYMF.s 			page 29


 1106              		.loc 1 509 37
 1107 0094 3B6A     		ldr	r3, [r7, #32]
 1108 0096 0133     		adds	r3, r3, #1
 1109              		.loc 1 509 26
 1110 0098 FA68     		ldr	r2, [r7, #12]
 1111 009a 526A     		ldr	r2, [r2, #36]
 1112              		.loc 1 509 10
 1113 009c 02FB03F3 		mul	r3, r2, r3
 1114 00a0 7B61     		str	r3, [r7, #20]
 510:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 511:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Send read page command sequence */
 512:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 1115              		.loc 1 512 23
 1116 00a2 7B6A     		ldr	r3, [r7, #36]
 1117 00a4 43F48033 		orr	r3, r3, #65536
 1118              		.loc 1 512 61
 1119 00a8 0022     		movs	r2, #0
 1120 00aa 1A70     		strb	r2, [r3]
 513:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
 514:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 515:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 1121              		.loc 1 515 22
 1122 00ac FB68     		ldr	r3, [r7, #12]
 1123 00ae 5B6A     		ldr	r3, [r3, #36]
 1124              		.loc 1 515 7
 1125 00b0 B3F5007F 		cmp	r3, #512
 1126 00b4 35D8     		bhi	.L53
 516:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 517:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 1127              		.loc 1 517 26
 1128 00b6 FB68     		ldr	r3, [r7, #12]
 1129 00b8 DB6A     		ldr	r3, [r3, #44]
 1130              		.loc 1 517 52
 1131 00ba FA68     		ldr	r2, [r7, #12]
 1132 00bc 126B     		ldr	r2, [r2, #48]
 1133              		.loc 1 517 37
 1134 00be 02FB03F3 		mul	r3, r2, r3
 1135              		.loc 1 517 10
 1136 00c2 B3F5803F 		cmp	r3, #65536
 1137 00c6 12D2     		bcs	.L54
 518:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 519:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1138              		.loc 1 519 27
 1139 00c8 7B6A     		ldr	r3, [r7, #36]
 1140 00ca 43F40033 		orr	r3, r3, #131072
 1141              		.loc 1 519 66
 1142 00ce 0022     		movs	r2, #0
 1143 00d0 1A70     		strb	r2, [r3]
 520:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1144              		.loc 1 520 27
 1145 00d2 7B6A     		ldr	r3, [r7, #36]
 1146 00d4 43F40033 		orr	r3, r3, #131072
 1147              		.loc 1 520 68
 1148 00d8 FA69     		ldr	r2, [r7, #28]
 1149 00da D2B2     		uxtb	r2, r2
 1150              		.loc 1 520 66
 1151 00dc 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccmBJYMF.s 			page 30


 521:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1152              		.loc 1 521 68
 1153 00de FB69     		ldr	r3, [r7, #28]
 1154 00e0 1A0A     		lsrs	r2, r3, #8
 1155              		.loc 1 521 27
 1156 00e2 7B6A     		ldr	r3, [r7, #36]
 1157 00e4 43F40033 		orr	r3, r3, #131072
 1158              		.loc 1 521 68
 1159 00e8 D2B2     		uxtb	r2, r2
 1160              		.loc 1 521 66
 1161 00ea 1A70     		strb	r2, [r3]
 1162 00ec 58E0     		b	.L55
 1163              	.L54:
 522:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 525:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1164              		.loc 1 525 27
 1165 00ee 7B6A     		ldr	r3, [r7, #36]
 1166 00f0 43F40033 		orr	r3, r3, #131072
 1167              		.loc 1 525 66
 1168 00f4 0022     		movs	r2, #0
 1169 00f6 1A70     		strb	r2, [r3]
 526:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1170              		.loc 1 526 27
 1171 00f8 7B6A     		ldr	r3, [r7, #36]
 1172 00fa 43F40033 		orr	r3, r3, #131072
 1173              		.loc 1 526 68
 1174 00fe FA69     		ldr	r2, [r7, #28]
 1175 0100 D2B2     		uxtb	r2, r2
 1176              		.loc 1 526 66
 1177 0102 1A70     		strb	r2, [r3]
 527:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1178              		.loc 1 527 68
 1179 0104 FB69     		ldr	r3, [r7, #28]
 1180 0106 1A0A     		lsrs	r2, r3, #8
 1181              		.loc 1 527 27
 1182 0108 7B6A     		ldr	r3, [r7, #36]
 1183 010a 43F40033 		orr	r3, r3, #131072
 1184              		.loc 1 527 68
 1185 010e D2B2     		uxtb	r2, r2
 1186              		.loc 1 527 66
 1187 0110 1A70     		strb	r2, [r3]
 528:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 1188              		.loc 1 528 68
 1189 0112 FB69     		ldr	r3, [r7, #28]
 1190 0114 1A0C     		lsrs	r2, r3, #16
 1191              		.loc 1 528 27
 1192 0116 7B6A     		ldr	r3, [r7, #36]
 1193 0118 43F40033 		orr	r3, r3, #131072
 1194              		.loc 1 528 68
 1195 011c D2B2     		uxtb	r2, r2
 1196              		.loc 1 528 66
 1197 011e 1A70     		strb	r2, [r3]
 1198 0120 3EE0     		b	.L55
 1199              	.L53:
 529:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
ARM GAS  /tmp/ccmBJYMF.s 			page 31


 530:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 531:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 532:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 533:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 1200              		.loc 1 533 26
 1201 0122 FB68     		ldr	r3, [r7, #12]
 1202 0124 DB6A     		ldr	r3, [r3, #44]
 1203              		.loc 1 533 52
 1204 0126 FA68     		ldr	r2, [r7, #12]
 1205 0128 126B     		ldr	r2, [r2, #48]
 1206              		.loc 1 533 37
 1207 012a 02FB03F3 		mul	r3, r2, r3
 1208              		.loc 1 533 10
 1209 012e B3F5803F 		cmp	r3, #65536
 1210 0132 17D2     		bcs	.L56
 534:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 535:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1211              		.loc 1 535 27
 1212 0134 7B6A     		ldr	r3, [r7, #36]
 1213 0136 43F40033 		orr	r3, r3, #131072
 1214              		.loc 1 535 66
 1215 013a 0022     		movs	r2, #0
 1216 013c 1A70     		strb	r2, [r3]
 536:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1217              		.loc 1 536 27
 1218 013e 7B6A     		ldr	r3, [r7, #36]
 1219 0140 43F40033 		orr	r3, r3, #131072
 1220              		.loc 1 536 66
 1221 0144 0022     		movs	r2, #0
 1222 0146 1A70     		strb	r2, [r3]
 537:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1223              		.loc 1 537 27
 1224 0148 7B6A     		ldr	r3, [r7, #36]
 1225 014a 43F40033 		orr	r3, r3, #131072
 1226              		.loc 1 537 68
 1227 014e FA69     		ldr	r2, [r7, #28]
 1228 0150 D2B2     		uxtb	r2, r2
 1229              		.loc 1 537 66
 1230 0152 1A70     		strb	r2, [r3]
 538:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1231              		.loc 1 538 68
 1232 0154 FB69     		ldr	r3, [r7, #28]
 1233 0156 1A0A     		lsrs	r2, r3, #8
 1234              		.loc 1 538 27
 1235 0158 7B6A     		ldr	r3, [r7, #36]
 1236 015a 43F40033 		orr	r3, r3, #131072
 1237              		.loc 1 538 68
 1238 015e D2B2     		uxtb	r2, r2
 1239              		.loc 1 538 66
 1240 0160 1A70     		strb	r2, [r3]
 1241 0162 1DE0     		b	.L55
 1242              	.L56:
 539:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 540:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 541:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 542:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1243              		.loc 1 542 27
ARM GAS  /tmp/ccmBJYMF.s 			page 32


 1244 0164 7B6A     		ldr	r3, [r7, #36]
 1245 0166 43F40033 		orr	r3, r3, #131072
 1246              		.loc 1 542 66
 1247 016a 0022     		movs	r2, #0
 1248 016c 1A70     		strb	r2, [r3]
 543:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1249              		.loc 1 543 27
 1250 016e 7B6A     		ldr	r3, [r7, #36]
 1251 0170 43F40033 		orr	r3, r3, #131072
 1252              		.loc 1 543 66
 1253 0174 0022     		movs	r2, #0
 1254 0176 1A70     		strb	r2, [r3]
 544:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1255              		.loc 1 544 27
 1256 0178 7B6A     		ldr	r3, [r7, #36]
 1257 017a 43F40033 		orr	r3, r3, #131072
 1258              		.loc 1 544 68
 1259 017e FA69     		ldr	r2, [r7, #28]
 1260 0180 D2B2     		uxtb	r2, r2
 1261              		.loc 1 544 66
 1262 0182 1A70     		strb	r2, [r3]
 545:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1263              		.loc 1 545 68
 1264 0184 FB69     		ldr	r3, [r7, #28]
 1265 0186 1A0A     		lsrs	r2, r3, #8
 1266              		.loc 1 545 27
 1267 0188 7B6A     		ldr	r3, [r7, #36]
 1268 018a 43F40033 		orr	r3, r3, #131072
 1269              		.loc 1 545 68
 1270 018e D2B2     		uxtb	r2, r2
 1271              		.loc 1 545 66
 1272 0190 1A70     		strb	r2, [r3]
 546:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 1273              		.loc 1 546 68
 1274 0192 FB69     		ldr	r3, [r7, #28]
 1275 0194 1A0C     		lsrs	r2, r3, #16
 1276              		.loc 1 546 27
 1277 0196 7B6A     		ldr	r3, [r7, #36]
 1278 0198 43F40033 		orr	r3, r3, #131072
 1279              		.loc 1 546 68
 1280 019c D2B2     		uxtb	r2, r2
 1281              		.loc 1 546 66
 1282 019e 1A70     		strb	r2, [r3]
 1283              	.L55:
 547:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 548:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 549:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 550:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 1284              		.loc 1 550 23
 1285 01a0 7B6A     		ldr	r3, [r7, #36]
 1286 01a2 43F48033 		orr	r3, r3, #65536
 1287              		.loc 1 550 62
 1288 01a6 3022     		movs	r2, #48
 1289 01a8 1A70     		strb	r2, [r3]
 551:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
 552:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Check if an extra command is needed for reading pages  */
 553:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
ARM GAS  /tmp/ccmBJYMF.s 			page 33


 1290              		.loc 1 553 21
 1291 01aa FB68     		ldr	r3, [r7, #12]
 1292 01ac 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1293              		.loc 1 553 7
 1294 01b0 012B     		cmp	r3, #1
 1295 01b2 25D1     		bne	.L60
 554:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 555:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
 556:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 1296              		.loc 1 556 19
 1297 01b4 FFF7FEFF 		bl	HAL_GetTick
 1298 01b8 B861     		str	r0, [r7, #24]
 557:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
 558:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Read status until NAND is ready */
 559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 1299              		.loc 1 559 12
 1300 01ba 09E0     		b	.L58
 1301              	.L59:
 560:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 561:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 1302              		.loc 1 561 13
 1303 01bc FFF7FEFF 		bl	HAL_GetTick
 1304 01c0 0246     		mov	r2, r0
 1305              		.loc 1 561 27
 1306 01c2 BB69     		ldr	r3, [r7, #24]
 1307 01c4 D31A     		subs	r3, r2, r3
 1308              		.loc 1 561 11
 1309 01c6 B3F1807F 		cmp	r3, #16777216
 1310 01ca 01D9     		bls	.L58
 562:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         {
 563:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           return HAL_TIMEOUT; 
 1311              		.loc 1 563 18
 1312 01cc 0323     		movs	r3, #3
 1313 01ce 3AE0     		b	.L48
 1314              	.L58:
 559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 1315              		.loc 1 559 13
 1316 01d0 F868     		ldr	r0, [r7, #12]
 1317 01d2 FFF7FEFF 		bl	HAL_NAND_Read_Status
 1318 01d6 0346     		mov	r3, r0
 559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 1319              		.loc 1 559 12
 1320 01d8 402B     		cmp	r3, #64
 1321 01da EFD1     		bne	.L59
 564:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         }
 565:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 566:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
 567:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Go back to read mode */
 568:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 1322              		.loc 1 568 25
 1323 01dc 7B6A     		ldr	r3, [r7, #36]
 1324 01de 43F48033 		orr	r3, r3, #65536
 1325              		.loc 1 568 63
 1326 01e2 0022     		movs	r2, #0
 1327 01e4 1A70     		strb	r2, [r3]
 1328              	.LBB14:
 1329              	.LBB15:
ARM GAS  /tmp/ccmBJYMF.s 			page 34


 1330              		.file 2 "./Libraries/CMSIS/Include/cmsis_gcc.h"
   1:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:./Libraries/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:./Libraries/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:./Libraries/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:./Libraries/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:./Libraries/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:./Libraries/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
   9:./Libraries/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:./Libraries/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:./Libraries/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:./Libraries/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:./Libraries/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:./Libraries/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:./Libraries/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:./Libraries/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:./Libraries/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:./Libraries/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:./Libraries/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:./Libraries/CMSIS/Include/cmsis_gcc.h ****    *
  21:./Libraries/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:./Libraries/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:./Libraries/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:./Libraries/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:./Libraries/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:./Libraries/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:./Libraries/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:./Libraries/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:./Libraries/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:./Libraries/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:./Libraries/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:./Libraries/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  34:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  35:./Libraries/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:./Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  38:./Libraries/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:./Libraries/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:./Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:./Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:./Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:./Libraries/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:./Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
  45:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  46:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  47:./Libraries/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:./Libraries/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:./Libraries/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:./Libraries/CMSIS/Include/cmsis_gcc.h ****   @{
  51:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  52:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  53:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
  54:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:./Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
ARM GAS  /tmp/ccmBJYMF.s 			page 35


  57:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  58:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
  60:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
  62:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  63:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  64:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
  65:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:./Libraries/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  69:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
  71:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
  73:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  74:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  75:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
  76:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  80:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
  82:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  84:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
  87:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  88:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  89:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
  90:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
  94:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
  96:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
  98:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
  99:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 100:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 101:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 105:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 107:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 109:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 112:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 113:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmBJYMF.s 			page 36


 114:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 115:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 119:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 121:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 123:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 126:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 127:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 128:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 129:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 132:./Libraries/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 134:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 136:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 138:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 141:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 142:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 143:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 144:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 148:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 150:./Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 152:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 155:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 156:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 157:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 158:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 162:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 164:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 166:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 167:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 168:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 169:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
ARM GAS  /tmp/ccmBJYMF.s 			page 37


 171:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 173:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 175:./Libraries/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 177:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 180:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 181:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 182:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 183:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 186:./Libraries/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 188:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 190:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 192:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 193:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 194:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 195:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 199:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 201:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 203:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 206:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 207:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 208:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 209:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 213:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 215:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 217:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 218:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 219:./Libraries/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 221:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 222:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:./Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 226:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccmBJYMF.s 			page 38


 228:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 230:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 231:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 232:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 233:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:./Libraries/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 237:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 239:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 241:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 242:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 243:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 244:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 248:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 250:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 252:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 255:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 256:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 257:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 258:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 262:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 264:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 266:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 267:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 268:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 269:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:./Libraries/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 274:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 276:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 278:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 279:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 280:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 281:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccmBJYMF.s 			page 39


 285:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 287:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 289:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 292:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 293:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 294:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 295:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 299:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 301:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 303:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 304:./Libraries/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 306:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 307:./Libraries/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 309:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 310:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 314:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 316:./Libraries/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:./Libraries/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 319:./Libraries/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:./Libraries/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:./Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 325:./Libraries/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:./Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 327:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 328:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 329:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 330:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 331:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 335:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 337:./Libraries/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:./Libraries/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
ARM GAS  /tmp/ccmBJYMF.s 			page 40


 342:./Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 343:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 344:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 345:./Libraries/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 347:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 348:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 349:./Libraries/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 351:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 352:./Libraries/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:./Libraries/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:./Libraries/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:./Libraries/CMSIS/Include/cmsis_gcc.h ****   @{
 356:./Libraries/CMSIS/Include/cmsis_gcc.h **** */
 357:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 358:./Libraries/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:./Libraries/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:./Libraries/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:./Libraries/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:./Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:./Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:./Libraries/CMSIS/Include/cmsis_gcc.h **** #else
 365:./Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:./Libraries/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:./Libraries/CMSIS/Include/cmsis_gcc.h **** #endif
 368:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 369:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 370:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 373:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 375:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 377:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 378:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 379:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 380:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 383:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 385:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 387:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 388:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 389:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 390:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:./Libraries/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 394:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 396:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 398:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmBJYMF.s 			page 41


 399:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 400:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 401:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 404:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 406:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 408:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 409:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 410:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 411:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:./Libraries/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:./Libraries/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 416:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 418:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 420:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 421:./Libraries/CMSIS/Include/cmsis_gcc.h **** 
 422:./Libraries/CMSIS/Include/cmsis_gcc.h **** /**
 423:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:./Libraries/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:./Libraries/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:./Libraries/CMSIS/Include/cmsis_gcc.h ****  */
 427:./Libraries/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:./Libraries/CMSIS/Include/cmsis_gcc.h **** {
 429:./Libraries/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1331              		.loc 2 429 3
 1332              		.syntax unified
 1333              	@ 429 "./Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1334 01e6 BFF34F8F 		dsb 0xF
 1335              	@ 0 "" 2
 430:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 1336              		.loc 2 430 1
 1337              		.thumb
 1338              		.syntax unified
 1339 01ea 00BF     		nop
 1340              	.LBE15:
 1341              	.LBE14:
 569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       __DSB();
 570:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 571:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 572:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Get Data into Buffer */    
 573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 1342              		.loc 1 573 5
 1343 01ec 08E0     		b	.L60
 1344              	.L61:
 574:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 575:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 1345              		.loc 1 575 32 discriminator 2
 1346 01ee 7A6A     		ldr	r2, [r7, #36]
 1347              		.loc 1 575 8 discriminator 2
 1348 01f0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccmBJYMF.s 			page 42


 1349 01f2 591C     		adds	r1, r3, #1
 1350 01f4 7960     		str	r1, [r7, #4]
 1351              		.loc 1 575 31 discriminator 2
 1352 01f6 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1353              		.loc 1 575 29 discriminator 2
 1354 01f8 1A70     		strb	r2, [r3]
 573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 1355              		.loc 1 573 30 discriminator 2
 1356 01fa 3B69     		ldr	r3, [r7, #16]
 1357 01fc 0133     		adds	r3, r3, #1
 1358 01fe 3B61     		str	r3, [r7, #16]
 1359              	.L60:
 573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 1360              		.loc 1 573 17 discriminator 1
 1361 0200 3B69     		ldr	r3, [r7, #16]
 573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 1362              		.loc 1 573 5 discriminator 1
 1363 0202 7A69     		ldr	r2, [r7, #20]
 1364 0204 9A42     		cmp	r2, r3
 1365 0206 F2D8     		bhi	.L61
 576:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 577:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 578:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment read pages number */
 579:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numPagesRead++;
 1366              		.loc 1 579 17
 1367 0208 3B6A     		ldr	r3, [r7, #32]
 1368 020a 0133     		adds	r3, r3, #1
 1369 020c 3B62     		str	r3, [r7, #32]
 580:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 581:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement pages to read */
 582:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumPageToRead--;
 1370              		.loc 1 582 18
 1371 020e 3B68     		ldr	r3, [r7]
 1372 0210 013B     		subs	r3, r3, #1
 1373 0212 3B60     		str	r3, [r7]
 583:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 584:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
 585:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 1374              		.loc 1 585 17
 1375 0214 FB69     		ldr	r3, [r7, #28]
 1376 0216 0133     		adds	r3, r3, #1
 1377 0218 FB61     		str	r3, [r7, #28]
 1378              	.L52:
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1379              		.loc 1 506 8
 1380 021a 3B68     		ldr	r3, [r7]
 1381 021c 002B     		cmp	r3, #0
 1382 021e 09D0     		beq	.L62
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1383              		.loc 1 506 64 discriminator 1
 1384 0220 FB68     		ldr	r3, [r7, #12]
 1385 0222 DB6A     		ldr	r3, [r3, #44]
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1386              		.loc 1 506 92 discriminator 1
 1387 0224 FA68     		ldr	r2, [r7, #12]
 1388 0226 126B     		ldr	r2, [r2, #48]
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
ARM GAS  /tmp/ccmBJYMF.s 			page 43


 1389              		.loc 1 506 76 discriminator 1
 1390 0228 02FB03F3 		mul	r3, r2, r3
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1391              		.loc 1 506 31 discriminator 1
 1392 022c FA69     		ldr	r2, [r7, #28]
 1393 022e 9A42     		cmp	r2, r3
 1394 0230 FFF430AF 		bcc	.L63
 1395              	.L62:
 586:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 587:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 588:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
 589:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 1396              		.loc 1 589 16
 1397 0234 FB68     		ldr	r3, [r7, #12]
 1398 0236 0122     		movs	r2, #1
 1399 0238 83F82120 		strb	r2, [r3, #33]
 590:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 591:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
 592:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 1400              		.loc 1 592 3
 1401 023c FB68     		ldr	r3, [r7, #12]
 1402 023e 0022     		movs	r2, #0
 1403 0240 83F82020 		strb	r2, [r3, #32]
 593:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 594:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 1404              		.loc 1 594 10
 1405 0244 0023     		movs	r3, #0
 1406              	.L48:
 595:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 1407              		.loc 1 595 1
 1408 0246 1846     		mov	r0, r3
 1409 0248 2837     		adds	r7, r7, #40
 1410              	.LCFI54:
 1411              		.cfi_def_cfa_offset 8
 1412 024a BD46     		mov	sp, r7
 1413              	.LCFI55:
 1414              		.cfi_def_cfa_register 13
 1415              		@ sp needed
 1416 024c 80BD     		pop	{r7, pc}
 1417              		.cfi_endproc
 1418              	.LFE135:
 1420              		.section	.text.HAL_NAND_Read_Page_16b,"ax",%progbits
 1421              		.align	1
 1422              		.global	HAL_NAND_Read_Page_16b
 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
 1426              		.fpu fpv4-sp-d16
 1428              	HAL_NAND_Read_Page_16b:
 1429              	.LFB136:
 596:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 597:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 598:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Read Page(s) from NAND memory block (16-bits addressing)
 599:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 600:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 601:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 602:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer  pointer to destination read buffer. pBuffer should be 16bits aligned
ARM GAS  /tmp/ccmBJYMF.s 			page 44


 603:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumPageToRead  number of pages to read from block 
 604:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 605:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 606:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_Page_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, 
 607:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {   
 1430              		.loc 1 607 1
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 40
 1433              		@ frame_needed = 1, uses_anonymous_args = 0
 1434 0000 80B5     		push	{r7, lr}
 1435              	.LCFI56:
 1436              		.cfi_def_cfa_offset 8
 1437              		.cfi_offset 7, -8
 1438              		.cfi_offset 14, -4
 1439 0002 8AB0     		sub	sp, sp, #40
 1440              	.LCFI57:
 1441              		.cfi_def_cfa_offset 48
 1442 0004 00AF     		add	r7, sp, #0
 1443              	.LCFI58:
 1444              		.cfi_def_cfa_register 7
 1445 0006 F860     		str	r0, [r7, #12]
 1446 0008 B960     		str	r1, [r7, #8]
 1447 000a 7A60     		str	r2, [r7, #4]
 1448 000c 3B60     		str	r3, [r7]
 608:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index  = 0U;
 1449              		.loc 1 608 17
 1450 000e 0023     		movs	r3, #0
 1451 0010 3B61     		str	r3, [r7, #16]
 609:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 1452              		.loc 1 609 12
 1453 0012 0023     		movs	r3, #0
 1454 0014 BB61     		str	r3, [r7, #24]
 610:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 1455              		.loc 1 610 12
 1456 0016 0023     		movs	r3, #0
 1457 0018 7B62     		str	r3, [r7, #36]
 1458              		.loc 1 610 32
 1459 001a 0023     		movs	r3, #0
 1460 001c 7B61     		str	r3, [r7, #20]
 1461              		.loc 1 610 43
 1462 001e 0023     		movs	r3, #0
 1463 0020 3B62     		str	r3, [r7, #32]
 1464              		.loc 1 610 62
 1465 0022 0023     		movs	r3, #0
 1466 0024 FB61     		str	r3, [r7, #28]
 611:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 612:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 613:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand); 
 1467              		.loc 1 613 3
 1468 0026 FB68     		ldr	r3, [r7, #12]
 1469 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1470 002c 012B     		cmp	r3, #1
 1471 002e 01D1     		bne	.L65
 1472              		.loc 1 613 3 is_stmt 0 discriminator 1
 1473 0030 0223     		movs	r3, #2
 1474 0032 08E1     		b	.L66
 1475              	.L65:
ARM GAS  /tmp/ccmBJYMF.s 			page 45


 1476              		.loc 1 613 3 discriminator 2
 1477 0034 FB68     		ldr	r3, [r7, #12]
 1478 0036 0122     		movs	r2, #1
 1479 0038 83F82020 		strb	r2, [r3, #32]
 614:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 615:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
 616:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 1480              		.loc 1 616 11 is_stmt 1 discriminator 2
 1481 003c FB68     		ldr	r3, [r7, #12]
 1482 003e 93F82130 		ldrb	r3, [r3, #33]
 1483 0042 DBB2     		uxtb	r3, r3
 1484              		.loc 1 616 5 discriminator 2
 1485 0044 022B     		cmp	r3, #2
 1486 0046 01D1     		bne	.L67
 617:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 618:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 1487              		.loc 1 618 13
 1488 0048 0223     		movs	r3, #2
 1489 004a FCE0     		b	.L66
 1490              	.L67:
 619:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 620:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 621:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
 622:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 1491              		.loc 1 622 17
 1492 004c FB68     		ldr	r3, [r7, #12]
 1493 004e 5B68     		ldr	r3, [r3, #4]
 1494              		.loc 1 622 5
 1495 0050 102B     		cmp	r3, #16
 1496 0052 03D1     		bne	.L68
 623:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 624:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 1497              		.loc 1 624 19
 1498 0054 4FF0E043 		mov	r3, #1879048192
 1499 0058 7B62     		str	r3, [r7, #36]
 1500 005a 02E0     		b	.L69
 1501              	.L68:
 625:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 626:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 627:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 628:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 1502              		.loc 1 628 19
 1503 005c 4FF00043 		mov	r3, #-2147483648
 1504 0060 7B62     		str	r3, [r7, #36]
 1505              	.L69:
 629:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 630:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 631:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 632:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 1506              		.loc 1 632 16
 1507 0062 FB68     		ldr	r3, [r7, #12]
 1508 0064 0222     		movs	r2, #2
 1509 0066 83F82120 		strb	r2, [r3, #33]
 633:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 634:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
 635:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 1510              		.loc 1 635 17
ARM GAS  /tmp/ccmBJYMF.s 			page 46


 1511 006a BB68     		ldr	r3, [r7, #8]
 1512 006c 1B88     		ldrh	r3, [r3]
 1513 006e 1946     		mov	r1, r3
 1514 0070 BB68     		ldr	r3, [r7, #8]
 1515 0072 9B88     		ldrh	r3, [r3, #4]
 1516 0074 1A46     		mov	r2, r3
 1517 0076 BB68     		ldr	r3, [r7, #8]
 1518 0078 5B88     		ldrh	r3, [r3, #2]
 1519 007a 1846     		mov	r0, r3
 1520 007c FB68     		ldr	r3, [r7, #12]
 1521 007e 9B6B     		ldr	r3, [r3, #56]
 1522 0080 00FB03F3 		mul	r3, r0, r3
 1523 0084 1344     		add	r3, r3, r2
 1524 0086 FA68     		ldr	r2, [r7, #12]
 1525 0088 D26A     		ldr	r2, [r2, #44]
 1526 008a 02FB03F3 		mul	r3, r2, r3
 1527              		.loc 1 635 15
 1528 008e 0B44     		add	r3, r3, r1
 1529 0090 FB61     		str	r3, [r7, #28]
 636:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 637:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Page(s) read loop */  
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNb
 1530              		.loc 1 638 8
 1531 0092 C2E0     		b	.L70
 1532              	.L81:
 639:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 640:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
 641:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 1533              		.loc 1 641 37
 1534 0094 3B6A     		ldr	r3, [r7, #32]
 1535 0096 0133     		adds	r3, r3, #1
 1536              		.loc 1 641 26
 1537 0098 FA68     		ldr	r2, [r7, #12]
 1538 009a 526A     		ldr	r2, [r2, #36]
 1539              		.loc 1 641 10
 1540 009c 02FB03F3 		mul	r3, r2, r3
 1541 00a0 7B61     		str	r3, [r7, #20]
 642:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 643:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Send read page command sequence */
 644:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;  
 1542              		.loc 1 644 23
 1543 00a2 7B6A     		ldr	r3, [r7, #36]
 1544 00a4 43F48033 		orr	r3, r3, #65536
 1545              		.loc 1 644 61
 1546 00a8 0022     		movs	r2, #0
 1547 00aa 1A70     		strb	r2, [r3]
 1548              	.LBB16:
 1549              	.LBB17:
 429:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 1550              		.loc 2 429 3
 1551              		.syntax unified
 1552              	@ 429 "./Libraries/CMSIS/Include/cmsis_gcc.h" 1
 1553 00ac BFF34F8F 		dsb 0xF
 1554              	@ 0 "" 2
 1555              		.loc 2 430 1
 1556              		.thumb
 1557              		.syntax unified
ARM GAS  /tmp/ccmBJYMF.s 			page 47


 1558 00b0 00BF     		nop
 1559              	.LBE17:
 1560              	.LBE16:
 645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __DSB();
 646:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 647:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 648:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 1561              		.loc 1 648 22
 1562 00b2 FB68     		ldr	r3, [r7, #12]
 1563 00b4 5B6A     		ldr	r3, [r3, #36]
 1564              		.loc 1 648 7
 1565 00b6 B3F5007F 		cmp	r3, #512
 1566 00ba 35D8     		bhi	.L71
 649:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 650:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 1567              		.loc 1 650 26
 1568 00bc FB68     		ldr	r3, [r7, #12]
 1569 00be DB6A     		ldr	r3, [r3, #44]
 1570              		.loc 1 650 52
 1571 00c0 FA68     		ldr	r2, [r7, #12]
 1572 00c2 126B     		ldr	r2, [r2, #48]
 1573              		.loc 1 650 37
 1574 00c4 02FB03F3 		mul	r3, r2, r3
 1575              		.loc 1 650 10
 1576 00c8 B3F5803F 		cmp	r3, #65536
 1577 00cc 12D2     		bcs	.L72
 651:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 652:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1578              		.loc 1 652 27
 1579 00ce 7B6A     		ldr	r3, [r7, #36]
 1580 00d0 43F40033 		orr	r3, r3, #131072
 1581              		.loc 1 652 66
 1582 00d4 0022     		movs	r2, #0
 1583 00d6 1A70     		strb	r2, [r3]
 653:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1584              		.loc 1 653 27
 1585 00d8 7B6A     		ldr	r3, [r7, #36]
 1586 00da 43F40033 		orr	r3, r3, #131072
 1587              		.loc 1 653 68
 1588 00de FA69     		ldr	r2, [r7, #28]
 1589 00e0 D2B2     		uxtb	r2, r2
 1590              		.loc 1 653 66
 1591 00e2 1A70     		strb	r2, [r3]
 654:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1592              		.loc 1 654 68
 1593 00e4 FB69     		ldr	r3, [r7, #28]
 1594 00e6 1A0A     		lsrs	r2, r3, #8
 1595              		.loc 1 654 27
 1596 00e8 7B6A     		ldr	r3, [r7, #36]
 1597 00ea 43F40033 		orr	r3, r3, #131072
 1598              		.loc 1 654 68
 1599 00ee D2B2     		uxtb	r2, r2
 1600              		.loc 1 654 66
 1601 00f0 1A70     		strb	r2, [r3]
 1602 00f2 58E0     		b	.L73
 1603              	.L72:
 655:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
ARM GAS  /tmp/ccmBJYMF.s 			page 48


 656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 657:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 658:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1604              		.loc 1 658 27
 1605 00f4 7B6A     		ldr	r3, [r7, #36]
 1606 00f6 43F40033 		orr	r3, r3, #131072
 1607              		.loc 1 658 66
 1608 00fa 0022     		movs	r2, #0
 1609 00fc 1A70     		strb	r2, [r3]
 659:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1610              		.loc 1 659 27
 1611 00fe 7B6A     		ldr	r3, [r7, #36]
 1612 0100 43F40033 		orr	r3, r3, #131072
 1613              		.loc 1 659 68
 1614 0104 FA69     		ldr	r2, [r7, #28]
 1615 0106 D2B2     		uxtb	r2, r2
 1616              		.loc 1 659 66
 1617 0108 1A70     		strb	r2, [r3]
 660:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1618              		.loc 1 660 68
 1619 010a FB69     		ldr	r3, [r7, #28]
 1620 010c 1A0A     		lsrs	r2, r3, #8
 1621              		.loc 1 660 27
 1622 010e 7B6A     		ldr	r3, [r7, #36]
 1623 0110 43F40033 		orr	r3, r3, #131072
 1624              		.loc 1 660 68
 1625 0114 D2B2     		uxtb	r2, r2
 1626              		.loc 1 660 66
 1627 0116 1A70     		strb	r2, [r3]
 661:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 1628              		.loc 1 661 68
 1629 0118 FB69     		ldr	r3, [r7, #28]
 1630 011a 1A0C     		lsrs	r2, r3, #16
 1631              		.loc 1 661 27
 1632 011c 7B6A     		ldr	r3, [r7, #36]
 1633 011e 43F40033 		orr	r3, r3, #131072
 1634              		.loc 1 661 68
 1635 0122 D2B2     		uxtb	r2, r2
 1636              		.loc 1 661 66
 1637 0124 1A70     		strb	r2, [r3]
 1638 0126 3EE0     		b	.L73
 1639              	.L71:
 662:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 663:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 664:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 665:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 666:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 1640              		.loc 1 666 26
 1641 0128 FB68     		ldr	r3, [r7, #12]
 1642 012a DB6A     		ldr	r3, [r3, #44]
 1643              		.loc 1 666 52
 1644 012c FA68     		ldr	r2, [r7, #12]
 1645 012e 126B     		ldr	r2, [r2, #48]
 1646              		.loc 1 666 37
 1647 0130 02FB03F3 		mul	r3, r2, r3
 1648              		.loc 1 666 10
 1649 0134 B3F5803F 		cmp	r3, #65536
ARM GAS  /tmp/ccmBJYMF.s 			page 49


 1650 0138 17D2     		bcs	.L74
 667:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 668:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1651              		.loc 1 668 27
 1652 013a 7B6A     		ldr	r3, [r7, #36]
 1653 013c 43F40033 		orr	r3, r3, #131072
 1654              		.loc 1 668 66
 1655 0140 0022     		movs	r2, #0
 1656 0142 1A70     		strb	r2, [r3]
 669:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1657              		.loc 1 669 27
 1658 0144 7B6A     		ldr	r3, [r7, #36]
 1659 0146 43F40033 		orr	r3, r3, #131072
 1660              		.loc 1 669 66
 1661 014a 0022     		movs	r2, #0
 1662 014c 1A70     		strb	r2, [r3]
 670:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1663              		.loc 1 670 27
 1664 014e 7B6A     		ldr	r3, [r7, #36]
 1665 0150 43F40033 		orr	r3, r3, #131072
 1666              		.loc 1 670 68
 1667 0154 FA69     		ldr	r2, [r7, #28]
 1668 0156 D2B2     		uxtb	r2, r2
 1669              		.loc 1 670 66
 1670 0158 1A70     		strb	r2, [r3]
 671:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1671              		.loc 1 671 68
 1672 015a FB69     		ldr	r3, [r7, #28]
 1673 015c 1A0A     		lsrs	r2, r3, #8
 1674              		.loc 1 671 27
 1675 015e 7B6A     		ldr	r3, [r7, #36]
 1676 0160 43F40033 		orr	r3, r3, #131072
 1677              		.loc 1 671 68
 1678 0164 D2B2     		uxtb	r2, r2
 1679              		.loc 1 671 66
 1680 0166 1A70     		strb	r2, [r3]
 1681 0168 1DE0     		b	.L73
 1682              	.L74:
 672:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 673:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 674:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 675:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1683              		.loc 1 675 27
 1684 016a 7B6A     		ldr	r3, [r7, #36]
 1685 016c 43F40033 		orr	r3, r3, #131072
 1686              		.loc 1 675 66
 1687 0170 0022     		movs	r2, #0
 1688 0172 1A70     		strb	r2, [r3]
 676:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1689              		.loc 1 676 27
 1690 0174 7B6A     		ldr	r3, [r7, #36]
 1691 0176 43F40033 		orr	r3, r3, #131072
 1692              		.loc 1 676 66
 1693 017a 0022     		movs	r2, #0
 1694 017c 1A70     		strb	r2, [r3]
 677:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 1695              		.loc 1 677 27
ARM GAS  /tmp/ccmBJYMF.s 			page 50


 1696 017e 7B6A     		ldr	r3, [r7, #36]
 1697 0180 43F40033 		orr	r3, r3, #131072
 1698              		.loc 1 677 68
 1699 0184 FA69     		ldr	r2, [r7, #28]
 1700 0186 D2B2     		uxtb	r2, r2
 1701              		.loc 1 677 66
 1702 0188 1A70     		strb	r2, [r3]
 678:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 1703              		.loc 1 678 68
 1704 018a FB69     		ldr	r3, [r7, #28]
 1705 018c 1A0A     		lsrs	r2, r3, #8
 1706              		.loc 1 678 27
 1707 018e 7B6A     		ldr	r3, [r7, #36]
 1708 0190 43F40033 		orr	r3, r3, #131072
 1709              		.loc 1 678 68
 1710 0194 D2B2     		uxtb	r2, r2
 1711              		.loc 1 678 66
 1712 0196 1A70     		strb	r2, [r3]
 679:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 1713              		.loc 1 679 68
 1714 0198 FB69     		ldr	r3, [r7, #28]
 1715 019a 1A0C     		lsrs	r2, r3, #16
 1716              		.loc 1 679 27
 1717 019c 7B6A     		ldr	r3, [r7, #36]
 1718 019e 43F40033 		orr	r3, r3, #131072
 1719              		.loc 1 679 68
 1720 01a2 D2B2     		uxtb	r2, r2
 1721              		.loc 1 679 66
 1722 01a4 1A70     		strb	r2, [r3]
 1723              	.L73:
 680:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 681:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 682:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 683:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 1724              		.loc 1 683 23
 1725 01a6 7B6A     		ldr	r3, [r7, #36]
 1726 01a8 43F48033 		orr	r3, r3, #65536
 1727              		.loc 1 683 62
 1728 01ac 3022     		movs	r2, #48
 1729 01ae 1A70     		strb	r2, [r3]
 684:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 685:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
 1730              		.loc 1 685 21
 1731 01b0 FB68     		ldr	r3, [r7, #12]
 1732 01b2 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 1733              		.loc 1 685 7
 1734 01b6 012B     		cmp	r3, #1
 1735 01b8 22D1     		bne	.L78
 686:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 687:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
 688:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 1736              		.loc 1 688 19
 1737 01ba FFF7FEFF 		bl	HAL_GetTick
 1738 01be B861     		str	r0, [r7, #24]
 689:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
 690:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Read status until NAND is ready */
 691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
ARM GAS  /tmp/ccmBJYMF.s 			page 51


 1739              		.loc 1 691 12
 1740 01c0 09E0     		b	.L76
 1741              	.L77:
 692:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 693:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 1742              		.loc 1 693 13
 1743 01c2 FFF7FEFF 		bl	HAL_GetTick
 1744 01c6 0246     		mov	r2, r0
 1745              		.loc 1 693 27
 1746 01c8 BB69     		ldr	r3, [r7, #24]
 1747 01ca D31A     		subs	r3, r2, r3
 1748              		.loc 1 693 11
 1749 01cc B3F1807F 		cmp	r3, #16777216
 1750 01d0 01D9     		bls	.L76
 694:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         {
 695:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           return HAL_TIMEOUT; 
 1751              		.loc 1 695 18
 1752 01d2 0323     		movs	r3, #3
 1753 01d4 37E0     		b	.L66
 1754              	.L76:
 691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 1755              		.loc 1 691 13
 1756 01d6 F868     		ldr	r0, [r7, #12]
 1757 01d8 FFF7FEFF 		bl	HAL_NAND_Read_Status
 1758 01dc 0346     		mov	r3, r0
 691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 1759              		.loc 1 691 12
 1760 01de 402B     		cmp	r3, #64
 1761 01e0 EFD1     		bne	.L77
 696:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         }
 697:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 698:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
 699:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Go back to read mode */
 700:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 1762              		.loc 1 700 25
 1763 01e2 7B6A     		ldr	r3, [r7, #36]
 1764 01e4 43F48033 		orr	r3, r3, #65536
 1765              		.loc 1 700 63
 1766 01e8 0022     		movs	r2, #0
 1767 01ea 1A70     		strb	r2, [r3]
 701:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 702:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 703:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Get Data into Buffer */    
 704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 1768              		.loc 1 704 5
 1769 01ec 08E0     		b	.L78
 1770              	.L79:
 705:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 706:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(uint16_t *)pBuffer++ = *(uint16_t *)deviceaddress;
 1771              		.loc 1 706 33 discriminator 2
 1772 01ee 7A6A     		ldr	r2, [r7, #36]
 1773              		.loc 1 706 8 discriminator 2
 1774 01f0 7B68     		ldr	r3, [r7, #4]
 1775 01f2 991C     		adds	r1, r3, #2
 1776 01f4 7960     		str	r1, [r7, #4]
 1777              		.loc 1 706 32 discriminator 2
 1778 01f6 1288     		ldrh	r2, [r2]
ARM GAS  /tmp/ccmBJYMF.s 			page 52


 1779              		.loc 1 706 30 discriminator 2
 1780 01f8 1A80     		strh	r2, [r3]	@ movhi
 704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 1781              		.loc 1 704 30 discriminator 2
 1782 01fa 3B69     		ldr	r3, [r7, #16]
 1783 01fc 0133     		adds	r3, r3, #1
 1784 01fe 3B61     		str	r3, [r7, #16]
 1785              	.L78:
 704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 1786              		.loc 1 704 17 discriminator 1
 1787 0200 3B69     		ldr	r3, [r7, #16]
 704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 1788              		.loc 1 704 5 discriminator 1
 1789 0202 7A69     		ldr	r2, [r7, #20]
 1790 0204 9A42     		cmp	r2, r3
 1791 0206 F2D8     		bhi	.L79
 707:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 708:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 709:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment read pages number */
 710:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numPagesRead++;
 1792              		.loc 1 710 17
 1793 0208 3B6A     		ldr	r3, [r7, #32]
 1794 020a 0133     		adds	r3, r3, #1
 1795 020c 3B62     		str	r3, [r7, #32]
 711:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 712:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement pages to read */
 713:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumPageToRead--;
 1796              		.loc 1 713 18
 1797 020e 3B68     		ldr	r3, [r7]
 1798 0210 013B     		subs	r3, r3, #1
 1799 0212 3B60     		str	r3, [r7]
 714:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 715:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
 716:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 1800              		.loc 1 716 17
 1801 0214 FB69     		ldr	r3, [r7, #28]
 1802 0216 0133     		adds	r3, r3, #1
 1803 0218 FB61     		str	r3, [r7, #28]
 1804              	.L70:
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1805              		.loc 1 638 8
 1806 021a 3B68     		ldr	r3, [r7]
 1807 021c 002B     		cmp	r3, #0
 1808 021e 09D0     		beq	.L80
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1809              		.loc 1 638 64 discriminator 1
 1810 0220 FB68     		ldr	r3, [r7, #12]
 1811 0222 DB6A     		ldr	r3, [r3, #44]
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1812              		.loc 1 638 92 discriminator 1
 1813 0224 FA68     		ldr	r2, [r7, #12]
 1814 0226 126B     		ldr	r2, [r2, #48]
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1815              		.loc 1 638 76 discriminator 1
 1816 0228 02FB03F3 		mul	r3, r2, r3
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 1817              		.loc 1 638 31 discriminator 1
ARM GAS  /tmp/ccmBJYMF.s 			page 53


 1818 022c FA69     		ldr	r2, [r7, #28]
 1819 022e 9A42     		cmp	r2, r3
 1820 0230 FFF430AF 		bcc	.L81
 1821              	.L80:
 717:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 718:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 719:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 720:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 1822              		.loc 1 720 16
 1823 0234 FB68     		ldr	r3, [r7, #12]
 1824 0236 0122     		movs	r2, #1
 1825 0238 83F82120 		strb	r2, [r3, #33]
 721:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 722:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
 723:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);  
 1826              		.loc 1 723 3
 1827 023c FB68     		ldr	r3, [r7, #12]
 1828 023e 0022     		movs	r2, #0
 1829 0240 83F82020 		strb	r2, [r3, #32]
 724:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 725:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 1830              		.loc 1 725 10
 1831 0244 0023     		movs	r3, #0
 1832              	.L66:
 726:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 1833              		.loc 1 726 1
 1834 0246 1846     		mov	r0, r3
 1835 0248 2837     		adds	r7, r7, #40
 1836              	.LCFI59:
 1837              		.cfi_def_cfa_offset 8
 1838 024a BD46     		mov	sp, r7
 1839              	.LCFI60:
 1840              		.cfi_def_cfa_register 13
 1841              		@ sp needed
 1842 024c 80BD     		pop	{r7, pc}
 1843              		.cfi_endproc
 1844              	.LFE136:
 1846              		.section	.text.HAL_NAND_Write_Page_8b,"ax",%progbits
 1847              		.align	1
 1848              		.global	HAL_NAND_Write_Page_8b
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1852              		.fpu fpv4-sp-d16
 1854              	HAL_NAND_Write_Page_8b:
 1855              	.LFB137:
 727:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 728:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 729:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Write Page(s) to NAND memory block (8-bits addressing)
 730:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 731:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 732:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 733:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write  
 734:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumPageToWrite   number of pages to write to block 
 735:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 736:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 737:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, 
ARM GAS  /tmp/ccmBJYMF.s 			page 54


 738:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 1856              		.loc 1 738 1
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 40
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860 0000 80B5     		push	{r7, lr}
 1861              	.LCFI61:
 1862              		.cfi_def_cfa_offset 8
 1863              		.cfi_offset 7, -8
 1864              		.cfi_offset 14, -4
 1865 0002 8AB0     		sub	sp, sp, #40
 1866              	.LCFI62:
 1867              		.cfi_def_cfa_offset 48
 1868 0004 00AF     		add	r7, sp, #0
 1869              	.LCFI63:
 1870              		.cfi_def_cfa_register 7
 1871 0006 F860     		str	r0, [r7, #12]
 1872 0008 B960     		str	r1, [r7, #8]
 1873 000a 7A60     		str	r2, [r7, #4]
 1874 000c 3B60     		str	r3, [r7]
 739:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index = 0U;
 1875              		.loc 1 739 17
 1876 000e 0023     		movs	r3, #0
 1877 0010 3B61     		str	r3, [r7, #16]
 740:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 1878              		.loc 1 740 12
 1879 0012 0023     		movs	r3, #0
 1880 0014 BB61     		str	r3, [r7, #24]
 741:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 1881              		.loc 1 741 12
 1882 0016 0023     		movs	r3, #0
 1883 0018 7B62     		str	r3, [r7, #36]
 1884              		.loc 1 741 32
 1885 001a 0023     		movs	r3, #0
 1886 001c 7B61     		str	r3, [r7, #20]
 1887              		.loc 1 741 43
 1888 001e 0023     		movs	r3, #0
 1889 0020 3B62     		str	r3, [r7, #32]
 1890              		.loc 1 741 65
 1891 0022 0023     		movs	r3, #0
 1892 0024 FB61     		str	r3, [r7, #28]
 742:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 743:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 744:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 1893              		.loc 1 744 3
 1894 0026 FB68     		ldr	r3, [r7, #12]
 1895 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 1896 002c 012B     		cmp	r3, #1
 1897 002e 01D1     		bne	.L83
 1898              		.loc 1 744 3 is_stmt 0 discriminator 1
 1899 0030 0223     		movs	r3, #2
 1900 0032 06E1     		b	.L84
 1901              	.L83:
 1902              		.loc 1 744 3 discriminator 2
 1903 0034 FB68     		ldr	r3, [r7, #12]
 1904 0036 0122     		movs	r2, #1
 1905 0038 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/ccmBJYMF.s 			page 55


 745:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 746:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
 747:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 1906              		.loc 1 747 11 is_stmt 1 discriminator 2
 1907 003c FB68     		ldr	r3, [r7, #12]
 1908 003e 93F82130 		ldrb	r3, [r3, #33]
 1909 0042 DBB2     		uxtb	r3, r3
 1910              		.loc 1 747 5 discriminator 2
 1911 0044 022B     		cmp	r3, #2
 1912 0046 01D1     		bne	.L85
 748:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 749:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 1913              		.loc 1 749 13
 1914 0048 0223     		movs	r3, #2
 1915 004a FAE0     		b	.L84
 1916              	.L85:
 750:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 751:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 752:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
 753:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 1917              		.loc 1 753 17
 1918 004c FB68     		ldr	r3, [r7, #12]
 1919 004e 5B68     		ldr	r3, [r3, #4]
 1920              		.loc 1 753 5
 1921 0050 102B     		cmp	r3, #16
 1922 0052 03D1     		bne	.L86
 754:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 755:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 1923              		.loc 1 755 19
 1924 0054 4FF0E043 		mov	r3, #1879048192
 1925 0058 7B62     		str	r3, [r7, #36]
 1926 005a 02E0     		b	.L87
 1927              	.L86:
 756:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 757:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 758:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 759:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 1928              		.loc 1 759 19
 1929 005c 4FF00043 		mov	r3, #-2147483648
 1930 0060 7B62     		str	r3, [r7, #36]
 1931              	.L87:
 760:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 761:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 762:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 763:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 1932              		.loc 1 763 16
 1933 0062 FB68     		ldr	r3, [r7, #12]
 1934 0064 0222     		movs	r2, #2
 1935 0066 83F82120 		strb	r2, [r3, #33]
 764:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 765:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
 766:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 1936              		.loc 1 766 17
 1937 006a BB68     		ldr	r3, [r7, #8]
 1938 006c 1B88     		ldrh	r3, [r3]
 1939 006e 1946     		mov	r1, r3
 1940 0070 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccmBJYMF.s 			page 56


 1941 0072 9B88     		ldrh	r3, [r3, #4]
 1942 0074 1A46     		mov	r2, r3
 1943 0076 BB68     		ldr	r3, [r7, #8]
 1944 0078 5B88     		ldrh	r3, [r3, #2]
 1945 007a 1846     		mov	r0, r3
 1946 007c FB68     		ldr	r3, [r7, #12]
 1947 007e 9B6B     		ldr	r3, [r3, #56]
 1948 0080 00FB03F3 		mul	r3, r0, r3
 1949 0084 1344     		add	r3, r3, r2
 1950 0086 FA68     		ldr	r2, [r7, #12]
 1951 0088 D26A     		ldr	r2, [r2, #44]
 1952 008a 02FB03F3 		mul	r3, r2, r3
 1953              		.loc 1 766 15
 1954 008e 0B44     		add	r3, r3, r1
 1955 0090 FB61     		str	r3, [r7, #28]
 767:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 768:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Page(s) write loop */
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockN
 1956              		.loc 1 769 8
 1957 0092 C0E0     		b	.L88
 1958              	.L98:
 770:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 771:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
 772:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = hnand->Config.PageSize + ((hnand->Config.PageSize) * numPagesWritten);
 1959              		.loc 1 772 35
 1960 0094 3B6A     		ldr	r3, [r7, #32]
 1961 0096 0133     		adds	r3, r3, #1
 1962              		.loc 1 772 25
 1963 0098 FA68     		ldr	r2, [r7, #12]
 1964 009a 526A     		ldr	r2, [r2, #36]
 1965              		.loc 1 772 10
 1966 009c 02FB03F3 		mul	r3, r2, r3
 1967 00a0 7B61     		str	r3, [r7, #20]
 773:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 774:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Send write page command sequence */
 775:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 1968              		.loc 1 775 23
 1969 00a2 7B6A     		ldr	r3, [r7, #36]
 1970 00a4 43F48033 		orr	r3, r3, #65536
 1971              		.loc 1 775 61
 1972 00a8 0022     		movs	r2, #0
 1973 00aa 1A70     		strb	r2, [r3]
 776:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 1974              		.loc 1 776 23
 1975 00ac 7B6A     		ldr	r3, [r7, #36]
 1976 00ae 43F48033 		orr	r3, r3, #65536
 1977              		.loc 1 776 61
 1978 00b2 8022     		movs	r2, #128
 1979 00b4 1A70     		strb	r2, [r3]
 777:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 778:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 779:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 1980              		.loc 1 779 22
 1981 00b6 FB68     		ldr	r3, [r7, #12]
 1982 00b8 5B6A     		ldr	r3, [r3, #36]
 1983              		.loc 1 779 7
 1984 00ba B3F5007F 		cmp	r3, #512
ARM GAS  /tmp/ccmBJYMF.s 			page 57


 1985 00be 35D8     		bhi	.L89
 780:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 781:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 1986              		.loc 1 781 26
 1987 00c0 FB68     		ldr	r3, [r7, #12]
 1988 00c2 DB6A     		ldr	r3, [r3, #44]
 1989              		.loc 1 781 52
 1990 00c4 FA68     		ldr	r2, [r7, #12]
 1991 00c6 126B     		ldr	r2, [r2, #48]
 1992              		.loc 1 781 37
 1993 00c8 02FB03F3 		mul	r3, r2, r3
 1994              		.loc 1 781 10
 1995 00cc B3F5803F 		cmp	r3, #65536
 1996 00d0 12D2     		bcs	.L90
 782:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 783:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 1997              		.loc 1 783 27
 1998 00d2 7B6A     		ldr	r3, [r7, #36]
 1999 00d4 43F40033 		orr	r3, r3, #131072
 2000              		.loc 1 783 66
 2001 00d8 0022     		movs	r2, #0
 2002 00da 1A70     		strb	r2, [r3]
 784:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2003              		.loc 1 784 27
 2004 00dc 7B6A     		ldr	r3, [r7, #36]
 2005 00de 43F40033 		orr	r3, r3, #131072
 2006              		.loc 1 784 68
 2007 00e2 FA69     		ldr	r2, [r7, #28]
 2008 00e4 D2B2     		uxtb	r2, r2
 2009              		.loc 1 784 66
 2010 00e6 1A70     		strb	r2, [r3]
 785:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2011              		.loc 1 785 68
 2012 00e8 FB69     		ldr	r3, [r7, #28]
 2013 00ea 1A0A     		lsrs	r2, r3, #8
 2014              		.loc 1 785 27
 2015 00ec 7B6A     		ldr	r3, [r7, #36]
 2016 00ee 43F40033 		orr	r3, r3, #131072
 2017              		.loc 1 785 68
 2018 00f2 D2B2     		uxtb	r2, r2
 2019              		.loc 1 785 66
 2020 00f4 1A70     		strb	r2, [r3]
 2021 00f6 68E0     		b	.L93
 2022              	.L90:
 786:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 787:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 788:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 789:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2023              		.loc 1 789 27
 2024 00f8 7B6A     		ldr	r3, [r7, #36]
 2025 00fa 43F40033 		orr	r3, r3, #131072
 2026              		.loc 1 789 66
 2027 00fe 0022     		movs	r2, #0
 2028 0100 1A70     		strb	r2, [r3]
 790:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2029              		.loc 1 790 27
 2030 0102 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccmBJYMF.s 			page 58


 2031 0104 43F40033 		orr	r3, r3, #131072
 2032              		.loc 1 790 68
 2033 0108 FA69     		ldr	r2, [r7, #28]
 2034 010a D2B2     		uxtb	r2, r2
 2035              		.loc 1 790 66
 2036 010c 1A70     		strb	r2, [r3]
 791:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2037              		.loc 1 791 68
 2038 010e FB69     		ldr	r3, [r7, #28]
 2039 0110 1A0A     		lsrs	r2, r3, #8
 2040              		.loc 1 791 27
 2041 0112 7B6A     		ldr	r3, [r7, #36]
 2042 0114 43F40033 		orr	r3, r3, #131072
 2043              		.loc 1 791 68
 2044 0118 D2B2     		uxtb	r2, r2
 2045              		.loc 1 791 66
 2046 011a 1A70     		strb	r2, [r3]
 792:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 2047              		.loc 1 792 68
 2048 011c FB69     		ldr	r3, [r7, #28]
 2049 011e 1A0C     		lsrs	r2, r3, #16
 2050              		.loc 1 792 27
 2051 0120 7B6A     		ldr	r3, [r7, #36]
 2052 0122 43F40033 		orr	r3, r3, #131072
 2053              		.loc 1 792 68
 2054 0126 D2B2     		uxtb	r2, r2
 2055              		.loc 1 792 66
 2056 0128 1A70     		strb	r2, [r3]
 2057 012a 4EE0     		b	.L93
 2058              	.L89:
 793:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 794:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 795:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 796:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 797:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 2059              		.loc 1 797 26
 2060 012c FB68     		ldr	r3, [r7, #12]
 2061 012e DB6A     		ldr	r3, [r3, #44]
 2062              		.loc 1 797 52
 2063 0130 FA68     		ldr	r2, [r7, #12]
 2064 0132 126B     		ldr	r2, [r2, #48]
 2065              		.loc 1 797 37
 2066 0134 02FB03F3 		mul	r3, r2, r3
 2067              		.loc 1 797 10
 2068 0138 B3F5803F 		cmp	r3, #65536
 2069 013c 17D2     		bcs	.L92
 798:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 799:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2070              		.loc 1 799 27
 2071 013e 7B6A     		ldr	r3, [r7, #36]
 2072 0140 43F40033 		orr	r3, r3, #131072
 2073              		.loc 1 799 66
 2074 0144 0022     		movs	r2, #0
 2075 0146 1A70     		strb	r2, [r3]
 800:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2076              		.loc 1 800 27
 2077 0148 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccmBJYMF.s 			page 59


 2078 014a 43F40033 		orr	r3, r3, #131072
 2079              		.loc 1 800 66
 2080 014e 0022     		movs	r2, #0
 2081 0150 1A70     		strb	r2, [r3]
 801:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2082              		.loc 1 801 27
 2083 0152 7B6A     		ldr	r3, [r7, #36]
 2084 0154 43F40033 		orr	r3, r3, #131072
 2085              		.loc 1 801 68
 2086 0158 FA69     		ldr	r2, [r7, #28]
 2087 015a D2B2     		uxtb	r2, r2
 2088              		.loc 1 801 66
 2089 015c 1A70     		strb	r2, [r3]
 802:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2090              		.loc 1 802 68
 2091 015e FB69     		ldr	r3, [r7, #28]
 2092 0160 1A0A     		lsrs	r2, r3, #8
 2093              		.loc 1 802 27
 2094 0162 7B6A     		ldr	r3, [r7, #36]
 2095 0164 43F40033 		orr	r3, r3, #131072
 2096              		.loc 1 802 68
 2097 0168 D2B2     		uxtb	r2, r2
 2098              		.loc 1 802 66
 2099 016a 1A70     		strb	r2, [r3]
 2100 016c 2DE0     		b	.L93
 2101              	.L92:
 803:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 804:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 805:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 806:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2102              		.loc 1 806 27
 2103 016e 7B6A     		ldr	r3, [r7, #36]
 2104 0170 43F40033 		orr	r3, r3, #131072
 2105              		.loc 1 806 66
 2106 0174 0022     		movs	r2, #0
 2107 0176 1A70     		strb	r2, [r3]
 807:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2108              		.loc 1 807 27
 2109 0178 7B6A     		ldr	r3, [r7, #36]
 2110 017a 43F40033 		orr	r3, r3, #131072
 2111              		.loc 1 807 66
 2112 017e 0022     		movs	r2, #0
 2113 0180 1A70     		strb	r2, [r3]
 808:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2114              		.loc 1 808 27
 2115 0182 7B6A     		ldr	r3, [r7, #36]
 2116 0184 43F40033 		orr	r3, r3, #131072
 2117              		.loc 1 808 68
 2118 0188 FA69     		ldr	r2, [r7, #28]
 2119 018a D2B2     		uxtb	r2, r2
 2120              		.loc 1 808 66
 2121 018c 1A70     		strb	r2, [r3]
 809:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2122              		.loc 1 809 68
 2123 018e FB69     		ldr	r3, [r7, #28]
 2124 0190 1A0A     		lsrs	r2, r3, #8
 2125              		.loc 1 809 27
ARM GAS  /tmp/ccmBJYMF.s 			page 60


 2126 0192 7B6A     		ldr	r3, [r7, #36]
 2127 0194 43F40033 		orr	r3, r3, #131072
 2128              		.loc 1 809 68
 2129 0198 D2B2     		uxtb	r2, r2
 2130              		.loc 1 809 66
 2131 019a 1A70     		strb	r2, [r3]
 2132              	.LBB18:
 2133              	.LBB19:
 429:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 2134              		.loc 2 429 3
 2135              		.syntax unified
 2136              	@ 429 "./Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2137 019c BFF34F8F 		dsb 0xF
 2138              	@ 0 "" 2
 2139              		.loc 2 430 1
 2140              		.thumb
 2141              		.syntax unified
 2142 01a0 00BF     		nop
 2143              	.LBE19:
 2144              	.LBE18:
 810:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         __DSB();
 811:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 2145              		.loc 1 811 68
 2146 01a2 FB69     		ldr	r3, [r7, #28]
 2147 01a4 1A0C     		lsrs	r2, r3, #16
 2148              		.loc 1 811 27
 2149 01a6 7B6A     		ldr	r3, [r7, #36]
 2150 01a8 43F40033 		orr	r3, r3, #131072
 2151              		.loc 1 811 68
 2152 01ac D2B2     		uxtb	r2, r2
 2153              		.loc 1 811 66
 2154 01ae 1A70     		strb	r2, [r3]
 2155              	.LBB20:
 2156              	.LBB21:
 429:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 2157              		.loc 2 429 3
 2158              		.syntax unified
 2159              	@ 429 "./Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2160 01b0 BFF34F8F 		dsb 0xF
 2161              	@ 0 "" 2
 2162              		.loc 2 430 1
 2163              		.thumb
 2164              		.syntax unified
 2165 01b4 00BF     		nop
 2166              	.LBE21:
 2167              	.LBE20:
 812:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         __DSB();
 813:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 814:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 815:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 816:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 817:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Write data to memory */
 818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 2168              		.loc 1 818 5
 2169 01b6 08E0     		b	.L93
 2170              	.L94:
 819:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
ARM GAS  /tmp/ccmBJYMF.s 			page 61


 820:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 2171              		.loc 1 820 41 discriminator 2
 2172 01b8 7B68     		ldr	r3, [r7, #4]
 2173 01ba 5A1C     		adds	r2, r3, #1
 2174 01bc 7A60     		str	r2, [r7, #4]
 2175              		.loc 1 820 8 discriminator 2
 2176 01be 7A6A     		ldr	r2, [r7, #36]
 2177              		.loc 1 820 40 discriminator 2
 2178 01c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2179              		.loc 1 820 38 discriminator 2
 2180 01c2 1370     		strb	r3, [r2]
 818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2181              		.loc 1 818 30 discriminator 2
 2182 01c4 3B69     		ldr	r3, [r7, #16]
 2183 01c6 0133     		adds	r3, r3, #1
 2184 01c8 3B61     		str	r3, [r7, #16]
 2185              	.L93:
 818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2186              		.loc 1 818 17 discriminator 1
 2187 01ca 3B69     		ldr	r3, [r7, #16]
 818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2188              		.loc 1 818 5 discriminator 1
 2189 01cc 7A69     		ldr	r2, [r7, #20]
 2190 01ce 9A42     		cmp	r2, r3
 2191 01d0 F2D8     		bhi	.L94
 821:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 822:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
 823:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 2192              		.loc 1 823 23
 2193 01d2 7B6A     		ldr	r3, [r7, #36]
 2194 01d4 43F48033 		orr	r3, r3, #65536
 2195              		.loc 1 823 61
 2196 01d8 1022     		movs	r2, #16
 2197 01da 1A70     		strb	r2, [r3]
 824:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 825:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Read status until NAND is ready */
 826:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 2198              		.loc 1 826 10
 2199 01dc 0CE0     		b	.L95
 2200              	.L96:
 827:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 828:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
 829:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 2201              		.loc 1 829 19
 2202 01de FFF7FEFF 		bl	HAL_GetTick
 2203 01e2 B861     		str	r0, [r7, #24]
 830:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
 831:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 2204              		.loc 1 831 11
 2205 01e4 FFF7FEFF 		bl	HAL_GetTick
 2206 01e8 0246     		mov	r2, r0
 2207              		.loc 1 831 25
 2208 01ea BB69     		ldr	r3, [r7, #24]
 2209 01ec D31A     		subs	r3, r2, r3
 2210              		.loc 1 831 9
 2211 01ee B3F1807F 		cmp	r3, #16777216
 2212 01f2 01D9     		bls	.L95
ARM GAS  /tmp/ccmBJYMF.s 			page 62


 832:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 833:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         return HAL_TIMEOUT; 
 2213              		.loc 1 833 16
 2214 01f4 0323     		movs	r3, #3
 2215 01f6 24E0     		b	.L84
 2216              	.L95:
 826:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2217              		.loc 1 826 11
 2218 01f8 F868     		ldr	r0, [r7, #12]
 2219 01fa FFF7FEFF 		bl	HAL_NAND_Read_Status
 2220 01fe 0346     		mov	r3, r0
 826:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2221              		.loc 1 826 10
 2222 0200 402B     		cmp	r3, #64
 2223 0202 ECD1     		bne	.L96
 834:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 835:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 836:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  
 837:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment written pages number */
 838:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numPagesWritten++;
 2224              		.loc 1 838 20
 2225 0204 3B6A     		ldr	r3, [r7, #32]
 2226 0206 0133     		adds	r3, r3, #1
 2227 0208 3B62     		str	r3, [r7, #32]
 839:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 840:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement pages to write */
 841:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumPageToWrite--;
 2228              		.loc 1 841 19
 2229 020a 3B68     		ldr	r3, [r7]
 2230 020c 013B     		subs	r3, r3, #1
 2231 020e 3B60     		str	r3, [r7]
 842:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 843:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
 844:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 2232              		.loc 1 844 17
 2233 0210 FB69     		ldr	r3, [r7, #28]
 2234 0212 0133     		adds	r3, r3, #1
 2235 0214 FB61     		str	r3, [r7, #28]
 2236              	.L88:
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2237              		.loc 1 769 8
 2238 0216 3B68     		ldr	r3, [r7]
 2239 0218 002B     		cmp	r3, #0
 2240 021a 09D0     		beq	.L97
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2241              		.loc 1 769 65 discriminator 1
 2242 021c FB68     		ldr	r3, [r7, #12]
 2243 021e DB6A     		ldr	r3, [r3, #44]
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2244              		.loc 1 769 93 discriminator 1
 2245 0220 FA68     		ldr	r2, [r7, #12]
 2246 0222 126B     		ldr	r2, [r2, #48]
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2247              		.loc 1 769 77 discriminator 1
 2248 0224 02FB03F3 		mul	r3, r2, r3
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2249              		.loc 1 769 32 discriminator 1
ARM GAS  /tmp/ccmBJYMF.s 			page 63


 2250 0228 FA69     		ldr	r2, [r7, #28]
 2251 022a 9A42     		cmp	r2, r3
 2252 022c FFF432AF 		bcc	.L98
 2253              	.L97:
 845:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 846:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 847:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 848:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 2254              		.loc 1 848 16
 2255 0230 FB68     		ldr	r3, [r7, #12]
 2256 0232 0122     		movs	r2, #1
 2257 0234 83F82120 		strb	r2, [r3, #33]
 849:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 850:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
 851:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 2258              		.loc 1 851 3
 2259 0238 FB68     		ldr	r3, [r7, #12]
 2260 023a 0022     		movs	r2, #0
 2261 023c 83F82020 		strb	r2, [r3, #32]
 852:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 853:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 2262              		.loc 1 853 10
 2263 0240 0023     		movs	r3, #0
 2264              	.L84:
 854:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 2265              		.loc 1 854 1
 2266 0242 1846     		mov	r0, r3
 2267 0244 2837     		adds	r7, r7, #40
 2268              	.LCFI64:
 2269              		.cfi_def_cfa_offset 8
 2270 0246 BD46     		mov	sp, r7
 2271              	.LCFI65:
 2272              		.cfi_def_cfa_register 13
 2273              		@ sp needed
 2274 0248 80BD     		pop	{r7, pc}
 2275              		.cfi_endproc
 2276              	.LFE137:
 2278              		.section	.text.HAL_NAND_Write_Page_16b,"ax",%progbits
 2279              		.align	1
 2280              		.global	HAL_NAND_Write_Page_16b
 2281              		.syntax unified
 2282              		.thumb
 2283              		.thumb_func
 2284              		.fpu fpv4-sp-d16
 2286              	HAL_NAND_Write_Page_16b:
 2287              	.LFB138:
 855:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 856:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 857:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Write Page(s) to NAND memory block (16-bits addressing)
 858:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 859:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 860:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 861:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write. pBuffer should be 16bits aligned
 862:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumPageToWrite   number of pages to write to block 
 863:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 864:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
 865:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_Page_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress,
ARM GAS  /tmp/ccmBJYMF.s 			page 64


 866:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 2288              		.loc 1 866 1
 2289              		.cfi_startproc
 2290              		@ args = 0, pretend = 0, frame = 40
 2291              		@ frame_needed = 1, uses_anonymous_args = 0
 2292 0000 80B5     		push	{r7, lr}
 2293              	.LCFI66:
 2294              		.cfi_def_cfa_offset 8
 2295              		.cfi_offset 7, -8
 2296              		.cfi_offset 14, -4
 2297 0002 8AB0     		sub	sp, sp, #40
 2298              	.LCFI67:
 2299              		.cfi_def_cfa_offset 48
 2300 0004 00AF     		add	r7, sp, #0
 2301              	.LCFI68:
 2302              		.cfi_def_cfa_register 7
 2303 0006 F860     		str	r0, [r7, #12]
 2304 0008 B960     		str	r1, [r7, #8]
 2305 000a 7A60     		str	r2, [r7, #4]
 2306 000c 3B60     		str	r3, [r7]
 867:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index = 0U;
 2307              		.loc 1 867 17
 2308 000e 0023     		movs	r3, #0
 2309 0010 3B61     		str	r3, [r7, #16]
 868:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 2310              		.loc 1 868 12
 2311 0012 0023     		movs	r3, #0
 2312 0014 BB61     		str	r3, [r7, #24]
 869:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numPagesWritten = 0U, nandaddress = 0U;
 2313              		.loc 1 869 12
 2314 0016 0023     		movs	r3, #0
 2315 0018 7B62     		str	r3, [r7, #36]
 2316              		.loc 1 869 32
 2317 001a 0023     		movs	r3, #0
 2318 001c 7B61     		str	r3, [r7, #20]
 2319              		.loc 1 869 43
 2320 001e 0023     		movs	r3, #0
 2321 0020 3B62     		str	r3, [r7, #32]
 2322              		.loc 1 869 65
 2323 0022 0023     		movs	r3, #0
 2324 0024 FB61     		str	r3, [r7, #28]
 870:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 871:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 872:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 2325              		.loc 1 872 3
 2326 0026 FB68     		ldr	r3, [r7, #12]
 2327 0028 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2328 002c 012B     		cmp	r3, #1
 2329 002e 01D1     		bne	.L100
 2330              		.loc 1 872 3 is_stmt 0 discriminator 1
 2331 0030 0223     		movs	r3, #2
 2332 0032 06E1     		b	.L101
 2333              	.L100:
 2334              		.loc 1 872 3 discriminator 2
 2335 0034 FB68     		ldr	r3, [r7, #12]
 2336 0036 0122     		movs	r2, #1
 2337 0038 83F82020 		strb	r2, [r3, #32]
ARM GAS  /tmp/ccmBJYMF.s 			page 65


 873:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 874:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
 875:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 2338              		.loc 1 875 11 is_stmt 1 discriminator 2
 2339 003c FB68     		ldr	r3, [r7, #12]
 2340 003e 93F82130 		ldrb	r3, [r3, #33]
 2341 0042 DBB2     		uxtb	r3, r3
 2342              		.loc 1 875 5 discriminator 2
 2343 0044 022B     		cmp	r3, #2
 2344 0046 01D1     		bne	.L102
 876:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 877:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 2345              		.loc 1 877 13
 2346 0048 0223     		movs	r3, #2
 2347 004a FAE0     		b	.L101
 2348              	.L102:
 878:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 879:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
 881:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 2349              		.loc 1 881 17
 2350 004c FB68     		ldr	r3, [r7, #12]
 2351 004e 5B68     		ldr	r3, [r3, #4]
 2352              		.loc 1 881 5
 2353 0050 102B     		cmp	r3, #16
 2354 0052 03D1     		bne	.L103
 882:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 883:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 2355              		.loc 1 883 19
 2356 0054 4FF0E043 		mov	r3, #1879048192
 2357 0058 7B62     		str	r3, [r7, #36]
 2358 005a 02E0     		b	.L104
 2359              	.L103:
 884:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 885:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
 886:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 887:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 2360              		.loc 1 887 19
 2361 005c 4FF00043 		mov	r3, #-2147483648
 2362 0060 7B62     		str	r3, [r7, #36]
 2363              	.L104:
 888:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 889:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 890:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 891:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 2364              		.loc 1 891 16
 2365 0062 FB68     		ldr	r3, [r7, #12]
 2366 0064 0222     		movs	r2, #2
 2367 0066 83F82120 		strb	r2, [r3, #33]
 892:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 893:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
 894:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 2368              		.loc 1 894 17
 2369 006a BB68     		ldr	r3, [r7, #8]
 2370 006c 1B88     		ldrh	r3, [r3]
 2371 006e 1946     		mov	r1, r3
 2372 0070 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccmBJYMF.s 			page 66


 2373 0072 9B88     		ldrh	r3, [r3, #4]
 2374 0074 1A46     		mov	r2, r3
 2375 0076 BB68     		ldr	r3, [r7, #8]
 2376 0078 5B88     		ldrh	r3, [r3, #2]
 2377 007a 1846     		mov	r0, r3
 2378 007c FB68     		ldr	r3, [r7, #12]
 2379 007e 9B6B     		ldr	r3, [r3, #56]
 2380 0080 00FB03F3 		mul	r3, r0, r3
 2381 0084 1344     		add	r3, r3, r2
 2382 0086 FA68     		ldr	r2, [r7, #12]
 2383 0088 D26A     		ldr	r2, [r2, #44]
 2384 008a 02FB03F3 		mul	r3, r2, r3
 2385              		.loc 1 894 15
 2386 008e 0B44     		add	r3, r3, r1
 2387 0090 FB61     		str	r3, [r7, #28]
 895:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 896:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Page(s) write loop */
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumPageToWrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockN
 2388              		.loc 1 897 8
 2389 0092 C0E0     		b	.L105
 2390              	.L115:
 898:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 899:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
 900:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesWritten);
 2391              		.loc 1 900 37
 2392 0094 3B6A     		ldr	r3, [r7, #32]
 2393 0096 0133     		adds	r3, r3, #1
 2394              		.loc 1 900 26
 2395 0098 FA68     		ldr	r2, [r7, #12]
 2396 009a 526A     		ldr	r2, [r2, #36]
 2397              		.loc 1 900 10
 2398 009c 02FB03F3 		mul	r3, r2, r3
 2399 00a0 7B61     		str	r3, [r7, #20]
 901:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  
 902:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Send write page command sequence */
 903:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 2400              		.loc 1 903 23
 2401 00a2 7B6A     		ldr	r3, [r7, #36]
 2402 00a4 43F48033 		orr	r3, r3, #65536
 2403              		.loc 1 903 61
 2404 00a8 0022     		movs	r2, #0
 2405 00aa 1A70     		strb	r2, [r3]
 2406              	.LBB22:
 2407              	.LBB23:
 429:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 2408              		.loc 2 429 3
 2409              		.syntax unified
 2410              	@ 429 "./Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2411 00ac BFF34F8F 		dsb 0xF
 2412              	@ 0 "" 2
 2413              		.loc 2 430 1
 2414              		.thumb
 2415              		.syntax unified
 2416 00b0 00BF     		nop
 2417              	.LBE23:
 2418              	.LBE22:
 904:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __DSB();
ARM GAS  /tmp/ccmBJYMF.s 			page 67


 905:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 2419              		.loc 1 905 23
 2420 00b2 7B6A     		ldr	r3, [r7, #36]
 2421 00b4 43F48033 		orr	r3, r3, #65536
 2422              		.loc 1 905 61
 2423 00b8 8022     		movs	r2, #128
 2424 00ba 1A70     		strb	r2, [r3]
 2425              	.LBB24:
 2426              	.LBB25:
 429:./Libraries/CMSIS/Include/cmsis_gcc.h **** }
 2427              		.loc 2 429 3
 2428              		.syntax unified
 2429              	@ 429 "./Libraries/CMSIS/Include/cmsis_gcc.h" 1
 2430 00bc BFF34F8F 		dsb 0xF
 2431              	@ 0 "" 2
 2432              		.loc 2 430 1
 2433              		.thumb
 2434              		.syntax unified
 2435 00c0 00BF     		nop
 2436              	.LBE25:
 2437              	.LBE24:
 906:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     __DSB();
 907:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 908:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
 909:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 2438              		.loc 1 909 22
 2439 00c2 FB68     		ldr	r3, [r7, #12]
 2440 00c4 5B6A     		ldr	r3, [r3, #36]
 2441              		.loc 1 909 7
 2442 00c6 B3F5007F 		cmp	r3, #512
 2443 00ca 35D8     		bhi	.L106
 910:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 911:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 2444              		.loc 1 911 26
 2445 00cc FB68     		ldr	r3, [r7, #12]
 2446 00ce DB6A     		ldr	r3, [r3, #44]
 2447              		.loc 1 911 52
 2448 00d0 FA68     		ldr	r2, [r7, #12]
 2449 00d2 126B     		ldr	r2, [r2, #48]
 2450              		.loc 1 911 37
 2451 00d4 02FB03F3 		mul	r3, r2, r3
 2452              		.loc 1 911 10
 2453 00d8 B3F5803F 		cmp	r3, #65536
 2454 00dc 12D2     		bcs	.L107
 912:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 913:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2455              		.loc 1 913 27
 2456 00de 7B6A     		ldr	r3, [r7, #36]
 2457 00e0 43F40033 		orr	r3, r3, #131072
 2458              		.loc 1 913 66
 2459 00e4 0022     		movs	r2, #0
 2460 00e6 1A70     		strb	r2, [r3]
 914:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2461              		.loc 1 914 27
 2462 00e8 7B6A     		ldr	r3, [r7, #36]
 2463 00ea 43F40033 		orr	r3, r3, #131072
 2464              		.loc 1 914 68
ARM GAS  /tmp/ccmBJYMF.s 			page 68


 2465 00ee FA69     		ldr	r2, [r7, #28]
 2466 00f0 D2B2     		uxtb	r2, r2
 2467              		.loc 1 914 66
 2468 00f2 1A70     		strb	r2, [r3]
 915:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2469              		.loc 1 915 68
 2470 00f4 FB69     		ldr	r3, [r7, #28]
 2471 00f6 1A0A     		lsrs	r2, r3, #8
 2472              		.loc 1 915 27
 2473 00f8 7B6A     		ldr	r3, [r7, #36]
 2474 00fa 43F40033 		orr	r3, r3, #131072
 2475              		.loc 1 915 68
 2476 00fe D2B2     		uxtb	r2, r2
 2477              		.loc 1 915 66
 2478 0100 1A70     		strb	r2, [r3]
 2479 0102 62E0     		b	.L110
 2480              	.L107:
 916:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 917:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 918:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 919:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2481              		.loc 1 919 27
 2482 0104 7B6A     		ldr	r3, [r7, #36]
 2483 0106 43F40033 		orr	r3, r3, #131072
 2484              		.loc 1 919 66
 2485 010a 0022     		movs	r2, #0
 2486 010c 1A70     		strb	r2, [r3]
 920:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2487              		.loc 1 920 27
 2488 010e 7B6A     		ldr	r3, [r7, #36]
 2489 0110 43F40033 		orr	r3, r3, #131072
 2490              		.loc 1 920 68
 2491 0114 FA69     		ldr	r2, [r7, #28]
 2492 0116 D2B2     		uxtb	r2, r2
 2493              		.loc 1 920 66
 2494 0118 1A70     		strb	r2, [r3]
 921:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2495              		.loc 1 921 68
 2496 011a FB69     		ldr	r3, [r7, #28]
 2497 011c 1A0A     		lsrs	r2, r3, #8
 2498              		.loc 1 921 27
 2499 011e 7B6A     		ldr	r3, [r7, #36]
 2500 0120 43F40033 		orr	r3, r3, #131072
 2501              		.loc 1 921 68
 2502 0124 D2B2     		uxtb	r2, r2
 2503              		.loc 1 921 66
 2504 0126 1A70     		strb	r2, [r3]
 922:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 2505              		.loc 1 922 68
 2506 0128 FB69     		ldr	r3, [r7, #28]
 2507 012a 1A0C     		lsrs	r2, r3, #16
 2508              		.loc 1 922 27
 2509 012c 7B6A     		ldr	r3, [r7, #36]
 2510 012e 43F40033 		orr	r3, r3, #131072
 2511              		.loc 1 922 68
 2512 0132 D2B2     		uxtb	r2, r2
 2513              		.loc 1 922 66
ARM GAS  /tmp/ccmBJYMF.s 			page 69


 2514 0134 1A70     		strb	r2, [r3]
 2515 0136 48E0     		b	.L110
 2516              	.L106:
 923:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 924:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 925:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
 926:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 927:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 2517              		.loc 1 927 26
 2518 0138 FB68     		ldr	r3, [r7, #12]
 2519 013a DB6A     		ldr	r3, [r3, #44]
 2520              		.loc 1 927 52
 2521 013c FA68     		ldr	r2, [r7, #12]
 2522 013e 126B     		ldr	r2, [r2, #48]
 2523              		.loc 1 927 37
 2524 0140 02FB03F3 		mul	r3, r2, r3
 2525              		.loc 1 927 10
 2526 0144 B3F5803F 		cmp	r3, #65536
 2527 0148 17D2     		bcs	.L109
 928:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 929:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2528              		.loc 1 929 27
 2529 014a 7B6A     		ldr	r3, [r7, #36]
 2530 014c 43F40033 		orr	r3, r3, #131072
 2531              		.loc 1 929 66
 2532 0150 0022     		movs	r2, #0
 2533 0152 1A70     		strb	r2, [r3]
 930:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2534              		.loc 1 930 27
 2535 0154 7B6A     		ldr	r3, [r7, #36]
 2536 0156 43F40033 		orr	r3, r3, #131072
 2537              		.loc 1 930 66
 2538 015a 0022     		movs	r2, #0
 2539 015c 1A70     		strb	r2, [r3]
 931:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2540              		.loc 1 931 27
 2541 015e 7B6A     		ldr	r3, [r7, #36]
 2542 0160 43F40033 		orr	r3, r3, #131072
 2543              		.loc 1 931 68
 2544 0164 FA69     		ldr	r2, [r7, #28]
 2545 0166 D2B2     		uxtb	r2, r2
 2546              		.loc 1 931 66
 2547 0168 1A70     		strb	r2, [r3]
 932:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2548              		.loc 1 932 68
 2549 016a FB69     		ldr	r3, [r7, #28]
 2550 016c 1A0A     		lsrs	r2, r3, #8
 2551              		.loc 1 932 27
 2552 016e 7B6A     		ldr	r3, [r7, #36]
 2553 0170 43F40033 		orr	r3, r3, #131072
 2554              		.loc 1 932 68
 2555 0174 D2B2     		uxtb	r2, r2
 2556              		.loc 1 932 66
 2557 0176 1A70     		strb	r2, [r3]
 2558 0178 27E0     		b	.L110
 2559              	.L109:
 933:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
ARM GAS  /tmp/ccmBJYMF.s 			page 70


 934:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
 935:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 936:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2560              		.loc 1 936 27
 2561 017a 7B6A     		ldr	r3, [r7, #36]
 2562 017c 43F40033 		orr	r3, r3, #131072
 2563              		.loc 1 936 66
 2564 0180 0022     		movs	r2, #0
 2565 0182 1A70     		strb	r2, [r3]
 937:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2566              		.loc 1 937 27
 2567 0184 7B6A     		ldr	r3, [r7, #36]
 2568 0186 43F40033 		orr	r3, r3, #131072
 2569              		.loc 1 937 66
 2570 018a 0022     		movs	r2, #0
 2571 018c 1A70     		strb	r2, [r3]
 938:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2572              		.loc 1 938 27
 2573 018e 7B6A     		ldr	r3, [r7, #36]
 2574 0190 43F40033 		orr	r3, r3, #131072
 2575              		.loc 1 938 68
 2576 0194 FA69     		ldr	r2, [r7, #28]
 2577 0196 D2B2     		uxtb	r2, r2
 2578              		.loc 1 938 66
 2579 0198 1A70     		strb	r2, [r3]
 939:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2580              		.loc 1 939 68
 2581 019a FB69     		ldr	r3, [r7, #28]
 2582 019c 1A0A     		lsrs	r2, r3, #8
 2583              		.loc 1 939 27
 2584 019e 7B6A     		ldr	r3, [r7, #36]
 2585 01a0 43F40033 		orr	r3, r3, #131072
 2586              		.loc 1 939 68
 2587 01a4 D2B2     		uxtb	r2, r2
 2588              		.loc 1 939 66
 2589 01a6 1A70     		strb	r2, [r3]
 940:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 2590              		.loc 1 940 68
 2591 01a8 FB69     		ldr	r3, [r7, #28]
 2592 01aa 1A0C     		lsrs	r2, r3, #16
 2593              		.loc 1 940 27
 2594 01ac 7B6A     		ldr	r3, [r7, #36]
 2595 01ae 43F40033 		orr	r3, r3, #131072
 2596              		.loc 1 940 68
 2597 01b2 D2B2     		uxtb	r2, r2
 2598              		.loc 1 940 66
 2599 01b4 1A70     		strb	r2, [r3]
 941:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
 942:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 943:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 944:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Write data to memory */
 945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 2600              		.loc 1 945 5
 2601 01b6 08E0     		b	.L110
 2602              	.L111:
 946:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 947:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint16_t *)deviceaddress = *(uint16_t *)pBuffer++;
ARM GAS  /tmp/ccmBJYMF.s 			page 71


 2603              		.loc 1 947 42 discriminator 2
 2604 01b8 7B68     		ldr	r3, [r7, #4]
 2605 01ba 9A1C     		adds	r2, r3, #2
 2606 01bc 7A60     		str	r2, [r7, #4]
 2607              		.loc 1 947 8 discriminator 2
 2608 01be 7A6A     		ldr	r2, [r7, #36]
 2609              		.loc 1 947 41 discriminator 2
 2610 01c0 1B88     		ldrh	r3, [r3]
 2611              		.loc 1 947 39 discriminator 2
 2612 01c2 1380     		strh	r3, [r2]	@ movhi
 945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2613              		.loc 1 945 30 discriminator 2
 2614 01c4 3B69     		ldr	r3, [r7, #16]
 2615 01c6 0133     		adds	r3, r3, #1
 2616 01c8 3B61     		str	r3, [r7, #16]
 2617              	.L110:
 945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2618              		.loc 1 945 17 discriminator 1
 2619 01ca 3B69     		ldr	r3, [r7, #16]
 945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2620              		.loc 1 945 5 discriminator 1
 2621 01cc 7A69     		ldr	r2, [r7, #20]
 2622 01ce 9A42     		cmp	r2, r3
 2623 01d0 F2D8     		bhi	.L111
 948:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
 949:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
 950:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 2624              		.loc 1 950 23
 2625 01d2 7B6A     		ldr	r3, [r7, #36]
 2626 01d4 43F48033 		orr	r3, r3, #65536
 2627              		.loc 1 950 61
 2628 01d8 1022     		movs	r2, #16
 2629 01da 1A70     		strb	r2, [r3]
 951:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 952:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Read status until NAND is ready */
 953:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 2630              		.loc 1 953 10
 2631 01dc 0CE0     		b	.L112
 2632              	.L113:
 954:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 955:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
 956:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 2633              		.loc 1 956 19
 2634 01de FFF7FEFF 		bl	HAL_GetTick
 2635 01e2 B861     		str	r0, [r7, #24]
 957:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 958:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 2636              		.loc 1 958 11
 2637 01e4 FFF7FEFF 		bl	HAL_GetTick
 2638 01e8 0246     		mov	r2, r0
 2639              		.loc 1 958 25
 2640 01ea BB69     		ldr	r3, [r7, #24]
 2641 01ec D31A     		subs	r3, r2, r3
 2642              		.loc 1 958 9
 2643 01ee B3F1807F 		cmp	r3, #16777216
 2644 01f2 01D9     		bls	.L112
 959:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
ARM GAS  /tmp/ccmBJYMF.s 			page 72


 960:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         return HAL_TIMEOUT; 
 2645              		.loc 1 960 16
 2646 01f4 0323     		movs	r3, #3
 2647 01f6 24E0     		b	.L101
 2648              	.L112:
 953:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2649              		.loc 1 953 11
 2650 01f8 F868     		ldr	r0, [r7, #12]
 2651 01fa FFF7FEFF 		bl	HAL_NAND_Read_Status
 2652 01fe 0346     		mov	r3, r0
 953:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 2653              		.loc 1 953 10
 2654 0200 402B     		cmp	r3, #64
 2655 0202 ECD1     		bne	.L113
 961:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       } 
 962:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }   
 963:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  
 964:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment written pages number */
 965:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numPagesWritten++;
 2656              		.loc 1 965 20
 2657 0204 3B6A     		ldr	r3, [r7, #32]
 2658 0206 0133     		adds	r3, r3, #1
 2659 0208 3B62     		str	r3, [r7, #32]
 966:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 967:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement pages to write */
 968:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumPageToWrite--;
 2660              		.loc 1 968 19
 2661 020a 3B68     		ldr	r3, [r7]
 2662 020c 013B     		subs	r3, r3, #1
 2663 020e 3B60     		str	r3, [r7]
 969:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
 970:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
 971:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 2664              		.loc 1 971 17
 2665 0210 FB69     		ldr	r3, [r7, #28]
 2666 0212 0133     		adds	r3, r3, #1
 2667 0214 FB61     		str	r3, [r7, #28]
 2668              	.L105:
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2669              		.loc 1 897 8
 2670 0216 3B68     		ldr	r3, [r7]
 2671 0218 002B     		cmp	r3, #0
 2672 021a 09D0     		beq	.L114
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2673              		.loc 1 897 65 discriminator 1
 2674 021c FB68     		ldr	r3, [r7, #12]
 2675 021e DB6A     		ldr	r3, [r3, #44]
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2676              		.loc 1 897 93 discriminator 1
 2677 0220 FA68     		ldr	r2, [r7, #12]
 2678 0222 126B     		ldr	r2, [r2, #48]
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2679              		.loc 1 897 77 discriminator 1
 2680 0224 02FB03F3 		mul	r3, r2, r3
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 2681              		.loc 1 897 32 discriminator 1
 2682 0228 FA69     		ldr	r2, [r7, #28]
ARM GAS  /tmp/ccmBJYMF.s 			page 73


 2683 022a 9A42     		cmp	r2, r3
 2684 022c FFF432AF 		bcc	.L115
 2685              	.L114:
 972:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
 973:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 974:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */ 
 975:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 2686              		.loc 1 975 16
 2687 0230 FB68     		ldr	r3, [r7, #12]
 2688 0232 0122     		movs	r2, #1
 2689 0234 83F82120 		strb	r2, [r3, #33]
 976:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 977:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
 978:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);      
 2690              		.loc 1 978 3
 2691 0238 FB68     		ldr	r3, [r7, #12]
 2692 023a 0022     		movs	r2, #0
 2693 023c 83F82020 		strb	r2, [r3, #32]
 979:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 980:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 2694              		.loc 1 980 10
 2695 0240 0023     		movs	r3, #0
 2696              	.L101:
 981:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 2697              		.loc 1 981 1
 2698 0242 1846     		mov	r0, r3
 2699 0244 2837     		adds	r7, r7, #40
 2700              	.LCFI69:
 2701              		.cfi_def_cfa_offset 8
 2702 0246 BD46     		mov	sp, r7
 2703              	.LCFI70:
 2704              		.cfi_def_cfa_register 13
 2705              		@ sp needed
 2706 0248 80BD     		pop	{r7, pc}
 2707              		.cfi_endproc
 2708              	.LFE138:
 2710              		.section	.text.HAL_NAND_Read_SpareArea_8b,"ax",%progbits
 2711              		.align	1
 2712              		.global	HAL_NAND_Read_SpareArea_8b
 2713              		.syntax unified
 2714              		.thumb
 2715              		.thumb_func
 2716              		.fpu fpv4-sp-d16
 2718              	HAL_NAND_Read_SpareArea_8b:
 2719              	.LFB139:
 982:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
 983:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
 984:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Read Spare area(s) from NAND memory 
 985:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
 986:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
 987:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
 988:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer pointer to source buffer to write  
 989:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumSpareAreaToRead Number of spare area to read  
 990:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
 991:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** */
 992:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_SpareArea_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddre
 993:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
ARM GAS  /tmp/ccmBJYMF.s 			page 74


 2720              		.loc 1 993 1
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 48
 2723              		@ frame_needed = 1, uses_anonymous_args = 0
 2724 0000 80B5     		push	{r7, lr}
 2725              	.LCFI71:
 2726              		.cfi_def_cfa_offset 8
 2727              		.cfi_offset 7, -8
 2728              		.cfi_offset 14, -4
 2729 0002 8CB0     		sub	sp, sp, #48
 2730              	.LCFI72:
 2731              		.cfi_def_cfa_offset 56
 2732 0004 00AF     		add	r7, sp, #0
 2733              	.LCFI73:
 2734              		.cfi_def_cfa_register 7
 2735 0006 F860     		str	r0, [r7, #12]
 2736 0008 B960     		str	r1, [r7, #8]
 2737 000a 7A60     		str	r2, [r7, #4]
 2738 000c 3B60     		str	r3, [r7]
 994:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index = 0U;
 2739              		.loc 1 994 17
 2740 000e 0023     		movs	r3, #0
 2741 0010 7B61     		str	r3, [r7, #20]
 995:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 2742              		.loc 1 995 12
 2743 0012 0023     		movs	r3, #0
 2744 0014 3B62     		str	r3, [r7, #32]
 996:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numSpareAreaRead = 0U, nandaddress = 0U, columnaddress = 
 2745              		.loc 1 996 12
 2746 0016 0023     		movs	r3, #0
 2747 0018 FB62     		str	r3, [r7, #44]
 2748              		.loc 1 996 32
 2749 001a 0023     		movs	r3, #0
 2750 001c FB61     		str	r3, [r7, #28]
 2751              		.loc 1 996 43
 2752 001e 0023     		movs	r3, #0
 2753 0020 BB62     		str	r3, [r7, #40]
 2754              		.loc 1 996 66
 2755 0022 0023     		movs	r3, #0
 2756 0024 7B62     		str	r3, [r7, #36]
 2757              		.loc 1 996 84
 2758 0026 0023     		movs	r3, #0
 2759 0028 BB61     		str	r3, [r7, #24]
 997:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
 998:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
 999:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);  
 2760              		.loc 1 999 3
 2761 002a FB68     		ldr	r3, [r7, #12]
 2762 002c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 2763 0030 012B     		cmp	r3, #1
 2764 0032 01D1     		bne	.L117
 2765              		.loc 1 999 3 is_stmt 0 discriminator 1
 2766 0034 0223     		movs	r3, #2
 2767 0036 13E1     		b	.L118
 2768              	.L117:
 2769              		.loc 1 999 3 discriminator 2
 2770 0038 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccmBJYMF.s 			page 75


 2771 003a 0122     		movs	r2, #1
 2772 003c 83F82020 		strb	r2, [r3, #32]
1000:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1001:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1002:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 2773              		.loc 1 1002 11 is_stmt 1 discriminator 2
 2774 0040 FB68     		ldr	r3, [r7, #12]
 2775 0042 93F82130 		ldrb	r3, [r3, #33]
 2776 0046 DBB2     		uxtb	r3, r3
 2777              		.loc 1 1002 5 discriminator 2
 2778 0048 022B     		cmp	r3, #2
 2779 004a 01D1     		bne	.L119
1003:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1004:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 2780              		.loc 1 1004 13
 2781 004c 0223     		movs	r3, #2
 2782 004e 07E1     		b	.L118
 2783              	.L119:
1005:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1006:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1007:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
1008:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 2784              		.loc 1 1008 17
 2785 0050 FB68     		ldr	r3, [r7, #12]
 2786 0052 5B68     		ldr	r3, [r3, #4]
 2787              		.loc 1 1008 5
 2788 0054 102B     		cmp	r3, #16
 2789 0056 03D1     		bne	.L120
1009:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1010:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 2790              		.loc 1 1010 19
 2791 0058 4FF0E043 		mov	r3, #1879048192
 2792 005c FB62     		str	r3, [r7, #44]
 2793 005e 02E0     		b	.L121
 2794              	.L120:
1011:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1012:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
1013:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1014:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 2795              		.loc 1 1014 19
 2796 0060 4FF00043 		mov	r3, #-2147483648
 2797 0064 FB62     		str	r3, [r7, #44]
 2798              	.L121:
1015:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1016:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1017:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1018:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 2799              		.loc 1 1018 16
 2800 0066 FB68     		ldr	r3, [r7, #12]
 2801 0068 0222     		movs	r2, #2
 2802 006a 83F82120 		strb	r2, [r3, #33]
1019:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1020:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
1021:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 2803              		.loc 1 1021 17
 2804 006e BB68     		ldr	r3, [r7, #8]
 2805 0070 1B88     		ldrh	r3, [r3]
ARM GAS  /tmp/ccmBJYMF.s 			page 76


 2806 0072 1946     		mov	r1, r3
 2807 0074 BB68     		ldr	r3, [r7, #8]
 2808 0076 9B88     		ldrh	r3, [r3, #4]
 2809 0078 1A46     		mov	r2, r3
 2810 007a BB68     		ldr	r3, [r7, #8]
 2811 007c 5B88     		ldrh	r3, [r3, #2]
 2812 007e 1846     		mov	r0, r3
 2813 0080 FB68     		ldr	r3, [r7, #12]
 2814 0082 9B6B     		ldr	r3, [r3, #56]
 2815 0084 00FB03F3 		mul	r3, r0, r3
 2816 0088 1344     		add	r3, r3, r2
 2817 008a FA68     		ldr	r2, [r7, #12]
 2818 008c D26A     		ldr	r2, [r2, #44]
 2819 008e 02FB03F3 		mul	r3, r2, r3
 2820              		.loc 1 1021 15
 2821 0092 0B44     		add	r3, r3, r1
 2822 0094 7B62     		str	r3, [r7, #36]
1022:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1023:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Column in page address */
1024:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   columnaddress = COLUMN_ADDRESS(hnand);
 2823              		.loc 1 1024 17
 2824 0096 FB68     		ldr	r3, [r7, #12]
 2825 0098 5B6A     		ldr	r3, [r3, #36]
 2826 009a BB61     		str	r3, [r7, #24]
1025:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1026:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Spare area(s) read loop */ 
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumSpareAreaToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.Bl
 2827              		.loc 1 1027 8
 2828 009c CAE0     		b	.L122
 2829              	.L133:
1028:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {     
1029:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
1030:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaRead);
 2830              		.loc 1 1030 42
 2831 009e BB6A     		ldr	r3, [r7, #40]
 2832 00a0 0133     		adds	r3, r3, #1
 2833              		.loc 1 1030 26
 2834 00a2 FA68     		ldr	r2, [r7, #12]
 2835 00a4 926A     		ldr	r2, [r2, #40]
 2836              		.loc 1 1030 10
 2837 00a6 02FB03F3 		mul	r3, r2, r3
 2838 00aa FB61     		str	r3, [r7, #28]
1031:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1032:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1033:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 2839              		.loc 1 1033 22
 2840 00ac FB68     		ldr	r3, [r7, #12]
 2841 00ae 5B6A     		ldr	r3, [r3, #36]
 2842              		.loc 1 1033 7
 2843 00b0 B3F5007F 		cmp	r3, #512
 2844 00b4 3AD8     		bhi	.L123
1034:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1035:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send read spare area command sequence */     
1036:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 2845              		.loc 1 1036 25
 2846 00b6 FB6A     		ldr	r3, [r7, #44]
 2847 00b8 43F48033 		orr	r3, r3, #65536
ARM GAS  /tmp/ccmBJYMF.s 			page 77


 2848              		.loc 1 1036 63
 2849 00bc 5022     		movs	r2, #80
 2850 00be 1A70     		strb	r2, [r3]
1037:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1038:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 2851              		.loc 1 1038 26
 2852 00c0 FB68     		ldr	r3, [r7, #12]
 2853 00c2 DB6A     		ldr	r3, [r3, #44]
 2854              		.loc 1 1038 52
 2855 00c4 FA68     		ldr	r2, [r7, #12]
 2856 00c6 126B     		ldr	r2, [r2, #48]
 2857              		.loc 1 1038 37
 2858 00c8 02FB03F3 		mul	r3, r2, r3
 2859              		.loc 1 1038 10
 2860 00cc B3F5803F 		cmp	r3, #65536
 2861 00d0 12D2     		bcs	.L124
1039:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1040:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2862              		.loc 1 1040 27
 2863 00d2 FB6A     		ldr	r3, [r7, #44]
 2864 00d4 43F40033 		orr	r3, r3, #131072
 2865              		.loc 1 1040 66
 2866 00d8 0022     		movs	r2, #0
 2867 00da 1A70     		strb	r2, [r3]
1041:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2868              		.loc 1 1041 27
 2869 00dc FB6A     		ldr	r3, [r7, #44]
 2870 00de 43F40033 		orr	r3, r3, #131072
 2871              		.loc 1 1041 68
 2872 00e2 7A6A     		ldr	r2, [r7, #36]
 2873 00e4 D2B2     		uxtb	r2, r2
 2874              		.loc 1 1041 66
 2875 00e6 1A70     		strb	r2, [r3]
1042:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2876              		.loc 1 1042 68
 2877 00e8 7B6A     		ldr	r3, [r7, #36]
 2878 00ea 1A0A     		lsrs	r2, r3, #8
 2879              		.loc 1 1042 27
 2880 00ec FB6A     		ldr	r3, [r7, #44]
 2881 00ee 43F40033 		orr	r3, r3, #131072
 2882              		.loc 1 1042 68
 2883 00f2 D2B2     		uxtb	r2, r2
 2884              		.loc 1 1042 66
 2885 00f4 1A70     		strb	r2, [r3]
 2886 00f6 63E0     		b	.L125
 2887              	.L124:
1043:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1044:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1045:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1046:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 2888              		.loc 1 1046 27
 2889 00f8 FB6A     		ldr	r3, [r7, #44]
 2890 00fa 43F40033 		orr	r3, r3, #131072
 2891              		.loc 1 1046 66
 2892 00fe 0022     		movs	r2, #0
 2893 0100 1A70     		strb	r2, [r3]
1047:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
ARM GAS  /tmp/ccmBJYMF.s 			page 78


 2894              		.loc 1 1047 27
 2895 0102 FB6A     		ldr	r3, [r7, #44]
 2896 0104 43F40033 		orr	r3, r3, #131072
 2897              		.loc 1 1047 68
 2898 0108 7A6A     		ldr	r2, [r7, #36]
 2899 010a D2B2     		uxtb	r2, r2
 2900              		.loc 1 1047 66
 2901 010c 1A70     		strb	r2, [r3]
1048:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2902              		.loc 1 1048 68
 2903 010e 7B6A     		ldr	r3, [r7, #36]
 2904 0110 1A0A     		lsrs	r2, r3, #8
 2905              		.loc 1 1048 27
 2906 0112 FB6A     		ldr	r3, [r7, #44]
 2907 0114 43F40033 		orr	r3, r3, #131072
 2908              		.loc 1 1048 68
 2909 0118 D2B2     		uxtb	r2, r2
 2910              		.loc 1 1048 66
 2911 011a 1A70     		strb	r2, [r3]
1049:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 2912              		.loc 1 1049 68
 2913 011c 7B6A     		ldr	r3, [r7, #36]
 2914 011e 1A0C     		lsrs	r2, r3, #16
 2915              		.loc 1 1049 27
 2916 0120 FB6A     		ldr	r3, [r7, #44]
 2917 0122 43F40033 		orr	r3, r3, #131072
 2918              		.loc 1 1049 68
 2919 0126 D2B2     		uxtb	r2, r2
 2920              		.loc 1 1049 66
 2921 0128 1A70     		strb	r2, [r3]
 2922 012a 49E0     		b	.L125
 2923              	.L123:
1050:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1051:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1052:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1053:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1054:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send read spare area command sequence */ 
1055:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 2924              		.loc 1 1055 25
 2925 012c FB6A     		ldr	r3, [r7, #44]
 2926 012e 43F48033 		orr	r3, r3, #65536
 2927              		.loc 1 1055 63
 2928 0132 0022     		movs	r2, #0
 2929 0134 1A70     		strb	r2, [r3]
1056:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1057:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 2930              		.loc 1 1057 26
 2931 0136 FB68     		ldr	r3, [r7, #12]
 2932 0138 DB6A     		ldr	r3, [r3, #44]
 2933              		.loc 1 1057 52
 2934 013a FA68     		ldr	r2, [r7, #12]
 2935 013c 126B     		ldr	r2, [r2, #48]
 2936              		.loc 1 1057 37
 2937 013e 02FB03F3 		mul	r3, r2, r3
 2938              		.loc 1 1057 10
 2939 0142 B3F5803F 		cmp	r3, #65536
 2940 0146 1AD2     		bcs	.L126
ARM GAS  /tmp/ccmBJYMF.s 			page 79


1058:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1059:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 2941              		.loc 1 1059 27
 2942 0148 FB6A     		ldr	r3, [r7, #44]
 2943 014a 43F40033 		orr	r3, r3, #131072
 2944              		.loc 1 1059 68
 2945 014e BA69     		ldr	r2, [r7, #24]
 2946 0150 D2B2     		uxtb	r2, r2
 2947              		.loc 1 1059 66
 2948 0152 1A70     		strb	r2, [r3]
1060:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 2949              		.loc 1 1060 68
 2950 0154 BB69     		ldr	r3, [r7, #24]
 2951 0156 1A0A     		lsrs	r2, r3, #8
 2952              		.loc 1 1060 27
 2953 0158 FB6A     		ldr	r3, [r7, #44]
 2954 015a 43F40033 		orr	r3, r3, #131072
 2955              		.loc 1 1060 68
 2956 015e D2B2     		uxtb	r2, r2
 2957              		.loc 1 1060 66
 2958 0160 1A70     		strb	r2, [r3]
1061:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2959              		.loc 1 1061 27
 2960 0162 FB6A     		ldr	r3, [r7, #44]
 2961 0164 43F40033 		orr	r3, r3, #131072
 2962              		.loc 1 1061 68
 2963 0168 7A6A     		ldr	r2, [r7, #36]
 2964 016a D2B2     		uxtb	r2, r2
 2965              		.loc 1 1061 66
 2966 016c 1A70     		strb	r2, [r3]
1062:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 2967              		.loc 1 1062 68
 2968 016e 7B6A     		ldr	r3, [r7, #36]
 2969 0170 1A0A     		lsrs	r2, r3, #8
 2970              		.loc 1 1062 27
 2971 0172 FB6A     		ldr	r3, [r7, #44]
 2972 0174 43F40033 		orr	r3, r3, #131072
 2973              		.loc 1 1062 68
 2974 0178 D2B2     		uxtb	r2, r2
 2975              		.loc 1 1062 66
 2976 017a 1A70     		strb	r2, [r3]
 2977 017c 20E0     		b	.L125
 2978              	.L126:
1063:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1064:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1065:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1066:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 2979              		.loc 1 1066 27
 2980 017e FB6A     		ldr	r3, [r7, #44]
 2981 0180 43F40033 		orr	r3, r3, #131072
 2982              		.loc 1 1066 68
 2983 0184 BA69     		ldr	r2, [r7, #24]
 2984 0186 D2B2     		uxtb	r2, r2
 2985              		.loc 1 1066 66
 2986 0188 1A70     		strb	r2, [r3]
1067:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 2987              		.loc 1 1067 68
ARM GAS  /tmp/ccmBJYMF.s 			page 80


 2988 018a BB69     		ldr	r3, [r7, #24]
 2989 018c 1A0A     		lsrs	r2, r3, #8
 2990              		.loc 1 1067 27
 2991 018e FB6A     		ldr	r3, [r7, #44]
 2992 0190 43F40033 		orr	r3, r3, #131072
 2993              		.loc 1 1067 68
 2994 0194 D2B2     		uxtb	r2, r2
 2995              		.loc 1 1067 66
 2996 0196 1A70     		strb	r2, [r3]
1068:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 2997              		.loc 1 1068 27
 2998 0198 FB6A     		ldr	r3, [r7, #44]
 2999 019a 43F40033 		orr	r3, r3, #131072
 3000              		.loc 1 1068 68
 3001 019e 7A6A     		ldr	r2, [r7, #36]
 3002 01a0 D2B2     		uxtb	r2, r2
 3003              		.loc 1 1068 66
 3004 01a2 1A70     		strb	r2, [r3]
1069:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3005              		.loc 1 1069 68
 3006 01a4 7B6A     		ldr	r3, [r7, #36]
 3007 01a6 1A0A     		lsrs	r2, r3, #8
 3008              		.loc 1 1069 27
 3009 01a8 FB6A     		ldr	r3, [r7, #44]
 3010 01aa 43F40033 		orr	r3, r3, #131072
 3011              		.loc 1 1069 68
 3012 01ae D2B2     		uxtb	r2, r2
 3013              		.loc 1 1069 66
 3014 01b0 1A70     		strb	r2, [r3]
1070:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 3015              		.loc 1 1070 68
 3016 01b2 7B6A     		ldr	r3, [r7, #36]
 3017 01b4 1A0C     		lsrs	r2, r3, #16
 3018              		.loc 1 1070 27
 3019 01b6 FB6A     		ldr	r3, [r7, #44]
 3020 01b8 43F40033 		orr	r3, r3, #131072
 3021              		.loc 1 1070 68
 3022 01bc D2B2     		uxtb	r2, r2
 3023              		.loc 1 1070 66
 3024 01be 1A70     		strb	r2, [r3]
 3025              	.L125:
1071:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1072:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1073:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1074:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 3026              		.loc 1 1074 23
 3027 01c0 FB6A     		ldr	r3, [r7, #44]
 3028 01c2 43F48033 		orr	r3, r3, #65536
 3029              		.loc 1 1074 61
 3030 01c6 3022     		movs	r2, #48
 3031 01c8 1A70     		strb	r2, [r3]
1075:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1076:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
 3032              		.loc 1 1076 21
 3033 01ca FB68     		ldr	r3, [r7, #12]
 3034 01cc 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3035              		.loc 1 1076 7
ARM GAS  /tmp/ccmBJYMF.s 			page 81


 3036 01d0 012B     		cmp	r3, #1
 3037 01d2 22D1     		bne	.L130
1077:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1078:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
1079:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 3038              		.loc 1 1079 19
 3039 01d4 FFF7FEFF 		bl	HAL_GetTick
 3040 01d8 3862     		str	r0, [r7, #32]
1080:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1081:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Read status until NAND is ready */
1082:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 3041              		.loc 1 1082 12
 3042 01da 09E0     		b	.L128
 3043              	.L129:
1083:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1084:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 3044              		.loc 1 1084 13
 3045 01dc FFF7FEFF 		bl	HAL_GetTick
 3046 01e0 0246     		mov	r2, r0
 3047              		.loc 1 1084 27
 3048 01e2 3B6A     		ldr	r3, [r7, #32]
 3049 01e4 D31A     		subs	r3, r2, r3
 3050              		.loc 1 1084 11
 3051 01e6 B3F1807F 		cmp	r3, #16777216
 3052 01ea 01D9     		bls	.L128
1085:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         {
1086:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           return HAL_TIMEOUT; 
 3053              		.loc 1 1086 18
 3054 01ec 0323     		movs	r3, #3
 3055 01ee 37E0     		b	.L118
 3056              	.L128:
1082:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 3057              		.loc 1 1082 13
 3058 01f0 F868     		ldr	r0, [r7, #12]
 3059 01f2 FFF7FEFF 		bl	HAL_NAND_Read_Status
 3060 01f6 0346     		mov	r3, r0
1082:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 3061              		.loc 1 1082 12
 3062 01f8 402B     		cmp	r3, #64
 3063 01fa EFD1     		bne	.L129
1087:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         }
1088:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1089:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1090:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Go back to read mode */
1091:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 3064              		.loc 1 1091 25
 3065 01fc FB6A     		ldr	r3, [r7, #44]
 3066 01fe 43F48033 		orr	r3, r3, #65536
 3067              		.loc 1 1091 63
 3068 0202 0022     		movs	r2, #0
 3069 0204 1A70     		strb	r2, [r3]
1092:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1093:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1094:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Get Data into Buffer */
1095:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 3070              		.loc 1 1095 5
 3071 0206 08E0     		b	.L130
ARM GAS  /tmp/ccmBJYMF.s 			page 82


 3072              	.L131:
1096:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1097:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 3073              		.loc 1 1097 32 discriminator 2
 3074 0208 FA6A     		ldr	r2, [r7, #44]
 3075              		.loc 1 1097 8 discriminator 2
 3076 020a 7B68     		ldr	r3, [r7, #4]
 3077 020c 591C     		adds	r1, r3, #1
 3078 020e 7960     		str	r1, [r7, #4]
 3079              		.loc 1 1097 31 discriminator 2
 3080 0210 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 3081              		.loc 1 1097 29 discriminator 2
 3082 0212 1A70     		strb	r2, [r3]
1095:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3083              		.loc 1 1095 30 discriminator 2
 3084 0214 7B69     		ldr	r3, [r7, #20]
 3085 0216 0133     		adds	r3, r3, #1
 3086 0218 7B61     		str	r3, [r7, #20]
 3087              	.L130:
1095:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3088              		.loc 1 1095 17 discriminator 1
 3089 021a 7B69     		ldr	r3, [r7, #20]
1095:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3090              		.loc 1 1095 5 discriminator 1
 3091 021c FA69     		ldr	r2, [r7, #28]
 3092 021e 9A42     		cmp	r2, r3
 3093 0220 F2D8     		bhi	.L131
1098:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1099:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1100:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment read spare areas number */
1101:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numSpareAreaRead++;
 3094              		.loc 1 1101 21
 3095 0222 BB6A     		ldr	r3, [r7, #40]
 3096 0224 0133     		adds	r3, r3, #1
 3097 0226 BB62     		str	r3, [r7, #40]
1102:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1103:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement spare areas to read */
1104:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumSpareAreaToRead--;
 3098              		.loc 1 1104 23
 3099 0228 3B68     		ldr	r3, [r7]
 3100 022a 013B     		subs	r3, r3, #1
 3101 022c 3B60     		str	r3, [r7]
1105:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1106:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
1107:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 3102              		.loc 1 1107 17
 3103 022e 7B6A     		ldr	r3, [r7, #36]
 3104 0230 0133     		adds	r3, r3, #1
 3105 0232 7B62     		str	r3, [r7, #36]
 3106              	.L122:
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {     
 3107              		.loc 1 1027 8
 3108 0234 3B68     		ldr	r3, [r7]
 3109 0236 002B     		cmp	r3, #0
 3110 0238 09D0     		beq	.L132
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {     
 3111              		.loc 1 1027 69 discriminator 1
ARM GAS  /tmp/ccmBJYMF.s 			page 83


 3112 023a FB68     		ldr	r3, [r7, #12]
 3113 023c DB6A     		ldr	r3, [r3, #44]
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {     
 3114              		.loc 1 1027 97 discriminator 1
 3115 023e FA68     		ldr	r2, [r7, #12]
 3116 0240 126B     		ldr	r2, [r2, #48]
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {     
 3117              		.loc 1 1027 81 discriminator 1
 3118 0242 02FB03F3 		mul	r3, r2, r3
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {     
 3119              		.loc 1 1027 36 discriminator 1
 3120 0246 7A6A     		ldr	r2, [r7, #36]
 3121 0248 9A42     		cmp	r2, r3
 3122 024a FFF428AF 		bcc	.L133
 3123              	.L132:
1108:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1109:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1110:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1111:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 3124              		.loc 1 1111 16
 3125 024e FB68     		ldr	r3, [r7, #12]
 3126 0250 0122     		movs	r2, #1
 3127 0252 83F82120 		strb	r2, [r3, #33]
1112:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1113:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
1114:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 3128              		.loc 1 1114 3
 3129 0256 FB68     		ldr	r3, [r7, #12]
 3130 0258 0022     		movs	r2, #0
 3131 025a 83F82020 		strb	r2, [r3, #32]
1115:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1116:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;  
 3132              		.loc 1 1116 10
 3133 025e 0023     		movs	r3, #0
 3134              	.L118:
1117:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 3135              		.loc 1 1117 1
 3136 0260 1846     		mov	r0, r3
 3137 0262 3037     		adds	r7, r7, #48
 3138              	.LCFI74:
 3139              		.cfi_def_cfa_offset 8
 3140 0264 BD46     		mov	sp, r7
 3141              	.LCFI75:
 3142              		.cfi_def_cfa_register 13
 3143              		@ sp needed
 3144 0266 80BD     		pop	{r7, pc}
 3145              		.cfi_endproc
 3146              	.LFE139:
 3148              		.section	.text.HAL_NAND_Read_SpareArea_16b,"ax",%progbits
 3149              		.align	1
 3150              		.global	HAL_NAND_Read_SpareArea_16b
 3151              		.syntax unified
 3152              		.thumb
 3153              		.thumb_func
 3154              		.fpu fpv4-sp-d16
 3156              	HAL_NAND_Read_SpareArea_16b:
 3157              	.LFB140:
ARM GAS  /tmp/ccmBJYMF.s 			page 84


1118:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1119:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1120:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Read Spare area(s) from NAND memory (16-bits addressing)
1121:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1122:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1123:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1124:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer pointer to source buffer to write. pBuffer should be 16bits aligned.
1125:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumSpareAreaToRead Number of spare area to read  
1126:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1127:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** */
1128:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Read_SpareArea_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddr
1129:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 3158              		.loc 1 1129 1
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 48
 3161              		@ frame_needed = 1, uses_anonymous_args = 0
 3162 0000 80B5     		push	{r7, lr}
 3163              	.LCFI76:
 3164              		.cfi_def_cfa_offset 8
 3165              		.cfi_offset 7, -8
 3166              		.cfi_offset 14, -4
 3167 0002 8CB0     		sub	sp, sp, #48
 3168              	.LCFI77:
 3169              		.cfi_def_cfa_offset 56
 3170 0004 00AF     		add	r7, sp, #0
 3171              	.LCFI78:
 3172              		.cfi_def_cfa_register 7
 3173 0006 F860     		str	r0, [r7, #12]
 3174 0008 B960     		str	r1, [r7, #8]
 3175 000a 7A60     		str	r2, [r7, #4]
 3176 000c 3B60     		str	r3, [r7]
1130:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index = 0U; 
 3177              		.loc 1 1130 17
 3178 000e 0023     		movs	r3, #0
 3179 0010 7B61     		str	r3, [r7, #20]
1131:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 3180              		.loc 1 1131 12
 3181 0012 0023     		movs	r3, #0
 3182 0014 3B62     		str	r3, [r7, #32]
1132:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numSpareAreaRead = 0U, nandaddress = 0U, columnaddress = 
 3183              		.loc 1 1132 12
 3184 0016 0023     		movs	r3, #0
 3185 0018 FB62     		str	r3, [r7, #44]
 3186              		.loc 1 1132 32
 3187 001a 0023     		movs	r3, #0
 3188 001c FB61     		str	r3, [r7, #28]
 3189              		.loc 1 1132 43
 3190 001e 0023     		movs	r3, #0
 3191 0020 BB62     		str	r3, [r7, #40]
 3192              		.loc 1 1132 66
 3193 0022 0023     		movs	r3, #0
 3194 0024 7B62     		str	r3, [r7, #36]
 3195              		.loc 1 1132 84
 3196 0026 0023     		movs	r3, #0
 3197 0028 BB61     		str	r3, [r7, #24]
1133:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1134:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
ARM GAS  /tmp/ccmBJYMF.s 			page 85


1135:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);
 3198              		.loc 1 1135 3
 3199 002a FB68     		ldr	r3, [r7, #12]
 3200 002c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3201 0030 012B     		cmp	r3, #1
 3202 0032 01D1     		bne	.L135
 3203              		.loc 1 1135 3 is_stmt 0 discriminator 1
 3204 0034 0223     		movs	r3, #2
 3205 0036 14E1     		b	.L136
 3206              	.L135:
 3207              		.loc 1 1135 3 discriminator 2
 3208 0038 FB68     		ldr	r3, [r7, #12]
 3209 003a 0122     		movs	r2, #1
 3210 003c 83F82020 		strb	r2, [r3, #32]
1136:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1137:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1138:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 3211              		.loc 1 1138 11 is_stmt 1 discriminator 2
 3212 0040 FB68     		ldr	r3, [r7, #12]
 3213 0042 93F82130 		ldrb	r3, [r3, #33]
 3214 0046 DBB2     		uxtb	r3, r3
 3215              		.loc 1 1138 5 discriminator 2
 3216 0048 022B     		cmp	r3, #2
 3217 004a 01D1     		bne	.L137
1139:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1140:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 3218              		.loc 1 1140 13
 3219 004c 0223     		movs	r3, #2
 3220 004e 08E1     		b	.L136
 3221              	.L137:
1141:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1142:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1143:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
1144:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 3222              		.loc 1 1144 17
 3223 0050 FB68     		ldr	r3, [r7, #12]
 3224 0052 5B68     		ldr	r3, [r3, #4]
 3225              		.loc 1 1144 5
 3226 0054 102B     		cmp	r3, #16
 3227 0056 03D1     		bne	.L138
1145:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1146:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 3228              		.loc 1 1146 19
 3229 0058 4FF0E043 		mov	r3, #1879048192
 3230 005c FB62     		str	r3, [r7, #44]
 3231 005e 02E0     		b	.L139
 3232              	.L138:
1147:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1148:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
1149:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1150:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 3233              		.loc 1 1150 19
 3234 0060 4FF00043 		mov	r3, #-2147483648
 3235 0064 FB62     		str	r3, [r7, #44]
 3236              	.L139:
1151:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1152:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
ARM GAS  /tmp/ccmBJYMF.s 			page 86


1153:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1154:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 3237              		.loc 1 1154 16
 3238 0066 FB68     		ldr	r3, [r7, #12]
 3239 0068 0222     		movs	r2, #2
 3240 006a 83F82120 		strb	r2, [r3, #33]
1155:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1156:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
1157:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 3241              		.loc 1 1157 17
 3242 006e BB68     		ldr	r3, [r7, #8]
 3243 0070 1B88     		ldrh	r3, [r3]
 3244 0072 1946     		mov	r1, r3
 3245 0074 BB68     		ldr	r3, [r7, #8]
 3246 0076 9B88     		ldrh	r3, [r3, #4]
 3247 0078 1A46     		mov	r2, r3
 3248 007a BB68     		ldr	r3, [r7, #8]
 3249 007c 5B88     		ldrh	r3, [r3, #2]
 3250 007e 1846     		mov	r0, r3
 3251 0080 FB68     		ldr	r3, [r7, #12]
 3252 0082 9B6B     		ldr	r3, [r3, #56]
 3253 0084 00FB03F3 		mul	r3, r0, r3
 3254 0088 1344     		add	r3, r3, r2
 3255 008a FA68     		ldr	r2, [r7, #12]
 3256 008c D26A     		ldr	r2, [r2, #44]
 3257 008e 02FB03F3 		mul	r3, r2, r3
 3258              		.loc 1 1157 15
 3259 0092 0B44     		add	r3, r3, r1
 3260 0094 7B62     		str	r3, [r7, #36]
1158:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1159:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Column in page address */
1160:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   columnaddress = (uint32_t)(COLUMN_ADDRESS(hnand) * 2U);
 3261              		.loc 1 1160 30
 3262 0096 FB68     		ldr	r3, [r7, #12]
 3263 0098 5B6A     		ldr	r3, [r3, #36]
 3264              		.loc 1 1160 17
 3265 009a 5B00     		lsls	r3, r3, #1
 3266 009c BB61     		str	r3, [r7, #24]
1161:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1162:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Spare area(s) read loop */ 
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumSpareAreaToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.Bl
 3267              		.loc 1 1163 8
 3268 009e CAE0     		b	.L140
 3269              	.L151:
1164:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1165:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
1166:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaRead);
 3270              		.loc 1 1166 42
 3271 00a0 BB6A     		ldr	r3, [r7, #40]
 3272 00a2 0133     		adds	r3, r3, #1
 3273              		.loc 1 1166 26
 3274 00a4 FA68     		ldr	r2, [r7, #12]
 3275 00a6 926A     		ldr	r2, [r2, #40]
 3276              		.loc 1 1166 10
 3277 00a8 02FB03F3 		mul	r3, r2, r3
 3278 00ac FB61     		str	r3, [r7, #28]
1167:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
ARM GAS  /tmp/ccmBJYMF.s 			page 87


1168:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1169:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 3279              		.loc 1 1169 22
 3280 00ae FB68     		ldr	r3, [r7, #12]
 3281 00b0 5B6A     		ldr	r3, [r3, #36]
 3282              		.loc 1 1169 7
 3283 00b2 B3F5007F 		cmp	r3, #512
 3284 00b6 3AD8     		bhi	.L141
1170:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1171:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send read spare area command sequence */     
1172:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 3285              		.loc 1 1172 25
 3286 00b8 FB6A     		ldr	r3, [r7, #44]
 3287 00ba 43F48033 		orr	r3, r3, #65536
 3288              		.loc 1 1172 63
 3289 00be 5022     		movs	r2, #80
 3290 00c0 1A70     		strb	r2, [r3]
1173:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1174:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 3291              		.loc 1 1174 26
 3292 00c2 FB68     		ldr	r3, [r7, #12]
 3293 00c4 DB6A     		ldr	r3, [r3, #44]
 3294              		.loc 1 1174 52
 3295 00c6 FA68     		ldr	r2, [r7, #12]
 3296 00c8 126B     		ldr	r2, [r2, #48]
 3297              		.loc 1 1174 37
 3298 00ca 02FB03F3 		mul	r3, r2, r3
 3299              		.loc 1 1174 10
 3300 00ce B3F5803F 		cmp	r3, #65536
 3301 00d2 12D2     		bcs	.L142
1175:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1176:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 3302              		.loc 1 1176 27
 3303 00d4 FB6A     		ldr	r3, [r7, #44]
 3304 00d6 43F40033 		orr	r3, r3, #131072
 3305              		.loc 1 1176 66
 3306 00da 0022     		movs	r2, #0
 3307 00dc 1A70     		strb	r2, [r3]
1177:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3308              		.loc 1 1177 27
 3309 00de FB6A     		ldr	r3, [r7, #44]
 3310 00e0 43F40033 		orr	r3, r3, #131072
 3311              		.loc 1 1177 68
 3312 00e4 7A6A     		ldr	r2, [r7, #36]
 3313 00e6 D2B2     		uxtb	r2, r2
 3314              		.loc 1 1177 66
 3315 00e8 1A70     		strb	r2, [r3]
1178:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3316              		.loc 1 1178 68
 3317 00ea 7B6A     		ldr	r3, [r7, #36]
 3318 00ec 1A0A     		lsrs	r2, r3, #8
 3319              		.loc 1 1178 27
 3320 00ee FB6A     		ldr	r3, [r7, #44]
 3321 00f0 43F40033 		orr	r3, r3, #131072
 3322              		.loc 1 1178 68
 3323 00f4 D2B2     		uxtb	r2, r2
 3324              		.loc 1 1178 66
ARM GAS  /tmp/ccmBJYMF.s 			page 88


 3325 00f6 1A70     		strb	r2, [r3]
 3326 00f8 63E0     		b	.L143
 3327              	.L142:
1179:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1180:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1181:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1182:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 3328              		.loc 1 1182 27
 3329 00fa FB6A     		ldr	r3, [r7, #44]
 3330 00fc 43F40033 		orr	r3, r3, #131072
 3331              		.loc 1 1182 66
 3332 0100 0022     		movs	r2, #0
 3333 0102 1A70     		strb	r2, [r3]
1183:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3334              		.loc 1 1183 27
 3335 0104 FB6A     		ldr	r3, [r7, #44]
 3336 0106 43F40033 		orr	r3, r3, #131072
 3337              		.loc 1 1183 68
 3338 010a 7A6A     		ldr	r2, [r7, #36]
 3339 010c D2B2     		uxtb	r2, r2
 3340              		.loc 1 1183 66
 3341 010e 1A70     		strb	r2, [r3]
1184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3342              		.loc 1 1184 68
 3343 0110 7B6A     		ldr	r3, [r7, #36]
 3344 0112 1A0A     		lsrs	r2, r3, #8
 3345              		.loc 1 1184 27
 3346 0114 FB6A     		ldr	r3, [r7, #44]
 3347 0116 43F40033 		orr	r3, r3, #131072
 3348              		.loc 1 1184 68
 3349 011a D2B2     		uxtb	r2, r2
 3350              		.loc 1 1184 66
 3351 011c 1A70     		strb	r2, [r3]
1185:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 3352              		.loc 1 1185 68
 3353 011e 7B6A     		ldr	r3, [r7, #36]
 3354 0120 1A0C     		lsrs	r2, r3, #16
 3355              		.loc 1 1185 27
 3356 0122 FB6A     		ldr	r3, [r7, #44]
 3357 0124 43F40033 		orr	r3, r3, #131072
 3358              		.loc 1 1185 68
 3359 0128 D2B2     		uxtb	r2, r2
 3360              		.loc 1 1185 66
 3361 012a 1A70     		strb	r2, [r3]
 3362 012c 49E0     		b	.L143
 3363              	.L141:
1186:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1187:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1188:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1189:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1190:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send read spare area command sequence */     
1191:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 3364              		.loc 1 1191 25
 3365 012e FB6A     		ldr	r3, [r7, #44]
 3366 0130 43F48033 		orr	r3, r3, #65536
 3367              		.loc 1 1191 63
 3368 0134 0022     		movs	r2, #0
ARM GAS  /tmp/ccmBJYMF.s 			page 89


 3369 0136 1A70     		strb	r2, [r3]
1192:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1193:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 3370              		.loc 1 1193 26
 3371 0138 FB68     		ldr	r3, [r7, #12]
 3372 013a DB6A     		ldr	r3, [r3, #44]
 3373              		.loc 1 1193 52
 3374 013c FA68     		ldr	r2, [r7, #12]
 3375 013e 126B     		ldr	r2, [r2, #48]
 3376              		.loc 1 1193 37
 3377 0140 02FB03F3 		mul	r3, r2, r3
 3378              		.loc 1 1193 10
 3379 0144 B3F5803F 		cmp	r3, #65536
 3380 0148 1AD2     		bcs	.L144
1194:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1195:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 3381              		.loc 1 1195 27
 3382 014a FB6A     		ldr	r3, [r7, #44]
 3383 014c 43F40033 		orr	r3, r3, #131072
 3384              		.loc 1 1195 68
 3385 0150 BA69     		ldr	r2, [r7, #24]
 3386 0152 D2B2     		uxtb	r2, r2
 3387              		.loc 1 1195 66
 3388 0154 1A70     		strb	r2, [r3]
1196:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 3389              		.loc 1 1196 68
 3390 0156 BB69     		ldr	r3, [r7, #24]
 3391 0158 1A0A     		lsrs	r2, r3, #8
 3392              		.loc 1 1196 27
 3393 015a FB6A     		ldr	r3, [r7, #44]
 3394 015c 43F40033 		orr	r3, r3, #131072
 3395              		.loc 1 1196 68
 3396 0160 D2B2     		uxtb	r2, r2
 3397              		.loc 1 1196 66
 3398 0162 1A70     		strb	r2, [r3]
1197:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3399              		.loc 1 1197 27
 3400 0164 FB6A     		ldr	r3, [r7, #44]
 3401 0166 43F40033 		orr	r3, r3, #131072
 3402              		.loc 1 1197 68
 3403 016a 7A6A     		ldr	r2, [r7, #36]
 3404 016c D2B2     		uxtb	r2, r2
 3405              		.loc 1 1197 66
 3406 016e 1A70     		strb	r2, [r3]
1198:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3407              		.loc 1 1198 68
 3408 0170 7B6A     		ldr	r3, [r7, #36]
 3409 0172 1A0A     		lsrs	r2, r3, #8
 3410              		.loc 1 1198 27
 3411 0174 FB6A     		ldr	r3, [r7, #44]
 3412 0176 43F40033 		orr	r3, r3, #131072
 3413              		.loc 1 1198 68
 3414 017a D2B2     		uxtb	r2, r2
 3415              		.loc 1 1198 66
 3416 017c 1A70     		strb	r2, [r3]
 3417 017e 20E0     		b	.L143
 3418              	.L144:
ARM GAS  /tmp/ccmBJYMF.s 			page 90


1199:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1200:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1201:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1202:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 3419              		.loc 1 1202 27
 3420 0180 FB6A     		ldr	r3, [r7, #44]
 3421 0182 43F40033 		orr	r3, r3, #131072
 3422              		.loc 1 1202 68
 3423 0186 BA69     		ldr	r2, [r7, #24]
 3424 0188 D2B2     		uxtb	r2, r2
 3425              		.loc 1 1202 66
 3426 018a 1A70     		strb	r2, [r3]
1203:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 3427              		.loc 1 1203 68
 3428 018c BB69     		ldr	r3, [r7, #24]
 3429 018e 1A0A     		lsrs	r2, r3, #8
 3430              		.loc 1 1203 27
 3431 0190 FB6A     		ldr	r3, [r7, #44]
 3432 0192 43F40033 		orr	r3, r3, #131072
 3433              		.loc 1 1203 68
 3434 0196 D2B2     		uxtb	r2, r2
 3435              		.loc 1 1203 66
 3436 0198 1A70     		strb	r2, [r3]
1204:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3437              		.loc 1 1204 27
 3438 019a FB6A     		ldr	r3, [r7, #44]
 3439 019c 43F40033 		orr	r3, r3, #131072
 3440              		.loc 1 1204 68
 3441 01a0 7A6A     		ldr	r2, [r7, #36]
 3442 01a2 D2B2     		uxtb	r2, r2
 3443              		.loc 1 1204 66
 3444 01a4 1A70     		strb	r2, [r3]
1205:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3445              		.loc 1 1205 68
 3446 01a6 7B6A     		ldr	r3, [r7, #36]
 3447 01a8 1A0A     		lsrs	r2, r3, #8
 3448              		.loc 1 1205 27
 3449 01aa FB6A     		ldr	r3, [r7, #44]
 3450 01ac 43F40033 		orr	r3, r3, #131072
 3451              		.loc 1 1205 68
 3452 01b0 D2B2     		uxtb	r2, r2
 3453              		.loc 1 1205 66
 3454 01b2 1A70     		strb	r2, [r3]
1206:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 3455              		.loc 1 1206 68
 3456 01b4 7B6A     		ldr	r3, [r7, #36]
 3457 01b6 1A0C     		lsrs	r2, r3, #16
 3458              		.loc 1 1206 27
 3459 01b8 FB6A     		ldr	r3, [r7, #44]
 3460 01ba 43F40033 		orr	r3, r3, #131072
 3461              		.loc 1 1206 68
 3462 01be D2B2     		uxtb	r2, r2
 3463              		.loc 1 1206 66
 3464 01c0 1A70     		strb	r2, [r3]
 3465              	.L143:
1207:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1208:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
ARM GAS  /tmp/ccmBJYMF.s 			page 91


1209:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1210:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 3466              		.loc 1 1210 23
 3467 01c2 FB6A     		ldr	r3, [r7, #44]
 3468 01c4 43F48033 		orr	r3, r3, #65536
 3469              		.loc 1 1210 61
 3470 01c8 3022     		movs	r2, #48
 3471 01ca 1A70     		strb	r2, [r3]
1211:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if(hnand->Config.ExtraCommandEnable == ENABLE)
 3472              		.loc 1 1212 21
 3473 01cc FB68     		ldr	r3, [r7, #12]
 3474 01ce 93F83C30 		ldrb	r3, [r3, #60]	@ zero_extendqisi2
 3475              		.loc 1 1212 7
 3476 01d2 012B     		cmp	r3, #1
 3477 01d4 22D1     		bne	.L148
1213:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1214:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
1215:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 3478              		.loc 1 1215 19
 3479 01d6 FFF7FEFF 		bl	HAL_GetTick
 3480 01da 3862     		str	r0, [r7, #32]
1216:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1217:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Read status until NAND is ready */
1218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 3481              		.loc 1 1218 12
 3482 01dc 09E0     		b	.L146
 3483              	.L147:
1219:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1220:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 3484              		.loc 1 1220 13
 3485 01de FFF7FEFF 		bl	HAL_GetTick
 3486 01e2 0246     		mov	r2, r0
 3487              		.loc 1 1220 27
 3488 01e4 3B6A     		ldr	r3, [r7, #32]
 3489 01e6 D31A     		subs	r3, r2, r3
 3490              		.loc 1 1220 11
 3491 01e8 B3F1807F 		cmp	r3, #16777216
 3492 01ec 01D9     		bls	.L146
1221:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         {
1222:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****           return HAL_TIMEOUT; 
 3493              		.loc 1 1222 18
 3494 01ee 0323     		movs	r3, #3
 3495 01f0 37E0     		b	.L136
 3496              	.L146:
1218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 3497              		.loc 1 1218 13
 3498 01f2 F868     		ldr	r0, [r7, #12]
 3499 01f4 FFF7FEFF 		bl	HAL_NAND_Read_Status
 3500 01f8 0346     		mov	r3, r0
1218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
 3501              		.loc 1 1218 12
 3502 01fa 402B     		cmp	r3, #64
 3503 01fc EFD1     		bne	.L147
1223:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         }
1224:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1225:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
ARM GAS  /tmp/ccmBJYMF.s 			page 92


1226:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Go back to read mode */
1227:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 3504              		.loc 1 1227 25
 3505 01fe FB6A     		ldr	r3, [r7, #44]
 3506 0200 43F48033 		orr	r3, r3, #65536
 3507              		.loc 1 1227 63
 3508 0204 0022     		movs	r2, #0
 3509 0206 1A70     		strb	r2, [r3]
1228:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1229:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1230:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Get Data into Buffer */
1231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 3510              		.loc 1 1231 5
 3511 0208 08E0     		b	.L148
 3512              	.L149:
1232:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1233:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(uint16_t *)pBuffer++ = *(uint16_t *)deviceaddress;
 3513              		.loc 1 1233 33 discriminator 2
 3514 020a FA6A     		ldr	r2, [r7, #44]
 3515              		.loc 1 1233 8 discriminator 2
 3516 020c 7B68     		ldr	r3, [r7, #4]
 3517 020e 991C     		adds	r1, r3, #2
 3518 0210 7960     		str	r1, [r7, #4]
 3519              		.loc 1 1233 32 discriminator 2
 3520 0212 1288     		ldrh	r2, [r2]
 3521              		.loc 1 1233 30 discriminator 2
 3522 0214 1A80     		strh	r2, [r3]	@ movhi
1231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3523              		.loc 1 1231 30 discriminator 2
 3524 0216 7B69     		ldr	r3, [r7, #20]
 3525 0218 0133     		adds	r3, r3, #1
 3526 021a 7B61     		str	r3, [r7, #20]
 3527              	.L148:
1231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3528              		.loc 1 1231 17 discriminator 1
 3529 021c 7B69     		ldr	r3, [r7, #20]
1231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3530              		.loc 1 1231 5 discriminator 1
 3531 021e FA69     		ldr	r2, [r7, #28]
 3532 0220 9A42     		cmp	r2, r3
 3533 0222 F2D8     		bhi	.L149
1234:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1235:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1236:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment read spare areas number */
1237:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numSpareAreaRead++;
 3534              		.loc 1 1237 21
 3535 0224 BB6A     		ldr	r3, [r7, #40]
 3536 0226 0133     		adds	r3, r3, #1
 3537 0228 BB62     		str	r3, [r7, #40]
1238:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1239:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement spare areas to read */
1240:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumSpareAreaToRead--;
 3538              		.loc 1 1240 23
 3539 022a 3B68     		ldr	r3, [r7]
 3540 022c 013B     		subs	r3, r3, #1
 3541 022e 3B60     		str	r3, [r7]
1241:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
ARM GAS  /tmp/ccmBJYMF.s 			page 93


1242:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
1243:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 3542              		.loc 1 1243 17
 3543 0230 7B6A     		ldr	r3, [r7, #36]
 3544 0232 0133     		adds	r3, r3, #1
 3545 0234 7B62     		str	r3, [r7, #36]
 3546              	.L140:
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3547              		.loc 1 1163 8
 3548 0236 3B68     		ldr	r3, [r7]
 3549 0238 002B     		cmp	r3, #0
 3550 023a 09D0     		beq	.L150
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3551              		.loc 1 1163 69 discriminator 1
 3552 023c FB68     		ldr	r3, [r7, #12]
 3553 023e DB6A     		ldr	r3, [r3, #44]
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3554              		.loc 1 1163 97 discriminator 1
 3555 0240 FA68     		ldr	r2, [r7, #12]
 3556 0242 126B     		ldr	r2, [r2, #48]
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3557              		.loc 1 1163 81 discriminator 1
 3558 0244 02FB03F3 		mul	r3, r2, r3
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3559              		.loc 1 1163 36 discriminator 1
 3560 0248 7A6A     		ldr	r2, [r7, #36]
 3561 024a 9A42     		cmp	r2, r3
 3562 024c FFF428AF 		bcc	.L151
 3563              	.L150:
1244:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1245:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1246:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1247:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 3564              		.loc 1 1247 16
 3565 0250 FB68     		ldr	r3, [r7, #12]
 3566 0252 0122     		movs	r2, #1
 3567 0254 83F82120 		strb	r2, [r3, #33]
1248:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1249:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
1250:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);     
 3568              		.loc 1 1250 3
 3569 0258 FB68     		ldr	r3, [r7, #12]
 3570 025a 0022     		movs	r2, #0
 3571 025c 83F82020 		strb	r2, [r3, #32]
1251:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1252:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;  
 3572              		.loc 1 1252 10
 3573 0260 0023     		movs	r3, #0
 3574              	.L136:
1253:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 3575              		.loc 1 1253 1
 3576 0262 1846     		mov	r0, r3
 3577 0264 3037     		adds	r7, r7, #48
 3578              	.LCFI79:
 3579              		.cfi_def_cfa_offset 8
 3580 0266 BD46     		mov	sp, r7
 3581              	.LCFI80:
ARM GAS  /tmp/ccmBJYMF.s 			page 94


 3582              		.cfi_def_cfa_register 13
 3583              		@ sp needed
 3584 0268 80BD     		pop	{r7, pc}
 3585              		.cfi_endproc
 3586              	.LFE140:
 3588              		.section	.text.HAL_NAND_Write_SpareArea_8b,"ax",%progbits
 3589              		.align	1
 3590              		.global	HAL_NAND_Write_SpareArea_8b
 3591              		.syntax unified
 3592              		.thumb
 3593              		.thumb_func
 3594              		.fpu fpv4-sp-d16
 3596              	HAL_NAND_Write_SpareArea_8b:
 3597              	.LFB141:
1254:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1255:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1256:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Write Spare area(s) to NAND memory 
1257:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1258:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1259:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1260:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write  
1261:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumSpareAreaTowrite   number of spare areas to write to block
1262:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1263:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1264:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_SpareArea_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddr
1265:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 3598              		.loc 1 1265 1
 3599              		.cfi_startproc
 3600              		@ args = 0, pretend = 0, frame = 48
 3601              		@ frame_needed = 1, uses_anonymous_args = 0
 3602 0000 80B5     		push	{r7, lr}
 3603              	.LCFI81:
 3604              		.cfi_def_cfa_offset 8
 3605              		.cfi_offset 7, -8
 3606              		.cfi_offset 14, -4
 3607 0002 8CB0     		sub	sp, sp, #48
 3608              	.LCFI82:
 3609              		.cfi_def_cfa_offset 56
 3610 0004 00AF     		add	r7, sp, #0
 3611              	.LCFI83:
 3612              		.cfi_def_cfa_register 7
 3613 0006 F860     		str	r0, [r7, #12]
 3614 0008 B960     		str	r1, [r7, #8]
 3615 000a 7A60     		str	r2, [r7, #4]
 3616 000c 3B60     		str	r3, [r7]
1266:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index = 0U;
 3617              		.loc 1 1266 17
 3618 000e 0023     		movs	r3, #0
 3619 0010 7B61     		str	r3, [r7, #20]
1267:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 3620              		.loc 1 1267 12
 3621 0012 0023     		movs	r3, #0
 3622 0014 3B62     		str	r3, [r7, #32]
1268:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numSpareAreaWritten = 0U, nandaddress = 0U, columnaddress
 3623              		.loc 1 1268 12
 3624 0016 0023     		movs	r3, #0
 3625 0018 FB62     		str	r3, [r7, #44]
ARM GAS  /tmp/ccmBJYMF.s 			page 95


 3626              		.loc 1 1268 32
 3627 001a 0023     		movs	r3, #0
 3628 001c FB61     		str	r3, [r7, #28]
 3629              		.loc 1 1268 43
 3630 001e 0023     		movs	r3, #0
 3631 0020 BB62     		str	r3, [r7, #40]
 3632              		.loc 1 1268 69
 3633 0022 0023     		movs	r3, #0
 3634 0024 7B62     		str	r3, [r7, #36]
 3635              		.loc 1 1268 87
 3636 0026 0023     		movs	r3, #0
 3637 0028 BB61     		str	r3, [r7, #24]
1269:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1270:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
1271:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand); 
 3638              		.loc 1 1271 3
 3639 002a FB68     		ldr	r3, [r7, #12]
 3640 002c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 3641 0030 012B     		cmp	r3, #1
 3642 0032 01D1     		bne	.L153
 3643              		.loc 1 1271 3 is_stmt 0 discriminator 1
 3644 0034 0223     		movs	r3, #2
 3645 0036 13E1     		b	.L154
 3646              	.L153:
 3647              		.loc 1 1271 3 discriminator 2
 3648 0038 FB68     		ldr	r3, [r7, #12]
 3649 003a 0122     		movs	r2, #1
 3650 003c 83F82020 		strb	r2, [r3, #32]
1272:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1273:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1274:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 3651              		.loc 1 1274 11 is_stmt 1 discriminator 2
 3652 0040 FB68     		ldr	r3, [r7, #12]
 3653 0042 93F82130 		ldrb	r3, [r3, #33]
 3654 0046 DBB2     		uxtb	r3, r3
 3655              		.loc 1 1274 5 discriminator 2
 3656 0048 022B     		cmp	r3, #2
 3657 004a 01D1     		bne	.L155
1275:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1276:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 3658              		.loc 1 1276 13
 3659 004c 0223     		movs	r3, #2
 3660 004e 07E1     		b	.L154
 3661              	.L155:
1277:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1278:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1279:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
1280:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 3662              		.loc 1 1280 17
 3663 0050 FB68     		ldr	r3, [r7, #12]
 3664 0052 5B68     		ldr	r3, [r3, #4]
 3665              		.loc 1 1280 5
 3666 0054 102B     		cmp	r3, #16
 3667 0056 03D1     		bne	.L156
1281:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1282:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 3668              		.loc 1 1282 19
ARM GAS  /tmp/ccmBJYMF.s 			page 96


 3669 0058 4FF0E043 		mov	r3, #1879048192
 3670 005c FB62     		str	r3, [r7, #44]
 3671 005e 02E0     		b	.L157
 3672              	.L156:
1283:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1284:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
1285:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 3673              		.loc 1 1286 19
 3674 0060 4FF00043 		mov	r3, #-2147483648
 3675 0064 FB62     		str	r3, [r7, #44]
 3676              	.L157:
1287:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1288:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1289:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the FMC_NAND controller state */
1290:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
 3677              		.loc 1 1290 16
 3678 0066 FB68     		ldr	r3, [r7, #12]
 3679 0068 0222     		movs	r2, #2
 3680 006a 83F82120 		strb	r2, [r3, #33]
1291:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1292:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Page address calculation */
1293:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand); 
 3681              		.loc 1 1293 17
 3682 006e BB68     		ldr	r3, [r7, #8]
 3683 0070 1B88     		ldrh	r3, [r3]
 3684 0072 1946     		mov	r1, r3
 3685 0074 BB68     		ldr	r3, [r7, #8]
 3686 0076 9B88     		ldrh	r3, [r3, #4]
 3687 0078 1A46     		mov	r2, r3
 3688 007a BB68     		ldr	r3, [r7, #8]
 3689 007c 5B88     		ldrh	r3, [r3, #2]
 3690 007e 1846     		mov	r0, r3
 3691 0080 FB68     		ldr	r3, [r7, #12]
 3692 0082 9B6B     		ldr	r3, [r3, #56]
 3693 0084 00FB03F3 		mul	r3, r0, r3
 3694 0088 1344     		add	r3, r3, r2
 3695 008a FA68     		ldr	r2, [r7, #12]
 3696 008c D26A     		ldr	r2, [r2, #44]
 3697 008e 02FB03F3 		mul	r3, r2, r3
 3698              		.loc 1 1293 15
 3699 0092 0B44     		add	r3, r3, r1
 3700 0094 7B62     		str	r3, [r7, #36]
1294:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1295:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Column in page address */
1296:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   columnaddress = COLUMN_ADDRESS(hnand);
 3701              		.loc 1 1296 17
 3702 0096 FB68     		ldr	r3, [r7, #12]
 3703 0098 5B6A     		ldr	r3, [r3, #36]
 3704 009a BB61     		str	r3, [r7, #24]
1297:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1298:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Spare area(s) write loop */
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumSpareAreaTowrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.B
 3705              		.loc 1 1299 8
 3706 009c CAE0     		b	.L158
 3707              	.L168:
1300:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
ARM GAS  /tmp/ccmBJYMF.s 			page 97


1301:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
1302:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaWritten);
 3708              		.loc 1 1302 42
 3709 009e BB6A     		ldr	r3, [r7, #40]
 3710 00a0 0133     		adds	r3, r3, #1
 3711              		.loc 1 1302 26
 3712 00a2 FA68     		ldr	r2, [r7, #12]
 3713 00a4 926A     		ldr	r2, [r2, #40]
 3714              		.loc 1 1302 10
 3715 00a6 02FB03F3 		mul	r3, r2, r3
 3716 00aa FB61     		str	r3, [r7, #28]
1303:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1304:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1305:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 3717              		.loc 1 1305 22
 3718 00ac FB68     		ldr	r3, [r7, #12]
 3719 00ae 5B6A     		ldr	r3, [r3, #36]
 3720              		.loc 1 1305 7
 3721 00b0 B3F5007F 		cmp	r3, #512
 3722 00b4 3FD8     		bhi	.L159
1306:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1307:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send write Spare area command sequence */
1308:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 3723              		.loc 1 1308 25
 3724 00b6 FB6A     		ldr	r3, [r7, #44]
 3725 00b8 43F48033 		orr	r3, r3, #65536
 3726              		.loc 1 1308 63
 3727 00bc 5022     		movs	r2, #80
 3728 00be 1A70     		strb	r2, [r3]
1309:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 3729              		.loc 1 1309 25
 3730 00c0 FB6A     		ldr	r3, [r7, #44]
 3731 00c2 43F48033 		orr	r3, r3, #65536
 3732              		.loc 1 1309 63
 3733 00c6 8022     		movs	r2, #128
 3734 00c8 1A70     		strb	r2, [r3]
1310:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       
1311:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 3735              		.loc 1 1311 26
 3736 00ca FB68     		ldr	r3, [r7, #12]
 3737 00cc DB6A     		ldr	r3, [r3, #44]
 3738              		.loc 1 1311 52
 3739 00ce FA68     		ldr	r2, [r7, #12]
 3740 00d0 126B     		ldr	r2, [r2, #48]
 3741              		.loc 1 1311 37
 3742 00d2 02FB03F3 		mul	r3, r2, r3
 3743              		.loc 1 1311 10
 3744 00d6 B3F5803F 		cmp	r3, #65536
 3745 00da 12D2     		bcs	.L160
1312:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1313:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 3746              		.loc 1 1313 27
 3747 00dc FB6A     		ldr	r3, [r7, #44]
 3748 00de 43F40033 		orr	r3, r3, #131072
 3749              		.loc 1 1313 66
 3750 00e2 0022     		movs	r2, #0
 3751 00e4 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccmBJYMF.s 			page 98


1314:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3752              		.loc 1 1314 27
 3753 00e6 FB6A     		ldr	r3, [r7, #44]
 3754 00e8 43F40033 		orr	r3, r3, #131072
 3755              		.loc 1 1314 68
 3756 00ec 7A6A     		ldr	r2, [r7, #36]
 3757 00ee D2B2     		uxtb	r2, r2
 3758              		.loc 1 1314 66
 3759 00f0 1A70     		strb	r2, [r3]
1315:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3760              		.loc 1 1315 68
 3761 00f2 7B6A     		ldr	r3, [r7, #36]
 3762 00f4 1A0A     		lsrs	r2, r3, #8
 3763              		.loc 1 1315 27
 3764 00f6 FB6A     		ldr	r3, [r7, #44]
 3765 00f8 43F40033 		orr	r3, r3, #131072
 3766              		.loc 1 1315 68
 3767 00fc D2B2     		uxtb	r2, r2
 3768              		.loc 1 1315 66
 3769 00fe 1A70     		strb	r2, [r3]
 3770 0100 72E0     		b	.L163
 3771              	.L160:
1316:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1317:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1318:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1319:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 3772              		.loc 1 1319 27
 3773 0102 FB6A     		ldr	r3, [r7, #44]
 3774 0104 43F40033 		orr	r3, r3, #131072
 3775              		.loc 1 1319 66
 3776 0108 0022     		movs	r2, #0
 3777 010a 1A70     		strb	r2, [r3]
1320:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3778              		.loc 1 1320 27
 3779 010c FB6A     		ldr	r3, [r7, #44]
 3780 010e 43F40033 		orr	r3, r3, #131072
 3781              		.loc 1 1320 68
 3782 0112 7A6A     		ldr	r2, [r7, #36]
 3783 0114 D2B2     		uxtb	r2, r2
 3784              		.loc 1 1320 66
 3785 0116 1A70     		strb	r2, [r3]
1321:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3786              		.loc 1 1321 68
 3787 0118 7B6A     		ldr	r3, [r7, #36]
 3788 011a 1A0A     		lsrs	r2, r3, #8
 3789              		.loc 1 1321 27
 3790 011c FB6A     		ldr	r3, [r7, #44]
 3791 011e 43F40033 		orr	r3, r3, #131072
 3792              		.loc 1 1321 68
 3793 0122 D2B2     		uxtb	r2, r2
 3794              		.loc 1 1321 66
 3795 0124 1A70     		strb	r2, [r3]
1322:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 3796              		.loc 1 1322 68
 3797 0126 7B6A     		ldr	r3, [r7, #36]
 3798 0128 1A0C     		lsrs	r2, r3, #16
 3799              		.loc 1 1322 27
ARM GAS  /tmp/ccmBJYMF.s 			page 99


 3800 012a FB6A     		ldr	r3, [r7, #44]
 3801 012c 43F40033 		orr	r3, r3, #131072
 3802              		.loc 1 1322 68
 3803 0130 D2B2     		uxtb	r2, r2
 3804              		.loc 1 1322 66
 3805 0132 1A70     		strb	r2, [r3]
 3806 0134 58E0     		b	.L163
 3807              	.L159:
1323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1324:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1325:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1326:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1327:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send write Spare area command sequence */
1328:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 3808              		.loc 1 1328 25
 3809 0136 FB6A     		ldr	r3, [r7, #44]
 3810 0138 43F48033 		orr	r3, r3, #65536
 3811              		.loc 1 1328 63
 3812 013c 0022     		movs	r2, #0
 3813 013e 1A70     		strb	r2, [r3]
1329:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 3814              		.loc 1 1329 25
 3815 0140 FB6A     		ldr	r3, [r7, #44]
 3816 0142 43F48033 		orr	r3, r3, #65536
 3817              		.loc 1 1329 63
 3818 0146 8022     		movs	r2, #128
 3819 0148 1A70     		strb	r2, [r3]
1330:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1331:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 3820              		.loc 1 1331 26
 3821 014a FB68     		ldr	r3, [r7, #12]
 3822 014c DB6A     		ldr	r3, [r3, #44]
 3823              		.loc 1 1331 52
 3824 014e FA68     		ldr	r2, [r7, #12]
 3825 0150 126B     		ldr	r2, [r2, #48]
 3826              		.loc 1 1331 37
 3827 0152 02FB03F3 		mul	r3, r2, r3
 3828              		.loc 1 1331 10
 3829 0156 B3F5803F 		cmp	r3, #65536
 3830 015a 1AD2     		bcs	.L162
1332:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1333:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 3831              		.loc 1 1333 27
 3832 015c FB6A     		ldr	r3, [r7, #44]
 3833 015e 43F40033 		orr	r3, r3, #131072
 3834              		.loc 1 1333 68
 3835 0162 BA69     		ldr	r2, [r7, #24]
 3836 0164 D2B2     		uxtb	r2, r2
 3837              		.loc 1 1333 66
 3838 0166 1A70     		strb	r2, [r3]
1334:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 3839              		.loc 1 1334 68
 3840 0168 BB69     		ldr	r3, [r7, #24]
 3841 016a 1A0A     		lsrs	r2, r3, #8
 3842              		.loc 1 1334 27
 3843 016c FB6A     		ldr	r3, [r7, #44]
 3844 016e 43F40033 		orr	r3, r3, #131072
ARM GAS  /tmp/ccmBJYMF.s 			page 100


 3845              		.loc 1 1334 68
 3846 0172 D2B2     		uxtb	r2, r2
 3847              		.loc 1 1334 66
 3848 0174 1A70     		strb	r2, [r3]
1335:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3849              		.loc 1 1335 27
 3850 0176 FB6A     		ldr	r3, [r7, #44]
 3851 0178 43F40033 		orr	r3, r3, #131072
 3852              		.loc 1 1335 68
 3853 017c 7A6A     		ldr	r2, [r7, #36]
 3854 017e D2B2     		uxtb	r2, r2
 3855              		.loc 1 1335 66
 3856 0180 1A70     		strb	r2, [r3]
1336:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3857              		.loc 1 1336 68
 3858 0182 7B6A     		ldr	r3, [r7, #36]
 3859 0184 1A0A     		lsrs	r2, r3, #8
 3860              		.loc 1 1336 27
 3861 0186 FB6A     		ldr	r3, [r7, #44]
 3862 0188 43F40033 		orr	r3, r3, #131072
 3863              		.loc 1 1336 68
 3864 018c D2B2     		uxtb	r2, r2
 3865              		.loc 1 1336 66
 3866 018e 1A70     		strb	r2, [r3]
 3867 0190 2AE0     		b	.L163
 3868              	.L162:
1337:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1338:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1339:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1340:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 3869              		.loc 1 1340 27
 3870 0192 FB6A     		ldr	r3, [r7, #44]
 3871 0194 43F40033 		orr	r3, r3, #131072
 3872              		.loc 1 1340 68
 3873 0198 BA69     		ldr	r2, [r7, #24]
 3874 019a D2B2     		uxtb	r2, r2
 3875              		.loc 1 1340 66
 3876 019c 1A70     		strb	r2, [r3]
1341:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 3877              		.loc 1 1341 68
 3878 019e BB69     		ldr	r3, [r7, #24]
 3879 01a0 1A0A     		lsrs	r2, r3, #8
 3880              		.loc 1 1341 27
 3881 01a2 FB6A     		ldr	r3, [r7, #44]
 3882 01a4 43F40033 		orr	r3, r3, #131072
 3883              		.loc 1 1341 68
 3884 01a8 D2B2     		uxtb	r2, r2
 3885              		.loc 1 1341 66
 3886 01aa 1A70     		strb	r2, [r3]
1342:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 3887              		.loc 1 1342 27
 3888 01ac FB6A     		ldr	r3, [r7, #44]
 3889 01ae 43F40033 		orr	r3, r3, #131072
 3890              		.loc 1 1342 68
 3891 01b2 7A6A     		ldr	r2, [r7, #36]
 3892 01b4 D2B2     		uxtb	r2, r2
 3893              		.loc 1 1342 66
ARM GAS  /tmp/ccmBJYMF.s 			page 101


 3894 01b6 1A70     		strb	r2, [r3]
1343:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 3895              		.loc 1 1343 68
 3896 01b8 7B6A     		ldr	r3, [r7, #36]
 3897 01ba 1A0A     		lsrs	r2, r3, #8
 3898              		.loc 1 1343 27
 3899 01bc FB6A     		ldr	r3, [r7, #44]
 3900 01be 43F40033 		orr	r3, r3, #131072
 3901              		.loc 1 1343 68
 3902 01c2 D2B2     		uxtb	r2, r2
 3903              		.loc 1 1343 66
 3904 01c4 1A70     		strb	r2, [r3]
1344:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 3905              		.loc 1 1344 68
 3906 01c6 7B6A     		ldr	r3, [r7, #36]
 3907 01c8 1A0C     		lsrs	r2, r3, #16
 3908              		.loc 1 1344 27
 3909 01ca FB6A     		ldr	r3, [r7, #44]
 3910 01cc 43F40033 		orr	r3, r3, #131072
 3911              		.loc 1 1344 68
 3912 01d0 D2B2     		uxtb	r2, r2
 3913              		.loc 1 1344 66
 3914 01d2 1A70     		strb	r2, [r3]
1345:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1346:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1347:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1348:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Write data to memory */
1349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 3915              		.loc 1 1349 5
 3916 01d4 08E0     		b	.L163
 3917              	.L164:
1350:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1351:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)deviceaddress = *(uint8_t *)pBuffer++;
 3918              		.loc 1 1351 41 discriminator 2
 3919 01d6 7B68     		ldr	r3, [r7, #4]
 3920 01d8 5A1C     		adds	r2, r3, #1
 3921 01da 7A60     		str	r2, [r7, #4]
 3922              		.loc 1 1351 8 discriminator 2
 3923 01dc FA6A     		ldr	r2, [r7, #44]
 3924              		.loc 1 1351 40 discriminator 2
 3925 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3926              		.loc 1 1351 38 discriminator 2
 3927 01e0 1370     		strb	r3, [r2]
1349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3928              		.loc 1 1349 30 discriminator 2
 3929 01e2 7B69     		ldr	r3, [r7, #20]
 3930 01e4 0133     		adds	r3, r3, #1
 3931 01e6 7B61     		str	r3, [r7, #20]
 3932              	.L163:
1349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3933              		.loc 1 1349 17 discriminator 1
 3934 01e8 7B69     		ldr	r3, [r7, #20]
1349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3935              		.loc 1 1349 5 discriminator 1
 3936 01ea FA69     		ldr	r2, [r7, #28]
 3937 01ec 9A42     		cmp	r2, r3
 3938 01ee F2D8     		bhi	.L164
ARM GAS  /tmp/ccmBJYMF.s 			page 102


1352:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1353:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
1354:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 3939              		.loc 1 1354 23
 3940 01f0 FB6A     		ldr	r3, [r7, #44]
 3941 01f2 43F48033 		orr	r3, r3, #65536
 3942              		.loc 1 1354 61
 3943 01f6 1022     		movs	r2, #16
 3944 01f8 1A70     		strb	r2, [r3]
1355:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1356:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Get tick */
1357:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     tickstart = HAL_GetTick();
 3945              		.loc 1 1357 17
 3946 01fa FFF7FEFF 		bl	HAL_GetTick
 3947 01fe 3862     		str	r0, [r7, #32]
1358:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1359:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Read status until NAND is ready */
1360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 3948              		.loc 1 1360 10
 3949 0200 09E0     		b	.L165
 3950              	.L166:
1361:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1362:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 3951              		.loc 1 1362 11
 3952 0202 FFF7FEFF 		bl	HAL_GetTick
 3953 0206 0246     		mov	r2, r0
 3954              		.loc 1 1362 25
 3955 0208 3B6A     		ldr	r3, [r7, #32]
 3956 020a D31A     		subs	r3, r2, r3
 3957              		.loc 1 1362 9
 3958 020c B3F1807F 		cmp	r3, #16777216
 3959 0210 01D9     		bls	.L165
1363:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1364:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         return HAL_TIMEOUT; 
 3960              		.loc 1 1364 16
 3961 0212 0323     		movs	r3, #3
 3962 0214 24E0     		b	.L154
 3963              	.L165:
1360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3964              		.loc 1 1360 11
 3965 0216 F868     		ldr	r0, [r7, #12]
 3966 0218 FFF7FEFF 		bl	HAL_NAND_Read_Status
 3967 021c 0346     		mov	r3, r0
1360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 3968              		.loc 1 1360 10
 3969 021e 402B     		cmp	r3, #64
 3970 0220 EFD1     		bne	.L166
1365:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1366:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1367:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment written spare areas number */
1369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numSpareAreaWritten++;
 3971              		.loc 1 1369 24
 3972 0222 BB6A     		ldr	r3, [r7, #40]
 3973 0224 0133     		adds	r3, r3, #1
 3974 0226 BB62     		str	r3, [r7, #40]
1370:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
ARM GAS  /tmp/ccmBJYMF.s 			page 103


1371:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement spare areas to write */
1372:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumSpareAreaTowrite--;
 3975              		.loc 1 1372 24
 3976 0228 3B68     		ldr	r3, [r7]
 3977 022a 013B     		subs	r3, r3, #1
 3978 022c 3B60     		str	r3, [r7]
1373:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1374:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
1375:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 3979              		.loc 1 1375 17
 3980 022e 7B6A     		ldr	r3, [r7, #36]
 3981 0230 0133     		adds	r3, r3, #1
 3982 0232 7B62     		str	r3, [r7, #36]
 3983              	.L158:
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3984              		.loc 1 1299 8
 3985 0234 3B68     		ldr	r3, [r7]
 3986 0236 002B     		cmp	r3, #0
 3987 0238 09D0     		beq	.L167
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3988              		.loc 1 1299 70 discriminator 1
 3989 023a FB68     		ldr	r3, [r7, #12]
 3990 023c DB6A     		ldr	r3, [r3, #44]
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3991              		.loc 1 1299 98 discriminator 1
 3992 023e FA68     		ldr	r2, [r7, #12]
 3993 0240 126B     		ldr	r2, [r2, #48]
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3994              		.loc 1 1299 82 discriminator 1
 3995 0242 02FB03F3 		mul	r3, r2, r3
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 3996              		.loc 1 1299 37 discriminator 1
 3997 0246 7A6A     		ldr	r2, [r7, #36]
 3998 0248 9A42     		cmp	r2, r3
 3999 024a FFF428AF 		bcc	.L168
 4000              	.L167:
1376:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1377:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1378:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1379:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 4001              		.loc 1 1379 16
 4002 024e FB68     		ldr	r3, [r7, #12]
 4003 0250 0122     		movs	r2, #1
 4004 0252 83F82120 		strb	r2, [r3, #33]
1380:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1381:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
1382:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 4005              		.loc 1 1382 3
 4006 0256 FB68     		ldr	r3, [r7, #12]
 4007 0258 0022     		movs	r2, #0
 4008 025a 83F82020 		strb	r2, [r3, #32]
1383:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1384:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 4009              		.loc 1 1384 10
 4010 025e 0023     		movs	r3, #0
 4011              	.L154:
1385:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
ARM GAS  /tmp/ccmBJYMF.s 			page 104


 4012              		.loc 1 1385 1
 4013 0260 1846     		mov	r0, r3
 4014 0262 3037     		adds	r7, r7, #48
 4015              	.LCFI84:
 4016              		.cfi_def_cfa_offset 8
 4017 0264 BD46     		mov	sp, r7
 4018              	.LCFI85:
 4019              		.cfi_def_cfa_register 13
 4020              		@ sp needed
 4021 0266 80BD     		pop	{r7, pc}
 4022              		.cfi_endproc
 4023              	.LFE141:
 4025              		.section	.text.HAL_NAND_Write_SpareArea_16b,"ax",%progbits
 4026              		.align	1
 4027              		.global	HAL_NAND_Write_SpareArea_16b
 4028              		.syntax unified
 4029              		.thumb
 4030              		.thumb_func
 4031              		.fpu fpv4-sp-d16
 4033              	HAL_NAND_Write_SpareArea_16b:
 4034              	.LFB142:
1386:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1387:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1388:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Write Spare area(s) to NAND memory (16-bits addressing)
1389:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1390:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1391:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1392:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pBuffer  pointer to source buffer to write. pBuffer should be 16bits aligned.  
1393:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  NumSpareAreaTowrite   number of spare areas to write to block
1394:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1395:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1396:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Write_SpareArea_16b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAdd
1397:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 4035              		.loc 1 1397 1
 4036              		.cfi_startproc
 4037              		@ args = 0, pretend = 0, frame = 48
 4038              		@ frame_needed = 1, uses_anonymous_args = 0
 4039 0000 80B5     		push	{r7, lr}
 4040              	.LCFI86:
 4041              		.cfi_def_cfa_offset 8
 4042              		.cfi_offset 7, -8
 4043              		.cfi_offset 14, -4
 4044 0002 8CB0     		sub	sp, sp, #48
 4045              	.LCFI87:
 4046              		.cfi_def_cfa_offset 56
 4047 0004 00AF     		add	r7, sp, #0
 4048              	.LCFI88:
 4049              		.cfi_def_cfa_register 7
 4050 0006 F860     		str	r0, [r7, #12]
 4051 0008 B960     		str	r1, [r7, #8]
 4052 000a 7A60     		str	r2, [r7, #4]
 4053 000c 3B60     		str	r3, [r7]
1398:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __IO uint32_t index = 0U;
 4054              		.loc 1 1398 17
 4055 000e 0023     		movs	r3, #0
 4056 0010 7B61     		str	r3, [r7, #20]
1399:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
ARM GAS  /tmp/ccmBJYMF.s 			page 105


 4057              		.loc 1 1399 12
 4058 0012 0023     		movs	r3, #0
 4059 0014 3B62     		str	r3, [r7, #32]
1400:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U, size = 0U, numSpareAreaWritten = 0U, nandaddress = 0U, columnaddress
 4060              		.loc 1 1400 12
 4061 0016 0023     		movs	r3, #0
 4062 0018 FB62     		str	r3, [r7, #44]
 4063              		.loc 1 1400 32
 4064 001a 0023     		movs	r3, #0
 4065 001c FB61     		str	r3, [r7, #28]
 4066              		.loc 1 1400 43
 4067 001e 0023     		movs	r3, #0
 4068 0020 BB62     		str	r3, [r7, #40]
 4069              		.loc 1 1400 69
 4070 0022 0023     		movs	r3, #0
 4071 0024 7B62     		str	r3, [r7, #36]
 4072              		.loc 1 1400 87
 4073 0026 0023     		movs	r3, #0
 4074 0028 BB61     		str	r3, [r7, #24]
1401:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1402:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
1403:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand); 
 4075              		.loc 1 1403 3
 4076 002a FB68     		ldr	r3, [r7, #12]
 4077 002c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 4078 0030 012B     		cmp	r3, #1
 4079 0032 01D1     		bne	.L170
 4080              		.loc 1 1403 3 is_stmt 0 discriminator 1
 4081 0034 0223     		movs	r3, #2
 4082 0036 14E1     		b	.L171
 4083              	.L170:
 4084              		.loc 1 1403 3 discriminator 2
 4085 0038 FB68     		ldr	r3, [r7, #12]
 4086 003a 0122     		movs	r2, #1
 4087 003c 83F82020 		strb	r2, [r3, #32]
1404:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1406:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 4088              		.loc 1 1406 11 is_stmt 1 discriminator 2
 4089 0040 FB68     		ldr	r3, [r7, #12]
 4090 0042 93F82130 		ldrb	r3, [r3, #33]
 4091 0046 DBB2     		uxtb	r3, r3
 4092              		.loc 1 1406 5 discriminator 2
 4093 0048 022B     		cmp	r3, #2
 4094 004a 01D1     		bne	.L172
1407:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1408:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 4095              		.loc 1 1408 13
 4096 004c 0223     		movs	r3, #2
 4097 004e 08E1     		b	.L171
 4098              	.L172:
1409:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1410:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1411:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
1412:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 4099              		.loc 1 1412 17
 4100 0050 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccmBJYMF.s 			page 106


 4101 0052 5B68     		ldr	r3, [r3, #4]
 4102              		.loc 1 1412 5
 4103 0054 102B     		cmp	r3, #16
 4104 0056 03D1     		bne	.L173
1413:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1414:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 4105              		.loc 1 1414 19
 4106 0058 4FF0E043 		mov	r3, #1879048192
 4107 005c FB62     		str	r3, [r7, #44]
 4108 005e 02E0     		b	.L174
 4109              	.L173:
1415:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1416:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
1417:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1418:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 4110              		.loc 1 1418 19
 4111 0060 4FF00043 		mov	r3, #-2147483648
 4112 0064 FB62     		str	r3, [r7, #44]
 4113              	.L174:
1419:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1420:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1421:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the FMC_NAND controller state */
1422:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
 4114              		.loc 1 1422 16
 4115 0066 FB68     		ldr	r3, [r7, #12]
 4116 0068 0222     		movs	r2, #2
 4117 006a 83F82120 		strb	r2, [r3, #33]
1423:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1424:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* NAND raw address calculation */
1425:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 4118              		.loc 1 1425 17
 4119 006e BB68     		ldr	r3, [r7, #8]
 4120 0070 1B88     		ldrh	r3, [r3]
 4121 0072 1946     		mov	r1, r3
 4122 0074 BB68     		ldr	r3, [r7, #8]
 4123 0076 9B88     		ldrh	r3, [r3, #4]
 4124 0078 1A46     		mov	r2, r3
 4125 007a BB68     		ldr	r3, [r7, #8]
 4126 007c 5B88     		ldrh	r3, [r3, #2]
 4127 007e 1846     		mov	r0, r3
 4128 0080 FB68     		ldr	r3, [r7, #12]
 4129 0082 9B6B     		ldr	r3, [r3, #56]
 4130 0084 00FB03F3 		mul	r3, r0, r3
 4131 0088 1344     		add	r3, r3, r2
 4132 008a FA68     		ldr	r2, [r7, #12]
 4133 008c D26A     		ldr	r2, [r2, #44]
 4134 008e 02FB03F3 		mul	r3, r2, r3
 4135              		.loc 1 1425 15
 4136 0092 0B44     		add	r3, r3, r1
 4137 0094 7B62     		str	r3, [r7, #36]
1426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1427:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Column in page address */
1428:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   columnaddress = (uint32_t)(COLUMN_ADDRESS(hnand) * 2U);
 4138              		.loc 1 1428 30
 4139 0096 FB68     		ldr	r3, [r7, #12]
 4140 0098 5B6A     		ldr	r3, [r3, #36]
 4141              		.loc 1 1428 17
ARM GAS  /tmp/ccmBJYMF.s 			page 107


 4142 009a 5B00     		lsls	r3, r3, #1
 4143 009c BB61     		str	r3, [r7, #24]
1429:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1430:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Spare area(s) write loop */
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while((NumSpareAreaTowrite != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.B
 4144              		.loc 1 1431 8
 4145 009e CAE0     		b	.L175
 4146              	.L185:
1432:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1433:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* update the buffer size */
1434:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     size = (hnand->Config.SpareAreaSize) + ((hnand->Config.SpareAreaSize) * numSpareAreaWritten);
 4147              		.loc 1 1434 42
 4148 00a0 BB6A     		ldr	r3, [r7, #40]
 4149 00a2 0133     		adds	r3, r3, #1
 4150              		.loc 1 1434 26
 4151 00a4 FA68     		ldr	r2, [r7, #12]
 4152 00a6 926A     		ldr	r2, [r2, #40]
 4153              		.loc 1 1434 10
 4154 00a8 02FB03F3 		mul	r3, r2, r3
 4155 00ac FB61     		str	r3, [r7, #28]
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1436:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Cards with page size <= 512 bytes */
1437:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((hnand->Config.PageSize) <= 512U)
 4156              		.loc 1 1437 22
 4157 00ae FB68     		ldr	r3, [r7, #12]
 4158 00b0 5B6A     		ldr	r3, [r3, #36]
 4159              		.loc 1 1437 7
 4160 00b2 B3F5007F 		cmp	r3, #512
 4161 00b6 3FD8     		bhi	.L176
1438:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1439:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send write Spare area command sequence */
1440:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 4162              		.loc 1 1440 25
 4163 00b8 FB6A     		ldr	r3, [r7, #44]
 4164 00ba 43F48033 		orr	r3, r3, #65536
 4165              		.loc 1 1440 63
 4166 00be 5022     		movs	r2, #80
 4167 00c0 1A70     		strb	r2, [r3]
1441:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 4168              		.loc 1 1441 25
 4169 00c2 FB6A     		ldr	r3, [r7, #44]
 4170 00c4 43F48033 		orr	r3, r3, #65536
 4171              		.loc 1 1441 63
 4172 00c8 8022     		movs	r2, #128
 4173 00ca 1A70     		strb	r2, [r3]
1442:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1443:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 4174              		.loc 1 1443 26
 4175 00cc FB68     		ldr	r3, [r7, #12]
 4176 00ce DB6A     		ldr	r3, [r3, #44]
 4177              		.loc 1 1443 52
 4178 00d0 FA68     		ldr	r2, [r7, #12]
 4179 00d2 126B     		ldr	r2, [r2, #48]
 4180              		.loc 1 1443 37
 4181 00d4 02FB03F3 		mul	r3, r2, r3
 4182              		.loc 1 1443 10
 4183 00d8 B3F5803F 		cmp	r3, #65536
ARM GAS  /tmp/ccmBJYMF.s 			page 108


 4184 00dc 12D2     		bcs	.L177
1444:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1445:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 4185              		.loc 1 1445 27
 4186 00de FB6A     		ldr	r3, [r7, #44]
 4187 00e0 43F40033 		orr	r3, r3, #131072
 4188              		.loc 1 1445 66
 4189 00e4 0022     		movs	r2, #0
 4190 00e6 1A70     		strb	r2, [r3]
1446:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 4191              		.loc 1 1446 27
 4192 00e8 FB6A     		ldr	r3, [r7, #44]
 4193 00ea 43F40033 		orr	r3, r3, #131072
 4194              		.loc 1 1446 68
 4195 00ee 7A6A     		ldr	r2, [r7, #36]
 4196 00f0 D2B2     		uxtb	r2, r2
 4197              		.loc 1 1446 66
 4198 00f2 1A70     		strb	r2, [r3]
1447:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 4199              		.loc 1 1447 68
 4200 00f4 7B6A     		ldr	r3, [r7, #36]
 4201 00f6 1A0A     		lsrs	r2, r3, #8
 4202              		.loc 1 1447 27
 4203 00f8 FB6A     		ldr	r3, [r7, #44]
 4204 00fa 43F40033 		orr	r3, r3, #131072
 4205              		.loc 1 1447 68
 4206 00fe D2B2     		uxtb	r2, r2
 4207              		.loc 1 1447 66
 4208 0100 1A70     		strb	r2, [r3]
 4209 0102 72E0     		b	.L180
 4210              	.L177:
1448:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1449:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1450:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1451:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 4211              		.loc 1 1451 27
 4212 0104 FB6A     		ldr	r3, [r7, #44]
 4213 0106 43F40033 		orr	r3, r3, #131072
 4214              		.loc 1 1451 66
 4215 010a 0022     		movs	r2, #0
 4216 010c 1A70     		strb	r2, [r3]
1452:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 4217              		.loc 1 1452 27
 4218 010e FB6A     		ldr	r3, [r7, #44]
 4219 0110 43F40033 		orr	r3, r3, #131072
 4220              		.loc 1 1452 68
 4221 0114 7A6A     		ldr	r2, [r7, #36]
 4222 0116 D2B2     		uxtb	r2, r2
 4223              		.loc 1 1452 66
 4224 0118 1A70     		strb	r2, [r3]
1453:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 4225              		.loc 1 1453 68
 4226 011a 7B6A     		ldr	r3, [r7, #36]
 4227 011c 1A0A     		lsrs	r2, r3, #8
 4228              		.loc 1 1453 27
 4229 011e FB6A     		ldr	r3, [r7, #44]
 4230 0120 43F40033 		orr	r3, r3, #131072
ARM GAS  /tmp/ccmBJYMF.s 			page 109


 4231              		.loc 1 1453 68
 4232 0124 D2B2     		uxtb	r2, r2
 4233              		.loc 1 1453 66
 4234 0126 1A70     		strb	r2, [r3]
1454:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 4235              		.loc 1 1454 68
 4236 0128 7B6A     		ldr	r3, [r7, #36]
 4237 012a 1A0C     		lsrs	r2, r3, #16
 4238              		.loc 1 1454 27
 4239 012c FB6A     		ldr	r3, [r7, #44]
 4240 012e 43F40033 		orr	r3, r3, #131072
 4241              		.loc 1 1454 68
 4242 0132 D2B2     		uxtb	r2, r2
 4243              		.loc 1 1454 66
 4244 0134 1A70     		strb	r2, [r3]
 4245 0136 58E0     		b	.L180
 4246              	.L176:
1455:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1456:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1457:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     else /* (hnand->Config.PageSize) > 512 */
1458:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1459:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Send write Spare area command sequence */
1460:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 4247              		.loc 1 1460 25
 4248 0138 FB6A     		ldr	r3, [r7, #44]
 4249 013a 43F48033 		orr	r3, r3, #65536
 4250              		.loc 1 1460 63
 4251 013e 0022     		movs	r2, #0
 4252 0140 1A70     		strb	r2, [r3]
1461:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 4253              		.loc 1 1461 25
 4254 0142 FB6A     		ldr	r3, [r7, #44]
 4255 0144 43F48033 		orr	r3, r3, #65536
 4256              		.loc 1 1461 63
 4257 0148 8022     		movs	r2, #128
 4258 014a 1A70     		strb	r2, [r3]
1462:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1463:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 4259              		.loc 1 1463 26
 4260 014c FB68     		ldr	r3, [r7, #12]
 4261 014e DB6A     		ldr	r3, [r3, #44]
 4262              		.loc 1 1463 52
 4263 0150 FA68     		ldr	r2, [r7, #12]
 4264 0152 126B     		ldr	r2, [r2, #48]
 4265              		.loc 1 1463 37
 4266 0154 02FB03F3 		mul	r3, r2, r3
 4267              		.loc 1 1463 10
 4268 0158 B3F5803F 		cmp	r3, #65536
 4269 015c 1AD2     		bcs	.L179
1464:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1465:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 4270              		.loc 1 1465 27
 4271 015e FB6A     		ldr	r3, [r7, #44]
 4272 0160 43F40033 		orr	r3, r3, #131072
 4273              		.loc 1 1465 68
 4274 0164 BA69     		ldr	r2, [r7, #24]
 4275 0166 D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccmBJYMF.s 			page 110


 4276              		.loc 1 1465 66
 4277 0168 1A70     		strb	r2, [r3]
1466:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 4278              		.loc 1 1466 68
 4279 016a BB69     		ldr	r3, [r7, #24]
 4280 016c 1A0A     		lsrs	r2, r3, #8
 4281              		.loc 1 1466 27
 4282 016e FB6A     		ldr	r3, [r7, #44]
 4283 0170 43F40033 		orr	r3, r3, #131072
 4284              		.loc 1 1466 68
 4285 0174 D2B2     		uxtb	r2, r2
 4286              		.loc 1 1466 66
 4287 0176 1A70     		strb	r2, [r3]
1467:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 4288              		.loc 1 1467 27
 4289 0178 FB6A     		ldr	r3, [r7, #44]
 4290 017a 43F40033 		orr	r3, r3, #131072
 4291              		.loc 1 1467 68
 4292 017e 7A6A     		ldr	r2, [r7, #36]
 4293 0180 D2B2     		uxtb	r2, r2
 4294              		.loc 1 1467 66
 4295 0182 1A70     		strb	r2, [r3]
1468:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 4296              		.loc 1 1468 68
 4297 0184 7B6A     		ldr	r3, [r7, #36]
 4298 0186 1A0A     		lsrs	r2, r3, #8
 4299              		.loc 1 1468 27
 4300 0188 FB6A     		ldr	r3, [r7, #44]
 4301 018a 43F40033 		orr	r3, r3, #131072
 4302              		.loc 1 1468 68
 4303 018e D2B2     		uxtb	r2, r2
 4304              		.loc 1 1468 66
 4305 0190 1A70     		strb	r2, [r3]
 4306 0192 2AE0     		b	.L180
 4307              	.L179:
1469:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1470:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
1471:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 4308              		.loc 1 1472 27
 4309 0194 FB6A     		ldr	r3, [r7, #44]
 4310 0196 43F40033 		orr	r3, r3, #131072
 4311              		.loc 1 1472 68
 4312 019a BA69     		ldr	r2, [r7, #24]
 4313 019c D2B2     		uxtb	r2, r2
 4314              		.loc 1 1472 66
 4315 019e 1A70     		strb	r2, [r3]
1473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 4316              		.loc 1 1473 68
 4317 01a0 BB69     		ldr	r3, [r7, #24]
 4318 01a2 1A0A     		lsrs	r2, r3, #8
 4319              		.loc 1 1473 27
 4320 01a4 FB6A     		ldr	r3, [r7, #44]
 4321 01a6 43F40033 		orr	r3, r3, #131072
 4322              		.loc 1 1473 68
 4323 01aa D2B2     		uxtb	r2, r2
 4324              		.loc 1 1473 66
ARM GAS  /tmp/ccmBJYMF.s 			page 111


 4325 01ac 1A70     		strb	r2, [r3]
1474:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 4326              		.loc 1 1474 27
 4327 01ae FB6A     		ldr	r3, [r7, #44]
 4328 01b0 43F40033 		orr	r3, r3, #131072
 4329              		.loc 1 1474 68
 4330 01b4 7A6A     		ldr	r2, [r7, #36]
 4331 01b6 D2B2     		uxtb	r2, r2
 4332              		.loc 1 1474 66
 4333 01b8 1A70     		strb	r2, [r3]
1475:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 4334              		.loc 1 1475 68
 4335 01ba 7B6A     		ldr	r3, [r7, #36]
 4336 01bc 1A0A     		lsrs	r2, r3, #8
 4337              		.loc 1 1475 27
 4338 01be FB6A     		ldr	r3, [r7, #44]
 4339 01c0 43F40033 		orr	r3, r3, #131072
 4340              		.loc 1 1475 68
 4341 01c4 D2B2     		uxtb	r2, r2
 4342              		.loc 1 1475 66
 4343 01c6 1A70     		strb	r2, [r3]
1476:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 4344              		.loc 1 1476 68
 4345 01c8 7B6A     		ldr	r3, [r7, #36]
 4346 01ca 1A0C     		lsrs	r2, r3, #16
 4347              		.loc 1 1476 27
 4348 01cc FB6A     		ldr	r3, [r7, #44]
 4349 01ce 43F40033 		orr	r3, r3, #131072
 4350              		.loc 1 1476 68
 4351 01d2 D2B2     		uxtb	r2, r2
 4352              		.loc 1 1476 66
 4353 01d4 1A70     		strb	r2, [r3]
1477:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1478:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1479:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1480:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Write data to memory */
1481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     for(; index < size; index++)
 4354              		.loc 1 1481 5
 4355 01d6 08E0     		b	.L180
 4356              	.L181:
1482:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1483:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       *(__IO uint16_t *)deviceaddress = *(uint16_t *)pBuffer++;
 4357              		.loc 1 1483 42 discriminator 2
 4358 01d8 7B68     		ldr	r3, [r7, #4]
 4359 01da 9A1C     		adds	r2, r3, #2
 4360 01dc 7A60     		str	r2, [r7, #4]
 4361              		.loc 1 1483 8 discriminator 2
 4362 01de FA6A     		ldr	r2, [r7, #44]
 4363              		.loc 1 1483 41 discriminator 2
 4364 01e0 1B88     		ldrh	r3, [r3]
 4365              		.loc 1 1483 39 discriminator 2
 4366 01e2 1380     		strh	r3, [r2]	@ movhi
1481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 4367              		.loc 1 1481 30 discriminator 2
 4368 01e4 7B69     		ldr	r3, [r7, #20]
 4369 01e6 0133     		adds	r3, r3, #1
 4370 01e8 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccmBJYMF.s 			page 112


 4371              	.L180:
1481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 4372              		.loc 1 1481 17 discriminator 1
 4373 01ea 7B69     		ldr	r3, [r7, #20]
1481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 4374              		.loc 1 1481 5 discriminator 1
 4375 01ec FA69     		ldr	r2, [r7, #28]
 4376 01ee 9A42     		cmp	r2, r3
 4377 01f0 F2D8     		bhi	.L181
1484:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1485:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
1486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 4378              		.loc 1 1486 23
 4379 01f2 FB6A     		ldr	r3, [r7, #44]
 4380 01f4 43F48033 		orr	r3, r3, #65536
 4381              		.loc 1 1486 61
 4382 01f8 1022     		movs	r2, #16
 4383 01fa 1A70     		strb	r2, [r3]
1487:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
1488:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Read status until NAND is ready */
1489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 4384              		.loc 1 1489 10
 4385 01fc 0CE0     		b	.L182
 4386              	.L183:
1490:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1491:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Get tick */
1492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       tickstart = HAL_GetTick();
 4387              		.loc 1 1492 19
 4388 01fe FFF7FEFF 		bl	HAL_GetTick
 4389 0202 3862     		str	r0, [r7, #32]
1493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1494:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 4390              		.loc 1 1494 11
 4391 0204 FFF7FEFF 		bl	HAL_GetTick
 4392 0208 0246     		mov	r2, r0
 4393              		.loc 1 1494 25
 4394 020a 3B6A     		ldr	r3, [r7, #32]
 4395 020c D31A     		subs	r3, r2, r3
 4396              		.loc 1 1494 9
 4397 020e B3F1807F 		cmp	r3, #16777216
 4398 0212 01D9     		bls	.L182
1495:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1496:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         return HAL_TIMEOUT; 
 4399              		.loc 1 1496 16
 4400 0214 0323     		movs	r3, #3
 4401 0216 24E0     		b	.L171
 4402              	.L182:
1489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 4403              		.loc 1 1489 11
 4404 0218 F868     		ldr	r0, [r7, #12]
 4405 021a FFF7FEFF 		bl	HAL_NAND_Read_Status
 4406 021e 0346     		mov	r3, r0
1489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
 4407              		.loc 1 1489 10
 4408 0220 402B     		cmp	r3, #64
 4409 0222 ECD1     		bne	.L183
1497:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
ARM GAS  /tmp/ccmBJYMF.s 			page 113


1498:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1499:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1500:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment written spare areas number */
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     numSpareAreaWritten++;
 4410              		.loc 1 1501 24
 4411 0224 BB6A     		ldr	r3, [r7, #40]
 4412 0226 0133     		adds	r3, r3, #1
 4413 0228 BB62     		str	r3, [r7, #40]
1502:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1503:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Decrement spare areas to write */
1504:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     NumSpareAreaTowrite--;
 4414              		.loc 1 1504 24
 4415 022a 3B68     		ldr	r3, [r7]
 4416 022c 013B     		subs	r3, r3, #1
 4417 022e 3B60     		str	r3, [r7]
1505:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     /* Increment the NAND address */
1507:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     nandaddress = (uint32_t)(nandaddress + 1U);
 4418              		.loc 1 1507 17
 4419 0230 7B6A     		ldr	r3, [r7, #36]
 4420 0232 0133     		adds	r3, r3, #1
 4421 0234 7B62     		str	r3, [r7, #36]
 4422              	.L175:
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4423              		.loc 1 1431 8
 4424 0236 3B68     		ldr	r3, [r7]
 4425 0238 002B     		cmp	r3, #0
 4426 023a 09D0     		beq	.L184
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4427              		.loc 1 1431 70 discriminator 1
 4428 023c FB68     		ldr	r3, [r7, #12]
 4429 023e DB6A     		ldr	r3, [r3, #44]
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4430              		.loc 1 1431 98 discriminator 1
 4431 0240 FA68     		ldr	r2, [r7, #12]
 4432 0242 126B     		ldr	r2, [r2, #48]
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4433              		.loc 1 1431 82 discriminator 1
 4434 0244 02FB03F3 		mul	r3, r2, r3
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4435              		.loc 1 1431 37 discriminator 1
 4436 0248 7A6A     		ldr	r2, [r7, #36]
 4437 024a 9A42     		cmp	r2, r3
 4438 024c FFF428AF 		bcc	.L185
 4439              	.L184:
1508:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1510:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1511:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 4440              		.loc 1 1511 16
 4441 0250 FB68     		ldr	r3, [r7, #12]
 4442 0252 0122     		movs	r2, #1
 4443 0254 83F82120 		strb	r2, [r3, #33]
1512:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1513:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
1514:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);
 4444              		.loc 1 1514 3
ARM GAS  /tmp/ccmBJYMF.s 			page 114


 4445 0258 FB68     		ldr	r3, [r7, #12]
 4446 025a 0022     		movs	r2, #0
 4447 025c 83F82020 		strb	r2, [r3, #32]
1515:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1516:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;  
 4448              		.loc 1 1516 10
 4449 0260 0023     		movs	r3, #0
 4450              	.L171:
1517:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 4451              		.loc 1 1517 1
 4452 0262 1846     		mov	r0, r3
 4453 0264 3037     		adds	r7, r7, #48
 4454              	.LCFI89:
 4455              		.cfi_def_cfa_offset 8
 4456 0266 BD46     		mov	sp, r7
 4457              	.LCFI90:
 4458              		.cfi_def_cfa_register 13
 4459              		@ sp needed
 4460 0268 80BD     		pop	{r7, pc}
 4461              		.cfi_endproc
 4462              	.LFE142:
 4464              		.section	.text.HAL_NAND_Erase_Block,"ax",%progbits
 4465              		.align	1
 4466              		.global	HAL_NAND_Erase_Block
 4467              		.syntax unified
 4468              		.thumb
 4469              		.thumb_func
 4470              		.fpu fpv4-sp-d16
 4472              	HAL_NAND_Erase_Block:
 4473              	.LFB143:
1518:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1519:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1520:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  NAND memory Block erase 
1521:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1522:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  pAddress  pointer to NAND address structure
1524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1525:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1526:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
1527:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 4474              		.loc 1 1527 1
 4475              		.cfi_startproc
 4476              		@ args = 0, pretend = 0, frame = 16
 4477              		@ frame_needed = 1, uses_anonymous_args = 0
 4478 0000 80B5     		push	{r7, lr}
 4479              	.LCFI91:
 4480              		.cfi_def_cfa_offset 8
 4481              		.cfi_offset 7, -8
 4482              		.cfi_offset 14, -4
 4483 0002 84B0     		sub	sp, sp, #16
 4484              	.LCFI92:
 4485              		.cfi_def_cfa_offset 24
 4486 0004 00AF     		add	r7, sp, #0
 4487              	.LCFI93:
 4488              		.cfi_def_cfa_register 7
 4489 0006 7860     		str	r0, [r7, #4]
 4490 0008 3960     		str	r1, [r7]
ARM GAS  /tmp/ccmBJYMF.s 			page 115


1528:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U;
 4491              		.loc 1 1528 12
 4492 000a 0023     		movs	r3, #0
 4493 000c FB60     		str	r3, [r7, #12]
1529:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t tickstart = 0U;
 4494              		.loc 1 1529 12
 4495 000e 0023     		movs	r3, #0
 4496 0010 BB60     		str	r3, [r7, #8]
1530:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1531:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process Locked */
1532:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_LOCK(hnand);
 4497              		.loc 1 1532 3
 4498 0012 7B68     		ldr	r3, [r7, #4]
 4499 0014 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 4500 0018 012B     		cmp	r3, #1
 4501 001a 01D1     		bne	.L187
 4502              		.loc 1 1532 3 is_stmt 0 discriminator 1
 4503 001c 0223     		movs	r3, #2
 4504 001e 92E0     		b	.L188
 4505              	.L187:
 4506              		.loc 1 1532 3 discriminator 2
 4507 0020 7B68     		ldr	r3, [r7, #4]
 4508 0022 0122     		movs	r2, #1
 4509 0024 83F82020 		strb	r2, [r3, #32]
1533:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1534:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1535:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 4510              		.loc 1 1535 11 is_stmt 1 discriminator 2
 4511 0028 7B68     		ldr	r3, [r7, #4]
 4512 002a 93F82130 		ldrb	r3, [r3, #33]
 4513 002e DBB2     		uxtb	r3, r3
 4514              		.loc 1 1535 5 discriminator 2
 4515 0030 022B     		cmp	r3, #2
 4516 0032 01D1     		bne	.L189
1536:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1537:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 4517              		.loc 1 1537 13
 4518 0034 0223     		movs	r3, #2
 4519 0036 86E0     		b	.L188
 4520              	.L189:
1538:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1539:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1540:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
1541:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 4521              		.loc 1 1541 17
 4522 0038 7B68     		ldr	r3, [r7, #4]
 4523 003a 5B68     		ldr	r3, [r3, #4]
 4524              		.loc 1 1541 5
 4525 003c 102B     		cmp	r3, #16
 4526 003e 03D1     		bne	.L190
1542:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1543:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 4527              		.loc 1 1543 19
 4528 0040 4FF0E043 		mov	r3, #1879048192
 4529 0044 FB60     		str	r3, [r7, #12]
 4530 0046 02E0     		b	.L191
 4531              	.L190:
ARM GAS  /tmp/ccmBJYMF.s 			page 116


1544:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1545:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
1546:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1547:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 4532              		.loc 1 1547 19
 4533 0048 4FF00043 		mov	r3, #-2147483648
 4534 004c FB60     		str	r3, [r7, #12]
 4535              	.L191:
1548:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1549:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1550:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1551:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
 4536              		.loc 1 1551 16
 4537 004e 7B68     		ldr	r3, [r7, #4]
 4538 0050 0222     		movs	r2, #2
 4539 0052 83F82120 		strb	r2, [r3, #33]
1552:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1553:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Send Erase block command sequence */
1554:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 4540              		.loc 1 1554 21
 4541 0056 FB68     		ldr	r3, [r7, #12]
 4542 0058 43F48033 		orr	r3, r3, #65536
 4543              		.loc 1 1554 59
 4544 005c 6022     		movs	r2, #96
 4545 005e 1A70     		strb	r2, [r3]
1555:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1556:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress,
 4546              		.loc 1 1556 62
 4547 0060 3B68     		ldr	r3, [r7]
 4548 0062 1B88     		ldrh	r3, [r3]
 4549 0064 DAB2     		uxtb	r2, r3
 4550 0066 3B68     		ldr	r3, [r7]
 4551 0068 9B88     		ldrh	r3, [r3, #4]
 4552 006a 1946     		mov	r1, r3
 4553 006c 3B68     		ldr	r3, [r7]
 4554 006e 5B88     		ldrh	r3, [r3, #2]
 4555 0070 1846     		mov	r0, r3
 4556 0072 7B68     		ldr	r3, [r7, #4]
 4557 0074 9B6B     		ldr	r3, [r3, #56]
 4558 0076 00FB03F3 		mul	r3, r0, r3
 4559 007a 0B44     		add	r3, r3, r1
 4560 007c D9B2     		uxtb	r1, r3
 4561 007e 7B68     		ldr	r3, [r7, #4]
 4562 0080 DB6A     		ldr	r3, [r3, #44]
 4563 0082 DBB2     		uxtb	r3, r3
 4564 0084 11FB03F3 		smulbb	r3, r1, r3
 4565 0088 DBB2     		uxtb	r3, r3
 4566              		.loc 1 1556 21
 4567 008a F968     		ldr	r1, [r7, #12]
 4568 008c 41F40031 		orr	r1, r1, #131072
 4569              		.loc 1 1556 62
 4570 0090 1344     		add	r3, r3, r2
 4571 0092 DBB2     		uxtb	r3, r3
 4572              		.loc 1 1556 60
 4573 0094 0B70     		strb	r3, [r1]
1557:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress,
 4574              		.loc 1 1557 62
ARM GAS  /tmp/ccmBJYMF.s 			page 117


 4575 0096 3B68     		ldr	r3, [r7]
 4576 0098 1B88     		ldrh	r3, [r3]
 4577 009a 1946     		mov	r1, r3
 4578 009c 3B68     		ldr	r3, [r7]
 4579 009e 9B88     		ldrh	r3, [r3, #4]
 4580 00a0 1A46     		mov	r2, r3
 4581 00a2 3B68     		ldr	r3, [r7]
 4582 00a4 5B88     		ldrh	r3, [r3, #2]
 4583 00a6 1846     		mov	r0, r3
 4584 00a8 7B68     		ldr	r3, [r7, #4]
 4585 00aa 9B6B     		ldr	r3, [r3, #56]
 4586 00ac 00FB03F3 		mul	r3, r0, r3
 4587 00b0 1344     		add	r3, r3, r2
 4588 00b2 7A68     		ldr	r2, [r7, #4]
 4589 00b4 D26A     		ldr	r2, [r2, #44]
 4590 00b6 02FB03F3 		mul	r3, r2, r3
 4591 00ba 0B44     		add	r3, r3, r1
 4592 00bc 1A0A     		lsrs	r2, r3, #8
 4593              		.loc 1 1557 21
 4594 00be FB68     		ldr	r3, [r7, #12]
 4595 00c0 43F40033 		orr	r3, r3, #131072
 4596              		.loc 1 1557 62
 4597 00c4 D2B2     		uxtb	r2, r2
 4598              		.loc 1 1557 60
 4599 00c6 1A70     		strb	r2, [r3]
1558:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress,
 4600              		.loc 1 1558 62
 4601 00c8 3B68     		ldr	r3, [r7]
 4602 00ca 1B88     		ldrh	r3, [r3]
 4603 00cc 1946     		mov	r1, r3
 4604 00ce 3B68     		ldr	r3, [r7]
 4605 00d0 9B88     		ldrh	r3, [r3, #4]
 4606 00d2 1A46     		mov	r2, r3
 4607 00d4 3B68     		ldr	r3, [r7]
 4608 00d6 5B88     		ldrh	r3, [r3, #2]
 4609 00d8 1846     		mov	r0, r3
 4610 00da 7B68     		ldr	r3, [r7, #4]
 4611 00dc 9B6B     		ldr	r3, [r3, #56]
 4612 00de 00FB03F3 		mul	r3, r0, r3
 4613 00e2 1344     		add	r3, r3, r2
 4614 00e4 7A68     		ldr	r2, [r7, #4]
 4615 00e6 D26A     		ldr	r2, [r2, #44]
 4616 00e8 02FB03F3 		mul	r3, r2, r3
 4617 00ec 0B44     		add	r3, r3, r1
 4618 00ee 1A0C     		lsrs	r2, r3, #16
 4619              		.loc 1 1558 21
 4620 00f0 FB68     		ldr	r3, [r7, #12]
 4621 00f2 43F40033 		orr	r3, r3, #131072
 4622              		.loc 1 1558 62
 4623 00f6 D2B2     		uxtb	r2, r2
 4624              		.loc 1 1558 60
 4625 00f8 1A70     		strb	r2, [r3]
1559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1560:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 4626              		.loc 1 1560 21
 4627 00fa FB68     		ldr	r3, [r7, #12]
 4628 00fc 43F48033 		orr	r3, r3, #65536
ARM GAS  /tmp/ccmBJYMF.s 			page 118


 4629              		.loc 1 1560 59
 4630 0100 D022     		movs	r2, #208
 4631 0102 1A70     		strb	r2, [r3]
1561:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1562:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND controller state */
1563:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 4632              		.loc 1 1563 16
 4633 0104 7B68     		ldr	r3, [r7, #4]
 4634 0106 0122     		movs	r2, #1
 4635 0108 83F82120 		strb	r2, [r3, #33]
1564:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1565:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Get tick */
1566:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   tickstart = HAL_GetTick();
 4636              		.loc 1 1566 15
 4637 010c FFF7FEFF 		bl	HAL_GetTick
 4638 0110 B860     		str	r0, [r7, #8]
1567:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1568:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Read status until NAND is ready */
1569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 4639              		.loc 1 1569 8
 4640 0112 0DE0     		b	.L192
 4641              	.L193:
1570:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1571:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 4642              		.loc 1 1571 9
 4643 0114 FFF7FEFF 		bl	HAL_GetTick
 4644 0118 0246     		mov	r2, r0
 4645              		.loc 1 1571 23
 4646 011a BB68     		ldr	r3, [r7, #8]
 4647 011c D31A     		subs	r3, r2, r3
 4648              		.loc 1 1571 7
 4649 011e B3F1807F 		cmp	r3, #16777216
 4650 0122 05D9     		bls	.L192
1572:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       /* Process unlocked */
1574:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       __HAL_UNLOCK(hnand);    
 4651              		.loc 1 1574 7
 4652 0124 7B68     		ldr	r3, [r7, #4]
 4653 0126 0022     		movs	r2, #0
 4654 0128 83F82020 		strb	r2, [r3, #32]
1575:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1576:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       return HAL_TIMEOUT; 
 4655              		.loc 1 1576 14
 4656 012c 0323     		movs	r3, #3
 4657 012e 0AE0     		b	.L188
 4658              	.L192:
1569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4659              		.loc 1 1569 9
 4660 0130 7868     		ldr	r0, [r7, #4]
 4661 0132 FFF7FEFF 		bl	HAL_NAND_Read_Status
 4662 0136 0346     		mov	r3, r0
1569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
 4663              		.loc 1 1569 8
 4664 0138 402B     		cmp	r3, #64
 4665 013a EBD1     		bne	.L193
1577:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     } 
1578:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }    
ARM GAS  /tmp/ccmBJYMF.s 			page 119


1579:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  
1580:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Process unlocked */
1581:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   __HAL_UNLOCK(hnand);    
 4666              		.loc 1 1581 3
 4667 013c 7B68     		ldr	r3, [r7, #4]
 4668 013e 0022     		movs	r2, #0
 4669 0140 83F82020 		strb	r2, [r3, #32]
1582:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1583:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;  
 4670              		.loc 1 1583 10
 4671 0144 0023     		movs	r3, #0
 4672              	.L188:
1584:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 4673              		.loc 1 1584 1
 4674 0146 1846     		mov	r0, r3
 4675 0148 1037     		adds	r7, r7, #16
 4676              	.LCFI94:
 4677              		.cfi_def_cfa_offset 8
 4678 014a BD46     		mov	sp, r7
 4679              	.LCFI95:
 4680              		.cfi_def_cfa_register 13
 4681              		@ sp needed
 4682 014c 80BD     		pop	{r7, pc}
 4683              		.cfi_endproc
 4684              	.LFE143:
 4686              		.section	.text.HAL_NAND_Read_Status,"ax",%progbits
 4687              		.align	1
 4688              		.global	HAL_NAND_Read_Status
 4689              		.syntax unified
 4690              		.thumb
 4691              		.thumb_func
 4692              		.fpu fpv4-sp-d16
 4694              	HAL_NAND_Read_Status:
 4695              	.LFB144:
1585:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1586:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1587:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  NAND memory read status 
1588:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1589:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1590:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval NAND status
1591:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1592:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
1593:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 4696              		.loc 1 1593 1
 4697              		.cfi_startproc
 4698              		@ args = 0, pretend = 0, frame = 16
 4699              		@ frame_needed = 1, uses_anonymous_args = 0
 4700              		@ link register save eliminated.
 4701 0000 80B4     		push	{r7}
 4702              	.LCFI96:
 4703              		.cfi_def_cfa_offset 4
 4704              		.cfi_offset 7, -4
 4705 0002 85B0     		sub	sp, sp, #20
 4706              	.LCFI97:
 4707              		.cfi_def_cfa_offset 24
 4708 0004 00AF     		add	r7, sp, #0
 4709              	.LCFI98:
ARM GAS  /tmp/ccmBJYMF.s 			page 120


 4710              		.cfi_def_cfa_register 7
 4711 0006 7860     		str	r0, [r7, #4]
1594:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t data = 0U;
 4712              		.loc 1 1594 12
 4713 0008 0023     		movs	r3, #0
 4714 000a BB60     		str	r3, [r7, #8]
1595:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t deviceaddress = 0U;
 4715              		.loc 1 1595 12
 4716 000c 0023     		movs	r3, #0
 4717 000e FB60     		str	r3, [r7, #12]
1596:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1597:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Identify the device address */
1598:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->Init.NandBank == FMC_NAND_BANK2)
 4718              		.loc 1 1598 17
 4719 0010 7B68     		ldr	r3, [r7, #4]
 4720 0012 5B68     		ldr	r3, [r3, #4]
 4721              		.loc 1 1598 5
 4722 0014 102B     		cmp	r3, #16
 4723 0016 03D1     		bne	.L195
1599:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1600:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE1;
 4724              		.loc 1 1600 19
 4725 0018 4FF0E043 		mov	r3, #1879048192
 4726 001c FB60     		str	r3, [r7, #12]
 4727 001e 02E0     		b	.L196
 4728              	.L195:
1601:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1602:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else
1603:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1604:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     deviceaddress = NAND_DEVICE2;
 4729              		.loc 1 1604 19
 4730 0020 4FF00043 		mov	r3, #-2147483648
 4731 0024 FB60     		str	r3, [r7, #12]
 4732              	.L196:
1605:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   } 
1606:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1607:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Send Read status operation command */
1608:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 4733              		.loc 1 1608 21
 4734 0026 FB68     		ldr	r3, [r7, #12]
 4735 0028 43F48033 		orr	r3, r3, #65536
 4736              		.loc 1 1608 59
 4737 002c 7022     		movs	r2, #112
 4738 002e 1A70     		strb	r2, [r3]
1609:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1610:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Read status register data */
1611:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   data = *(__IO uint8_t *)deviceaddress;
 4739              		.loc 1 1611 11
 4740 0030 FB68     		ldr	r3, [r7, #12]
 4741              		.loc 1 1611 10
 4742 0032 1B78     		ldrb	r3, [r3]
 4743 0034 DBB2     		uxtb	r3, r3
 4744              		.loc 1 1611 8
 4745 0036 BB60     		str	r3, [r7, #8]
1612:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1613:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Return the status */
1614:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if((data & NAND_ERROR) == NAND_ERROR)
ARM GAS  /tmp/ccmBJYMF.s 			page 121


 4746              		.loc 1 1614 12
 4747 0038 BB68     		ldr	r3, [r7, #8]
 4748 003a 03F00103 		and	r3, r3, #1
 4749              		.loc 1 1614 5
 4750 003e 002B     		cmp	r3, #0
 4751 0040 01D0     		beq	.L197
1615:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1616:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     return NAND_ERROR;
 4752              		.loc 1 1616 12
 4753 0042 0123     		movs	r3, #1
 4754 0044 07E0     		b	.L198
 4755              	.L197:
1617:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   } 
1618:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   else if((data & NAND_READY) == NAND_READY)
 4756              		.loc 1 1618 17
 4757 0046 BB68     		ldr	r3, [r7, #8]
 4758 0048 03F04003 		and	r3, r3, #64
 4759              		.loc 1 1618 10
 4760 004c 002B     		cmp	r3, #0
 4761 004e 01D0     		beq	.L199
1619:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1620:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     return NAND_READY;
 4762              		.loc 1 1620 12
 4763 0050 4023     		movs	r3, #64
 4764 0052 00E0     		b	.L198
 4765              	.L199:
1621:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1622:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1623:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return NAND_BUSY; 
 4766              		.loc 1 1623 10
 4767 0054 0023     		movs	r3, #0
 4768              	.L198:
1624:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 4769              		.loc 1 1624 1
 4770 0056 1846     		mov	r0, r3
 4771 0058 1437     		adds	r7, r7, #20
 4772              	.LCFI99:
 4773              		.cfi_def_cfa_offset 4
 4774 005a BD46     		mov	sp, r7
 4775              	.LCFI100:
 4776              		.cfi_def_cfa_register 13
 4777              		@ sp needed
 4778 005c 5DF8047B 		ldr	r7, [sp], #4
 4779              	.LCFI101:
 4780              		.cfi_restore 7
 4781              		.cfi_def_cfa_offset 0
 4782 0060 7047     		bx	lr
 4783              		.cfi_endproc
 4784              	.LFE144:
 4786              		.section	.text.HAL_NAND_Address_Inc,"ax",%progbits
 4787              		.align	1
 4788              		.global	HAL_NAND_Address_Inc
 4789              		.syntax unified
 4790              		.thumb
 4791              		.thumb_func
 4792              		.fpu fpv4-sp-d16
 4794              	HAL_NAND_Address_Inc:
ARM GAS  /tmp/ccmBJYMF.s 			page 122


 4795              	.LFB145:
1625:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1626:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1627:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Increment the NAND memory address
1628:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1629:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1630:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param pAddress pointer to NAND address structure
1631:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval The new status of the increment address operation. It can be:
1632:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *           - NAND_VALID_ADDRESS: When the new address is valid address
1633:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *           - NAND_INVALID_ADDRESS: When the new address is invalid address
1634:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1635:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** uint32_t HAL_NAND_Address_Inc(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
1636:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 4796              		.loc 1 1636 1
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 16
 4799              		@ frame_needed = 1, uses_anonymous_args = 0
 4800              		@ link register save eliminated.
 4801 0000 80B4     		push	{r7}
 4802              	.LCFI102:
 4803              		.cfi_def_cfa_offset 4
 4804              		.cfi_offset 7, -4
 4805 0002 85B0     		sub	sp, sp, #20
 4806              	.LCFI103:
 4807              		.cfi_def_cfa_offset 24
 4808 0004 00AF     		add	r7, sp, #0
 4809              	.LCFI104:
 4810              		.cfi_def_cfa_register 7
 4811 0006 7860     		str	r0, [r7, #4]
 4812 0008 3960     		str	r1, [r7]
1637:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   uint32_t status = NAND_VALID_ADDRESS;
 4813              		.loc 1 1637 12
 4814 000a 4FF48073 		mov	r3, #256
 4815 000e FB60     		str	r3, [r7, #12]
1638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  
1639:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Increment page address */
1640:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   pAddress->Page++;
 4816              		.loc 1 1640 11
 4817 0010 3B68     		ldr	r3, [r7]
 4818 0012 1B88     		ldrh	r3, [r3]
 4819              		.loc 1 1640 17
 4820 0014 0133     		adds	r3, r3, #1
 4821 0016 9AB2     		uxth	r2, r3
 4822 0018 3B68     		ldr	r3, [r7]
 4823 001a 1A80     		strh	r2, [r3]	@ movhi
1641:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1642:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check NAND address is valid */
1643:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(pAddress->Page == hnand->Config.BlockSize)
 4824              		.loc 1 1643 14
 4825 001c 3B68     		ldr	r3, [r7]
 4826 001e 1B88     		ldrh	r3, [r3]
 4827 0020 1A46     		mov	r2, r3
 4828              		.loc 1 1643 37
 4829 0022 7B68     		ldr	r3, [r7, #4]
 4830 0024 DB6A     		ldr	r3, [r3, #44]
 4831              		.loc 1 1643 5
 4832 0026 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccmBJYMF.s 			page 123


 4833 0028 22D1     		bne	.L201
1644:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pAddress->Page = 0U;
 4834              		.loc 1 1645 20
 4835 002a 3B68     		ldr	r3, [r7]
 4836 002c 0022     		movs	r2, #0
 4837 002e 1A80     		strh	r2, [r3]	@ movhi
1646:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     pAddress->Block++;
 4838              		.loc 1 1646 13
 4839 0030 3B68     		ldr	r3, [r7]
 4840 0032 9B88     		ldrh	r3, [r3, #4]
 4841              		.loc 1 1646 20
 4842 0034 0133     		adds	r3, r3, #1
 4843 0036 9AB2     		uxth	r2, r3
 4844 0038 3B68     		ldr	r3, [r7]
 4845 003a 9A80     		strh	r2, [r3, #4]	@ movhi
1647:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1648:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     if(pAddress->Block == hnand->Config.PlaneSize)
 4846              		.loc 1 1648 16
 4847 003c 3B68     		ldr	r3, [r7]
 4848 003e 9B88     		ldrh	r3, [r3, #4]
 4849 0040 1A46     		mov	r2, r3
 4850              		.loc 1 1648 40
 4851 0042 7B68     		ldr	r3, [r7, #4]
 4852 0044 9B6B     		ldr	r3, [r3, #56]
 4853              		.loc 1 1648 7
 4854 0046 9A42     		cmp	r2, r3
 4855 0048 12D1     		bne	.L201
1649:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     {
1650:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       pAddress->Block = 0U;
 4856              		.loc 1 1650 23
 4857 004a 3B68     		ldr	r3, [r7]
 4858 004c 0022     		movs	r2, #0
 4859 004e 9A80     		strh	r2, [r3, #4]	@ movhi
1651:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       pAddress->Plane++;
 4860              		.loc 1 1651 15
 4861 0050 3B68     		ldr	r3, [r7]
 4862 0052 5B88     		ldrh	r3, [r3, #2]
 4863              		.loc 1 1651 22
 4864 0054 0133     		adds	r3, r3, #1
 4865 0056 9AB2     		uxth	r2, r3
 4866 0058 3B68     		ldr	r3, [r7]
 4867 005a 5A80     		strh	r2, [r3, #2]	@ movhi
1652:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1653:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       if(pAddress->Plane == (hnand->Config.PlaneNbr))
 4868              		.loc 1 1653 18
 4869 005c 3B68     		ldr	r3, [r7]
 4870 005e 5B88     		ldrh	r3, [r3, #2]
 4871 0060 1A46     		mov	r2, r3
 4872              		.loc 1 1653 43
 4873 0062 7B68     		ldr	r3, [r7, #4]
 4874 0064 5B6B     		ldr	r3, [r3, #52]
 4875              		.loc 1 1653 9
 4876 0066 9A42     		cmp	r2, r3
 4877 0068 02D1     		bne	.L201
1654:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       {
1655:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****         status = NAND_INVALID_ADDRESS;
ARM GAS  /tmp/ccmBJYMF.s 			page 124


 4878              		.loc 1 1655 16
 4879 006a 4FF40073 		mov	r3, #512
 4880 006e FB60     		str	r3, [r7, #12]
 4881              	.L201:
1656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****       }
1657:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     }
1658:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   } 
1659:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1660:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return (status);
 4882              		.loc 1 1660 10
 4883 0070 FB68     		ldr	r3, [r7, #12]
1661:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 4884              		.loc 1 1661 1
 4885 0072 1846     		mov	r0, r3
 4886 0074 1437     		adds	r7, r7, #20
 4887              	.LCFI105:
 4888              		.cfi_def_cfa_offset 4
 4889 0076 BD46     		mov	sp, r7
 4890              	.LCFI106:
 4891              		.cfi_def_cfa_register 13
 4892              		@ sp needed
 4893 0078 5DF8047B 		ldr	r7, [sp], #4
 4894              	.LCFI107:
 4895              		.cfi_restore 7
 4896              		.cfi_def_cfa_offset 0
 4897 007c 7047     		bx	lr
 4898              		.cfi_endproc
 4899              	.LFE145:
 4901              		.section	.text.HAL_NAND_ECC_Enable,"ax",%progbits
 4902              		.align	1
 4903              		.global	HAL_NAND_ECC_Enable
 4904              		.syntax unified
 4905              		.thumb
 4906              		.thumb_func
 4907              		.fpu fpv4-sp-d16
 4909              	HAL_NAND_ECC_Enable:
 4910              	.LFB146:
1662:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1663:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @}
1664:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1665:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1666:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group3 Peripheral Control functions 
1667:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  *  @brief   management functions 
1668:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  *
1669:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** @verbatim   
1670:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
1671:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****                          ##### NAND Control functions #####
1672:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================  
1673:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   [..]
1674:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     This subsection provides a set of functions allowing to control dynamically
1675:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     the NAND interface.
1676:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1677:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** @endverbatim
1678:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
1679:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */ 
1680:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1681:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
ARM GAS  /tmp/ccmBJYMF.s 			page 125


1682:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1683:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Enables dynamically NAND ECC feature.
1684:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1685:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1686:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1687:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */    
1688:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ECC_Enable(NAND_HandleTypeDef *hnand)
1689:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 4911              		.loc 1 1689 1
 4912              		.cfi_startproc
 4913              		@ args = 0, pretend = 0, frame = 8
 4914              		@ frame_needed = 1, uses_anonymous_args = 0
 4915 0000 80B5     		push	{r7, lr}
 4916              	.LCFI108:
 4917              		.cfi_def_cfa_offset 8
 4918              		.cfi_offset 7, -8
 4919              		.cfi_offset 14, -4
 4920 0002 82B0     		sub	sp, sp, #8
 4921              	.LCFI109:
 4922              		.cfi_def_cfa_offset 16
 4923 0004 00AF     		add	r7, sp, #0
 4924              	.LCFI110:
 4925              		.cfi_def_cfa_register 7
 4926 0006 7860     		str	r0, [r7, #4]
1690:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 4927              		.loc 1 1691 11
 4928 0008 7B68     		ldr	r3, [r7, #4]
 4929 000a 93F82130 		ldrb	r3, [r3, #33]
 4930 000e DBB2     		uxtb	r3, r3
 4931              		.loc 1 1691 5
 4932 0010 022B     		cmp	r3, #2
 4933 0012 01D1     		bne	.L204
1692:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1693:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 4934              		.loc 1 1693 13
 4935 0014 0223     		movs	r3, #2
 4936 0016 10E0     		b	.L205
 4937              	.L204:
1694:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1695:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1696:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND state */
1697:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 4938              		.loc 1 1697 16
 4939 0018 7B68     		ldr	r3, [r7, #4]
 4940 001a 0222     		movs	r2, #2
 4941 001c 83F82120 		strb	r2, [r3, #33]
1698:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
1699:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Enable ECC feature */
1700:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   FMC_NAND_ECC_Enable(hnand->Instance, hnand->Init.NandBank);
 4942              		.loc 1 1700 3
 4943 0020 7B68     		ldr	r3, [r7, #4]
 4944 0022 1A68     		ldr	r2, [r3]
 4945 0024 7B68     		ldr	r3, [r7, #4]
 4946 0026 5B68     		ldr	r3, [r3, #4]
 4947 0028 1946     		mov	r1, r3
 4948 002a 1046     		mov	r0, r2
ARM GAS  /tmp/ccmBJYMF.s 			page 126


 4949 002c FFF7FEFF 		bl	FMC_NAND_ECC_Enable
1701:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1702:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND state */
1703:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 4950              		.loc 1 1703 16
 4951 0030 7B68     		ldr	r3, [r7, #4]
 4952 0032 0122     		movs	r2, #1
 4953 0034 83F82120 		strb	r2, [r3, #33]
1704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1705:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;
 4954              		.loc 1 1705 10
 4955 0038 0023     		movs	r3, #0
 4956              	.L205:
1706:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 4957              		.loc 1 1706 1
 4958 003a 1846     		mov	r0, r3
 4959 003c 0837     		adds	r7, r7, #8
 4960              	.LCFI111:
 4961              		.cfi_def_cfa_offset 8
 4962 003e BD46     		mov	sp, r7
 4963              	.LCFI112:
 4964              		.cfi_def_cfa_register 13
 4965              		@ sp needed
 4966 0040 80BD     		pop	{r7, pc}
 4967              		.cfi_endproc
 4968              	.LFE146:
 4970              		.section	.text.HAL_NAND_ECC_Disable,"ax",%progbits
 4971              		.align	1
 4972              		.global	HAL_NAND_ECC_Disable
 4973              		.syntax unified
 4974              		.thumb
 4975              		.thumb_func
 4976              		.fpu fpv4-sp-d16
 4978              	HAL_NAND_ECC_Disable:
 4979              	.LFB147:
1707:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1708:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1709:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Disables dynamically FMC_NAND ECC feature.
1710:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1711:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1712:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1713:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */  
1714:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
1715:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 4980              		.loc 1 1715 1
 4981              		.cfi_startproc
 4982              		@ args = 0, pretend = 0, frame = 8
 4983              		@ frame_needed = 1, uses_anonymous_args = 0
 4984 0000 80B5     		push	{r7, lr}
 4985              	.LCFI113:
 4986              		.cfi_def_cfa_offset 8
 4987              		.cfi_offset 7, -8
 4988              		.cfi_offset 14, -4
 4989 0002 82B0     		sub	sp, sp, #8
 4990              	.LCFI114:
 4991              		.cfi_def_cfa_offset 16
 4992 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccmBJYMF.s 			page 127


 4993              	.LCFI115:
 4994              		.cfi_def_cfa_register 7
 4995 0006 7860     		str	r0, [r7, #4]
1716:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1717:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 4996              		.loc 1 1717 11
 4997 0008 7B68     		ldr	r3, [r7, #4]
 4998 000a 93F82130 		ldrb	r3, [r3, #33]
 4999 000e DBB2     		uxtb	r3, r3
 5000              		.loc 1 1717 5
 5001 0010 022B     		cmp	r3, #2
 5002 0012 01D1     		bne	.L207
1718:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1719:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 5003              		.loc 1 1719 13
 5004 0014 0223     		movs	r3, #2
 5005 0016 10E0     		b	.L208
 5006              	.L207:
1720:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1721:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1722:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND state */
1723:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;
 5007              		.loc 1 1723 16
 5008 0018 7B68     		ldr	r3, [r7, #4]
 5009 001a 0222     		movs	r2, #2
 5010 001c 83F82120 		strb	r2, [r3, #33]
1724:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1725:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Disable ECC feature */
1726:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 5011              		.loc 1 1726 3
 5012 0020 7B68     		ldr	r3, [r7, #4]
 5013 0022 1A68     		ldr	r2, [r3]
 5014 0024 7B68     		ldr	r3, [r7, #4]
 5015 0026 5B68     		ldr	r3, [r3, #4]
 5016 0028 1946     		mov	r1, r3
 5017 002a 1046     		mov	r0, r2
 5018 002c FFF7FEFF 		bl	FMC_NAND_ECC_Disable
1727:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1728:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND state */
1729:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 5019              		.loc 1 1729 16
 5020 0030 7B68     		ldr	r3, [r7, #4]
 5021 0032 0122     		movs	r2, #1
 5022 0034 83F82120 		strb	r2, [r3, #33]
1730:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1731:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return HAL_OK;  
 5023              		.loc 1 1731 10
 5024 0038 0023     		movs	r3, #0
 5025              	.L208:
1732:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 5026              		.loc 1 1732 1
 5027 003a 1846     		mov	r0, r3
 5028 003c 0837     		adds	r7, r7, #8
 5029              	.LCFI116:
 5030              		.cfi_def_cfa_offset 8
 5031 003e BD46     		mov	sp, r7
 5032              	.LCFI117:
ARM GAS  /tmp/ccmBJYMF.s 			page 128


 5033              		.cfi_def_cfa_register 13
 5034              		@ sp needed
 5035 0040 80BD     		pop	{r7, pc}
 5036              		.cfi_endproc
 5037              	.LFE147:
 5039              		.section	.text.HAL_NAND_GetECC,"ax",%progbits
 5040              		.align	1
 5041              		.global	HAL_NAND_GetECC
 5042              		.syntax unified
 5043              		.thumb
 5044              		.thumb_func
 5045              		.fpu fpv4-sp-d16
 5047              	HAL_NAND_GetECC:
 5048              	.LFB148:
1733:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1734:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1735:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  Disables dynamically NAND ECC feature.
1736:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1737:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1738:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  ECCval pointer to ECC value 
1739:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  Timeout maximum timeout to wait    
1740:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL status
1741:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1742:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_StatusTypeDef  HAL_NAND_GetECC(NAND_HandleTypeDef *hnand, uint32_t *ECCval, uint32_t Timeout)
1743:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 5049              		.loc 1 1743 1
 5050              		.cfi_startproc
 5051              		@ args = 0, pretend = 0, frame = 24
 5052              		@ frame_needed = 1, uses_anonymous_args = 0
 5053 0000 80B5     		push	{r7, lr}
 5054              	.LCFI118:
 5055              		.cfi_def_cfa_offset 8
 5056              		.cfi_offset 7, -8
 5057              		.cfi_offset 14, -4
 5058 0002 86B0     		sub	sp, sp, #24
 5059              	.LCFI119:
 5060              		.cfi_def_cfa_offset 32
 5061 0004 00AF     		add	r7, sp, #0
 5062              	.LCFI120:
 5063              		.cfi_def_cfa_register 7
 5064 0006 F860     		str	r0, [r7, #12]
 5065 0008 B960     		str	r1, [r7, #8]
 5066 000a 7A60     		str	r2, [r7, #4]
1744:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   HAL_StatusTypeDef status = HAL_OK;
 5067              		.loc 1 1744 21
 5068 000c 0023     		movs	r3, #0
 5069 000e FB75     		strb	r3, [r7, #23]
1745:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1746:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Check the NAND controller state */
1747:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   if(hnand->State == HAL_NAND_STATE_BUSY)
 5070              		.loc 1 1747 11
 5071 0010 FB68     		ldr	r3, [r7, #12]
 5072 0012 93F82130 		ldrb	r3, [r3, #33]
 5073 0016 DBB2     		uxtb	r3, r3
 5074              		.loc 1 1747 5
 5075 0018 022B     		cmp	r3, #2
 5076 001a 01D1     		bne	.L210
ARM GAS  /tmp/ccmBJYMF.s 			page 129


1748:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   {
1749:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****      return HAL_BUSY;
 5077              		.loc 1 1749 13
 5078 001c 0223     		movs	r3, #2
 5079 001e 12E0     		b	.L211
 5080              	.L210:
1750:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   }
1751:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1752:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND state */
1753:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_BUSY;  
 5081              		.loc 1 1753 16
 5082 0020 FB68     		ldr	r3, [r7, #12]
 5083 0022 0222     		movs	r2, #2
 5084 0024 83F82120 		strb	r2, [r3, #33]
1754:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****    
1755:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Get NAND ECC value */
1756:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   status = FMC_NAND_GetECC(hnand->Instance, ECCval, hnand->Init.NandBank, Timeout);
 5085              		.loc 1 1756 12
 5086 0028 FB68     		ldr	r3, [r7, #12]
 5087 002a 1868     		ldr	r0, [r3]
 5088 002c FB68     		ldr	r3, [r7, #12]
 5089 002e 5A68     		ldr	r2, [r3, #4]
 5090 0030 7B68     		ldr	r3, [r7, #4]
 5091 0032 B968     		ldr	r1, [r7, #8]
 5092 0034 FFF7FEFF 		bl	FMC_NAND_GetECC
 5093 0038 0346     		mov	r3, r0
 5094 003a FB75     		strb	r3, [r7, #23]
1757:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1758:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   /* Update the NAND state */
1759:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   hnand->State = HAL_NAND_STATE_READY;
 5095              		.loc 1 1759 16
 5096 003c FB68     		ldr	r3, [r7, #12]
 5097 003e 0122     		movs	r2, #1
 5098 0040 83F82120 		strb	r2, [r3, #33]
1760:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1761:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return status;  
 5099              		.loc 1 1761 10
 5100 0044 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5101              	.L211:
1762:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 5102              		.loc 1 1762 1
 5103 0046 1846     		mov	r0, r3
 5104 0048 1837     		adds	r7, r7, #24
 5105              	.LCFI121:
 5106              		.cfi_def_cfa_offset 8
 5107 004a BD46     		mov	sp, r7
 5108              	.LCFI122:
 5109              		.cfi_def_cfa_register 13
 5110              		@ sp needed
 5111 004c 80BD     		pop	{r7, pc}
 5112              		.cfi_endproc
 5113              	.LFE148:
 5115              		.section	.text.HAL_NAND_GetState,"ax",%progbits
 5116              		.align	1
 5117              		.global	HAL_NAND_GetState
 5118              		.syntax unified
 5119              		.thumb
ARM GAS  /tmp/ccmBJYMF.s 			page 130


 5120              		.thumb_func
 5121              		.fpu fpv4-sp-d16
 5123              	HAL_NAND_GetState:
 5124              	.LFB149:
1763:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1764:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1765:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @}
1766:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1767:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1768:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     
1769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /** @defgroup NAND_Exported_Functions_Group4 Peripheral State functions 
1770:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  *  @brief   Peripheral State functions 
1771:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****  *
1772:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** @verbatim   
1773:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================
1774:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****                          ##### NAND State functions #####
1775:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   ==============================================================================  
1776:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   [..]
1777:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     This subsection permits to get in run-time the status of the NAND controller 
1778:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****     and the data flow.
1779:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** 
1780:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** @endverbatim
1781:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @{
1782:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1783:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   
1784:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** /**
1785:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @brief  return the NAND state
1786:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
1787:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   *                the configuration information for NAND module.
1788:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   * @retval HAL state
1789:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   */
1790:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
1791:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** {
 5125              		.loc 1 1791 1
 5126              		.cfi_startproc
 5127              		@ args = 0, pretend = 0, frame = 8
 5128              		@ frame_needed = 1, uses_anonymous_args = 0
 5129              		@ link register save eliminated.
 5130 0000 80B4     		push	{r7}
 5131              	.LCFI123:
 5132              		.cfi_def_cfa_offset 4
 5133              		.cfi_offset 7, -4
 5134 0002 83B0     		sub	sp, sp, #12
 5135              	.LCFI124:
 5136              		.cfi_def_cfa_offset 16
 5137 0004 00AF     		add	r7, sp, #0
 5138              	.LCFI125:
 5139              		.cfi_def_cfa_register 7
 5140 0006 7860     		str	r0, [r7, #4]
1792:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c ****   return hnand->State;
 5141              		.loc 1 1792 15
 5142 0008 7B68     		ldr	r3, [r7, #4]
 5143 000a 93F82130 		ldrb	r3, [r3, #33]
 5144 000e DBB2     		uxtb	r3, r3
1793:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_nand.c **** }
 5145              		.loc 1 1793 1
 5146 0010 1846     		mov	r0, r3
ARM GAS  /tmp/ccmBJYMF.s 			page 131


 5147 0012 0C37     		adds	r7, r7, #12
 5148              	.LCFI126:
 5149              		.cfi_def_cfa_offset 4
 5150 0014 BD46     		mov	sp, r7
 5151              	.LCFI127:
 5152              		.cfi_def_cfa_register 13
 5153              		@ sp needed
 5154 0016 5DF8047B 		ldr	r7, [sp], #4
 5155              	.LCFI128:
 5156              		.cfi_restore 7
 5157              		.cfi_def_cfa_offset 0
 5158 001a 7047     		bx	lr
 5159              		.cfi_endproc
 5160              	.LFE149:
 5162              		.text
 5163              	.Letext0:
 5164              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 5165              		.file 4 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 5166              		.file 5 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 5167              		.file 6 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 5168              		.file 7 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 5169              		.file 8 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_fmc.h"
 5170              		.file 9 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_nand.h"
ARM GAS  /tmp/ccmBJYMF.s 			page 132


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_nand.c
     /tmp/ccmBJYMF.s:18     .text.HAL_NAND_Init:0000000000000000 $t
     /tmp/ccmBJYMF.s:26     .text.HAL_NAND_Init:0000000000000000 HAL_NAND_Init
     /tmp/ccmBJYMF.s:206    .text.HAL_NAND_MspInit:0000000000000000 HAL_NAND_MspInit
     /tmp/ccmBJYMF.s:139    .text.HAL_NAND_DeInit:0000000000000000 $t
     /tmp/ccmBJYMF.s:146    .text.HAL_NAND_DeInit:0000000000000000 HAL_NAND_DeInit
     /tmp/ccmBJYMF.s:249    .text.HAL_NAND_MspDeInit:0000000000000000 HAL_NAND_MspDeInit
     /tmp/ccmBJYMF.s:199    .text.HAL_NAND_MspInit:0000000000000000 $t
     /tmp/ccmBJYMF.s:242    .text.HAL_NAND_MspDeInit:0000000000000000 $t
     /tmp/ccmBJYMF.s:285    .text.HAL_NAND_IRQHandler:0000000000000000 $t
     /tmp/ccmBJYMF.s:292    .text.HAL_NAND_IRQHandler:0000000000000000 HAL_NAND_IRQHandler
     /tmp/ccmBJYMF.s:564    .text.HAL_NAND_ITCallback:0000000000000000 HAL_NAND_ITCallback
     /tmp/ccmBJYMF.s:557    .text.HAL_NAND_ITCallback:0000000000000000 $t
     /tmp/ccmBJYMF.s:600    .text.HAL_NAND_Read_ID:0000000000000000 $t
     /tmp/ccmBJYMF.s:607    .text.HAL_NAND_Read_ID:0000000000000000 HAL_NAND_Read_ID
     /tmp/ccmBJYMF.s:800    .text.HAL_NAND_Reset:0000000000000000 $t
     /tmp/ccmBJYMF.s:807    .text.HAL_NAND_Reset:0000000000000000 HAL_NAND_Reset
     /tmp/ccmBJYMF.s:906    .text.HAL_NAND_ConfigDevice:0000000000000000 $t
     /tmp/ccmBJYMF.s:913    .text.HAL_NAND_ConfigDevice:0000000000000000 HAL_NAND_ConfigDevice
     /tmp/ccmBJYMF.s:994    .text.HAL_NAND_Read_Page_8b:0000000000000000 $t
     /tmp/ccmBJYMF.s:1001   .text.HAL_NAND_Read_Page_8b:0000000000000000 HAL_NAND_Read_Page_8b
     /tmp/ccmBJYMF.s:4694   .text.HAL_NAND_Read_Status:0000000000000000 HAL_NAND_Read_Status
     /tmp/ccmBJYMF.s:1421   .text.HAL_NAND_Read_Page_16b:0000000000000000 $t
     /tmp/ccmBJYMF.s:1428   .text.HAL_NAND_Read_Page_16b:0000000000000000 HAL_NAND_Read_Page_16b
     /tmp/ccmBJYMF.s:1847   .text.HAL_NAND_Write_Page_8b:0000000000000000 $t
     /tmp/ccmBJYMF.s:1854   .text.HAL_NAND_Write_Page_8b:0000000000000000 HAL_NAND_Write_Page_8b
     /tmp/ccmBJYMF.s:2279   .text.HAL_NAND_Write_Page_16b:0000000000000000 $t
     /tmp/ccmBJYMF.s:2286   .text.HAL_NAND_Write_Page_16b:0000000000000000 HAL_NAND_Write_Page_16b
     /tmp/ccmBJYMF.s:2711   .text.HAL_NAND_Read_SpareArea_8b:0000000000000000 $t
     /tmp/ccmBJYMF.s:2718   .text.HAL_NAND_Read_SpareArea_8b:0000000000000000 HAL_NAND_Read_SpareArea_8b
     /tmp/ccmBJYMF.s:3149   .text.HAL_NAND_Read_SpareArea_16b:0000000000000000 $t
     /tmp/ccmBJYMF.s:3156   .text.HAL_NAND_Read_SpareArea_16b:0000000000000000 HAL_NAND_Read_SpareArea_16b
     /tmp/ccmBJYMF.s:3589   .text.HAL_NAND_Write_SpareArea_8b:0000000000000000 $t
     /tmp/ccmBJYMF.s:3596   .text.HAL_NAND_Write_SpareArea_8b:0000000000000000 HAL_NAND_Write_SpareArea_8b
     /tmp/ccmBJYMF.s:4026   .text.HAL_NAND_Write_SpareArea_16b:0000000000000000 $t
     /tmp/ccmBJYMF.s:4033   .text.HAL_NAND_Write_SpareArea_16b:0000000000000000 HAL_NAND_Write_SpareArea_16b
     /tmp/ccmBJYMF.s:4465   .text.HAL_NAND_Erase_Block:0000000000000000 $t
     /tmp/ccmBJYMF.s:4472   .text.HAL_NAND_Erase_Block:0000000000000000 HAL_NAND_Erase_Block
     /tmp/ccmBJYMF.s:4687   .text.HAL_NAND_Read_Status:0000000000000000 $t
     /tmp/ccmBJYMF.s:4787   .text.HAL_NAND_Address_Inc:0000000000000000 $t
     /tmp/ccmBJYMF.s:4794   .text.HAL_NAND_Address_Inc:0000000000000000 HAL_NAND_Address_Inc
     /tmp/ccmBJYMF.s:4902   .text.HAL_NAND_ECC_Enable:0000000000000000 $t
     /tmp/ccmBJYMF.s:4909   .text.HAL_NAND_ECC_Enable:0000000000000000 HAL_NAND_ECC_Enable
     /tmp/ccmBJYMF.s:4971   .text.HAL_NAND_ECC_Disable:0000000000000000 $t
     /tmp/ccmBJYMF.s:4978   .text.HAL_NAND_ECC_Disable:0000000000000000 HAL_NAND_ECC_Disable
     /tmp/ccmBJYMF.s:5040   .text.HAL_NAND_GetECC:0000000000000000 $t
     /tmp/ccmBJYMF.s:5047   .text.HAL_NAND_GetECC:0000000000000000 HAL_NAND_GetECC
     /tmp/ccmBJYMF.s:5116   .text.HAL_NAND_GetState:0000000000000000 $t
     /tmp/ccmBJYMF.s:5123   .text.HAL_NAND_GetState:0000000000000000 HAL_NAND_GetState

UNDEFINED SYMBOLS
FMC_NAND_Init
FMC_NAND_CommonSpace_Timing_Init
FMC_NAND_AttributeSpace_Timing_Init
FMC_NAND_DeInit
HAL_GetTick
ARM GAS  /tmp/ccmBJYMF.s 			page 133


FMC_NAND_ECC_Enable
FMC_NAND_ECC_Disable
FMC_NAND_GetECC
