ARM GAS  /tmp/ccJhy18e.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_irda.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_IRDA_Init,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_IRDA_Init
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_IRDA_Init:
  27              	.LFB126:
  28              		.file 1 "./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c"
   1:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
   2:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
   3:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @file    stm32f4xx_hal_irda.c
   4:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @author  MCD Application Team
   5:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief   IRDA HAL module driver.
   6:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *          This file provides firmware functions to manage the following 
   7:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *          functionalities of the IrDA SIR ENDEC block (IrDA):
   8:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           + Initialization and de-initialization methods
   9:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           + IO operation methods
  10:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           + Peripheral Control methods
  11:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
  12:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   @verbatim
  13:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
  14:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****                         ##### How to use this driver #####
  15:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
  16:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   [..]
  17:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     The IRDA HAL driver can be used as follows:
  18:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
  19:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Declare a IRDA_HandleTypeDef handle structure.
  20:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Initialize the IRDA low level resources by implementing the HAL_IRDA_MspInit() API:
  21:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (##) Enable the USARTx interface clock.
  22:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (##) IRDA pins configuration:
  23:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Enable the clock for the IRDA GPIOs.
  24:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure these IRDA pins as alternate function pull-up.
  25:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (##) NVIC configuration if you need to use interrupt process (HAL_IRDA_Transmit_IT()
  26:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              and HAL_IRDA_Receive_IT() APIs):
  27:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the USARTx interrupt priority.
  28:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Enable the NVIC USART IRQ handle.
  29:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (##) DMA Configuration if you need to use DMA process (HAL_IRDA_Transmit_DMA()
  30:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              and HAL_IRDA_Receive_DMA() APIs):
ARM GAS  /tmp/ccJhy18e.s 			page 2


  31:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Declare a DMA handle structure for the Tx/Rx stream.
  32:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Enable the DMAx interface clock.
  33:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.  
  34:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the DMA Tx/Rx Stream.
  35:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Associate the initialized DMA handle to the IRDA DMA Tx/Rx handle.
  36:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  37:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
  38:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Program the Baud Rate, Word Length, Parity, IrDA Mode, Prescaler 
  39:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         and Mode(Receiver/Transmitter) in the hirda Init structure.
  40:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
  41:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Initialize the IRDA registers by calling the HAL_IRDA_Init() API:
  42:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) This API configures also the low level Hardware GPIO, CLOCK, CORTEX...etc)
  43:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             by calling the customized HAL_IRDA_MspInit() API.
  44:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     -@@- The specific IRDA interrupts (Transmission complete interrupt, 
  45:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         RXNE interrupt and Error Interrupts) will be managed using the macros
  46:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         __HAL_IRDA_ENABLE_IT() and __HAL_IRDA_DISABLE_IT() inside the transmit and receive process.
  47:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         
  48:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Three operation modes are available within this driver :
  49:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              
  50:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     *** Polling mode IO operation ***
  51:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     =================================
  52:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]    
  53:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) Send an amount of data in blocking mode using HAL_IRDA_Transmit() 
  54:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) Receive an amount of data in blocking mode using HAL_IRDA_Receive()
  55:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****        
  56:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     *** Interrupt mode IO operation ***    
  57:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     ===================================
  58:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]    
  59:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) Send an amount of data in non blocking mode using HAL_IRDA_Transmit_IT() 
  60:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can 
  61:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  62:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) Receive an amount of data in non blocking mode using HAL_IRDA_Receive_IT() 
  63:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can 
  64:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_RxCpltCallback           
  65:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can 
  66:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_ErrorCallback
  67:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
  68:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     *** DMA mode IO operation ***    
  69:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     =============================
  70:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]
  71:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) Send an amount of data in non blocking mode (DMA) using HAL_IRDA_Transmit_DMA() 
  72:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) At transmission end of transfer HAL_IRDA_TxCpltCallback is executed and user can 
  73:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_TxCpltCallback
  74:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) Receive an amount of data in non blocking mode (DMA) using HAL_IRDA_Receive_DMA() 
  75:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) At reception end of transfer HAL_IRDA_RxCpltCallback is executed and user can 
  76:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_RxCpltCallback           
  77:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) In case of transfer Error, HAL_IRDA_ErrorCallback() function is executed and user can 
  78:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            add his own code by customization of function pointer HAL_IRDA_ErrorCallback    
  79:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
  80:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     *** IRDA HAL driver macros list ***
  81:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     ===================================
  82:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]
  83:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       Below the list of most used macros in IRDA HAL driver.
  84:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****        
  85:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) __HAL_IRDA_ENABLE: Enable the IRDA peripheral 
  86:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) __HAL_IRDA_DISABLE: Disable the IRDA peripheral     
  87:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) __HAL_IRDA_GET_FLAG : Checks whether the specified IRDA flag is set or not
ARM GAS  /tmp/ccJhy18e.s 			page 3


  88:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) __HAL_IRDA_CLEAR_FLAG : Clears the specified IRDA pending flag
  89:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) __HAL_IRDA_ENABLE_IT: Enables the specified IRDA interrupt
  90:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) __HAL_IRDA_DISABLE_IT: Disables the specified IRDA interrupt
  91:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
  92:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]
  93:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (@) You can refer to the IRDA HAL driver header file for more useful macros
  94:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
  95:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   @endverbatim
  96:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
  97:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @attention
  98:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
  99:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 100:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
 101:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * Redistribution and use in source and binary forms, with or without modification,
 102:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * are permitted provided that the following conditions are met:
 103:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 104:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *      this list of conditions and the following disclaimer.
 105:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 106:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *      this list of conditions and the following disclaimer in the documentation
 107:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *      and/or other materials provided with the distribution.
 108:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 109:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *      may be used to endorse or promote products derived from this software
 110:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *      without specific prior written permission.
 111:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
 112:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 113:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 114:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 115:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 116:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 117:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 118:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 119:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 120:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 121:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 122:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
 123:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ******************************************************************************
 124:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */ 
 125:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 126:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Includes ------------------------------------------------------------------*/
 127:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** #include "stm32f4xx_hal.h"
 128:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 129:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @addtogroup STM32F4xx_HAL_Driver
 130:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 131:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 132:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 133:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA IRDA
 134:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief HAL IRDA module driver
 135:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 136:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 137:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 138:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** #ifdef HAL_IRDA_MODULE_ENABLED
 139:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 140:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Private typedef -----------------------------------------------------------*/
 141:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Private define ------------------------------------------------------------*/
 142:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @addtogroup IRDA_Private_Constants
 143:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 144:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
ARM GAS  /tmp/ccJhy18e.s 			page 4


 145:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 146:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @}
 147:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 148:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Private macro -------------------------------------------------------------*/
 149:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Private variables ---------------------------------------------------------*/
 150:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Private function prototypes -----------------------------------------------*/
 151:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @addtogroup IRDA_Private_Functions
 152:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 153:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 154:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_SetConfig (IRDA_HandleTypeDef *hirda);
 155:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda);
 156:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda);
 157:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda);
 158:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 159:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma);
 160:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 161:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma);
 162:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma);
 163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 164:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 165:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 166:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 167:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 168:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
 169:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda);
 170:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda);
 171:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 172:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @}
 173:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 174:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /* Exported functions --------------------------------------------------------*/
 175:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions IrDA Exported Functions
 176:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 177:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 178:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 179:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group1 IrDA Initialization and de-initialization functions 
 180:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *  @brief    Initialization and Configuration functions 
 181:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
 182:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** @verbatim 
 183:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** ===============================================================================
 185:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             ##### Initialization and Configuration functions #####
 186:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****  ===============================================================================  
 187:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]
 188:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy 
 189:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     in IrDA mode.
 190:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 191:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) BaudRate
 192:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) WordLength 
 193:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 194:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              in the data register is transmitted but is changed by the parity bit.
 195:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 196:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              please refer to Reference manual for possible IRDA frame formats.
 197:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) Prescaler: A pulse of width less than two and greater than one PSC period(s) may or ma
 198:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              not be rejected. The receiver set up time should be managed by software. The IrDA phys
 199:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              specification specifies a minimum of 10 ms delay between transmission and 
 200:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****              reception (IrDA is a half duplex protocol).
 201:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) Mode: Receiver/transmitter modes
ARM GAS  /tmp/ccJhy18e.s 			page 5


 202:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) IrDAMode: the IrDA can operate in the Normal mode or in the Low power mode.
 203:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]
 204:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     The HAL_IRDA_Init() API follows IRDA configuration procedures (details for the procedures
 205:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     are available in reference manual).
 206:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 207:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** @endverbatim
 208:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 209:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 210:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 211:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Initializes the IRDA mode according to the specified
 213:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         parameters in the IRDA_InitTypeDef and create the associated handle.
 214:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 215:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 216:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 217:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
 219:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
  29              		.loc 1 219 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 7, -8
  37              		.cfi_offset 14, -4
  38 0002 82B0     		sub	sp, sp, #8
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 16
  41 0004 00AF     		add	r7, sp, #0
  42              	.LCFI2:
  43              		.cfi_def_cfa_register 7
  44 0006 7860     		str	r0, [r7, #4]
 220:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 221:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda == NULL)
  45              		.loc 1 221 5
  46 0008 7B68     		ldr	r3, [r7, #4]
  47 000a 002B     		cmp	r3, #0
  48 000c 01D1     		bne	.L2
 222:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 223:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_ERROR;
  49              		.loc 1 223 12
  50 000e 0123     		movs	r3, #1
  51 0010 5EE0     		b	.L3
  52              	.L2:
 224:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 225:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 226:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA instance parameters */
 227:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
 228:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA mode parameter in the IRDA handle */
 229:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_POWERMODE(hirda->Init.IrDAMode)); 
 230:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_RESET)
  53              		.loc 1 231 11
  54 0012 7B68     		ldr	r3, [r7, #4]
  55 0014 93F83530 		ldrb	r3, [r3, #53]
ARM GAS  /tmp/ccJhy18e.s 			page 6


  56 0018 DBB2     		uxtb	r3, r3
  57              		.loc 1 231 5
  58 001a 002B     		cmp	r3, #0
  59 001c 06D1     		bne	.L4
 232:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 233:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Allocate lock resource and initialize it */
 234:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->Lock = HAL_UNLOCKED;
  60              		.loc 1 234 17
  61 001e 7B68     		ldr	r3, [r7, #4]
  62 0020 0022     		movs	r2, #0
  63 0022 83F83420 		strb	r2, [r3, #52]
 235:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 236:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_MspInit(hirda);
  64              		.loc 1 236 5
  65 0026 7868     		ldr	r0, [r7, #4]
  66 0028 FFF7FEFF 		bl	HAL_IRDA_MspInit
  67              	.L4:
 237:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 238:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 239:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
  68              		.loc 1 239 17
  69 002c 7B68     		ldr	r3, [r7, #4]
  70 002e 2422     		movs	r2, #36
  71 0030 83F83520 		strb	r2, [r3, #53]
 240:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 241:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA peripheral */
 242:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
  72              		.loc 1 242 3
  73 0034 7B68     		ldr	r3, [r7, #4]
  74 0036 1B68     		ldr	r3, [r3]
  75 0038 DA68     		ldr	r2, [r3, #12]
  76 003a 7B68     		ldr	r3, [r7, #4]
  77 003c 1B68     		ldr	r3, [r3]
  78 003e 22F40052 		bic	r2, r2, #8192
  79 0042 DA60     		str	r2, [r3, #12]
 243:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 244:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Set the IRDA communication parameters */
 245:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_SetConfig(hirda);
  80              		.loc 1 245 3
  81 0044 7868     		ldr	r0, [r7, #4]
  82 0046 FFF7FEFF 		bl	IRDA_SetConfig
 246:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 247:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* In IrDA mode, the following bits must be kept cleared: 
 248:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
 249:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
 250:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, USART_CR2_LINEN | USART_CR2_STOP | USART_CR2_CLKEN);
  83              		.loc 1 250 3
  84 004a 7B68     		ldr	r3, [r7, #4]
  85 004c 1B68     		ldr	r3, [r3]
  86 004e 1A69     		ldr	r2, [r3, #16]
  87 0050 7B68     		ldr	r3, [r7, #4]
  88 0052 1B68     		ldr	r3, [r3]
  89 0054 22F4F042 		bic	r2, r2, #30720
  90 0058 1A61     		str	r2, [r3, #16]
 251:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_SCEN | USART_CR3_HDSEL);
  91              		.loc 1 251 3
  92 005a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 7


  93 005c 1B68     		ldr	r3, [r3]
  94 005e 5A69     		ldr	r2, [r3, #20]
  95 0060 7B68     		ldr	r3, [r7, #4]
  96 0062 1B68     		ldr	r3, [r3]
  97 0064 22F02802 		bic	r2, r2, #40
  98 0068 5A61     		str	r2, [r3, #20]
 252:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 253:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Enable the IRDA peripheral */
 254:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_IRDA_ENABLE(hirda);
  99              		.loc 1 254 3
 100 006a 7B68     		ldr	r3, [r7, #4]
 101 006c 1B68     		ldr	r3, [r3]
 102 006e DA68     		ldr	r2, [r3, #12]
 103 0070 7B68     		ldr	r3, [r7, #4]
 104 0072 1B68     		ldr	r3, [r3]
 105 0074 42F40052 		orr	r2, r2, #8192
 106 0078 DA60     		str	r2, [r3, #12]
 255:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 256:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Set the prescaler */
 257:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->GTPR, USART_GTPR_PSC, hirda->Init.Prescaler);
 107              		.loc 1 257 3
 108 007a 7B68     		ldr	r3, [r7, #4]
 109 007c 1B68     		ldr	r3, [r3]
 110 007e 9B69     		ldr	r3, [r3, #24]
 111 0080 23F0FF02 		bic	r2, r3, #255
 112 0084 7B68     		ldr	r3, [r7, #4]
 113 0086 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 114 0088 1946     		mov	r1, r3
 115 008a 7B68     		ldr	r3, [r7, #4]
 116 008c 1B68     		ldr	r3, [r3]
 117 008e 0A43     		orrs	r2, r2, r1
 118 0090 9A61     		str	r2, [r3, #24]
 258:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 259:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Configure the IrDA mode */
 260:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.IrDAMode);
 119              		.loc 1 260 3
 120 0092 7B68     		ldr	r3, [r7, #4]
 121 0094 1B68     		ldr	r3, [r3]
 122 0096 5B69     		ldr	r3, [r3, #20]
 123 0098 23F00401 		bic	r1, r3, #4
 124 009c 7B68     		ldr	r3, [r7, #4]
 125 009e 9A69     		ldr	r2, [r3, #24]
 126 00a0 7B68     		ldr	r3, [r7, #4]
 127 00a2 1B68     		ldr	r3, [r3]
 128 00a4 0A43     		orrs	r2, r2, r1
 129 00a6 5A61     		str	r2, [r3, #20]
 261:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 262:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 263:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR3, USART_CR3_IREN);
 130              		.loc 1 263 3
 131 00a8 7B68     		ldr	r3, [r7, #4]
 132 00aa 1B68     		ldr	r3, [r3]
 133 00ac 5A69     		ldr	r2, [r3, #20]
 134 00ae 7B68     		ldr	r3, [r7, #4]
 135 00b0 1B68     		ldr	r3, [r3]
 136 00b2 42F00202 		orr	r2, r2, #2
 137 00b6 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccJhy18e.s 			page 8


 264:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 265:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Initialize the IRDA state*/
 266:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 138              		.loc 1 266 20
 139 00b8 7B68     		ldr	r3, [r7, #4]
 140 00ba 0022     		movs	r2, #0
 141 00bc 9A63     		str	r2, [r3, #56]
 267:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState= HAL_IRDA_STATE_READY;
 142              		.loc 1 267 16
 143 00be 7B68     		ldr	r3, [r7, #4]
 144 00c0 2022     		movs	r2, #32
 145 00c2 83F83520 		strb	r2, [r3, #53]
 268:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState= HAL_IRDA_STATE_READY;
 146              		.loc 1 268 17
 147 00c6 7B68     		ldr	r3, [r7, #4]
 148 00c8 2022     		movs	r2, #32
 149 00ca 83F83620 		strb	r2, [r3, #54]
 269:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 270:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 150              		.loc 1 270 10
 151 00ce 0023     		movs	r3, #0
 152              	.L3:
 271:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 153              		.loc 1 271 1
 154 00d0 1846     		mov	r0, r3
 155 00d2 0837     		adds	r7, r7, #8
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158 00d4 BD46     		mov	sp, r7
 159              	.LCFI4:
 160              		.cfi_def_cfa_register 13
 161              		@ sp needed
 162 00d6 80BD     		pop	{r7, pc}
 163              		.cfi_endproc
 164              	.LFE126:
 166              		.section	.text.HAL_IRDA_DeInit,"ax",%progbits
 167              		.align	1
 168              		.global	HAL_IRDA_DeInit
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 172              		.fpu fpv4-sp-d16
 174              	HAL_IRDA_DeInit:
 175              	.LFB127:
 272:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 273:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 274:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DeInitializes the IRDA peripheral 
 275:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 276:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 277:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 278:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 279:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DeInit(IRDA_HandleTypeDef *hirda)
 280:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 176              		.loc 1 280 1
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 8
 179              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccJhy18e.s 			page 9


 180 0000 80B5     		push	{r7, lr}
 181              	.LCFI5:
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 82B0     		sub	sp, sp, #8
 186              	.LCFI6:
 187              		.cfi_def_cfa_offset 16
 188 0004 00AF     		add	r7, sp, #0
 189              	.LCFI7:
 190              		.cfi_def_cfa_register 7
 191 0006 7860     		str	r0, [r7, #4]
 281:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check the IRDA handle allocation */
 282:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda == NULL)
 192              		.loc 1 282 5
 193 0008 7B68     		ldr	r3, [r7, #4]
 194 000a 002B     		cmp	r3, #0
 195 000c 01D1     		bne	.L6
 283:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 284:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_ERROR;
 196              		.loc 1 284 12
 197 000e 0123     		movs	r3, #1
 198 0010 1EE0     		b	.L7
 199              	.L6:
 285:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 287:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check the parameters */
 288:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance)); 
 289:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 290:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_BUSY;
 200              		.loc 1 290 17
 201 0012 7B68     		ldr	r3, [r7, #4]
 202 0014 2422     		movs	r2, #36
 203 0016 83F83520 		strb	r2, [r3, #53]
 291:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 292:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the Peripheral */
 293:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_IRDA_DISABLE(hirda);
 204              		.loc 1 293 3
 205 001a 7B68     		ldr	r3, [r7, #4]
 206 001c 1B68     		ldr	r3, [r3]
 207 001e DA68     		ldr	r2, [r3, #12]
 208 0020 7B68     		ldr	r3, [r7, #4]
 209 0022 1B68     		ldr	r3, [r3]
 210 0024 22F40052 		bic	r2, r2, #8192
 211 0028 DA60     		str	r2, [r3, #12]
 294:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 295:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* DeInit the low level hardware */
 296:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_MspDeInit(hirda);
 212              		.loc 1 296 3
 213 002a 7868     		ldr	r0, [r7, #4]
 214 002c FFF7FEFF 		bl	HAL_IRDA_MspDeInit
 297:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 298:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 215              		.loc 1 298 20
 216 0030 7B68     		ldr	r3, [r7, #4]
 217 0032 0022     		movs	r2, #0
 218 0034 9A63     		str	r2, [r3, #56]
ARM GAS  /tmp/ccJhy18e.s 			page 10


 299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 300:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_RESET; 
 219              		.loc 1 300 17
 220 0036 7B68     		ldr	r3, [r7, #4]
 221 0038 0022     		movs	r2, #0
 222 003a 83F83520 		strb	r2, [r3, #53]
 301:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_RESET;
 223              		.loc 1 301 18
 224 003e 7B68     		ldr	r3, [r7, #4]
 225 0040 0022     		movs	r2, #0
 226 0042 83F83620 		strb	r2, [r3, #54]
 302:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 303:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Release Lock */
 304:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 227              		.loc 1 304 3
 228 0046 7B68     		ldr	r3, [r7, #4]
 229 0048 0022     		movs	r2, #0
 230 004a 83F83420 		strb	r2, [r3, #52]
 305:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 306:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 231              		.loc 1 306 10
 232 004e 0023     		movs	r3, #0
 233              	.L7:
 307:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 234              		.loc 1 307 1
 235 0050 1846     		mov	r0, r3
 236 0052 0837     		adds	r7, r7, #8
 237              	.LCFI8:
 238              		.cfi_def_cfa_offset 8
 239 0054 BD46     		mov	sp, r7
 240              	.LCFI9:
 241              		.cfi_def_cfa_register 13
 242              		@ sp needed
 243 0056 80BD     		pop	{r7, pc}
 244              		.cfi_endproc
 245              	.LFE127:
 247              		.section	.text.HAL_IRDA_MspInit,"ax",%progbits
 248              		.align	1
 249              		.weak	HAL_IRDA_MspInit
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	HAL_IRDA_MspInit:
 256              	.LFB128:
 308:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 309:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 310:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA MSP Init.
 311:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 312:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 313:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
 314:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 315:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_MspInit(IRDA_HandleTypeDef *hirda)
 316:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 257              		.loc 1 316 1
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccJhy18e.s 			page 11


 260              		@ frame_needed = 1, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 262 0000 80B4     		push	{r7}
 263              	.LCFI10:
 264              		.cfi_def_cfa_offset 4
 265              		.cfi_offset 7, -4
 266 0002 83B0     		sub	sp, sp, #12
 267              	.LCFI11:
 268              		.cfi_def_cfa_offset 16
 269 0004 00AF     		add	r7, sp, #0
 270              	.LCFI12:
 271              		.cfi_def_cfa_register 7
 272 0006 7860     		str	r0, [r7, #4]
 317:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 318:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
 319:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 320:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_MspInit could be implemented in the user file
 321:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */ 
 322:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 273              		.loc 1 322 1
 274 0008 00BF     		nop
 275 000a 0C37     		adds	r7, r7, #12
 276              	.LCFI13:
 277              		.cfi_def_cfa_offset 4
 278 000c BD46     		mov	sp, r7
 279              	.LCFI14:
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 000e 5DF8047B 		ldr	r7, [sp], #4
 283              	.LCFI15:
 284              		.cfi_restore 7
 285              		.cfi_def_cfa_offset 0
 286 0012 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE128:
 290              		.section	.text.HAL_IRDA_MspDeInit,"ax",%progbits
 291              		.align	1
 292              		.weak	HAL_IRDA_MspDeInit
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv4-sp-d16
 298              	HAL_IRDA_MspDeInit:
 299              	.LFB129:
 323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 324:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 325:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA MSP DeInit.
 326:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 327:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 328:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
 329:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 330:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_MspDeInit(IRDA_HandleTypeDef *hirda)
 331:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 300              		.loc 1 331 1
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 8
 303              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccJhy18e.s 			page 12


 304              		@ link register save eliminated.
 305 0000 80B4     		push	{r7}
 306              	.LCFI16:
 307              		.cfi_def_cfa_offset 4
 308              		.cfi_offset 7, -4
 309 0002 83B0     		sub	sp, sp, #12
 310              	.LCFI17:
 311              		.cfi_def_cfa_offset 16
 312 0004 00AF     		add	r7, sp, #0
 313              	.LCFI18:
 314              		.cfi_def_cfa_register 7
 315 0006 7860     		str	r0, [r7, #4]
 332:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
 333:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
 334:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 335:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_MspDeInit could be implemented in the user file
 336:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */ 
 337:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 316              		.loc 1 337 1
 317 0008 00BF     		nop
 318 000a 0C37     		adds	r7, r7, #12
 319              	.LCFI19:
 320              		.cfi_def_cfa_offset 4
 321 000c BD46     		mov	sp, r7
 322              	.LCFI20:
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 000e 5DF8047B 		ldr	r7, [sp], #4
 326              	.LCFI21:
 327              		.cfi_restore 7
 328              		.cfi_def_cfa_offset 0
 329 0012 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE129:
 333              		.section	.text.HAL_IRDA_Transmit,"ax",%progbits
 334              		.align	1
 335              		.global	HAL_IRDA_Transmit
 336              		.syntax unified
 337              		.thumb
 338              		.thumb_func
 339              		.fpu fpv4-sp-d16
 341              	HAL_IRDA_Transmit:
 342              	.LFB130:
 338:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 339:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 340:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @}
 341:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 342:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 343:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group2 IO operation functions 
 344:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *  @brief   IRDA Transmit/Receive functions 
 345:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
 346:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** @verbatim   
 347:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****  ===============================================================================
 348:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****                       ##### IO operation functions #####
 349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****  ===============================================================================  
 350:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     This subsection provides a set of functions allowing to manage the IRDA data transfers.
 351:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     [..]
ARM GAS  /tmp/ccJhy18e.s 			page 13


 352:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 353:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 354:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 355:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     While receiving data, transmission should be avoided as the data to be transmitted
 356:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     could be corrupted.
 357:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 358:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) There are two modes of transfer:
 359:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****        (++) Blocking mode: The communication is performed in polling mode. 
 360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             The HAL status of all data processing is returned by the same function 
 361:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             after finishing transfer.  
 362:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****        (++) No-Blocking mode: The communication is performed using Interrupts 
 363:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            or DMA, These APIs return the HAL status.
 364:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            The end of the data processing will be indicated through the 
 365:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            dedicated IRDA IRQ when using Interrupt mode or the DMA IRQ when 
 366:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            using DMA mode.
 367:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            The HAL_IRDA_TxCpltCallback(), HAL_IRDA_RxCpltCallback() user callbacks 
 368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            will be executed respectively at the end of the transmit or Receive process
 369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            The HAL_IRDA_ErrorCallback() user callback will be executed when a communication error i
 370:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 371:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Blocking mode API's are :
 372:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Transmit()
 373:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Receive() 
 374:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         
 375:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Non Blocking mode APIs with Interrupt are :
 376:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_IT()
 377:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Receive_IT()
 378:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_IRQHandler()
 379:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 380:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) Non Blocking mode functions with DMA are :
 381:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Transmit_DMA()
 382:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_Receive_DMA()
 383:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 384:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     (#) A set of Transfer Complete Callbacks are provided in non Blocking mode:
 385:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_TxCpltCallback()
 386:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_RxCpltCallback()
 387:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         (++) HAL_IRDA_ErrorCallback()
 388:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 389:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** @endverbatim
 390:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
 391:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 392:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 393:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 394:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Sends an amount of data in blocking mode.
 395:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 396:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 397:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  pData Pointer to data buffer
 398:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Size Amount of data to be sent
 399:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Timeout Specify timeout value  
 400:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 401:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 402:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint3
 403:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 343              		.loc 1 403 1
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 24
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/ccJhy18e.s 			page 14


 348              	.LCFI22:
 349              		.cfi_def_cfa_offset 8
 350              		.cfi_offset 7, -8
 351              		.cfi_offset 14, -4
 352 0002 88B0     		sub	sp, sp, #32
 353              	.LCFI23:
 354              		.cfi_def_cfa_offset 40
 355 0004 02AF     		add	r7, sp, #8
 356              	.LCFI24:
 357              		.cfi_def_cfa 7, 32
 358 0006 F860     		str	r0, [r7, #12]
 359 0008 B960     		str	r1, [r7, #8]
 360 000a 3B60     		str	r3, [r7]
 361 000c 1346     		mov	r3, r2	@ movhi
 362 000e FB80     		strh	r3, [r7, #6]	@ movhi
 404:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint16_t* tmp;
 405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t tickstart = 0U;
 363              		.loc 1 405 12
 364 0010 0023     		movs	r3, #0
 365 0012 7B61     		str	r3, [r7, #20]
 406:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 407:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 408:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY) 
 366              		.loc 1 408 11
 367 0014 FB68     		ldr	r3, [r7, #12]
 368 0016 93F83530 		ldrb	r3, [r3, #53]
 369 001a DBB2     		uxtb	r3, r3
 370              		.loc 1 408 5
 371 001c 202B     		cmp	r3, #32
 372 001e 40F08380 		bne	.L11
 409:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 410:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if((pData == NULL) || (Size == 0)) 
 373              		.loc 1 410 7
 374 0022 BB68     		ldr	r3, [r7, #8]
 375 0024 002B     		cmp	r3, #0
 376 0026 02D0     		beq	.L12
 377              		.loc 1 410 24 discriminator 1
 378 0028 FB88     		ldrh	r3, [r7, #6]
 379 002a 002B     		cmp	r3, #0
 380 002c 01D1     		bne	.L13
 381              	.L12:
 411:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 412:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return  HAL_ERROR;
 382              		.loc 1 412 15
 383 002e 0123     		movs	r3, #1
 384 0030 7BE0     		b	.L14
 385              	.L13:
 413:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 414:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 415:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 416:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 386              		.loc 1 416 5
 387 0032 FB68     		ldr	r3, [r7, #12]
 388 0034 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 389 0038 012B     		cmp	r3, #1
 390 003a 01D1     		bne	.L15
 391              		.loc 1 416 5 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccJhy18e.s 			page 15


 392 003c 0223     		movs	r3, #2
 393 003e 74E0     		b	.L14
 394              	.L15:
 395              		.loc 1 416 5 discriminator 2
 396 0040 FB68     		ldr	r3, [r7, #12]
 397 0042 0122     		movs	r2, #1
 398 0044 83F83420 		strb	r2, [r3, #52]
 417:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 418:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE; 
 399              		.loc 1 418 22 is_stmt 1 discriminator 2
 400 0048 FB68     		ldr	r3, [r7, #12]
 401 004a 0022     		movs	r2, #0
 402 004c 9A63     		str	r2, [r3, #56]
 419:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 403              		.loc 1 419 19 discriminator 2
 404 004e FB68     		ldr	r3, [r7, #12]
 405 0050 2122     		movs	r2, #33
 406 0052 83F83520 		strb	r2, [r3, #53]
 420:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 421:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Init tickstart for timeout managment*/
 422:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     tickstart = HAL_GetTick();
 407              		.loc 1 422 17 discriminator 2
 408 0056 FFF7FEFF 		bl	HAL_GetTick
 409 005a 7861     		str	r0, [r7, #20]
 423:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 424:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 410              		.loc 1 424 23 discriminator 2
 411 005c FB68     		ldr	r3, [r7, #12]
 412 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
 413 0060 1A84     		strh	r2, [r3, #32]	@ movhi
 425:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 414              		.loc 1 425 24 discriminator 2
 415 0062 FB68     		ldr	r3, [r7, #12]
 416 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 417 0066 5A84     		strh	r2, [r3, #34]	@ movhi
 426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     while(hirda->TxXferCount > 0U)
 418              		.loc 1 426 10 discriminator 2
 419 0068 42E0     		b	.L16
 420              	.L21:
 427:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 428:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->TxXferCount--;
 421              		.loc 1 428 12
 422 006a FB68     		ldr	r3, [r7, #12]
 423 006c 5B8C     		ldrh	r3, [r3, #34]	@ movhi
 424 006e 9BB2     		uxth	r3, r3
 425              		.loc 1 428 25
 426 0070 013B     		subs	r3, r3, #1
 427 0072 9AB2     		uxth	r2, r3
 428 0074 FB68     		ldr	r3, [r7, #12]
 429 0076 5A84     		strh	r2, [r3, #34]	@ movhi
 429:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 430              		.loc 1 429 21
 431 0078 FB68     		ldr	r3, [r7, #12]
 432 007a 9B68     		ldr	r3, [r3, #8]
 433              		.loc 1 429 9
 434 007c B3F5805F 		cmp	r3, #4096
 435 0080 22D1     		bne	.L17
ARM GAS  /tmp/ccJhy18e.s 			page 16


 430:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
 431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 436              		.loc 1 431 12
 437 0082 3B68     		ldr	r3, [r7]
 438 0084 0093     		str	r3, [sp]
 439 0086 7B69     		ldr	r3, [r7, #20]
 440 0088 0022     		movs	r2, #0
 441 008a 8021     		movs	r1, #128
 442 008c F868     		ldr	r0, [r7, #12]
 443 008e FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 444 0092 0346     		mov	r3, r0
 445              		.loc 1 431 11
 446 0094 002B     		cmp	r3, #0
 447 0096 01D0     		beq	.L18
 432:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         { 
 433:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 448              		.loc 1 433 18
 449 0098 0323     		movs	r3, #3
 450 009a 46E0     		b	.L14
 451              	.L18:
 434:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         tmp = (uint16_t*) pData;
 452              		.loc 1 435 13
 453 009c BB68     		ldr	r3, [r7, #8]
 454 009e 3B61     		str	r3, [r7, #16]
 436:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->Instance->DR = (*tmp & (uint16_t)0x01FF);
 455              		.loc 1 436 32
 456 00a0 3B69     		ldr	r3, [r7, #16]
 457 00a2 1B88     		ldrh	r3, [r3]
 458              		.loc 1 436 37
 459 00a4 1A46     		mov	r2, r3
 460              		.loc 1 436 14
 461 00a6 FB68     		ldr	r3, [r7, #12]
 462 00a8 1B68     		ldr	r3, [r3]
 463              		.loc 1 436 37
 464 00aa C2F30802 		ubfx	r2, r2, #0, #9
 465              		.loc 1 436 29
 466 00ae 5A60     		str	r2, [r3, #4]
 437:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 467              		.loc 1 437 23
 468 00b0 FB68     		ldr	r3, [r7, #12]
 469 00b2 DB68     		ldr	r3, [r3, #12]
 470              		.loc 1 437 11
 471 00b4 002B     		cmp	r3, #0
 472 00b6 03D1     		bne	.L19
 438:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 439:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           pData +=2;
 473              		.loc 1 439 17
 474 00b8 BB68     		ldr	r3, [r7, #8]
 475 00ba 0233     		adds	r3, r3, #2
 476 00bc BB60     		str	r3, [r7, #8]
 477 00be 17E0     		b	.L16
 478              	.L19:
 440:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 441:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         else
 442:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 443:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           pData +=1;
ARM GAS  /tmp/ccJhy18e.s 			page 17


 479              		.loc 1 443 17
 480 00c0 BB68     		ldr	r3, [r7, #8]
 481 00c2 0133     		adds	r3, r3, #1
 482 00c4 BB60     		str	r3, [r7, #8]
 483 00c6 13E0     		b	.L16
 484              	.L17:
 444:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 445:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       } 
 446:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
 447:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
 448:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 485              		.loc 1 448 12
 486 00c8 3B68     		ldr	r3, [r7]
 487 00ca 0093     		str	r3, [sp]
 488 00cc 7B69     		ldr	r3, [r7, #20]
 489 00ce 0022     		movs	r2, #0
 490 00d0 8021     		movs	r1, #128
 491 00d2 F868     		ldr	r0, [r7, #12]
 492 00d4 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 493 00d8 0346     		mov	r3, r0
 494              		.loc 1 448 11
 495 00da 002B     		cmp	r3, #0
 496 00dc 01D0     		beq	.L20
 449:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 450:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 497              		.loc 1 450 18
 498 00de 0323     		movs	r3, #3
 499 00e0 23E0     		b	.L14
 500              	.L20:
 451:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 452:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->Instance->DR = (*pData++ & (uint8_t)0xFF);
 501              		.loc 1 452 38
 502 00e2 BB68     		ldr	r3, [r7, #8]
 503 00e4 5A1C     		adds	r2, r3, #1
 504 00e6 BA60     		str	r2, [r7, #8]
 505              		.loc 1 452 32
 506 00e8 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 507              		.loc 1 452 14
 508 00ea FB68     		ldr	r3, [r7, #12]
 509 00ec 1B68     		ldr	r3, [r3]
 510              		.loc 1 452 29
 511 00ee 5A60     		str	r2, [r3, #4]
 512              	.L16:
 426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 513              		.loc 1 426 16
 514 00f0 FB68     		ldr	r3, [r7, #12]
 515 00f2 5B8C     		ldrh	r3, [r3, #34]	@ movhi
 516 00f4 9BB2     		uxth	r3, r3
 426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 517              		.loc 1 426 10
 518 00f6 002B     		cmp	r3, #0
 519 00f8 B7D1     		bne	.L21
 453:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
 454:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 455:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 456:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 520              		.loc 1 456 8
ARM GAS  /tmp/ccJhy18e.s 			page 18


 521 00fa 3B68     		ldr	r3, [r7]
 522 00fc 0093     		str	r3, [sp]
 523 00fe 7B69     		ldr	r3, [r7, #20]
 524 0100 0022     		movs	r2, #0
 525 0102 4021     		movs	r1, #64
 526 0104 F868     		ldr	r0, [r7, #12]
 527 0106 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 528 010a 0346     		mov	r3, r0
 529              		.loc 1 456 7
 530 010c 002B     		cmp	r3, #0
 531 010e 01D0     		beq	.L22
 457:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     { 
 458:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return HAL_TIMEOUT;
 532              		.loc 1 458 14
 533 0110 0323     		movs	r3, #3
 534 0112 0AE0     		b	.L14
 535              	.L22:
 459:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 460:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 461:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* At end of Tx process, restore hirda->gState to Ready */
 462:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
 536              		.loc 1 462 19
 537 0114 FB68     		ldr	r3, [r7, #12]
 538 0116 2022     		movs	r2, #32
 539 0118 83F83520 		strb	r2, [r3, #53]
 463:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 464:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 465:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 540              		.loc 1 465 5
 541 011c FB68     		ldr	r3, [r7, #12]
 542 011e 0022     		movs	r2, #0
 543 0120 83F83420 		strb	r2, [r3, #52]
 466:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 467:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 544              		.loc 1 467 12
 545 0124 0023     		movs	r3, #0
 546 0126 00E0     		b	.L14
 547              	.L11:
 468:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 469:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
 470:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 471:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 548              		.loc 1 471 12
 549 0128 0223     		movs	r3, #2
 550              	.L14:
 472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 551              		.loc 1 473 1
 552 012a 1846     		mov	r0, r3
 553 012c 1837     		adds	r7, r7, #24
 554              	.LCFI25:
 555              		.cfi_def_cfa_offset 8
 556 012e BD46     		mov	sp, r7
 557              	.LCFI26:
 558              		.cfi_def_cfa_register 13
 559              		@ sp needed
 560 0130 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccJhy18e.s 			page 19


 561              		.cfi_endproc
 562              	.LFE130:
 564              		.section	.text.HAL_IRDA_Receive,"ax",%progbits
 565              		.align	1
 566              		.global	HAL_IRDA_Receive
 567              		.syntax unified
 568              		.thumb
 569              		.thumb_func
 570              		.fpu fpv4-sp-d16
 572              	HAL_IRDA_Receive:
 573              	.LFB131:
 474:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 475:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 476:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Receive an amount of data in blocking mode. 
 477:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 478:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 479:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  pData Pointer to data buffer
 480:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Size Amount of data to be received
 481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Timeout Specify timeout value    
 482:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 483:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 484:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32
 485:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** { 
 574              		.loc 1 485 1
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 24
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578 0000 80B5     		push	{r7, lr}
 579              	.LCFI27:
 580              		.cfi_def_cfa_offset 8
 581              		.cfi_offset 7, -8
 582              		.cfi_offset 14, -4
 583 0002 88B0     		sub	sp, sp, #32
 584              	.LCFI28:
 585              		.cfi_def_cfa_offset 40
 586 0004 02AF     		add	r7, sp, #8
 587              	.LCFI29:
 588              		.cfi_def_cfa 7, 32
 589 0006 F860     		str	r0, [r7, #12]
 590 0008 B960     		str	r1, [r7, #8]
 591 000a 3B60     		str	r3, [r7]
 592 000c 1346     		mov	r3, r2	@ movhi
 593 000e FB80     		strh	r3, [r7, #6]	@ movhi
 486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint16_t* tmp;
 487:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t tickstart = 0U;
 594              		.loc 1 487 12
 595 0010 0023     		movs	r3, #0
 596 0012 7B61     		str	r3, [r7, #20]
 488:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 490:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 597              		.loc 1 490 11
 598 0014 FB68     		ldr	r3, [r7, #12]
 599 0016 93F83630 		ldrb	r3, [r3, #54]
 600 001a DBB2     		uxtb	r3, r3
 601              		.loc 1 490 5
 602 001c 202B     		cmp	r3, #32
ARM GAS  /tmp/ccJhy18e.s 			page 20


 603 001e 40F09080 		bne	.L24
 491:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if((pData == NULL) || (Size == 0)) 
 604              		.loc 1 492 7
 605 0022 BB68     		ldr	r3, [r7, #8]
 606 0024 002B     		cmp	r3, #0
 607 0026 02D0     		beq	.L25
 608              		.loc 1 492 24 discriminator 1
 609 0028 FB88     		ldrh	r3, [r7, #6]
 610 002a 002B     		cmp	r3, #0
 611 002c 01D1     		bne	.L26
 612              	.L25:
 493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 494:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return  HAL_ERROR;
 613              		.loc 1 494 15
 614 002e 0123     		movs	r3, #1
 615 0030 88E0     		b	.L27
 616              	.L26:
 495:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 496:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 497:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 498:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 617              		.loc 1 498 5
 618 0032 FB68     		ldr	r3, [r7, #12]
 619 0034 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 620 0038 012B     		cmp	r3, #1
 621 003a 01D1     		bne	.L28
 622              		.loc 1 498 5 is_stmt 0 discriminator 1
 623 003c 0223     		movs	r3, #2
 624 003e 81E0     		b	.L27
 625              	.L28:
 626              		.loc 1 498 5 discriminator 2
 627 0040 FB68     		ldr	r3, [r7, #12]
 628 0042 0122     		movs	r2, #1
 629 0044 83F83420 		strb	r2, [r3, #52]
 499:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 500:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 630              		.loc 1 500 22 is_stmt 1 discriminator 2
 631 0048 FB68     		ldr	r3, [r7, #12]
 632 004a 0022     		movs	r2, #0
 633 004c 9A63     		str	r2, [r3, #56]
 501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 634              		.loc 1 501 20 discriminator 2
 635 004e FB68     		ldr	r3, [r7, #12]
 636 0050 2222     		movs	r2, #34
 637 0052 83F83620 		strb	r2, [r3, #54]
 502:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 503:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Init tickstart for timeout managment*/
 504:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     tickstart = HAL_GetTick();
 638              		.loc 1 504 17 discriminator 2
 639 0056 FFF7FEFF 		bl	HAL_GetTick
 640 005a 7861     		str	r0, [r7, #20]
 505:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 641              		.loc 1 506 23 discriminator 2
 642 005c FB68     		ldr	r3, [r7, #12]
 643 005e FA88     		ldrh	r2, [r7, #6]	@ movhi
ARM GAS  /tmp/ccJhy18e.s 			page 21


 644 0060 1A85     		strh	r2, [r3, #40]	@ movhi
 507:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 645              		.loc 1 507 24 discriminator 2
 646 0062 FB68     		ldr	r3, [r7, #12]
 647 0064 FA88     		ldrh	r2, [r7, #6]	@ movhi
 648 0066 5A85     		strh	r2, [r3, #42]	@ movhi
 508:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Check the remain data to be received */
 509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     while(hirda->RxXferCount > 0U)
 649              		.loc 1 509 10 discriminator 2
 650 0068 5CE0     		b	.L29
 651              	.L35:
 510:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 511:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxXferCount--;
 652              		.loc 1 511 12
 653 006a FB68     		ldr	r3, [r7, #12]
 654 006c 5B8D     		ldrh	r3, [r3, #42]	@ movhi
 655 006e 9BB2     		uxth	r3, r3
 656              		.loc 1 511 25
 657 0070 013B     		subs	r3, r3, #1
 658 0072 9AB2     		uxth	r2, r3
 659 0074 FB68     		ldr	r3, [r7, #12]
 660 0076 5A85     		strh	r2, [r3, #42]	@ movhi
 512:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 661              		.loc 1 512 21
 662 0078 FB68     		ldr	r3, [r7, #12]
 663 007a 9B68     		ldr	r3, [r3, #8]
 664              		.loc 1 512 9
 665 007c B3F5805F 		cmp	r3, #4096
 666 0080 2BD1     		bne	.L30
 513:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
 514:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 667              		.loc 1 514 12
 668 0082 3B68     		ldr	r3, [r7]
 669 0084 0093     		str	r3, [sp]
 670 0086 7B69     		ldr	r3, [r7, #20]
 671 0088 0022     		movs	r2, #0
 672 008a 2021     		movs	r1, #32
 673 008c F868     		ldr	r0, [r7, #12]
 674 008e FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 675 0092 0346     		mov	r3, r0
 676              		.loc 1 514 11
 677 0094 002B     		cmp	r3, #0
 678 0096 01D0     		beq	.L31
 515:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         { 
 516:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 679              		.loc 1 516 18
 680 0098 0323     		movs	r3, #3
 681 009a 53E0     		b	.L27
 682              	.L31:
 517:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 518:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         tmp = (uint16_t*) pData ;
 683              		.loc 1 518 13
 684 009c BB68     		ldr	r3, [r7, #8]
 685 009e 3B61     		str	r3, [r7, #16]
 519:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 686              		.loc 1 519 23
 687 00a0 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccJhy18e.s 			page 22


 688 00a2 DB68     		ldr	r3, [r3, #12]
 689              		.loc 1 519 11
 690 00a4 002B     		cmp	r3, #0
 691 00a6 0CD1     		bne	.L32
 520:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 521:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x01FF);
 692              		.loc 1 521 34
 693 00a8 FB68     		ldr	r3, [r7, #12]
 694 00aa 1B68     		ldr	r3, [r3]
 695              		.loc 1 521 44
 696 00ac 5B68     		ldr	r3, [r3, #4]
 697              		.loc 1 521 18
 698 00ae 9BB2     		uxth	r3, r3
 699 00b0 C3F30803 		ubfx	r3, r3, #0, #9
 700 00b4 9AB2     		uxth	r2, r3
 701              		.loc 1 521 16
 702 00b6 3B69     		ldr	r3, [r7, #16]
 703 00b8 1A80     		strh	r2, [r3]	@ movhi
 522:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           pData +=2;
 704              		.loc 1 522 17
 705 00ba BB68     		ldr	r3, [r7, #8]
 706 00bc 0233     		adds	r3, r3, #2
 707 00be BB60     		str	r3, [r7, #8]
 708 00c0 30E0     		b	.L29
 709              	.L32:
 523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         else
 525:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 526:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           *tmp = (uint16_t)(hirda->Instance->DR & (uint16_t)0x00FF);
 710              		.loc 1 526 34
 711 00c2 FB68     		ldr	r3, [r7, #12]
 712 00c4 1B68     		ldr	r3, [r3]
 713              		.loc 1 526 44
 714 00c6 5B68     		ldr	r3, [r3, #4]
 715              		.loc 1 526 18
 716 00c8 9BB2     		uxth	r3, r3
 717 00ca DBB2     		uxtb	r3, r3
 718 00cc 9AB2     		uxth	r2, r3
 719              		.loc 1 526 16
 720 00ce 3B69     		ldr	r3, [r7, #16]
 721 00d0 1A80     		strh	r2, [r3]	@ movhi
 527:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           pData +=1;
 722              		.loc 1 527 17
 723 00d2 BB68     		ldr	r3, [r7, #8]
 724 00d4 0133     		adds	r3, r3, #1
 725 00d6 BB60     		str	r3, [r7, #8]
 726 00d8 24E0     		b	.L29
 727              	.L30:
 528:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 529:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       } 
 530:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
 531:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
 532:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 728              		.loc 1 532 12
 729 00da 3B68     		ldr	r3, [r7]
 730 00dc 0093     		str	r3, [sp]
 731 00de 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccJhy18e.s 			page 23


 732 00e0 0022     		movs	r2, #0
 733 00e2 2021     		movs	r1, #32
 734 00e4 F868     		ldr	r0, [r7, #12]
 735 00e6 FFF7FEFF 		bl	IRDA_WaitOnFlagUntilTimeout
 736 00ea 0346     		mov	r3, r0
 737              		.loc 1 532 11
 738 00ec 002B     		cmp	r3, #0
 739 00ee 01D0     		beq	.L33
 533:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         { 
 534:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           return HAL_TIMEOUT;
 740              		.loc 1 534 18
 741 00f0 0323     		movs	r3, #3
 742 00f2 27E0     		b	.L27
 743              	.L33:
 535:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 536:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(hirda->Init.Parity == IRDA_PARITY_NONE)
 744              		.loc 1 536 23
 745 00f4 FB68     		ldr	r3, [r7, #12]
 746 00f6 DB68     		ldr	r3, [r3, #12]
 747              		.loc 1 536 11
 748 00f8 002B     		cmp	r3, #0
 749 00fa 08D1     		bne	.L34
 537:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 538:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x00FF);
 750              		.loc 1 538 37
 751 00fc FB68     		ldr	r3, [r7, #12]
 752 00fe 1B68     		ldr	r3, [r3]
 753              		.loc 1 538 47
 754 0100 5968     		ldr	r1, [r3, #4]
 755              		.loc 1 538 17
 756 0102 BB68     		ldr	r3, [r7, #8]
 757 0104 5A1C     		adds	r2, r3, #1
 758 0106 BA60     		str	r2, [r7, #8]
 759              		.loc 1 538 22
 760 0108 CAB2     		uxtb	r2, r1
 761              		.loc 1 538 20
 762 010a 1A70     		strb	r2, [r3]
 763 010c 0AE0     		b	.L29
 764              	.L34:
 539:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 540:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         else
 541:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 542:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           *pData++ = (uint8_t)(hirda->Instance->DR & (uint8_t)0x007F);
 765              		.loc 1 542 37
 766 010e FB68     		ldr	r3, [r7, #12]
 767 0110 1B68     		ldr	r3, [r3]
 768              		.loc 1 542 47
 769 0112 5B68     		ldr	r3, [r3, #4]
 770              		.loc 1 542 22
 771 0114 DAB2     		uxtb	r2, r3
 772              		.loc 1 542 17
 773 0116 BB68     		ldr	r3, [r7, #8]
 774 0118 591C     		adds	r1, r3, #1
 775 011a B960     		str	r1, [r7, #8]
 776              		.loc 1 542 22
 777 011c 02F07F02 		and	r2, r2, #127
 778 0120 D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccJhy18e.s 			page 24


 779              		.loc 1 542 20
 780 0122 1A70     		strb	r2, [r3]
 781              	.L29:
 509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 782              		.loc 1 509 16
 783 0124 FB68     		ldr	r3, [r7, #12]
 784 0126 5B8D     		ldrh	r3, [r3, #42]	@ movhi
 785 0128 9BB2     		uxth	r3, r3
 509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 786              		.loc 1 509 10
 787 012a 002B     		cmp	r3, #0
 788 012c 9DD1     		bne	.L35
 543:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
 544:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
 545:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 546:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 547:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
 548:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 789              		.loc 1 548 20
 790 012e FB68     		ldr	r3, [r7, #12]
 791 0130 2022     		movs	r2, #32
 792 0132 83F83620 		strb	r2, [r3, #54]
 549:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 550:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 551:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 793              		.loc 1 551 5
 794 0136 FB68     		ldr	r3, [r7, #12]
 795 0138 0022     		movs	r2, #0
 796 013a 83F83420 		strb	r2, [r3, #52]
 552:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 553:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 797              		.loc 1 553 12
 798 013e 0023     		movs	r3, #0
 799 0140 00E0     		b	.L27
 800              	.L24:
 554:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 555:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
 556:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 557:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 801              		.loc 1 557 12
 802 0142 0223     		movs	r3, #2
 803              	.L27:
 558:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 804              		.loc 1 559 1
 805 0144 1846     		mov	r0, r3
 806 0146 1837     		adds	r7, r7, #24
 807              	.LCFI30:
 808              		.cfi_def_cfa_offset 8
 809 0148 BD46     		mov	sp, r7
 810              	.LCFI31:
 811              		.cfi_def_cfa_register 13
 812              		@ sp needed
 813 014a 80BD     		pop	{r7, pc}
 814              		.cfi_endproc
 815              	.LFE131:
 817              		.section	.text.HAL_IRDA_Transmit_IT,"ax",%progbits
ARM GAS  /tmp/ccJhy18e.s 			page 25


 818              		.align	1
 819              		.global	HAL_IRDA_Transmit_IT
 820              		.syntax unified
 821              		.thumb
 822              		.thumb_func
 823              		.fpu fpv4-sp-d16
 825              	HAL_IRDA_Transmit_IT:
 826              	.LFB132:
 560:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 561:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 562:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Send an amount of data in non blocking mode. 
 563:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 564:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 565:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  pData Pointer to data buffer
 566:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Size Amount of data to be sent
 567:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 568:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 570:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 827              		.loc 1 570 1
 828              		.cfi_startproc
 829              		@ args = 0, pretend = 0, frame = 16
 830              		@ frame_needed = 1, uses_anonymous_args = 0
 831              		@ link register save eliminated.
 832 0000 80B4     		push	{r7}
 833              	.LCFI32:
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 7, -4
 836 0002 85B0     		sub	sp, sp, #20
 837              	.LCFI33:
 838              		.cfi_def_cfa_offset 24
 839 0004 00AF     		add	r7, sp, #0
 840              	.LCFI34:
 841              		.cfi_def_cfa_register 7
 842 0006 F860     		str	r0, [r7, #12]
 843 0008 B960     		str	r1, [r7, #8]
 844 000a 1346     		mov	r3, r2
 845 000c FB80     		strh	r3, [r7, #6]	@ movhi
 571:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 572:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY) 
 846              		.loc 1 572 11
 847 000e FB68     		ldr	r3, [r7, #12]
 848 0010 93F83530 		ldrb	r3, [r3, #53]
 849 0014 DBB2     		uxtb	r3, r3
 850              		.loc 1 572 5
 851 0016 202B     		cmp	r3, #32
 852 0018 30D1     		bne	.L37
 573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 574:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if((pData == NULL) || (Size == 0)) 
 853              		.loc 1 574 7
 854 001a BB68     		ldr	r3, [r7, #8]
 855 001c 002B     		cmp	r3, #0
 856 001e 02D0     		beq	.L38
 857              		.loc 1 574 24 discriminator 1
 858 0020 FB88     		ldrh	r3, [r7, #6]
 859 0022 002B     		cmp	r3, #0
 860 0024 01D1     		bne	.L39
ARM GAS  /tmp/ccJhy18e.s 			page 26


 861              	.L38:
 575:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 576:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
 862              		.loc 1 576 14
 863 0026 0123     		movs	r3, #1
 864 0028 29E0     		b	.L40
 865              	.L39:
 577:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 578:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 579:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 866              		.loc 1 579 5
 867 002a FB68     		ldr	r3, [r7, #12]
 868 002c 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 869 0030 012B     		cmp	r3, #1
 870 0032 01D1     		bne	.L41
 871              		.loc 1 579 5 is_stmt 0 discriminator 1
 872 0034 0223     		movs	r3, #2
 873 0036 22E0     		b	.L40
 874              	.L41:
 875              		.loc 1 579 5 discriminator 2
 876 0038 FB68     		ldr	r3, [r7, #12]
 877 003a 0122     		movs	r2, #1
 878 003c 83F83420 		strb	r2, [r3, #52]
 580:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 581:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 879              		.loc 1 581 23 is_stmt 1 discriminator 2
 880 0040 FB68     		ldr	r3, [r7, #12]
 881 0042 BA68     		ldr	r2, [r7, #8]
 882 0044 DA61     		str	r2, [r3, #28]
 582:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 883              		.loc 1 582 23 discriminator 2
 884 0046 FB68     		ldr	r3, [r7, #12]
 885 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 886 004a 1A84     		strh	r2, [r3, #32]	@ movhi
 583:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 887              		.loc 1 583 24 discriminator 2
 888 004c FB68     		ldr	r3, [r7, #12]
 889 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 890 0050 5A84     		strh	r2, [r3, #34]	@ movhi
 584:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 891              		.loc 1 584 22 discriminator 2
 892 0052 FB68     		ldr	r3, [r7, #12]
 893 0054 0022     		movs	r2, #0
 894 0056 9A63     		str	r2, [r3, #56]
 585:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 895              		.loc 1 585 19 discriminator 2
 896 0058 FB68     		ldr	r3, [r7, #12]
 897 005a 2122     		movs	r2, #33
 898 005c 83F83520 		strb	r2, [r3, #53]
 586:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 587:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 588:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 899              		.loc 1 588 5 discriminator 2
 900 0060 FB68     		ldr	r3, [r7, #12]
 901 0062 0022     		movs	r2, #0
 902 0064 83F83420 		strb	r2, [r3, #52]
 589:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccJhy18e.s 			page 27


 590:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Transmit Data Register Empty Interrupt */
 591:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
 903              		.loc 1 591 5 discriminator 2
 904 0068 FB68     		ldr	r3, [r7, #12]
 905 006a 1B68     		ldr	r3, [r3]
 906 006c DA68     		ldr	r2, [r3, #12]
 907 006e FB68     		ldr	r3, [r7, #12]
 908 0070 1B68     		ldr	r3, [r3]
 909 0072 42F08002 		orr	r2, r2, #128
 910 0076 DA60     		str	r2, [r3, #12]
 592:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 593:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 911              		.loc 1 593 12 discriminator 2
 912 0078 0023     		movs	r3, #0
 913 007a 00E0     		b	.L40
 914              	.L37:
 594:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 595:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
 596:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 597:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 915              		.loc 1 597 12
 916 007c 0223     		movs	r3, #2
 917              	.L40:
 598:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 599:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 918              		.loc 1 599 1
 919 007e 1846     		mov	r0, r3
 920 0080 1437     		adds	r7, r7, #20
 921              	.LCFI35:
 922              		.cfi_def_cfa_offset 4
 923 0082 BD46     		mov	sp, r7
 924              	.LCFI36:
 925              		.cfi_def_cfa_register 13
 926              		@ sp needed
 927 0084 5DF8047B 		ldr	r7, [sp], #4
 928              	.LCFI37:
 929              		.cfi_restore 7
 930              		.cfi_def_cfa_offset 0
 931 0088 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE132:
 935              		.section	.text.HAL_IRDA_Receive_IT,"ax",%progbits
 936              		.align	1
 937              		.global	HAL_IRDA_Receive_IT
 938              		.syntax unified
 939              		.thumb
 940              		.thumb_func
 941              		.fpu fpv4-sp-d16
 943              	HAL_IRDA_Receive_IT:
 944              	.LFB133:
 600:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 601:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 602:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
 603:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 604:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 605:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  pData Pointer to data buffer
 606:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Size Amount of data to be received
ARM GAS  /tmp/ccJhy18e.s 			page 28


 607:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 608:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 609:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 610:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 945              		.loc 1 610 1
 946              		.cfi_startproc
 947              		@ args = 0, pretend = 0, frame = 16
 948              		@ frame_needed = 1, uses_anonymous_args = 0
 949              		@ link register save eliminated.
 950 0000 80B4     		push	{r7}
 951              	.LCFI38:
 952              		.cfi_def_cfa_offset 4
 953              		.cfi_offset 7, -4
 954 0002 85B0     		sub	sp, sp, #20
 955              	.LCFI39:
 956              		.cfi_def_cfa_offset 24
 957 0004 00AF     		add	r7, sp, #0
 958              	.LCFI40:
 959              		.cfi_def_cfa_register 7
 960 0006 F860     		str	r0, [r7, #12]
 961 0008 B960     		str	r1, [r7, #8]
 962 000a 1346     		mov	r3, r2
 963 000c FB80     		strh	r3, [r7, #6]	@ movhi
 611:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */	
 612:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 964              		.loc 1 612 11
 965 000e FB68     		ldr	r3, [r7, #12]
 966 0010 93F83630 		ldrb	r3, [r3, #54]
 967 0014 DBB2     		uxtb	r3, r3
 968              		.loc 1 612 5
 969 0016 202B     		cmp	r3, #32
 970 0018 38D1     		bne	.L43
 613:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 614:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if((pData == NULL) || (Size == 0)) 
 971              		.loc 1 614 7
 972 001a BB68     		ldr	r3, [r7, #8]
 973 001c 002B     		cmp	r3, #0
 974 001e 02D0     		beq	.L44
 975              		.loc 1 614 24 discriminator 1
 976 0020 FB88     		ldrh	r3, [r7, #6]
 977 0022 002B     		cmp	r3, #0
 978 0024 01D1     		bne	.L45
 979              	.L44:
 615:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 616:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
 980              		.loc 1 616 14
 981 0026 0123     		movs	r3, #1
 982 0028 31E0     		b	.L46
 983              	.L45:
 617:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 618:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 619:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 620:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 984              		.loc 1 620 5
 985 002a FB68     		ldr	r3, [r7, #12]
 986 002c 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 987 0030 012B     		cmp	r3, #1
ARM GAS  /tmp/ccJhy18e.s 			page 29


 988 0032 01D1     		bne	.L47
 989              		.loc 1 620 5 is_stmt 0 discriminator 1
 990 0034 0223     		movs	r3, #2
 991 0036 2AE0     		b	.L46
 992              	.L47:
 993              		.loc 1 620 5 discriminator 2
 994 0038 FB68     		ldr	r3, [r7, #12]
 995 003a 0122     		movs	r2, #1
 996 003c 83F83420 		strb	r2, [r3, #52]
 621:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 622:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 997              		.loc 1 622 23 is_stmt 1 discriminator 2
 998 0040 FB68     		ldr	r3, [r7, #12]
 999 0042 BA68     		ldr	r2, [r7, #8]
 1000 0044 5A62     		str	r2, [r3, #36]
 623:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;
 1001              		.loc 1 623 23 discriminator 2
 1002 0046 FB68     		ldr	r3, [r7, #12]
 1003 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1004 004a 1A85     		strh	r2, [r3, #40]	@ movhi
 624:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = Size;
 1005              		.loc 1 624 24 discriminator 2
 1006 004c FB68     		ldr	r3, [r7, #12]
 1007 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1008 0050 5A85     		strh	r2, [r3, #42]	@ movhi
 625:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 1009              		.loc 1 625 22 discriminator 2
 1010 0052 FB68     		ldr	r3, [r7, #12]
 1011 0054 0022     		movs	r2, #0
 1012 0056 9A63     		str	r2, [r3, #56]
 626:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1013              		.loc 1 626 20 discriminator 2
 1014 0058 FB68     		ldr	r3, [r7, #12]
 1015 005a 2222     		movs	r2, #34
 1016 005c 83F83620 		strb	r2, [r3, #54]
 627:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 628:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 629:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 1017              		.loc 1 629 5 discriminator 2
 1018 0060 FB68     		ldr	r3, [r7, #12]
 1019 0062 0022     		movs	r2, #0
 1020 0064 83F83420 		strb	r2, [r3, #52]
 630:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 631:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Parity Error and Data Register not empty Interrupts */
 632:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE| USART_CR1_RXNEIE);
 1021              		.loc 1 632 5 discriminator 2
 1022 0068 FB68     		ldr	r3, [r7, #12]
 1023 006a 1B68     		ldr	r3, [r3]
 1024 006c DA68     		ldr	r2, [r3, #12]
 1025 006e FB68     		ldr	r3, [r7, #12]
 1026 0070 1B68     		ldr	r3, [r3]
 1027 0072 42F49072 		orr	r2, r2, #288
 1028 0076 DA60     		str	r2, [r3, #12]
 633:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 634:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
 635:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1029              		.loc 1 635 5 discriminator 2
ARM GAS  /tmp/ccJhy18e.s 			page 30


 1030 0078 FB68     		ldr	r3, [r7, #12]
 1031 007a 1B68     		ldr	r3, [r3]
 1032 007c 5A69     		ldr	r2, [r3, #20]
 1033 007e FB68     		ldr	r3, [r7, #12]
 1034 0080 1B68     		ldr	r3, [r3]
 1035 0082 42F00102 		orr	r2, r2, #1
 1036 0086 5A61     		str	r2, [r3, #20]
 636:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 637:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 1037              		.loc 1 637 12 discriminator 2
 1038 0088 0023     		movs	r3, #0
 1039 008a 00E0     		b	.L46
 1040              	.L43:
 638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 639:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
 640:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 641:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 1041              		.loc 1 641 12
 1042 008c 0223     		movs	r3, #2
 1043              	.L46:
 642:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 643:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1044              		.loc 1 643 1
 1045 008e 1846     		mov	r0, r3
 1046 0090 1437     		adds	r7, r7, #20
 1047              	.LCFI41:
 1048              		.cfi_def_cfa_offset 4
 1049 0092 BD46     		mov	sp, r7
 1050              	.LCFI42:
 1051              		.cfi_def_cfa_register 13
 1052              		@ sp needed
 1053 0094 5DF8047B 		ldr	r7, [sp], #4
 1054              	.LCFI43:
 1055              		.cfi_restore 7
 1056              		.cfi_def_cfa_offset 0
 1057 0098 7047     		bx	lr
 1058              		.cfi_endproc
 1059              	.LFE133:
 1061              		.section	.text.HAL_IRDA_Transmit_DMA,"ax",%progbits
 1062              		.align	1
 1063              		.global	HAL_IRDA_Transmit_DMA
 1064              		.syntax unified
 1065              		.thumb
 1066              		.thumb_func
 1067              		.fpu fpv4-sp-d16
 1069              	HAL_IRDA_Transmit_DMA:
 1070              	.LFB134:
 644:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 646:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Sends an amount of data in non blocking mode. 
 647:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 648:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 649:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  pData Pointer to data buffer
 650:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Size Amount of data to be sent
 651:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 652:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 653:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Transmit_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
ARM GAS  /tmp/ccJhy18e.s 			page 31


 654:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1071              		.loc 1 654 1
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 24
 1074              		@ frame_needed = 1, uses_anonymous_args = 0
 1075 0000 80B5     		push	{r7, lr}
 1076              	.LCFI44:
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 86B0     		sub	sp, sp, #24
 1081              	.LCFI45:
 1082              		.cfi_def_cfa_offset 32
 1083 0004 00AF     		add	r7, sp, #0
 1084              	.LCFI46:
 1085              		.cfi_def_cfa_register 7
 1086 0006 F860     		str	r0, [r7, #12]
 1087 0008 B960     		str	r1, [r7, #8]
 1088 000a 1346     		mov	r3, r2
 1089 000c FB80     		strh	r3, [r7, #6]	@ movhi
 655:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t *tmp;
 656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 657:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is not already ongoing */
 658:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_READY) 
 1090              		.loc 1 658 11
 1091 000e FB68     		ldr	r3, [r7, #12]
 1092 0010 93F83530 		ldrb	r3, [r3, #53]
 1093 0014 DBB2     		uxtb	r3, r3
 1094              		.loc 1 658 5
 1095 0016 202B     		cmp	r3, #32
 1096 0018 53D1     		bne	.L49
 659:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 660:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if((pData == NULL) || (Size == 0)) 
 1097              		.loc 1 660 15
 1098 001a BB68     		ldr	r3, [r7, #8]
 1099              		.loc 1 660 7
 1100 001c 002B     		cmp	r3, #0
 1101 001e 02D0     		beq	.L50
 1102              		.loc 1 660 24 discriminator 1
 1103 0020 FB88     		ldrh	r3, [r7, #6]
 1104 0022 002B     		cmp	r3, #0
 1105 0024 01D1     		bne	.L51
 1106              	.L50:
 661:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 662:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
 1107              		.loc 1 662 14
 1108 0026 0123     		movs	r3, #1
 1109 0028 4CE0     		b	.L52
 1110              	.L51:
 663:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 664:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 665:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 666:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 1111              		.loc 1 666 5
 1112 002a FB68     		ldr	r3, [r7, #12]
 1113 002c 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 1114 0030 012B     		cmp	r3, #1
ARM GAS  /tmp/ccJhy18e.s 			page 32


 1115 0032 01D1     		bne	.L53
 1116              		.loc 1 666 5 is_stmt 0 discriminator 1
 1117 0034 0223     		movs	r3, #2
 1118 0036 45E0     		b	.L52
 1119              	.L53:
 1120              		.loc 1 666 5 discriminator 2
 1121 0038 FB68     		ldr	r3, [r7, #12]
 1122 003a 0122     		movs	r2, #1
 1123 003c 83F83420 		strb	r2, [r3, #52]
 667:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 668:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->pTxBuffPtr = pData;
 1124              		.loc 1 668 23 is_stmt 1 discriminator 2
 1125 0040 BA68     		ldr	r2, [r7, #8]
 1126 0042 FB68     		ldr	r3, [r7, #12]
 1127 0044 DA61     		str	r2, [r3, #28]
 669:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferSize = Size;
 1128              		.loc 1 669 23 discriminator 2
 1129 0046 FB68     		ldr	r3, [r7, #12]
 1130 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1131 004a 1A84     		strh	r2, [r3, #32]	@ movhi
 670:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = Size;
 1132              		.loc 1 670 24 discriminator 2
 1133 004c FB68     		ldr	r3, [r7, #12]
 1134 004e FA88     		ldrh	r2, [r7, #6]	@ movhi
 1135 0050 5A84     		strh	r2, [r3, #34]	@ movhi
 671:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 1136              		.loc 1 671 22 discriminator 2
 1137 0052 FB68     		ldr	r3, [r7, #12]
 1138 0054 0022     		movs	r2, #0
 1139 0056 9A63     		str	r2, [r3, #56]
 672:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 1140              		.loc 1 672 19 discriminator 2
 1141 0058 FB68     		ldr	r3, [r7, #12]
 1142 005a 2122     		movs	r2, #33
 1143 005c 83F83520 		strb	r2, [r3, #53]
 673:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 674:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
 675:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferCpltCallback = IRDA_DMATransmitCplt;
 1144              		.loc 1 675 10 discriminator 2
 1145 0060 FB68     		ldr	r3, [r7, #12]
 1146 0062 DB6A     		ldr	r3, [r3, #44]
 1147              		.loc 1 675 37 discriminator 2
 1148 0064 194A     		ldr	r2, .L54
 1149 0066 DA63     		str	r2, [r3, #60]
 676:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 677:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
 678:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferHalfCpltCallback = IRDA_DMATransmitHalfCplt;
 1150              		.loc 1 678 10 discriminator 2
 1151 0068 FB68     		ldr	r3, [r7, #12]
 1152 006a DB6A     		ldr	r3, [r3, #44]
 1153              		.loc 1 678 41 discriminator 2
 1154 006c 184A     		ldr	r2, .L54+4
 1155 006e 1A64     		str	r2, [r3, #64]
 679:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 680:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA error callback */
 681:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferErrorCallback = IRDA_DMAError;
 1156              		.loc 1 681 10 discriminator 2
ARM GAS  /tmp/ccJhy18e.s 			page 33


 1157 0070 FB68     		ldr	r3, [r7, #12]
 1158 0072 DB6A     		ldr	r3, [r3, #44]
 1159              		.loc 1 681 38 discriminator 2
 1160 0074 174A     		ldr	r2, .L54+8
 1161 0076 DA64     		str	r2, [r3, #76]
 682:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 683:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA abort callback */
 684:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmatx->XferAbortCallback = NULL;
 1162              		.loc 1 684 10 discriminator 2
 1163 0078 FB68     		ldr	r3, [r7, #12]
 1164 007a DB6A     		ldr	r3, [r3, #44]
 1165              		.loc 1 684 38 discriminator 2
 1166 007c 0022     		movs	r2, #0
 1167 007e 1A65     		str	r2, [r3, #80]
 685:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 686:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA transmit DMA Stream */
 687:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     tmp = (uint32_t*)&pData;
 1168              		.loc 1 687 9 discriminator 2
 1169 0080 07F10803 		add	r3, r7, #8
 1170 0084 7B61     		str	r3, [r7, #20]
 688:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmatx, *(uint32_t*)tmp, (uint32_t)&hirda->Instance->DR, Size);
 1171              		.loc 1 688 5 discriminator 2
 1172 0086 FB68     		ldr	r3, [r7, #12]
 1173 0088 D86A     		ldr	r0, [r3, #44]
 1174 008a 7B69     		ldr	r3, [r7, #20]
 1175 008c 1968     		ldr	r1, [r3]
 1176              		.loc 1 688 70 discriminator 2
 1177 008e FB68     		ldr	r3, [r7, #12]
 1178 0090 1B68     		ldr	r3, [r3]
 1179              		.loc 1 688 64 discriminator 2
 1180 0092 0433     		adds	r3, r3, #4
 1181              		.loc 1 688 5 discriminator 2
 1182 0094 1A46     		mov	r2, r3
 1183 0096 FB88     		ldrh	r3, [r7, #6]
 1184 0098 FFF7FEFF 		bl	HAL_DMA_Start_IT
 689:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 690:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Clear the TC flag in the SR register by writing 0 to it */
 691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_IRDA_CLEAR_FLAG(hirda, IRDA_FLAG_TC);
 1185              		.loc 1 691 5 discriminator 2
 1186 009c FB68     		ldr	r3, [r7, #12]
 1187 009e 1B68     		ldr	r3, [r3]
 1188 00a0 6FF04002 		mvn	r2, #64
 1189 00a4 1A60     		str	r2, [r3]
 692:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 693:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 694:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 1190              		.loc 1 694 5 discriminator 2
 1191 00a6 FB68     		ldr	r3, [r7, #12]
 1192 00a8 0022     		movs	r2, #0
 1193 00aa 83F83420 		strb	r2, [r3, #52]
 695:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 696:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
 697:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     in the USART CR3 register */
 698:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 1194              		.loc 1 698 5 discriminator 2
 1195 00ae FB68     		ldr	r3, [r7, #12]
 1196 00b0 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJhy18e.s 			page 34


 1197 00b2 5A69     		ldr	r2, [r3, #20]
 1198 00b4 FB68     		ldr	r3, [r7, #12]
 1199 00b6 1B68     		ldr	r3, [r3]
 1200 00b8 42F08002 		orr	r2, r2, #128
 1201 00bc 5A61     		str	r2, [r3, #20]
 699:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 700:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 1202              		.loc 1 700 12 discriminator 2
 1203 00be 0023     		movs	r3, #0
 1204 00c0 00E0     		b	.L52
 1205              	.L49:
 701:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 702:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
 703:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 1206              		.loc 1 704 12
 1207 00c2 0223     		movs	r3, #2
 1208              	.L52:
 705:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 706:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1209              		.loc 1 706 1
 1210 00c4 1846     		mov	r0, r3
 1211 00c6 1837     		adds	r7, r7, #24
 1212              	.LCFI47:
 1213              		.cfi_def_cfa_offset 8
 1214 00c8 BD46     		mov	sp, r7
 1215              	.LCFI48:
 1216              		.cfi_def_cfa_register 13
 1217              		@ sp needed
 1218 00ca 80BD     		pop	{r7, pc}
 1219              	.L55:
 1220              		.align	2
 1221              	.L54:
 1222 00cc 00000000 		.word	IRDA_DMATransmitCplt
 1223 00d0 00000000 		.word	IRDA_DMATransmitHalfCplt
 1224 00d4 00000000 		.word	IRDA_DMAError
 1225              		.cfi_endproc
 1226              	.LFE134:
 1228              		.section	.text.HAL_IRDA_Receive_DMA,"ax",%progbits
 1229              		.align	1
 1230              		.global	HAL_IRDA_Receive_DMA
 1231              		.syntax unified
 1232              		.thumb
 1233              		.thumb_func
 1234              		.fpu fpv4-sp-d16
 1236              	HAL_IRDA_Receive_DMA:
 1237              	.LFB135:
 707:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 708:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 709:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
 710:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 711:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 712:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  pData Pointer to data buffer
 713:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Size Amount of data to be received
 714:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   When the IRDA parity is enabled (PCE = 1) the data received contain the parity bit.
 715:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 716:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
ARM GAS  /tmp/ccJhy18e.s 			page 35


 717:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Receive_DMA(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
 718:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1238              		.loc 1 718 1
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 24
 1241              		@ frame_needed = 1, uses_anonymous_args = 0
 1242 0000 80B5     		push	{r7, lr}
 1243              	.LCFI49:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 7, -8
 1246              		.cfi_offset 14, -4
 1247 0002 86B0     		sub	sp, sp, #24
 1248              	.LCFI50:
 1249              		.cfi_def_cfa_offset 32
 1250 0004 00AF     		add	r7, sp, #0
 1251              	.LCFI51:
 1252              		.cfi_def_cfa_register 7
 1253 0006 F860     		str	r0, [r7, #12]
 1254 0008 B960     		str	r1, [r7, #8]
 1255 000a 1346     		mov	r3, r2
 1256 000c FB80     		strh	r3, [r7, #6]	@ movhi
 719:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t *tmp;
 720:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 721:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is not already ongoing */
 722:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_READY) 
 1257              		.loc 1 722 11
 1258 000e FB68     		ldr	r3, [r7, #12]
 1259 0010 93F83630 		ldrb	r3, [r3, #54]
 1260 0014 DBB2     		uxtb	r3, r3
 1261              		.loc 1 722 5
 1262 0016 202B     		cmp	r3, #32
 1263 0018 62D1     		bne	.L57
 723:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 724:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if((pData == NULL) || (Size == 0)) 
 1264              		.loc 1 724 15
 1265 001a BB68     		ldr	r3, [r7, #8]
 1266              		.loc 1 724 7
 1267 001c 002B     		cmp	r3, #0
 1268 001e 02D0     		beq	.L58
 1269              		.loc 1 724 24 discriminator 1
 1270 0020 FB88     		ldrh	r3, [r7, #6]
 1271 0022 002B     		cmp	r3, #0
 1272 0024 01D1     		bne	.L59
 1273              	.L58:
 725:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 726:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return HAL_ERROR;
 1274              		.loc 1 726 14
 1275 0026 0123     		movs	r3, #1
 1276 0028 5BE0     		b	.L60
 1277              	.L59:
 727:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 728:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 729:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Locked */
 730:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_LOCK(hirda);
 1278              		.loc 1 730 5
 1279 002a FB68     		ldr	r3, [r7, #12]
 1280 002c 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
ARM GAS  /tmp/ccJhy18e.s 			page 36


 1281 0030 012B     		cmp	r3, #1
 1282 0032 01D1     		bne	.L61
 1283              		.loc 1 730 5 is_stmt 0 discriminator 1
 1284 0034 0223     		movs	r3, #2
 1285 0036 54E0     		b	.L60
 1286              	.L61:
 1287              		.loc 1 730 5 discriminator 2
 1288 0038 FB68     		ldr	r3, [r7, #12]
 1289 003a 0122     		movs	r2, #1
 1290 003c 83F83420 		strb	r2, [r3, #52]
 731:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 732:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->pRxBuffPtr = pData;
 1291              		.loc 1 732 23 is_stmt 1 discriminator 2
 1292 0040 BA68     		ldr	r2, [r7, #8]
 1293 0042 FB68     		ldr	r3, [r7, #12]
 1294 0044 5A62     		str	r2, [r3, #36]
 733:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferSize = Size;   
 1295              		.loc 1 733 23 discriminator 2
 1296 0046 FB68     		ldr	r3, [r7, #12]
 1297 0048 FA88     		ldrh	r2, [r7, #6]	@ movhi
 1298 004a 1A85     		strh	r2, [r3, #40]	@ movhi
 734:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE; 
 1299              		.loc 1 734 22 discriminator 2
 1300 004c FB68     		ldr	r3, [r7, #12]
 1301 004e 0022     		movs	r2, #0
 1302 0050 9A63     		str	r2, [r3, #56]
 735:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 1303              		.loc 1 735 20 discriminator 2
 1304 0052 FB68     		ldr	r3, [r7, #12]
 1305 0054 2222     		movs	r2, #34
 1306 0056 83F83620 		strb	r2, [r3, #54]
 736:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 737:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA transfer complete callback */
 738:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferCpltCallback = IRDA_DMAReceiveCplt;
 1307              		.loc 1 738 10 discriminator 2
 1308 005a FB68     		ldr	r3, [r7, #12]
 1309 005c 1B6B     		ldr	r3, [r3, #48]
 1310              		.loc 1 738 37 discriminator 2
 1311 005e 234A     		ldr	r2, .L62
 1312 0060 DA63     		str	r2, [r3, #60]
 739:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 740:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the IRDA DMA half transfer complete callback */
 741:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferHalfCpltCallback = IRDA_DMAReceiveHalfCplt;
 1313              		.loc 1 741 10 discriminator 2
 1314 0062 FB68     		ldr	r3, [r7, #12]
 1315 0064 1B6B     		ldr	r3, [r3, #48]
 1316              		.loc 1 741 41 discriminator 2
 1317 0066 224A     		ldr	r2, .L62+4
 1318 0068 1A64     		str	r2, [r3, #64]
 742:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 743:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA error callback */
 744:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferErrorCallback = IRDA_DMAError;
 1319              		.loc 1 744 10 discriminator 2
 1320 006a FB68     		ldr	r3, [r7, #12]
 1321 006c 1B6B     		ldr	r3, [r3, #48]
 1322              		.loc 1 744 38 discriminator 2
 1323 006e 214A     		ldr	r2, .L62+8
ARM GAS  /tmp/ccJhy18e.s 			page 37


 1324 0070 DA64     		str	r2, [r3, #76]
 745:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 746:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set the DMA abort callback */
 747:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->hdmarx->XferAbortCallback = NULL;
 1325              		.loc 1 747 10 discriminator 2
 1326 0072 FB68     		ldr	r3, [r7, #12]
 1327 0074 1B6B     		ldr	r3, [r3, #48]
 1328              		.loc 1 747 38 discriminator 2
 1329 0076 0022     		movs	r2, #0
 1330 0078 1A65     		str	r2, [r3, #80]
 748:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 749:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the DMA Stream */
 750:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     tmp = (uint32_t*)&pData;
 1331              		.loc 1 750 9 discriminator 2
 1332 007a 07F10803 		add	r3, r7, #8
 1333 007e 7B61     		str	r3, [r7, #20]
 751:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_DMA_Start_IT(hirda->hdmarx, (uint32_t)&hirda->Instance->DR, *(uint32_t*)tmp, Size);
 1334              		.loc 1 751 5 discriminator 2
 1335 0080 FB68     		ldr	r3, [r7, #12]
 1336 0082 186B     		ldr	r0, [r3, #48]
 1337              		.loc 1 751 53 discriminator 2
 1338 0084 FB68     		ldr	r3, [r7, #12]
 1339 0086 1B68     		ldr	r3, [r3]
 1340              		.loc 1 751 47 discriminator 2
 1341 0088 0433     		adds	r3, r3, #4
 1342              		.loc 1 751 5 discriminator 2
 1343 008a 1946     		mov	r1, r3
 1344 008c 7B69     		ldr	r3, [r7, #20]
 1345 008e 1A68     		ldr	r2, [r3]
 1346 0090 FB88     		ldrh	r3, [r7, #6]
 1347 0092 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1348              	.LBB2:
 752:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 	
 753:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the sec
 754:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
 1349              		.loc 1 754 5 discriminator 2
 1350 0096 0023     		movs	r3, #0
 1351 0098 3B61     		str	r3, [r7, #16]
 1352 009a FB68     		ldr	r3, [r7, #12]
 1353 009c 1B68     		ldr	r3, [r3]
 1354 009e 1B68     		ldr	r3, [r3]
 1355 00a0 3B61     		str	r3, [r7, #16]
 1356 00a2 3B69     		ldr	r3, [r7, #16]
 1357              	.LBE2:
 755:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 756:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Process Unlocked */
 757:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_UNLOCK(hirda);
 1358              		.loc 1 757 5 discriminator 2
 1359 00a4 FB68     		ldr	r3, [r7, #12]
 1360 00a6 0022     		movs	r2, #0
 1361 00a8 83F83420 		strb	r2, [r3, #52]
 758:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 759:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Parity Error Interrupt */
 760:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 1362              		.loc 1 760 5 discriminator 2
 1363 00ac FB68     		ldr	r3, [r7, #12]
 1364 00ae 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJhy18e.s 			page 38


 1365 00b0 DA68     		ldr	r2, [r3, #12]
 1366 00b2 FB68     		ldr	r3, [r7, #12]
 1367 00b4 1B68     		ldr	r3, [r3]
 1368 00b6 42F48072 		orr	r2, r2, #256
 1369 00ba DA60     		str	r2, [r3, #12]
 761:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 762:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
 763:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1370              		.loc 1 763 5 discriminator 2
 1371 00bc FB68     		ldr	r3, [r7, #12]
 1372 00be 1B68     		ldr	r3, [r3]
 1373 00c0 5A69     		ldr	r2, [r3, #20]
 1374 00c2 FB68     		ldr	r3, [r7, #12]
 1375 00c4 1B68     		ldr	r3, [r3]
 1376 00c6 42F00102 		orr	r2, r2, #1
 1377 00ca 5A61     		str	r2, [r3, #20]
 764:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 765:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
 766:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     in the USART CR3 register */
 767:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 1378              		.loc 1 767 5 discriminator 2
 1379 00cc FB68     		ldr	r3, [r7, #12]
 1380 00ce 1B68     		ldr	r3, [r3]
 1381 00d0 5A69     		ldr	r2, [r3, #20]
 1382 00d2 FB68     		ldr	r3, [r7, #12]
 1383 00d4 1B68     		ldr	r3, [r3]
 1384 00d6 42F04002 		orr	r2, r2, #64
 1385 00da 5A61     		str	r2, [r3, #20]
 768:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 1386              		.loc 1 769 12 discriminator 2
 1387 00dc 0023     		movs	r3, #0
 1388 00de 00E0     		b	.L60
 1389              	.L57:
 770:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 771:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
 772:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 773:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 1390              		.loc 1 773 12
 1391 00e0 0223     		movs	r3, #2
 1392              	.L60:
 774:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 775:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1393              		.loc 1 775 1
 1394 00e2 1846     		mov	r0, r3
 1395 00e4 1837     		adds	r7, r7, #24
 1396              	.LCFI52:
 1397              		.cfi_def_cfa_offset 8
 1398 00e6 BD46     		mov	sp, r7
 1399              	.LCFI53:
 1400              		.cfi_def_cfa_register 13
 1401              		@ sp needed
 1402 00e8 80BD     		pop	{r7, pc}
 1403              	.L63:
 1404 00ea 00BF     		.align	2
 1405              	.L62:
 1406 00ec 00000000 		.word	IRDA_DMAReceiveCplt
ARM GAS  /tmp/ccJhy18e.s 			page 39


 1407 00f0 00000000 		.word	IRDA_DMAReceiveHalfCplt
 1408 00f4 00000000 		.word	IRDA_DMAError
 1409              		.cfi_endproc
 1410              	.LFE135:
 1412              		.section	.text.HAL_IRDA_DMAPause,"ax",%progbits
 1413              		.align	1
 1414              		.global	HAL_IRDA_DMAPause
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
 1418              		.fpu fpv4-sp-d16
 1420              	HAL_IRDA_DMAPause:
 1421              	.LFB136:
 776:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 777:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 778:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief Pauses the DMA Transfer.
 779:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 780:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 781:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 782:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 783:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAPause(IRDA_HandleTypeDef *hirda)
 784:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1422              		.loc 1 784 1
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 16
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
 1427 0000 80B4     		push	{r7}
 1428              	.LCFI54:
 1429              		.cfi_def_cfa_offset 4
 1430              		.cfi_offset 7, -4
 1431 0002 85B0     		sub	sp, sp, #20
 1432              	.LCFI55:
 1433              		.cfi_def_cfa_offset 24
 1434 0004 00AF     		add	r7, sp, #0
 1435              	.LCFI56:
 1436              		.cfi_def_cfa_register 7
 1437 0006 7860     		str	r0, [r7, #4]
 785:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1438              		.loc 1 785 12
 1439 0008 0023     		movs	r3, #0
 1440 000a FB60     		str	r3, [r7, #12]
 786:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 787:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Process Locked */
 788:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_LOCK(hirda);
 1441              		.loc 1 788 3
 1442 000c 7B68     		ldr	r3, [r7, #4]
 1443 000e 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 1444 0012 012B     		cmp	r3, #1
 1445 0014 01D1     		bne	.L65
 1446              		.loc 1 788 3 is_stmt 0 discriminator 1
 1447 0016 0223     		movs	r3, #2
 1448 0018 50E0     		b	.L66
 1449              	.L65:
 1450              		.loc 1 788 3 discriminator 2
 1451 001a 7B68     		ldr	r3, [r7, #4]
 1452 001c 0122     		movs	r2, #1
ARM GAS  /tmp/ccJhy18e.s 			page 40


 1453 001e 83F83420 		strb	r2, [r3, #52]
 789:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 790:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 1454              		.loc 1 790 16 is_stmt 1 discriminator 2
 1455 0022 7B68     		ldr	r3, [r7, #4]
 1456 0024 1B68     		ldr	r3, [r3]
 1457 0026 5B69     		ldr	r3, [r3, #20]
 1458 0028 03F08003 		and	r3, r3, #128
 1459 002c 002B     		cmp	r3, #0
 1460 002e 14BF     		ite	ne
 1461 0030 0123     		movne	r3, #1
 1462 0032 0023     		moveq	r3, #0
 1463 0034 DBB2     		uxtb	r3, r3
 1464              		.loc 1 790 14 discriminator 2
 1465 0036 FB60     		str	r3, [r7, #12]
 791:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1466              		.loc 1 791 12 discriminator 2
 1467 0038 7B68     		ldr	r3, [r7, #4]
 1468 003a 93F83530 		ldrb	r3, [r3, #53]
 1469 003e DBB2     		uxtb	r3, r3
 1470              		.loc 1 791 5 discriminator 2
 1471 0040 212B     		cmp	r3, #33
 1472 0042 0AD1     		bne	.L67
 1473              		.loc 1 791 48 discriminator 1
 1474 0044 FB68     		ldr	r3, [r7, #12]
 1475 0046 002B     		cmp	r3, #0
 1476 0048 07D0     		beq	.L67
 792:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 793:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the IRDA DMA Tx request */
 794:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 1477              		.loc 1 794 5
 1478 004a 7B68     		ldr	r3, [r7, #4]
 1479 004c 1B68     		ldr	r3, [r3]
 1480 004e 5A69     		ldr	r2, [r3, #20]
 1481 0050 7B68     		ldr	r3, [r7, #4]
 1482 0052 1B68     		ldr	r3, [r3]
 1483 0054 22F08002 		bic	r2, r2, #128
 1484 0058 5A61     		str	r2, [r3, #20]
 1485              	.L67:
 795:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 796:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 797:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 1486              		.loc 1 797 16
 1487 005a 7B68     		ldr	r3, [r7, #4]
 1488 005c 1B68     		ldr	r3, [r3]
 1489 005e 5B69     		ldr	r3, [r3, #20]
 1490 0060 03F04003 		and	r3, r3, #64
 1491 0064 002B     		cmp	r3, #0
 1492 0066 14BF     		ite	ne
 1493 0068 0123     		movne	r3, #1
 1494 006a 0023     		moveq	r3, #0
 1495 006c DBB2     		uxtb	r3, r3
 1496              		.loc 1 797 14
 1497 006e FB60     		str	r3, [r7, #12]
 798:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1498              		.loc 1 798 12
 1499 0070 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 41


 1500 0072 93F83630 		ldrb	r3, [r3, #54]
 1501 0076 DBB2     		uxtb	r3, r3
 1502              		.loc 1 798 5
 1503 0078 222B     		cmp	r3, #34
 1504 007a 1AD1     		bne	.L68
 1505              		.loc 1 798 49 discriminator 1
 1506 007c FB68     		ldr	r3, [r7, #12]
 1507 007e 002B     		cmp	r3, #0
 1508 0080 17D0     		beq	.L68
 799:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 800:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
 801:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 1509              		.loc 1 801 5
 1510 0082 7B68     		ldr	r3, [r7, #4]
 1511 0084 1B68     		ldr	r3, [r3]
 1512 0086 DA68     		ldr	r2, [r3, #12]
 1513 0088 7B68     		ldr	r3, [r7, #4]
 1514 008a 1B68     		ldr	r3, [r3]
 1515 008c 22F48072 		bic	r2, r2, #256
 1516 0090 DA60     		str	r2, [r3, #12]
 802:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1517              		.loc 1 802 5
 1518 0092 7B68     		ldr	r3, [r7, #4]
 1519 0094 1B68     		ldr	r3, [r3]
 1520 0096 5A69     		ldr	r2, [r3, #20]
 1521 0098 7B68     		ldr	r3, [r7, #4]
 1522 009a 1B68     		ldr	r3, [r3]
 1523 009c 22F00102 		bic	r2, r2, #1
 1524 00a0 5A61     		str	r2, [r3, #20]
 803:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 804:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the IRDA DMA Rx request */
 805:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 1525              		.loc 1 805 5
 1526 00a2 7B68     		ldr	r3, [r7, #4]
 1527 00a4 1B68     		ldr	r3, [r3]
 1528 00a6 5A69     		ldr	r2, [r3, #20]
 1529 00a8 7B68     		ldr	r3, [r7, #4]
 1530 00aa 1B68     		ldr	r3, [r3]
 1531 00ac 22F04002 		bic	r2, r2, #64
 1532 00b0 5A61     		str	r2, [r3, #20]
 1533              	.L68:
 806:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 807:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 808:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Process Unlocked */
 809:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 1534              		.loc 1 809 3
 1535 00b2 7B68     		ldr	r3, [r7, #4]
 1536 00b4 0022     		movs	r2, #0
 1537 00b6 83F83420 		strb	r2, [r3, #52]
 810:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 811:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 1538              		.loc 1 811 10
 1539 00ba 0023     		movs	r3, #0
 1540              	.L66:
 812:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1541              		.loc 1 812 1
 1542 00bc 1846     		mov	r0, r3
ARM GAS  /tmp/ccJhy18e.s 			page 42


 1543 00be 1437     		adds	r7, r7, #20
 1544              	.LCFI57:
 1545              		.cfi_def_cfa_offset 4
 1546 00c0 BD46     		mov	sp, r7
 1547              	.LCFI58:
 1548              		.cfi_def_cfa_register 13
 1549              		@ sp needed
 1550 00c2 5DF8047B 		ldr	r7, [sp], #4
 1551              	.LCFI59:
 1552              		.cfi_restore 7
 1553              		.cfi_def_cfa_offset 0
 1554 00c6 7047     		bx	lr
 1555              		.cfi_endproc
 1556              	.LFE136:
 1558              		.section	.text.HAL_IRDA_DMAResume,"ax",%progbits
 1559              		.align	1
 1560              		.global	HAL_IRDA_DMAResume
 1561              		.syntax unified
 1562              		.thumb
 1563              		.thumb_func
 1564              		.fpu fpv4-sp-d16
 1566              	HAL_IRDA_DMAResume:
 1567              	.LFB137:
 813:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 814:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 815:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief Resumes the DMA Transfer.
 816:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 817:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 819:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 820:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAResume(IRDA_HandleTypeDef *hirda)
 821:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1568              		.loc 1 821 1
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 16
 1571              		@ frame_needed = 1, uses_anonymous_args = 0
 1572              		@ link register save eliminated.
 1573 0000 80B4     		push	{r7}
 1574              	.LCFI60:
 1575              		.cfi_def_cfa_offset 4
 1576              		.cfi_offset 7, -4
 1577 0002 85B0     		sub	sp, sp, #20
 1578              	.LCFI61:
 1579              		.cfi_def_cfa_offset 24
 1580 0004 00AF     		add	r7, sp, #0
 1581              	.LCFI62:
 1582              		.cfi_def_cfa_register 7
 1583 0006 7860     		str	r0, [r7, #4]
 822:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Process Locked */
 823:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_LOCK(hirda);
 1584              		.loc 1 823 3
 1585 0008 7B68     		ldr	r3, [r7, #4]
 1586 000a 93F83430 		ldrb	r3, [r3, #52]	@ zero_extendqisi2
 1587 000e 012B     		cmp	r3, #1
 1588 0010 01D1     		bne	.L70
 1589              		.loc 1 823 3 is_stmt 0 discriminator 1
 1590 0012 0223     		movs	r3, #2
ARM GAS  /tmp/ccJhy18e.s 			page 43


 1591 0014 3BE0     		b	.L71
 1592              	.L70:
 1593              		.loc 1 823 3 discriminator 2
 1594 0016 7B68     		ldr	r3, [r7, #4]
 1595 0018 0122     		movs	r2, #1
 1596 001a 83F83420 		strb	r2, [r3, #52]
 824:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 825:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 1597              		.loc 1 825 11 is_stmt 1 discriminator 2
 1598 001e 7B68     		ldr	r3, [r7, #4]
 1599 0020 93F83530 		ldrb	r3, [r3, #53]
 1600 0024 DBB2     		uxtb	r3, r3
 1601              		.loc 1 825 5 discriminator 2
 1602 0026 212B     		cmp	r3, #33
 1603 0028 07D1     		bne	.L72
 826:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 827:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA DMA Tx request */
 828:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 1604              		.loc 1 828 5
 1605 002a 7B68     		ldr	r3, [r7, #4]
 1606 002c 1B68     		ldr	r3, [r3]
 1607 002e 5A69     		ldr	r2, [r3, #20]
 1608 0030 7B68     		ldr	r3, [r7, #4]
 1609 0032 1B68     		ldr	r3, [r3]
 1610 0034 42F08002 		orr	r2, r2, #128
 1611 0038 5A61     		str	r2, [r3, #20]
 1612              	.L72:
 829:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 830:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 1613              		.loc 1 830 11
 1614 003a 7B68     		ldr	r3, [r7, #4]
 1615 003c 93F83630 		ldrb	r3, [r3, #54]
 1616 0040 DBB2     		uxtb	r3, r3
 1617              		.loc 1 830 5
 1618 0042 222B     		cmp	r3, #34
 1619 0044 1ED1     		bne	.L73
 1620              	.LBB3:
 831:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 832:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
 833:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     __HAL_IRDA_CLEAR_OREFLAG(hirda);
 1621              		.loc 1 833 5
 1622 0046 0023     		movs	r3, #0
 1623 0048 FB60     		str	r3, [r7, #12]
 1624 004a 7B68     		ldr	r3, [r7, #4]
 1625 004c 1B68     		ldr	r3, [r3]
 1626 004e 1B68     		ldr	r3, [r3]
 1627 0050 FB60     		str	r3, [r7, #12]
 1628 0052 FB68     		ldr	r3, [r7, #12]
 1629              	.LBE3:
 834:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 835:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
 836:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 1630              		.loc 1 836 5
 1631 0054 7B68     		ldr	r3, [r7, #4]
 1632 0056 1B68     		ldr	r3, [r3]
 1633 0058 DA68     		ldr	r2, [r3, #12]
 1634 005a 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 44


 1635 005c 1B68     		ldr	r3, [r3]
 1636 005e 42F48072 		orr	r2, r2, #256
 1637 0062 DA60     		str	r2, [r3, #12]
 837:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1638              		.loc 1 837 5
 1639 0064 7B68     		ldr	r3, [r7, #4]
 1640 0066 1B68     		ldr	r3, [r3]
 1641 0068 5A69     		ldr	r2, [r3, #20]
 1642 006a 7B68     		ldr	r3, [r7, #4]
 1643 006c 1B68     		ldr	r3, [r3]
 1644 006e 42F00102 		orr	r2, r2, #1
 1645 0072 5A61     		str	r2, [r3, #20]
 838:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 839:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA DMA Rx request */
 840:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 1646              		.loc 1 840 5
 1647 0074 7B68     		ldr	r3, [r7, #4]
 1648 0076 1B68     		ldr	r3, [r3]
 1649 0078 5A69     		ldr	r2, [r3, #20]
 1650 007a 7B68     		ldr	r3, [r7, #4]
 1651 007c 1B68     		ldr	r3, [r3]
 1652 007e 42F04002 		orr	r2, r2, #64
 1653 0082 5A61     		str	r2, [r3, #20]
 1654              	.L73:
 841:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 842:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 843:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Process Unlocked */
 844:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   __HAL_UNLOCK(hirda);
 1655              		.loc 1 844 3
 1656 0084 7B68     		ldr	r3, [r7, #4]
 1657 0086 0022     		movs	r2, #0
 1658 0088 83F83420 		strb	r2, [r3, #52]
 845:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 846:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 1659              		.loc 1 846 10
 1660 008c 0023     		movs	r3, #0
 1661              	.L71:
 847:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1662              		.loc 1 847 1
 1663 008e 1846     		mov	r0, r3
 1664 0090 1437     		adds	r7, r7, #20
 1665              	.LCFI63:
 1666              		.cfi_def_cfa_offset 4
 1667 0092 BD46     		mov	sp, r7
 1668              	.LCFI64:
 1669              		.cfi_def_cfa_register 13
 1670              		@ sp needed
 1671 0094 5DF8047B 		ldr	r7, [sp], #4
 1672              	.LCFI65:
 1673              		.cfi_restore 7
 1674              		.cfi_def_cfa_offset 0
 1675 0098 7047     		bx	lr
 1676              		.cfi_endproc
 1677              	.LFE137:
 1679              		.section	.text.HAL_IRDA_DMAStop,"ax",%progbits
 1680              		.align	1
 1681              		.global	HAL_IRDA_DMAStop
ARM GAS  /tmp/ccJhy18e.s 			page 45


 1682              		.syntax unified
 1683              		.thumb
 1684              		.thumb_func
 1685              		.fpu fpv4-sp-d16
 1687              	HAL_IRDA_DMAStop:
 1688              	.LFB138:
 848:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 849:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 850:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief Stops the DMA Transfer.
 851:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
 852:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
 853:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 854:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 855:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_DMAStop(IRDA_HandleTypeDef *hirda)
 856:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1689              		.loc 1 856 1
 1690              		.cfi_startproc
 1691              		@ args = 0, pretend = 0, frame = 16
 1692              		@ frame_needed = 1, uses_anonymous_args = 0
 1693 0000 80B5     		push	{r7, lr}
 1694              	.LCFI66:
 1695              		.cfi_def_cfa_offset 8
 1696              		.cfi_offset 7, -8
 1697              		.cfi_offset 14, -4
 1698 0002 84B0     		sub	sp, sp, #16
 1699              	.LCFI67:
 1700              		.cfi_def_cfa_offset 24
 1701 0004 00AF     		add	r7, sp, #0
 1702              	.LCFI68:
 1703              		.cfi_def_cfa_register 7
 1704 0006 7860     		str	r0, [r7, #4]
 857:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 1705              		.loc 1 857 12
 1706 0008 0023     		movs	r3, #0
 1707 000a FB60     		str	r3, [r7, #12]
 858:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* The Lock is not implemented on this API to allow the user application
 859:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   to call the HAL IRDA API under callbacks HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback():
 860:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
 861:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   and the correspond call back is executed HAL_IRDA_TxCpltCallback() / HAL_IRDA_RxCpltCallback()
 862:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
 863:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 864:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
 865:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 1708              		.loc 1 865 16
 1709 000c 7B68     		ldr	r3, [r7, #4]
 1710 000e 1B68     		ldr	r3, [r3]
 1711 0010 5B69     		ldr	r3, [r3, #20]
 1712 0012 03F08003 		and	r3, r3, #128
 1713 0016 002B     		cmp	r3, #0
 1714 0018 14BF     		ite	ne
 1715 001a 0123     		movne	r3, #1
 1716 001c 0023     		moveq	r3, #0
 1717 001e DBB2     		uxtb	r3, r3
 1718              		.loc 1 865 14
 1719 0020 FB60     		str	r3, [r7, #12]
 866:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 1720              		.loc 1 866 12
ARM GAS  /tmp/ccJhy18e.s 			page 46


 1721 0022 7B68     		ldr	r3, [r7, #4]
 1722 0024 93F83530 		ldrb	r3, [r3, #53]
 1723 0028 DBB2     		uxtb	r3, r3
 1724              		.loc 1 866 5
 1725 002a 212B     		cmp	r3, #33
 1726 002c 16D1     		bne	.L75
 1727              		.loc 1 866 48 discriminator 1
 1728 002e FB68     		ldr	r3, [r7, #12]
 1729 0030 002B     		cmp	r3, #0
 1730 0032 13D0     		beq	.L75
 867:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 868:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 1731              		.loc 1 868 5
 1732 0034 7B68     		ldr	r3, [r7, #4]
 1733 0036 1B68     		ldr	r3, [r3]
 1734 0038 5A69     		ldr	r2, [r3, #20]
 1735 003a 7B68     		ldr	r3, [r7, #4]
 1736 003c 1B68     		ldr	r3, [r3]
 1737 003e 22F08002 		bic	r2, r2, #128
 1738 0042 5A61     		str	r2, [r3, #20]
 869:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 870:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel */
 871:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 1739              		.loc 1 871 13
 1740 0044 7B68     		ldr	r3, [r7, #4]
 1741 0046 DB6A     		ldr	r3, [r3, #44]
 1742              		.loc 1 871 7
 1743 0048 002B     		cmp	r3, #0
 1744 004a 04D0     		beq	.L76
 872:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 873:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 1745              		.loc 1 873 7
 1746 004c 7B68     		ldr	r3, [r7, #4]
 1747 004e DB6A     		ldr	r3, [r3, #44]
 1748 0050 1846     		mov	r0, r3
 1749 0052 FFF7FEFF 		bl	HAL_DMA_Abort
 1750              	.L76:
 874:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 875:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 1751              		.loc 1 875 5
 1752 0056 7868     		ldr	r0, [r7, #4]
 1753 0058 FFF7FEFF 		bl	IRDA_EndTxTransfer
 1754              	.L75:
 876:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 877:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 878:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
 879:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 1755              		.loc 1 879 16
 1756 005c 7B68     		ldr	r3, [r7, #4]
 1757 005e 1B68     		ldr	r3, [r3]
 1758 0060 5B69     		ldr	r3, [r3, #20]
 1759 0062 03F04003 		and	r3, r3, #64
 1760 0066 002B     		cmp	r3, #0
 1761 0068 14BF     		ite	ne
 1762 006a 0123     		movne	r3, #1
 1763 006c 0023     		moveq	r3, #0
 1764 006e DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccJhy18e.s 			page 47


 1765              		.loc 1 879 14
 1766 0070 FB60     		str	r3, [r7, #12]
 880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 1767              		.loc 1 880 12
 1768 0072 7B68     		ldr	r3, [r7, #4]
 1769 0074 93F83630 		ldrb	r3, [r3, #54]
 1770 0078 DBB2     		uxtb	r3, r3
 1771              		.loc 1 880 5
 1772 007a 222B     		cmp	r3, #34
 1773 007c 16D1     		bne	.L77
 1774              		.loc 1 880 49 discriminator 1
 1775 007e FB68     		ldr	r3, [r7, #12]
 1776 0080 002B     		cmp	r3, #0
 1777 0082 13D0     		beq	.L77
 881:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 882:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 1778              		.loc 1 882 5
 1779 0084 7B68     		ldr	r3, [r7, #4]
 1780 0086 1B68     		ldr	r3, [r3]
 1781 0088 5A69     		ldr	r2, [r3, #20]
 1782 008a 7B68     		ldr	r3, [r7, #4]
 1783 008c 1B68     		ldr	r3, [r3]
 1784 008e 22F04002 		bic	r2, r2, #64
 1785 0092 5A61     		str	r2, [r3, #20]
 883:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
 884:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel */
 885:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 1786              		.loc 1 885 13
 1787 0094 7B68     		ldr	r3, [r7, #4]
 1788 0096 1B6B     		ldr	r3, [r3, #48]
 1789              		.loc 1 885 7
 1790 0098 002B     		cmp	r3, #0
 1791 009a 04D0     		beq	.L78
 886:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 887:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 1792              		.loc 1 887 7
 1793 009c 7B68     		ldr	r3, [r7, #4]
 1794 009e 1B6B     		ldr	r3, [r3, #48]
 1795 00a0 1846     		mov	r0, r3
 1796 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 1797              	.L78:
 888:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 889:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 1798              		.loc 1 889 5
 1799 00a6 7868     		ldr	r0, [r7, #4]
 1800 00a8 FFF7FEFF 		bl	IRDA_EndRxTransfer
 1801              	.L77:
 890:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 891:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 1802              		.loc 1 891 10
 1803 00ac 0023     		movs	r3, #0
 892:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1804              		.loc 1 892 1
 1805 00ae 1846     		mov	r0, r3
 1806 00b0 1037     		adds	r7, r7, #16
 1807              	.LCFI69:
 1808              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJhy18e.s 			page 48


 1809 00b2 BD46     		mov	sp, r7
 1810              	.LCFI70:
 1811              		.cfi_def_cfa_register 13
 1812              		@ sp needed
 1813 00b4 80BD     		pop	{r7, pc}
 1814              		.cfi_endproc
 1815              	.LFE138:
 1817              		.section	.text.HAL_IRDA_Abort,"ax",%progbits
 1818              		.align	1
 1819              		.global	HAL_IRDA_Abort
 1820              		.syntax unified
 1821              		.thumb
 1822              		.thumb_func
 1823              		.fpu fpv4-sp-d16
 1825              	HAL_IRDA_Abort:
 1826              	.LFB139:
 893:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 894:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 895:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing transfers (blocking mode).
 896:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
 897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
 898:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
 899:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
 900:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
 901:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
 902:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
 903:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
 904:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 905:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** */
 906:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort(IRDA_HandleTypeDef *hirda)
 907:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1827              		.loc 1 907 1
 1828              		.cfi_startproc
 1829              		@ args = 0, pretend = 0, frame = 8
 1830              		@ frame_needed = 1, uses_anonymous_args = 0
 1831 0000 80B5     		push	{r7, lr}
 1832              	.LCFI71:
 1833              		.cfi_def_cfa_offset 8
 1834              		.cfi_offset 7, -8
 1835              		.cfi_offset 14, -4
 1836 0002 82B0     		sub	sp, sp, #8
 1837              	.LCFI72:
 1838              		.cfi_def_cfa_offset 16
 1839 0004 00AF     		add	r7, sp, #0
 1840              	.LCFI73:
 1841              		.cfi_def_cfa_register 7
 1842 0006 7860     		str	r0, [r7, #4]
 908:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 909:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 1843              		.loc 1 909 3
 1844 0008 7B68     		ldr	r3, [r7, #4]
 1845 000a 1B68     		ldr	r3, [r3]
 1846 000c DA68     		ldr	r2, [r3, #12]
 1847 000e 7B68     		ldr	r3, [r7, #4]
 1848 0010 1B68     		ldr	r3, [r3]
 1849 0012 22F4F072 		bic	r2, r2, #480
 1850 0016 DA60     		str	r2, [r3, #12]
ARM GAS  /tmp/ccJhy18e.s 			page 49


 910:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 1851              		.loc 1 910 3
 1852 0018 7B68     		ldr	r3, [r7, #4]
 1853 001a 1B68     		ldr	r3, [r3]
 1854 001c 5A69     		ldr	r2, [r3, #20]
 1855 001e 7B68     		ldr	r3, [r7, #4]
 1856 0020 1B68     		ldr	r3, [r3]
 1857 0022 22F00102 		bic	r2, r2, #1
 1858 0026 5A61     		str	r2, [r3, #20]
 911:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
 912:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
 913:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 1859              		.loc 1 913 6
 1860 0028 7B68     		ldr	r3, [r7, #4]
 1861 002a 1B68     		ldr	r3, [r3]
 1862 002c 5B69     		ldr	r3, [r3, #20]
 1863 002e 03F08003 		and	r3, r3, #128
 1864              		.loc 1 913 5
 1865 0032 002B     		cmp	r3, #0
 1866 0034 14D0     		beq	.L81
 914:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 915:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 1867              		.loc 1 915 5
 1868 0036 7B68     		ldr	r3, [r7, #4]
 1869 0038 1B68     		ldr	r3, [r3]
 1870 003a 5A69     		ldr	r2, [r3, #20]
 1871 003c 7B68     		ldr	r3, [r7, #4]
 1872 003e 1B68     		ldr	r3, [r3]
 1873 0040 22F08002 		bic	r2, r2, #128
 1874 0044 5A61     		str	r2, [r3, #20]
 916:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 917:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
 918:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 1875              		.loc 1 918 13
 1876 0046 7B68     		ldr	r3, [r7, #4]
 1877 0048 DB6A     		ldr	r3, [r3, #44]
 1878              		.loc 1 918 7
 1879 004a 002B     		cmp	r3, #0
 1880 004c 08D0     		beq	.L81
 919:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 920:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 921:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 922:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
 1881              		.loc 1 922 12
 1882 004e 7B68     		ldr	r3, [r7, #4]
 1883 0050 DB6A     		ldr	r3, [r3, #44]
 1884              		.loc 1 922 40
 1885 0052 0022     		movs	r2, #0
 1886 0054 1A65     		str	r2, [r3, #80]
 923:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 924:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 1887              		.loc 1 924 7
 1888 0056 7B68     		ldr	r3, [r7, #4]
 1889 0058 DB6A     		ldr	r3, [r3, #44]
 1890 005a 1846     		mov	r0, r3
 1891 005c FFF7FEFF 		bl	HAL_DMA_Abort
 1892              	.L81:
ARM GAS  /tmp/ccJhy18e.s 			page 50


 925:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 926:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 927:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 928:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
 929:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 1893              		.loc 1 929 6
 1894 0060 7B68     		ldr	r3, [r7, #4]
 1895 0062 1B68     		ldr	r3, [r3]
 1896 0064 5B69     		ldr	r3, [r3, #20]
 1897 0066 03F04003 		and	r3, r3, #64
 1898              		.loc 1 929 5
 1899 006a 002B     		cmp	r3, #0
 1900 006c 14D0     		beq	.L82
 930:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 931:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 1901              		.loc 1 931 5
 1902 006e 7B68     		ldr	r3, [r7, #4]
 1903 0070 1B68     		ldr	r3, [r3]
 1904 0072 5A69     		ldr	r2, [r3, #20]
 1905 0074 7B68     		ldr	r3, [r7, #4]
 1906 0076 1B68     		ldr	r3, [r3]
 1907 0078 22F04002 		bic	r2, r2, #64
 1908 007c 5A61     		str	r2, [r3, #20]
 932:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 933:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
 934:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 1909              		.loc 1 934 13
 1910 007e 7B68     		ldr	r3, [r7, #4]
 1911 0080 1B6B     		ldr	r3, [r3, #48]
 1912              		.loc 1 934 7
 1913 0082 002B     		cmp	r3, #0
 1914 0084 08D0     		beq	.L82
 935:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 936:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 937:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 938:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
 1915              		.loc 1 938 12
 1916 0086 7B68     		ldr	r3, [r7, #4]
 1917 0088 1B6B     		ldr	r3, [r3, #48]
 1918              		.loc 1 938 40
 1919 008a 0022     		movs	r2, #0
 1920 008c 1A65     		str	r2, [r3, #80]
 939:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 940:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 1921              		.loc 1 940 7
 1922 008e 7B68     		ldr	r3, [r7, #4]
 1923 0090 1B6B     		ldr	r3, [r3, #48]
 1924 0092 1846     		mov	r0, r3
 1925 0094 FFF7FEFF 		bl	HAL_DMA_Abort
 1926              	.L82:
 941:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 942:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 943:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 944:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Reset Tx and Rx transfer counters */
 945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 1927              		.loc 1 945 22
 1928 0098 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 51


 1929 009a 0022     		movs	r2, #0
 1930 009c 5A84     		strh	r2, [r3, #34]	@ movhi
 946:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 1931              		.loc 1 946 22
 1932 009e 7B68     		ldr	r3, [r7, #4]
 1933 00a0 0022     		movs	r2, #0
 1934 00a2 5A85     		strh	r2, [r3, #42]	@ movhi
 947:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 948:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Reset ErrorCode */
 949:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 1935              		.loc 1 949 20
 1936 00a4 7B68     		ldr	r3, [r7, #4]
 1937 00a6 0022     		movs	r2, #0
 1938 00a8 9A63     		str	r2, [r3, #56]
 950:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 951:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->RxState and hirda->gState to Ready */
 952:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 1939              		.loc 1 952 18
 1940 00aa 7B68     		ldr	r3, [r7, #4]
 1941 00ac 2022     		movs	r2, #32
 1942 00ae 83F83620 		strb	r2, [r3, #54]
 953:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 1943              		.loc 1 953 17
 1944 00b2 7B68     		ldr	r3, [r7, #4]
 1945 00b4 2022     		movs	r2, #32
 1946 00b6 83F83520 		strb	r2, [r3, #53]
 954:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 955:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 1947              		.loc 1 955 10
 1948 00ba 0023     		movs	r3, #0
 956:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 1949              		.loc 1 956 1
 1950 00bc 1846     		mov	r0, r3
 1951 00be 0837     		adds	r7, r7, #8
 1952              	.LCFI74:
 1953              		.cfi_def_cfa_offset 8
 1954 00c0 BD46     		mov	sp, r7
 1955              	.LCFI75:
 1956              		.cfi_def_cfa_register 13
 1957              		@ sp needed
 1958 00c2 80BD     		pop	{r7, pc}
 1959              		.cfi_endproc
 1960              	.LFE139:
 1962              		.section	.text.HAL_IRDA_AbortTransmit,"ax",%progbits
 1963              		.align	1
 1964              		.global	HAL_IRDA_AbortTransmit
 1965              		.syntax unified
 1966              		.thumb
 1967              		.thumb_func
 1968              		.fpu fpv4-sp-d16
 1970              	HAL_IRDA_AbortTransmit:
 1971              	.LFB140:
 957:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 958:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
 959:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
 960:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
 961:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
ARM GAS  /tmp/ccJhy18e.s 			page 52


 962:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
 963:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
 964:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
 965:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
 966:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
 967:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
 968:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
 969:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** */
 970:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit(IRDA_HandleTypeDef *hirda)
 971:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 1972              		.loc 1 971 1
 1973              		.cfi_startproc
 1974              		@ args = 0, pretend = 0, frame = 8
 1975              		@ frame_needed = 1, uses_anonymous_args = 0
 1976 0000 80B5     		push	{r7, lr}
 1977              	.LCFI76:
 1978              		.cfi_def_cfa_offset 8
 1979              		.cfi_offset 7, -8
 1980              		.cfi_offset 14, -4
 1981 0002 82B0     		sub	sp, sp, #8
 1982              	.LCFI77:
 1983              		.cfi_def_cfa_offset 16
 1984 0004 00AF     		add	r7, sp, #0
 1985              	.LCFI78:
 1986              		.cfi_def_cfa_register 7
 1987 0006 7860     		str	r0, [r7, #4]
 972:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
 973:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 1988              		.loc 1 973 3
 1989 0008 7B68     		ldr	r3, [r7, #4]
 1990 000a 1B68     		ldr	r3, [r3]
 1991 000c DA68     		ldr	r2, [r3, #12]
 1992 000e 7B68     		ldr	r3, [r7, #4]
 1993 0010 1B68     		ldr	r3, [r3]
 1994 0012 22F0C002 		bic	r2, r2, #192
 1995 0016 DA60     		str	r2, [r3, #12]
 974:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 975:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
 976:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 1996              		.loc 1 976 6
 1997 0018 7B68     		ldr	r3, [r7, #4]
 1998 001a 1B68     		ldr	r3, [r3]
 1999 001c 5B69     		ldr	r3, [r3, #20]
 2000 001e 03F08003 		and	r3, r3, #128
 2001              		.loc 1 976 5
 2002 0022 002B     		cmp	r3, #0
 2003 0024 14D0     		beq	.L85
 977:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 978:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 2004              		.loc 1 978 5
 2005 0026 7B68     		ldr	r3, [r7, #4]
 2006 0028 1B68     		ldr	r3, [r3]
 2007 002a 5A69     		ldr	r2, [r3, #20]
 2008 002c 7B68     		ldr	r3, [r7, #4]
 2009 002e 1B68     		ldr	r3, [r3]
 2010 0030 22F08002 		bic	r2, r2, #128
 2011 0034 5A61     		str	r2, [r3, #20]
ARM GAS  /tmp/ccJhy18e.s 			page 53


 979:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 980:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
 981:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 2012              		.loc 1 981 13
 2013 0036 7B68     		ldr	r3, [r7, #4]
 2014 0038 DB6A     		ldr	r3, [r3, #44]
 2015              		.loc 1 981 7
 2016 003a 002B     		cmp	r3, #0
 2017 003c 08D0     		beq	.L85
 982:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
 983:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
 984:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
 985:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
 2018              		.loc 1 985 12
 2019 003e 7B68     		ldr	r3, [r7, #4]
 2020 0040 DB6A     		ldr	r3, [r3, #44]
 2021              		.loc 1 985 40
 2022 0042 0022     		movs	r2, #0
 2023 0044 1A65     		str	r2, [r3, #80]
 986:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 987:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmatx);
 2024              		.loc 1 987 7
 2025 0046 7B68     		ldr	r3, [r7, #4]
 2026 0048 DB6A     		ldr	r3, [r3, #44]
 2027 004a 1846     		mov	r0, r3
 2028 004c FFF7FEFF 		bl	HAL_DMA_Abort
 2029              	.L85:
 988:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 989:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 990:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 991:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Reset Tx transfer counter */
 992:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 2030              		.loc 1 992 22
 2031 0050 7B68     		ldr	r3, [r7, #4]
 2032 0052 0022     		movs	r2, #0
 2033 0054 5A84     		strh	r2, [r3, #34]	@ movhi
 993:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 994:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
 995:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 2034              		.loc 1 995 17
 2035 0056 7B68     		ldr	r3, [r7, #4]
 2036 0058 2022     		movs	r2, #32
 2037 005a 83F83520 		strb	r2, [r3, #53]
 996:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
 997:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 2038              		.loc 1 997 10
 2039 005e 0023     		movs	r3, #0
 998:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 2040              		.loc 1 998 1
 2041 0060 1846     		mov	r0, r3
 2042 0062 0837     		adds	r7, r7, #8
 2043              	.LCFI79:
 2044              		.cfi_def_cfa_offset 8
 2045 0064 BD46     		mov	sp, r7
 2046              	.LCFI80:
 2047              		.cfi_def_cfa_register 13
 2048              		@ sp needed
ARM GAS  /tmp/ccJhy18e.s 			page 54


 2049 0066 80BD     		pop	{r7, pc}
 2050              		.cfi_endproc
 2051              	.LFE140:
 2053              		.section	.text.HAL_IRDA_AbortReceive,"ax",%progbits
 2054              		.align	1
 2055              		.global	HAL_IRDA_AbortReceive
 2056              		.syntax unified
 2057              		.thumb
 2058              		.thumb_func
 2059              		.fpu fpv4-sp-d16
 2061              	HAL_IRDA_AbortReceive:
 2062              	.LFB141:
 999:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1000:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1001:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1002:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1003:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1004:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1005:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1006:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1007:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1008:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1009:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1010:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1011:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** */
1012:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive(IRDA_HandleTypeDef *hirda)
1013:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 2063              		.loc 1 1013 1
 2064              		.cfi_startproc
 2065              		@ args = 0, pretend = 0, frame = 8
 2066              		@ frame_needed = 1, uses_anonymous_args = 0
 2067 0000 80B5     		push	{r7, lr}
 2068              	.LCFI81:
 2069              		.cfi_def_cfa_offset 8
 2070              		.cfi_offset 7, -8
 2071              		.cfi_offset 14, -4
 2072 0002 82B0     		sub	sp, sp, #8
 2073              	.LCFI82:
 2074              		.cfi_def_cfa_offset 16
 2075 0004 00AF     		add	r7, sp, #0
 2076              	.LCFI83:
 2077              		.cfi_def_cfa_register 7
 2078 0006 7860     		str	r0, [r7, #4]
1014:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1015:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2079              		.loc 1 1015 3
 2080 0008 7B68     		ldr	r3, [r7, #4]
 2081 000a 1B68     		ldr	r3, [r3]
 2082 000c DA68     		ldr	r2, [r3, #12]
 2083 000e 7B68     		ldr	r3, [r7, #4]
 2084 0010 1B68     		ldr	r3, [r3]
 2085 0012 22F49072 		bic	r2, r2, #288
 2086 0016 DA60     		str	r2, [r3, #12]
1016:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2087              		.loc 1 1016 3
 2088 0018 7B68     		ldr	r3, [r7, #4]
 2089 001a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJhy18e.s 			page 55


 2090 001c 5A69     		ldr	r2, [r3, #20]
 2091 001e 7B68     		ldr	r3, [r7, #4]
 2092 0020 1B68     		ldr	r3, [r3]
 2093 0022 22F00102 		bic	r2, r2, #1
 2094 0026 5A61     		str	r2, [r3, #20]
1017:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1018:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1019:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 2095              		.loc 1 1019 6
 2096 0028 7B68     		ldr	r3, [r7, #4]
 2097 002a 1B68     		ldr	r3, [r3]
 2098 002c 5B69     		ldr	r3, [r3, #20]
 2099 002e 03F04003 		and	r3, r3, #64
 2100              		.loc 1 1019 5
 2101 0032 002B     		cmp	r3, #0
 2102 0034 14D0     		beq	.L88
1020:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1021:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 2103              		.loc 1 1021 5
 2104 0036 7B68     		ldr	r3, [r7, #4]
 2105 0038 1B68     		ldr	r3, [r3]
 2106 003a 5A69     		ldr	r2, [r3, #20]
 2107 003c 7B68     		ldr	r3, [r7, #4]
 2108 003e 1B68     		ldr	r3, [r3]
 2109 0040 22F04002 		bic	r2, r2, #64
 2110 0044 5A61     		str	r2, [r3, #20]
1022:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1023:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1024:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 2111              		.loc 1 1024 13
 2112 0046 7B68     		ldr	r3, [r7, #4]
 2113 0048 1B6B     		ldr	r3, [r3, #48]
 2114              		.loc 1 1024 7
 2115 004a 002B     		cmp	r3, #0
 2116 004c 08D0     		beq	.L88
1025:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1026:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback to Null. 
1027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          No call back execution at end of DMA abort procedure */
1028:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
 2117              		.loc 1 1028 12
 2118 004e 7B68     		ldr	r3, [r7, #4]
 2119 0050 1B6B     		ldr	r3, [r3, #48]
 2120              		.loc 1 1028 40
 2121 0052 0022     		movs	r2, #0
 2122 0054 1A65     		str	r2, [r3, #80]
1029:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1030:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_DMA_Abort(hirda->hdmarx);
 2123              		.loc 1 1030 7
 2124 0056 7B68     		ldr	r3, [r7, #4]
 2125 0058 1B6B     		ldr	r3, [r3, #48]
 2126 005a 1846     		mov	r0, r3
 2127 005c FFF7FEFF 		bl	HAL_DMA_Abort
 2128              	.L88:
1031:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1032:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1033:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1034:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Reset Rx transfer counter */
ARM GAS  /tmp/ccJhy18e.s 			page 56


1035:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 2129              		.loc 1 1035 22
 2130 0060 7B68     		ldr	r3, [r7, #4]
 2131 0062 0022     		movs	r2, #0
 2132 0064 5A85     		strh	r2, [r3, #42]	@ movhi
1036:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1037:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1038:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 2133              		.loc 1 1038 18
 2134 0066 7B68     		ldr	r3, [r7, #4]
 2135 0068 2022     		movs	r2, #32
 2136 006a 83F83620 		strb	r2, [r3, #54]
1039:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1040:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 2137              		.loc 1 1040 10
 2138 006e 0023     		movs	r3, #0
1041:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 2139              		.loc 1 1041 1
 2140 0070 1846     		mov	r0, r3
 2141 0072 0837     		adds	r7, r7, #8
 2142              	.LCFI84:
 2143              		.cfi_def_cfa_offset 8
 2144 0074 BD46     		mov	sp, r7
 2145              	.LCFI85:
 2146              		.cfi_def_cfa_register 13
 2147              		@ sp needed
 2148 0076 80BD     		pop	{r7, pc}
 2149              		.cfi_endproc
 2150              	.LFE141:
 2152              		.section	.text.HAL_IRDA_Abort_IT,"ax",%progbits
 2153              		.align	1
 2154              		.global	HAL_IRDA_Abort_IT
 2155              		.syntax unified
 2156              		.thumb
 2157              		.thumb_func
 2158              		.fpu fpv4-sp-d16
 2160              	HAL_IRDA_Abort_IT:
 2161              	.LFB142:
1042:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1043:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1044:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1045:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1046:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1047:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1048:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1049:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1050:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1051:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1052:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1053:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1054:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1055:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1056:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** */
1057:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_Abort_IT(IRDA_HandleTypeDef *hirda)
1058:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 2162              		.loc 1 1058 1
 2163              		.cfi_startproc
ARM GAS  /tmp/ccJhy18e.s 			page 57


 2164              		@ args = 0, pretend = 0, frame = 16
 2165              		@ frame_needed = 1, uses_anonymous_args = 0
 2166 0000 80B5     		push	{r7, lr}
 2167              	.LCFI86:
 2168              		.cfi_def_cfa_offset 8
 2169              		.cfi_offset 7, -8
 2170              		.cfi_offset 14, -4
 2171 0002 84B0     		sub	sp, sp, #16
 2172              	.LCFI87:
 2173              		.cfi_def_cfa_offset 24
 2174 0004 00AF     		add	r7, sp, #0
 2175              	.LCFI88:
 2176              		.cfi_def_cfa_register 7
 2177 0006 7860     		str	r0, [r7, #4]
1059:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     uint32_t AbortCplt = 1U;
 2178              		.loc 1 1059 14
 2179 0008 0123     		movs	r3, #1
 2180 000a FB60     		str	r3, [r7, #12]
1060:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1061:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1062:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_
 2181              		.loc 1 1062 3
 2182 000c 7B68     		ldr	r3, [r7, #4]
 2183 000e 1B68     		ldr	r3, [r3]
 2184 0010 DA68     		ldr	r2, [r3, #12]
 2185 0012 7B68     		ldr	r3, [r7, #4]
 2186 0014 1B68     		ldr	r3, [r3]
 2187 0016 22F4F072 		bic	r2, r2, #480
 2188 001a DA60     		str	r2, [r3, #12]
1063:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2189              		.loc 1 1063 3
 2190 001c 7B68     		ldr	r3, [r7, #4]
 2191 001e 1B68     		ldr	r3, [r3]
 2192 0020 5A69     		ldr	r2, [r3, #20]
 2193 0022 7B68     		ldr	r3, [r7, #4]
 2194 0024 1B68     		ldr	r3, [r3]
 2195 0026 22F00102 		bic	r2, r2, #1
 2196 002a 5A61     		str	r2, [r3, #20]
1064:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1065:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to IRDA Handle, DMA Abort complete callbacks sh
1066:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      before any call to DMA Abort functions */
1067:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Tx Handle is valid */
1068:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->hdmatx != NULL)
 2197              		.loc 1 1068 11
 2198 002c 7B68     		ldr	r3, [r7, #4]
 2199 002e DB6A     		ldr	r3, [r3, #44]
 2200              		.loc 1 1068 5
 2201 0030 002B     		cmp	r3, #0
 2202 0032 0FD0     		beq	.L91
1069:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1070:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Tx request if enabled.
1071:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****        Otherwise, set it to NULL */
1072:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 2203              		.loc 1 1072 8
 2204 0034 7B68     		ldr	r3, [r7, #4]
 2205 0036 1B68     		ldr	r3, [r3]
 2206 0038 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccJhy18e.s 			page 58


 2207 003a 03F08003 		and	r3, r3, #128
 2208              		.loc 1 1072 7
 2209 003e 002B     		cmp	r3, #0
 2210 0040 04D0     		beq	.L92
1073:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1074:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxAbortCallback;
 2211              		.loc 1 1074 12
 2212 0042 7B68     		ldr	r3, [r7, #4]
 2213 0044 DB6A     		ldr	r3, [r3, #44]
 2214              		.loc 1 1074 40
 2215 0046 3E4A     		ldr	r2, .L101
 2216 0048 1A65     		str	r2, [r3, #80]
 2217 004a 03E0     		b	.L91
 2218              	.L92:
1075:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1076:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     else
1077:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1078:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = NULL;
 2219              		.loc 1 1078 12
 2220 004c 7B68     		ldr	r3, [r7, #4]
 2221 004e DB6A     		ldr	r3, [r3, #44]
 2222              		.loc 1 1078 40
 2223 0050 0022     		movs	r2, #0
 2224 0052 1A65     		str	r2, [r3, #80]
 2225              	.L91:
1079:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1080:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1081:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Rx Handle is valid */
1082:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->hdmarx != NULL)
 2226              		.loc 1 1082 11
 2227 0054 7B68     		ldr	r3, [r7, #4]
 2228 0056 1B6B     		ldr	r3, [r3, #48]
 2229              		.loc 1 1082 5
 2230 0058 002B     		cmp	r3, #0
 2231 005a 0FD0     		beq	.L93
1083:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1084:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Set DMA Abort Complete callback if IRDA DMA Rx request if enabled.
1085:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****        Otherwise, set it to NULL */
1086:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 2232              		.loc 1 1086 8
 2233 005c 7B68     		ldr	r3, [r7, #4]
 2234 005e 1B68     		ldr	r3, [r3]
 2235 0060 5B69     		ldr	r3, [r3, #20]
 2236 0062 03F04003 		and	r3, r3, #64
 2237              		.loc 1 1086 7
 2238 0066 002B     		cmp	r3, #0
 2239 0068 04D0     		beq	.L94
1087:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1088:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxAbortCallback;
 2240              		.loc 1 1088 12
 2241 006a 7B68     		ldr	r3, [r7, #4]
 2242 006c 1B6B     		ldr	r3, [r3, #48]
 2243              		.loc 1 1088 40
 2244 006e 354A     		ldr	r2, .L101+4
 2245 0070 1A65     		str	r2, [r3, #80]
 2246 0072 03E0     		b	.L93
 2247              	.L94:
ARM GAS  /tmp/ccJhy18e.s 			page 59


1089:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1090:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     else
1091:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1092:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = NULL;
 2248              		.loc 1 1092 12
 2249 0074 7B68     		ldr	r3, [r7, #4]
 2250 0076 1B6B     		ldr	r3, [r3, #48]
 2251              		.loc 1 1092 40
 2252 0078 0022     		movs	r2, #0
 2253 007a 1A65     		str	r2, [r3, #80]
 2254              	.L93:
1093:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1094:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1095:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1096:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1097:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 2255              		.loc 1 1097 6
 2256 007c 7B68     		ldr	r3, [r7, #4]
 2257 007e 1B68     		ldr	r3, [r3]
 2258 0080 5B69     		ldr	r3, [r3, #20]
 2259 0082 03F08003 		and	r3, r3, #128
 2260              		.loc 1 1097 5
 2261 0086 002B     		cmp	r3, #0
 2262 0088 1AD0     		beq	.L95
1098:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1099:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable DMA Tx at IRDA level */
1100:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 2263              		.loc 1 1100 5
 2264 008a 7B68     		ldr	r3, [r7, #4]
 2265 008c 1B68     		ldr	r3, [r3]
 2266 008e 5A69     		ldr	r2, [r3, #20]
 2267 0090 7B68     		ldr	r3, [r7, #4]
 2268 0092 1B68     		ldr	r3, [r3]
 2269 0094 22F08002 		bic	r2, r2, #128
 2270 0098 5A61     		str	r2, [r3, #20]
1101:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1102:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use non blocking DMA Abort API (callback) */
1103:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 2271              		.loc 1 1103 13
 2272 009a 7B68     		ldr	r3, [r7, #4]
 2273 009c DB6A     		ldr	r3, [r3, #44]
 2274              		.loc 1 1103 7
 2275 009e 002B     		cmp	r3, #0
 2276 00a0 0ED0     		beq	.L95
1104:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1105:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* IRDA Tx DMA Abort callback has already been initialised : 
1106:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1107:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1108:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA TX */
1109:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
 2277              		.loc 1 1109 10
 2278 00a2 7B68     		ldr	r3, [r7, #4]
 2279 00a4 DB6A     		ldr	r3, [r3, #44]
 2280 00a6 1846     		mov	r0, r3
 2281 00a8 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2282 00ac 0346     		mov	r3, r0
 2283              		.loc 1 1109 9
ARM GAS  /tmp/ccJhy18e.s 			page 60


 2284 00ae 002B     		cmp	r3, #0
 2285 00b0 04D0     		beq	.L96
1110:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1111:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback = NULL;
 2286              		.loc 1 1111 14
 2287 00b2 7B68     		ldr	r3, [r7, #4]
 2288 00b4 DB6A     		ldr	r3, [r3, #44]
 2289              		.loc 1 1111 42
 2290 00b6 0022     		movs	r2, #0
 2291 00b8 1A65     		str	r2, [r3, #80]
 2292 00ba 01E0     		b	.L95
 2293              	.L96:
1112:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1113:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
1114:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1115:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x00U;
 2294              		.loc 1 1115 19
 2295 00bc 0023     		movs	r3, #0
 2296 00be FB60     		str	r3, [r7, #12]
 2297              	.L95:
1116:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1117:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1118:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1119:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1120:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1121:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 2298              		.loc 1 1121 6
 2299 00c0 7B68     		ldr	r3, [r7, #4]
 2300 00c2 1B68     		ldr	r3, [r3]
 2301 00c4 5B69     		ldr	r3, [r3, #20]
 2302 00c6 03F04003 		and	r3, r3, #64
 2303              		.loc 1 1121 5
 2304 00ca 002B     		cmp	r3, #0
 2305 00cc 1CD0     		beq	.L97
1122:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1123:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 2306              		.loc 1 1123 5
 2307 00ce 7B68     		ldr	r3, [r7, #4]
 2308 00d0 1B68     		ldr	r3, [r3]
 2309 00d2 5A69     		ldr	r2, [r3, #20]
 2310 00d4 7B68     		ldr	r3, [r7, #4]
 2311 00d6 1B68     		ldr	r3, [r3]
 2312 00d8 22F04002 		bic	r2, r2, #64
 2313 00dc 5A61     		str	r2, [r3, #20]
1124:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1125:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use non blocking DMA Abort API (callback) */
1126:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 2314              		.loc 1 1126 13
 2315 00de 7B68     		ldr	r3, [r7, #4]
 2316 00e0 1B6B     		ldr	r3, [r3, #48]
 2317              		.loc 1 1126 7
 2318 00e2 002B     		cmp	r3, #0
 2319 00e4 10D0     		beq	.L97
1127:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1128:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* IRDA Rx DMA Abort callback has already been initialised : 
1129:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1130:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccJhy18e.s 			page 61


1131:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA RX */
1132:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 2320              		.loc 1 1132 10
 2321 00e6 7B68     		ldr	r3, [r7, #4]
 2322 00e8 1B6B     		ldr	r3, [r3, #48]
 2323 00ea 1846     		mov	r0, r3
 2324 00ec FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2325 00f0 0346     		mov	r3, r0
 2326              		.loc 1 1132 9
 2327 00f2 002B     		cmp	r3, #0
 2328 00f4 06D0     		beq	.L98
1133:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1134:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback = NULL;
 2329              		.loc 1 1134 14
 2330 00f6 7B68     		ldr	r3, [r7, #4]
 2331 00f8 1B6B     		ldr	r3, [r3, #48]
 2332              		.loc 1 1134 42
 2333 00fa 0022     		movs	r2, #0
 2334 00fc 1A65     		str	r2, [r3, #80]
1135:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x01U;
 2335              		.loc 1 1135 19
 2336 00fe 0123     		movs	r3, #1
 2337 0100 FB60     		str	r3, [r7, #12]
 2338 0102 01E0     		b	.L97
 2339              	.L98:
1136:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1137:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
1138:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1139:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         AbortCplt = 0x00U;
 2340              		.loc 1 1139 19
 2341 0104 0023     		movs	r3, #0
 2342 0106 FB60     		str	r3, [r7, #12]
 2343              	.L97:
1140:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1141:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1142:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1143:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1144:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1145:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(AbortCplt == 0x01U)
 2344              		.loc 1 1145 5
 2345 0108 FB68     		ldr	r3, [r7, #12]
 2346 010a 012B     		cmp	r3, #1
 2347 010c 13D1     		bne	.L99
1146:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1147:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Reset Tx and Rx transfer counters */
1148:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0x00U; 
 2348              		.loc 1 1148 24
 2349 010e 7B68     		ldr	r3, [r7, #4]
 2350 0110 0022     		movs	r2, #0
 2351 0112 5A84     		strh	r2, [r3, #34]	@ movhi
1149:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 2352              		.loc 1 1149 24
 2353 0114 7B68     		ldr	r3, [r7, #4]
 2354 0116 0022     		movs	r2, #0
 2355 0118 5A85     		strh	r2, [r3, #42]	@ movhi
1150:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1151:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Reset ErrorCode */
ARM GAS  /tmp/ccJhy18e.s 			page 62


1152:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 2356              		.loc 1 1152 22
 2357 011a 7B68     		ldr	r3, [r7, #4]
 2358 011c 0022     		movs	r2, #0
 2359 011e 9A63     		str	r2, [r3, #56]
1153:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1154:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Restore hirda->gState and hirda->RxState to Ready */
1155:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState  = HAL_IRDA_STATE_READY;
 2360              		.loc 1 1155 20
 2361 0120 7B68     		ldr	r3, [r7, #4]
 2362 0122 2022     		movs	r2, #32
 2363 0124 83F83520 		strb	r2, [r3, #53]
1156:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 2364              		.loc 1 1156 20
 2365 0128 7B68     		ldr	r3, [r7, #4]
 2366 012a 2022     		movs	r2, #32
 2367 012c 83F83620 		strb	r2, [r3, #54]
1157:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1158:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1159:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_AbortCpltCallback(hirda);
 2368              		.loc 1 1159 5
 2369 0130 7868     		ldr	r0, [r7, #4]
 2370 0132 FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 2371              	.L99:
1160:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1161:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1162:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 2372              		.loc 1 1162 10
 2373 0136 0023     		movs	r3, #0
1163:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 2374              		.loc 1 1163 1
 2375 0138 1846     		mov	r0, r3
 2376 013a 1037     		adds	r7, r7, #16
 2377              	.LCFI89:
 2378              		.cfi_def_cfa_offset 8
 2379 013c BD46     		mov	sp, r7
 2380              	.LCFI90:
 2381              		.cfi_def_cfa_register 13
 2382              		@ sp needed
 2383 013e 80BD     		pop	{r7, pc}
 2384              	.L102:
 2385              		.align	2
 2386              	.L101:
 2387 0140 00000000 		.word	IRDA_DMATxAbortCallback
 2388 0144 00000000 		.word	IRDA_DMARxAbortCallback
 2389              		.cfi_endproc
 2390              	.LFE142:
 2392              		.section	.text.HAL_IRDA_AbortTransmit_IT,"ax",%progbits
 2393              		.align	1
 2394              		.global	HAL_IRDA_AbortTransmit_IT
 2395              		.syntax unified
 2396              		.thumb
 2397              		.thumb_func
 2398              		.fpu fpv4-sp-d16
 2400              	HAL_IRDA_AbortTransmit_IT:
 2401              	.LFB143:
1164:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccJhy18e.s 			page 63


1165:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1166:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1167:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1168:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1169:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1170:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1171:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1172:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1173:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1174:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1175:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1176:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1177:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1178:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** */
1179:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortTransmit_IT(IRDA_HandleTypeDef *hirda)
1180:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 2402              		.loc 1 1180 1
 2403              		.cfi_startproc
 2404              		@ args = 0, pretend = 0, frame = 8
 2405              		@ frame_needed = 1, uses_anonymous_args = 0
 2406 0000 80B5     		push	{r7, lr}
 2407              	.LCFI91:
 2408              		.cfi_def_cfa_offset 8
 2409              		.cfi_offset 7, -8
 2410              		.cfi_offset 14, -4
 2411 0002 82B0     		sub	sp, sp, #8
 2412              	.LCFI92:
 2413              		.cfi_def_cfa_offset 16
 2414 0004 00AF     		add	r7, sp, #0
 2415              	.LCFI93:
 2416              		.cfi_def_cfa_register 7
 2417 0006 7860     		str	r0, [r7, #4]
1181:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1182:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 2418              		.loc 1 1182 3
 2419 0008 7B68     		ldr	r3, [r7, #4]
 2420 000a 1B68     		ldr	r3, [r3]
 2421 000c DA68     		ldr	r2, [r3, #12]
 2422 000e 7B68     		ldr	r3, [r7, #4]
 2423 0010 1B68     		ldr	r3, [r3]
 2424 0012 22F0C002 		bic	r2, r2, #192
 2425 0016 DA60     		str	r2, [r3, #12]
1183:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1184:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Tx request if enabled */
1185:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT))
 2426              		.loc 1 1185 6
 2427 0018 7B68     		ldr	r3, [r7, #4]
 2428 001a 1B68     		ldr	r3, [r3]
 2429 001c 5B69     		ldr	r3, [r3, #20]
 2430 001e 03F08003 		and	r3, r3, #128
 2431              		.loc 1 1185 5
 2432 0022 002B     		cmp	r3, #0
 2433 0024 2AD0     		beq	.L104
1186:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1187:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 2434              		.loc 1 1187 5
 2435 0026 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 64


 2436 0028 1B68     		ldr	r3, [r3]
 2437 002a 5A69     		ldr	r2, [r3, #20]
 2438 002c 7B68     		ldr	r3, [r7, #4]
 2439 002e 1B68     		ldr	r3, [r3]
 2440 0030 22F08002 		bic	r2, r2, #128
 2441 0034 5A61     		str	r2, [r3, #20]
1188:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1189:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Tx channel : use blocking DMA Abort API (no callback) */
1190:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmatx != NULL)
 2442              		.loc 1 1190 13
 2443 0036 7B68     		ldr	r3, [r7, #4]
 2444 0038 DB6A     		ldr	r3, [r3, #44]
 2445              		.loc 1 1190 7
 2446 003a 002B     		cmp	r3, #0
 2447 003c 13D0     		beq	.L105
1191:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1192:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback : 
1193:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1194:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmatx->XferAbortCallback = IRDA_DMATxOnlyAbortCallback;
 2448              		.loc 1 1194 12
 2449 003e 7B68     		ldr	r3, [r7, #4]
 2450 0040 DB6A     		ldr	r3, [r3, #44]
 2451              		.loc 1 1194 40
 2452 0042 164A     		ldr	r2, .L108
 2453 0044 1A65     		str	r2, [r3, #80]
1195:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1196:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA TX */
1197:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmatx) != HAL_OK)
 2454              		.loc 1 1197 10
 2455 0046 7B68     		ldr	r3, [r7, #4]
 2456 0048 DB6A     		ldr	r3, [r3, #44]
 2457 004a 1846     		mov	r0, r3
 2458 004c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2459 0050 0346     		mov	r3, r0
 2460              		.loc 1 1197 9
 2461 0052 002B     		cmp	r3, #0
 2462 0054 1CD0     		beq	.L106
1198:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1199:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Call Directly hirda->hdmatx->XferAbortCallback function in case of error */
1200:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmatx->XferAbortCallback(hirda->hdmatx);
 2463              		.loc 1 1200 14
 2464 0056 7B68     		ldr	r3, [r7, #4]
 2465 0058 DB6A     		ldr	r3, [r3, #44]
 2466              		.loc 1 1200 22
 2467 005a 1B6D     		ldr	r3, [r3, #80]
 2468              		.loc 1 1200 47
 2469 005c 7A68     		ldr	r2, [r7, #4]
 2470 005e D26A     		ldr	r2, [r2, #44]
 2471              		.loc 1 1200 9
 2472 0060 1046     		mov	r0, r2
 2473 0062 9847     		blx	r3
 2474              	.LVL0:
 2475 0064 14E0     		b	.L106
 2476              	.L105:
1201:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1202:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1203:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     else
ARM GAS  /tmp/ccJhy18e.s 			page 65


1204:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1205:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Reset Tx transfer counter */
1206:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->TxXferCount = 0x00U;
 2477              		.loc 1 1206 26
 2478 0066 7B68     		ldr	r3, [r7, #4]
 2479 0068 0022     		movs	r2, #0
 2480 006a 5A84     		strh	r2, [r3, #34]	@ movhi
1207:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1208:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Restore hirda->gState to Ready */
1209:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->gState = HAL_IRDA_STATE_READY;
 2481              		.loc 1 1209 21
 2482 006c 7B68     		ldr	r3, [r7, #4]
 2483 006e 2022     		movs	r2, #32
 2484 0070 83F83520 		strb	r2, [r3, #53]
1210:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
1211:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1212:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_AbortTransmitCpltCallback(hirda);
 2485              		.loc 1 1212 7
 2486 0074 7868     		ldr	r0, [r7, #4]
 2487 0076 FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 2488 007a 09E0     		b	.L106
 2489              	.L104:
1213:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1214:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1215:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
1216:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1217:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Reset Tx transfer counter */
1218:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0x00U;
 2490              		.loc 1 1218 24
 2491 007c 7B68     		ldr	r3, [r7, #4]
 2492 007e 0022     		movs	r2, #0
 2493 0080 5A84     		strh	r2, [r3, #34]	@ movhi
1219:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1220:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Restore hirda->gState to Ready */
1221:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->gState = HAL_IRDA_STATE_READY;
 2494              		.loc 1 1221 19
 2495 0082 7B68     		ldr	r3, [r7, #4]
 2496 0084 2022     		movs	r2, #32
 2497 0086 83F83520 		strb	r2, [r3, #53]
1222:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1223:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1224:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_AbortTransmitCpltCallback(hirda);
 2498              		.loc 1 1224 5
 2499 008a 7868     		ldr	r0, [r7, #4]
 2500 008c FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
 2501              	.L106:
1225:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1226:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1227:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 2502              		.loc 1 1227 10
 2503 0090 0023     		movs	r3, #0
1228:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 2504              		.loc 1 1228 1
 2505 0092 1846     		mov	r0, r3
 2506 0094 0837     		adds	r7, r7, #8
 2507              	.LCFI94:
 2508              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJhy18e.s 			page 66


 2509 0096 BD46     		mov	sp, r7
 2510              	.LCFI95:
 2511              		.cfi_def_cfa_register 13
 2512              		@ sp needed
 2513 0098 80BD     		pop	{r7, pc}
 2514              	.L109:
 2515 009a 00BF     		.align	2
 2516              	.L108:
 2517 009c 00000000 		.word	IRDA_DMATxOnlyAbortCallback
 2518              		.cfi_endproc
 2519              	.LFE143:
 2521              		.section	.text.HAL_IRDA_AbortReceive_IT,"ax",%progbits
 2522              		.align	1
 2523              		.global	HAL_IRDA_AbortReceive_IT
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2527              		.fpu fpv4-sp-d16
 2529              	HAL_IRDA_AbortReceive_IT:
 2530              	.LFB144:
1229:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1230:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1231:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
1232:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1233:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1234:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         This procedure performs following operations :
1235:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable PPP Interrupts
1236:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1237:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1238:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - Set handle State to READY
1239:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *           - At abort completion, call user abort complete callback
1240:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
1241:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1242:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1243:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** */
1244:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_StatusTypeDef HAL_IRDA_AbortReceive_IT(IRDA_HandleTypeDef *hirda)
1245:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 2531              		.loc 1 1245 1
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 8
 2534              		@ frame_needed = 1, uses_anonymous_args = 0
 2535 0000 80B5     		push	{r7, lr}
 2536              	.LCFI96:
 2537              		.cfi_def_cfa_offset 8
 2538              		.cfi_offset 7, -8
 2539              		.cfi_offset 14, -4
 2540 0002 82B0     		sub	sp, sp, #8
 2541              	.LCFI97:
 2542              		.cfi_def_cfa_offset 16
 2543 0004 00AF     		add	r7, sp, #0
 2544              	.LCFI98:
 2545              		.cfi_def_cfa_register 7
 2546 0006 7860     		str	r0, [r7, #4]
1246:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1247:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 2547              		.loc 1 1247 3
 2548 0008 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 67


 2549 000a 1B68     		ldr	r3, [r3]
 2550 000c DA68     		ldr	r2, [r3, #12]
 2551 000e 7B68     		ldr	r3, [r7, #4]
 2552 0010 1B68     		ldr	r3, [r3]
 2553 0012 22F49072 		bic	r2, r2, #288
 2554 0016 DA60     		str	r2, [r3, #12]
1248:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 2555              		.loc 1 1248 3
 2556 0018 7B68     		ldr	r3, [r7, #4]
 2557 001a 1B68     		ldr	r3, [r3]
 2558 001c 5A69     		ldr	r2, [r3, #20]
 2559 001e 7B68     		ldr	r3, [r7, #4]
 2560 0020 1B68     		ldr	r3, [r3]
 2561 0022 22F00102 		bic	r2, r2, #1
 2562 0026 5A61     		str	r2, [r3, #20]
1249:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1250:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA DMA Rx request if enabled */
1251:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 2563              		.loc 1 1251 6
 2564 0028 7B68     		ldr	r3, [r7, #4]
 2565 002a 1B68     		ldr	r3, [r3]
 2566 002c 5B69     		ldr	r3, [r3, #20]
 2567 002e 03F04003 		and	r3, r3, #64
 2568              		.loc 1 1251 5
 2569 0032 002B     		cmp	r3, #0
 2570 0034 2AD0     		beq	.L111
1252:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1253:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 2571              		.loc 1 1253 5
 2572 0036 7B68     		ldr	r3, [r7, #4]
 2573 0038 1B68     		ldr	r3, [r3]
 2574 003a 5A69     		ldr	r2, [r3, #20]
 2575 003c 7B68     		ldr	r3, [r7, #4]
 2576 003e 1B68     		ldr	r3, [r3]
 2577 0040 22F04002 		bic	r2, r2, #64
 2578 0044 5A61     		str	r2, [r3, #20]
1254:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1255:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Abort the IRDA DMA Rx channel : use blocking DMA Abort API (no callback) */
1256:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmarx != NULL)
 2579              		.loc 1 1256 13
 2580 0046 7B68     		ldr	r3, [r7, #4]
 2581 0048 1B6B     		ldr	r3, [r3, #48]
 2582              		.loc 1 1256 7
 2583 004a 002B     		cmp	r3, #0
 2584 004c 13D0     		beq	.L112
1257:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1258:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Set the IRDA DMA Abort callback : 
1259:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          will lead to call HAL_IRDA_AbortCpltCallback() at end of DMA abort procedure */
1260:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->hdmarx->XferAbortCallback = IRDA_DMARxOnlyAbortCallback;
 2585              		.loc 1 1260 12
 2586 004e 7B68     		ldr	r3, [r7, #4]
 2587 0050 1B6B     		ldr	r3, [r3, #48]
 2588              		.loc 1 1260 40
 2589 0052 164A     		ldr	r2, .L115
 2590 0054 1A65     		str	r2, [r3, #80]
1261:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1262:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Abort DMA RX */
ARM GAS  /tmp/ccJhy18e.s 			page 68


1263:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 2591              		.loc 1 1263 10
 2592 0056 7B68     		ldr	r3, [r7, #4]
 2593 0058 1B6B     		ldr	r3, [r3, #48]
 2594 005a 1846     		mov	r0, r3
 2595 005c FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2596 0060 0346     		mov	r3, r0
 2597              		.loc 1 1263 9
 2598 0062 002B     		cmp	r3, #0
 2599 0064 1CD0     		beq	.L113
1264:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1265:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
1266:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 2600              		.loc 1 1266 14
 2601 0066 7B68     		ldr	r3, [r7, #4]
 2602 0068 1B6B     		ldr	r3, [r3, #48]
 2603              		.loc 1 1266 22
 2604 006a 1B6D     		ldr	r3, [r3, #80]
 2605              		.loc 1 1266 47
 2606 006c 7A68     		ldr	r2, [r7, #4]
 2607 006e 126B     		ldr	r2, [r2, #48]
 2608              		.loc 1 1266 9
 2609 0070 1046     		mov	r0, r2
 2610 0072 9847     		blx	r3
 2611              	.LVL1:
 2612 0074 14E0     		b	.L113
 2613              	.L112:
1267:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1268:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1269:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     else
1270:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1271:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Reset Rx transfer counter */
1272:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxXferCount = 0x00U;
 2614              		.loc 1 1272 26
 2615 0076 7B68     		ldr	r3, [r7, #4]
 2616 0078 0022     		movs	r2, #0
 2617 007a 5A85     		strh	r2, [r3, #42]	@ movhi
1273:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1274:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Restore hirda->RxState to Ready */
1275:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
 2618              		.loc 1 1275 22
 2619 007c 7B68     		ldr	r3, [r7, #4]
 2620 007e 2022     		movs	r2, #32
 2621 0080 83F83620 		strb	r2, [r3, #54]
1276:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1277:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
1278:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_AbortReceiveCpltCallback(hirda);
 2622              		.loc 1 1278 7
 2623 0084 7868     		ldr	r0, [r7, #4]
 2624 0086 FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 2625 008a 09E0     		b	.L113
 2626              	.L111:
1279:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1280:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1281:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
1282:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1283:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Reset Rx transfer counter */
ARM GAS  /tmp/ccJhy18e.s 			page 69


1284:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0x00U;
 2627              		.loc 1 1284 24
 2628 008c 7B68     		ldr	r3, [r7, #4]
 2629 008e 0022     		movs	r2, #0
 2630 0090 5A85     		strh	r2, [r3, #42]	@ movhi
1285:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1286:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Restore hirda->RxState to Ready */
1287:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 2631              		.loc 1 1287 20
 2632 0092 7B68     		ldr	r3, [r7, #4]
 2633 0094 2022     		movs	r2, #32
 2634 0096 83F83620 		strb	r2, [r3, #54]
1288:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1289:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1290:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_AbortReceiveCpltCallback(hirda);
 2635              		.loc 1 1290 5
 2636 009a 7868     		ldr	r0, [r7, #4]
 2637 009c FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
 2638              	.L113:
1291:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1292:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1293:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 2639              		.loc 1 1293 10
 2640 00a0 0023     		movs	r3, #0
1294:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 2641              		.loc 1 1294 1
 2642 00a2 1846     		mov	r0, r3
 2643 00a4 0837     		adds	r7, r7, #8
 2644              	.LCFI99:
 2645              		.cfi_def_cfa_offset 8
 2646 00a6 BD46     		mov	sp, r7
 2647              	.LCFI100:
 2648              		.cfi_def_cfa_register 13
 2649              		@ sp needed
 2650 00a8 80BD     		pop	{r7, pc}
 2651              	.L116:
 2652 00aa 00BF     		.align	2
 2653              	.L115:
 2654 00ac 00000000 		.word	IRDA_DMARxOnlyAbortCallback
 2655              		.cfi_endproc
 2656              	.LFE144:
 2658              		.section	.text.HAL_IRDA_IRQHandler,"ax",%progbits
 2659              		.align	1
 2660              		.global	HAL_IRDA_IRQHandler
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
 2664              		.fpu fpv4-sp-d16
 2666              	HAL_IRDA_IRQHandler:
 2667              	.LFB145:
1295:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1296:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1297:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  This function handles IRDA interrupt request.
1298:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1299:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1300:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1301:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
ARM GAS  /tmp/ccJhy18e.s 			page 70


1302:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
1303:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 2668              		.loc 1 1303 1
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 32
 2671              		@ frame_needed = 1, uses_anonymous_args = 0
 2672 0000 80B5     		push	{r7, lr}
 2673              	.LCFI101:
 2674              		.cfi_def_cfa_offset 8
 2675              		.cfi_offset 7, -8
 2676              		.cfi_offset 14, -4
 2677 0002 88B0     		sub	sp, sp, #32
 2678              	.LCFI102:
 2679              		.cfi_def_cfa_offset 40
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI103:
 2682              		.cfi_def_cfa_register 7
 2683 0006 7860     		str	r0, [r7, #4]
1304:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    uint32_t isrflags   = READ_REG(hirda->Instance->SR);
 2684              		.loc 1 1304 26
 2685 0008 7B68     		ldr	r3, [r7, #4]
 2686 000a 1B68     		ldr	r3, [r3]
 2687              		.loc 1 1304 13
 2688 000c 1B68     		ldr	r3, [r3]
 2689 000e FB61     		str	r3, [r7, #28]
1305:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 2690              		.loc 1 1305 26
 2691 0010 7B68     		ldr	r3, [r7, #4]
 2692 0012 1B68     		ldr	r3, [r3]
 2693              		.loc 1 1305 13
 2694 0014 DB68     		ldr	r3, [r3, #12]
 2695 0016 BB61     		str	r3, [r7, #24]
1306:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    uint32_t cr3its     = READ_REG(hirda->Instance->CR3);
 2696              		.loc 1 1306 26
 2697 0018 7B68     		ldr	r3, [r7, #4]
 2698 001a 1B68     		ldr	r3, [r3]
 2699              		.loc 1 1306 13
 2700 001c 5B69     		ldr	r3, [r3, #20]
 2701 001e 7B61     		str	r3, [r7, #20]
1307:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    uint32_t errorflags = 0x00U;
 2702              		.loc 1 1307 13
 2703 0020 0023     		movs	r3, #0
 2704 0022 3B61     		str	r3, [r7, #16]
1308:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    uint32_t dmarequest = 0x00U;
 2705              		.loc 1 1308 13
 2706 0024 0023     		movs	r3, #0
 2707 0026 FB60     		str	r3, [r7, #12]
1309:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1310:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* If no error occurs */
1311:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 2708              		.loc 1 1311 14
 2709 0028 FB69     		ldr	r3, [r7, #28]
 2710 002a 03F00F03 		and	r3, r3, #15
 2711 002e 3B61     		str	r3, [r7, #16]
1312:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(errorflags == RESET)
 2712              		.loc 1 1312 5
 2713 0030 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccJhy18e.s 			page 71


 2714 0032 002B     		cmp	r3, #0
 2715 0034 0DD1     		bne	.L118
1313:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1314:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA in mode Receiver -----------------------------------------------*/
1315:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 2716              		.loc 1 1315 19
 2717 0036 FB69     		ldr	r3, [r7, #28]
 2718 0038 03F02003 		and	r3, r3, #32
 2719              		.loc 1 1315 7
 2720 003c 002B     		cmp	r3, #0
 2721 003e 08D0     		beq	.L118
 2722              		.loc 1 1315 58 discriminator 1
 2723 0040 BB69     		ldr	r3, [r7, #24]
 2724 0042 03F02003 		and	r3, r3, #32
 2725              		.loc 1 1315 46 discriminator 1
 2726 0046 002B     		cmp	r3, #0
 2727 0048 03D0     		beq	.L118
1316:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1317:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       IRDA_Receive_IT(hirda);
 2728              		.loc 1 1317 7
 2729 004a 7868     		ldr	r0, [r7, #4]
 2730 004c FFF7FEFF 		bl	IRDA_Receive_IT
1318:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return;
 2731              		.loc 1 1318 7
 2732 0050 CBE0     		b	.L117
 2733              	.L118:
1319:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1320:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }  
1321:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1322:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* If some errors occur */
1323:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE 
 2734              		.loc 1 1323 5
 2735 0052 3B69     		ldr	r3, [r7, #16]
 2736 0054 002B     		cmp	r3, #0
 2737 0056 00F0AB80 		beq	.L120
 2738              		.loc 1 1323 41 discriminator 1
 2739 005a 7B69     		ldr	r3, [r7, #20]
 2740 005c 03F00103 		and	r3, r3, #1
 2741              		.loc 1 1323 28 discriminator 1
 2742 0060 002B     		cmp	r3, #0
 2743 0062 05D1     		bne	.L121
 2744              		.loc 1 1323 80 discriminator 2
 2745 0064 BB69     		ldr	r3, [r7, #24]
 2746 0066 03F49073 		and	r3, r3, #288
 2747              		.loc 1 1323 68 discriminator 2
 2748 006a 002B     		cmp	r3, #0
 2749 006c 00F0A080 		beq	.L120
 2750              	.L121:
1324:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1325:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA parity error interrupt occurred -------------------------------*/
1326:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 2751              		.loc 1 1326 19
 2752 0070 FB69     		ldr	r3, [r7, #28]
 2753 0072 03F00103 		and	r3, r3, #1
 2754              		.loc 1 1326 7
 2755 0076 002B     		cmp	r3, #0
 2756 0078 0AD0     		beq	.L122
ARM GAS  /tmp/ccJhy18e.s 			page 72


 2757              		.loc 1 1326 56 discriminator 1
 2758 007a BB69     		ldr	r3, [r7, #24]
 2759 007c 03F48073 		and	r3, r3, #256
 2760              		.loc 1 1326 44 discriminator 1
 2761 0080 002B     		cmp	r3, #0
 2762 0082 05D0     		beq	.L122
1327:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1328:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
 2763              		.loc 1 1328 24
 2764 0084 7B68     		ldr	r3, [r7, #4]
 2765 0086 9B6B     		ldr	r3, [r3, #56]
 2766 0088 43F00102 		orr	r2, r3, #1
 2767 008c 7B68     		ldr	r3, [r7, #4]
 2768 008e 9A63     		str	r2, [r3, #56]
 2769              	.L122:
1329:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1330:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1331:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA noise error interrupt occurred --------------------------------*/
1332:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 2770              		.loc 1 1332 19
 2771 0090 FB69     		ldr	r3, [r7, #28]
 2772 0092 03F00403 		and	r3, r3, #4
 2773              		.loc 1 1332 7
 2774 0096 002B     		cmp	r3, #0
 2775 0098 0AD0     		beq	.L123
 2776              		.loc 1 1332 56 discriminator 1
 2777 009a 7B69     		ldr	r3, [r7, #20]
 2778 009c 03F00103 		and	r3, r3, #1
 2779              		.loc 1 1332 44 discriminator 1
 2780 00a0 002B     		cmp	r3, #0
 2781 00a2 05D0     		beq	.L123
1333:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1334:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
 2782              		.loc 1 1334 24
 2783 00a4 7B68     		ldr	r3, [r7, #4]
 2784 00a6 9B6B     		ldr	r3, [r3, #56]
 2785 00a8 43F00202 		orr	r2, r3, #2
 2786 00ac 7B68     		ldr	r3, [r7, #4]
 2787 00ae 9A63     		str	r2, [r3, #56]
 2788              	.L123:
1335:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1336:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1337:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA frame error interrupt occurred --------------------------------*/
1338:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 2789              		.loc 1 1338 19
 2790 00b0 FB69     		ldr	r3, [r7, #28]
 2791 00b2 03F00203 		and	r3, r3, #2
 2792              		.loc 1 1338 7
 2793 00b6 002B     		cmp	r3, #0
 2794 00b8 0AD0     		beq	.L124
 2795              		.loc 1 1338 56 discriminator 1
 2796 00ba 7B69     		ldr	r3, [r7, #20]
 2797 00bc 03F00103 		and	r3, r3, #1
 2798              		.loc 1 1338 44 discriminator 1
 2799 00c0 002B     		cmp	r3, #0
 2800 00c2 05D0     		beq	.L124
1339:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
ARM GAS  /tmp/ccJhy18e.s 			page 73


1340:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
 2801              		.loc 1 1340 24
 2802 00c4 7B68     		ldr	r3, [r7, #4]
 2803 00c6 9B6B     		ldr	r3, [r3, #56]
 2804 00c8 43F00402 		orr	r2, r3, #4
 2805 00cc 7B68     		ldr	r3, [r7, #4]
 2806 00ce 9A63     		str	r2, [r3, #56]
 2807              	.L124:
1341:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1342:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1343:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* IRDA Over-Run interrupt occurred -----------------------------------*/
1344:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 2808              		.loc 1 1344 19
 2809 00d0 FB69     		ldr	r3, [r7, #28]
 2810 00d2 03F00803 		and	r3, r3, #8
 2811              		.loc 1 1344 7
 2812 00d6 002B     		cmp	r3, #0
 2813 00d8 0AD0     		beq	.L125
 2814              		.loc 1 1344 57 discriminator 1
 2815 00da 7B69     		ldr	r3, [r7, #20]
 2816 00dc 03F00103 		and	r3, r3, #1
 2817              		.loc 1 1344 45 discriminator 1
 2818 00e0 002B     		cmp	r3, #0
 2819 00e2 05D0     		beq	.L125
1345:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     { 
1346:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
 2820              		.loc 1 1346 24
 2821 00e4 7B68     		ldr	r3, [r7, #4]
 2822 00e6 9B6B     		ldr	r3, [r3, #56]
 2823 00e8 43F00802 		orr	r2, r3, #8
 2824 00ec 7B68     		ldr	r3, [r7, #4]
 2825 00ee 9A63     		str	r2, [r3, #56]
 2826              	.L125:
1347:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1348:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Call IRDA Error Call back function if need be -----------------------*/ 
1349:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
 2827              		.loc 1 1349 13
 2828 00f0 7B68     		ldr	r3, [r7, #4]
 2829 00f2 9B6B     		ldr	r3, [r3, #56]
 2830              		.loc 1 1349 7
 2831 00f4 002B     		cmp	r3, #0
 2832 00f6 77D0     		beq	.L134
1350:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1351:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* IRDA in mode Receiver ---------------------------------------------*/
1352:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 2833              		.loc 1 1352 21
 2834 00f8 FB69     		ldr	r3, [r7, #28]
 2835 00fa 03F02003 		and	r3, r3, #32
 2836              		.loc 1 1352 9
 2837 00fe 002B     		cmp	r3, #0
 2838 0100 07D0     		beq	.L127
 2839              		.loc 1 1352 60 discriminator 1
 2840 0102 BB69     		ldr	r3, [r7, #24]
 2841 0104 03F02003 		and	r3, r3, #32
 2842              		.loc 1 1352 48 discriminator 1
 2843 0108 002B     		cmp	r3, #0
 2844 010a 02D0     		beq	.L127
ARM GAS  /tmp/ccJhy18e.s 			page 74


1353:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1354:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         IRDA_Receive_IT(hirda);
 2845              		.loc 1 1354 9
 2846 010c 7868     		ldr	r0, [r7, #4]
 2847 010e FFF7FEFF 		bl	IRDA_Receive_IT
 2848              	.L127:
1355:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1356:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1357:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 2849              		.loc 1 1357 20
 2850 0112 7B68     		ldr	r3, [r7, #4]
 2851 0114 1B68     		ldr	r3, [r3]
 2852 0116 5B69     		ldr	r3, [r3, #20]
 2853 0118 03F04003 		and	r3, r3, #64
 2854 011c 002B     		cmp	r3, #0
 2855 011e 14BF     		ite	ne
 2856 0120 0123     		movne	r3, #1
 2857 0122 0023     		moveq	r3, #0
 2858 0124 DBB2     		uxtb	r3, r3
 2859              		.loc 1 1357 18
 2860 0126 FB60     		str	r3, [r7, #12]
1358:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* If Overrun error occurs, or if any error occurs in DMA mode reception,
1359:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****          consider error as blocking */
1360:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(((hirda->ErrorCode & HAL_IRDA_ERROR_ORE) != RESET) || dmarequest)
 2861              		.loc 1 1360 17
 2862 0128 7B68     		ldr	r3, [r7, #4]
 2863 012a 9B6B     		ldr	r3, [r3, #56]
 2864              		.loc 1 1360 29
 2865 012c 03F00803 		and	r3, r3, #8
 2866              		.loc 1 1360 9
 2867 0130 002B     		cmp	r3, #0
 2868 0132 02D1     		bne	.L128
 2869              		.loc 1 1360 61 discriminator 1
 2870 0134 FB68     		ldr	r3, [r7, #12]
 2871 0136 002B     		cmp	r3, #0
 2872 0138 31D0     		beq	.L129
 2873              	.L128:
1361:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1362:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Blocking error : transfer is aborted
1363:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            Set the IRDA state ready to be able to start again the process,
1364:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
1365:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         IRDA_EndRxTransfer(hirda);
 2874              		.loc 1 1365 9
 2875 013a 7868     		ldr	r0, [r7, #4]
 2876 013c FFF7FEFF 		bl	IRDA_EndRxTransfer
1366:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1367:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Disable the IRDA DMA Rx request if enabled */
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         if(HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 2877              		.loc 1 1368 12
 2878 0140 7B68     		ldr	r3, [r7, #4]
 2879 0142 1B68     		ldr	r3, [r3]
 2880 0144 5B69     		ldr	r3, [r3, #20]
 2881 0146 03F04003 		and	r3, r3, #64
 2882              		.loc 1 1368 11
 2883 014a 002B     		cmp	r3, #0
 2884 014c 23D0     		beq	.L130
1369:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
ARM GAS  /tmp/ccJhy18e.s 			page 75


1370:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 2885              		.loc 1 1370 11
 2886 014e 7B68     		ldr	r3, [r7, #4]
 2887 0150 1B68     		ldr	r3, [r3]
 2888 0152 5A69     		ldr	r2, [r3, #20]
 2889 0154 7B68     		ldr	r3, [r7, #4]
 2890 0156 1B68     		ldr	r3, [r3]
 2891 0158 22F04002 		bic	r2, r2, #64
 2892 015c 5A61     		str	r2, [r3, #20]
1371:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1372:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           /* Abort the IRDA DMA Rx channel */
1373:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           if(hirda->hdmarx != NULL)
 2893              		.loc 1 1373 19
 2894 015e 7B68     		ldr	r3, [r7, #4]
 2895 0160 1B6B     		ldr	r3, [r3, #48]
 2896              		.loc 1 1373 13
 2897 0162 002B     		cmp	r3, #0
 2898 0164 13D0     		beq	.L131
1374:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           {
1375:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             /* Set the IRDA DMA Abort callback : 
1376:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
1377:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
 2899              		.loc 1 1377 18
 2900 0166 7B68     		ldr	r3, [r7, #4]
 2901 0168 1B6B     		ldr	r3, [r3, #48]
 2902              		.loc 1 1377 46
 2903 016a 214A     		ldr	r2, .L136
 2904 016c 1A65     		str	r2, [r3, #80]
1378:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1379:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             if(HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 2905              		.loc 1 1379 16
 2906 016e 7B68     		ldr	r3, [r7, #4]
 2907 0170 1B6B     		ldr	r3, [r3, #48]
 2908 0172 1846     		mov	r0, r3
 2909 0174 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2910 0178 0346     		mov	r3, r0
 2911              		.loc 1 1379 15
 2912 017a 002B     		cmp	r3, #0
 2913 017c 16D0     		beq	.L135
1380:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             {
1381:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****               /* Call Directly XferAbortCallback function in case of error */
1382:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****               hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 2914              		.loc 1 1382 20
 2915 017e 7B68     		ldr	r3, [r7, #4]
 2916 0180 1B6B     		ldr	r3, [r3, #48]
 2917              		.loc 1 1382 28
 2918 0182 1B6D     		ldr	r3, [r3, #80]
 2919              		.loc 1 1382 53
 2920 0184 7A68     		ldr	r2, [r7, #4]
 2921 0186 126B     		ldr	r2, [r2, #48]
 2922              		.loc 1 1382 15
 2923 0188 1046     		mov	r0, r2
 2924 018a 9847     		blx	r3
 2925              	.LVL2:
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 2926              		.loc 1 1368 11
 2927 018c 0EE0     		b	.L135
ARM GAS  /tmp/ccJhy18e.s 			page 76


 2928              	.L131:
1383:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             }
1384:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           }
1385:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           else
1386:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           {
1387:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             /* Call user error callback */
1388:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             HAL_IRDA_ErrorCallback(hirda);
 2929              		.loc 1 1388 13
 2930 018e 7868     		ldr	r0, [r7, #4]
 2931 0190 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 2932              		.loc 1 1368 11
 2933 0194 0AE0     		b	.L135
 2934              	.L130:
1389:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           }
1390:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
1391:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         else
1392:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
1393:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           /* Call user error callback */
1394:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****           HAL_IRDA_ErrorCallback(hirda);
 2935              		.loc 1 1394 11
 2936 0196 7868     		ldr	r0, [r7, #4]
 2937 0198 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 2938              		.loc 1 1368 11
 2939 019c 06E0     		b	.L135
 2940              	.L129:
1395:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         }
1396:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1397:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
1398:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1399:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Non Blocking error : transfer could go on. 
1400:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****            Error is notified to user through user error callback */
1401:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         HAL_IRDA_ErrorCallback(hirda);
 2941              		.loc 1 1401 9
 2942 019e 7868     		ldr	r0, [r7, #4]
 2943 01a0 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
1402:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 2944              		.loc 1 1402 26
 2945 01a4 7B68     		ldr	r3, [r7, #4]
 2946 01a6 0022     		movs	r2, #0
 2947 01a8 9A63     		str	r2, [r3, #56]
1403:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1404:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return;
 2948              		.loc 1 1405 5
 2949 01aa 1DE0     		b	.L134
 2950              	.L135:
1368:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         {
 2951              		.loc 1 1368 11
 2952 01ac 00BF     		nop
 2953              		.loc 1 1405 5
 2954 01ae 1BE0     		b	.L134
 2955              	.L120:
1406:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   } /* End if some error occurs */
1407:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1408:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* IRDA in mode Transmitter ------------------------------------------------*/
ARM GAS  /tmp/ccJhy18e.s 			page 77


1409:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 2956              		.loc 1 1409 17
 2957 01b0 FB69     		ldr	r3, [r7, #28]
 2958 01b2 03F08003 		and	r3, r3, #128
 2959              		.loc 1 1409 5
 2960 01b6 002B     		cmp	r3, #0
 2961 01b8 08D0     		beq	.L133
 2962              		.loc 1 1409 55 discriminator 1
 2963 01ba BB69     		ldr	r3, [r7, #24]
 2964 01bc 03F08003 		and	r3, r3, #128
 2965              		.loc 1 1409 43 discriminator 1
 2966 01c0 002B     		cmp	r3, #0
 2967 01c2 03D0     		beq	.L133
1410:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1411:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IRDA_Transmit_IT(hirda);
 2968              		.loc 1 1411 5
 2969 01c4 7868     		ldr	r0, [r7, #4]
 2970 01c6 FFF7FEFF 		bl	IRDA_Transmit_IT
1412:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return;
 2971              		.loc 1 1412 5
 2972 01ca 0EE0     		b	.L117
 2973              	.L133:
1413:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1414:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1415:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* IRDA in mode Transmitter end --------------------------------------------*/
1416:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 2974              		.loc 1 1416 17
 2975 01cc FB69     		ldr	r3, [r7, #28]
 2976 01ce 03F04003 		and	r3, r3, #64
 2977              		.loc 1 1416 5
 2978 01d2 002B     		cmp	r3, #0
 2979 01d4 09D0     		beq	.L117
 2980              		.loc 1 1416 54 discriminator 1
 2981 01d6 BB69     		ldr	r3, [r7, #24]
 2982 01d8 03F04003 		and	r3, r3, #64
 2983              		.loc 1 1416 42 discriminator 1
 2984 01dc 002B     		cmp	r3, #0
 2985 01de 04D0     		beq	.L117
1417:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1418:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTransmit_IT(hirda);
 2986              		.loc 1 1418 5
 2987 01e0 7868     		ldr	r0, [r7, #4]
 2988 01e2 FFF7FEFF 		bl	IRDA_EndTransmit_IT
1419:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return;
 2989              		.loc 1 1419 5
 2990 01e6 00E0     		b	.L117
 2991              	.L134:
1405:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   } /* End if some error occurs */
 2992              		.loc 1 1405 5
 2993 01e8 00BF     		nop
 2994              	.L117:
1420:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1421:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 2995              		.loc 1 1421 1
 2996 01ea 2037     		adds	r7, r7, #32
 2997              	.LCFI104:
 2998              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJhy18e.s 			page 78


 2999 01ec BD46     		mov	sp, r7
 3000              	.LCFI105:
 3001              		.cfi_def_cfa_register 13
 3002              		@ sp needed
 3003 01ee 80BD     		pop	{r7, pc}
 3004              	.L137:
 3005              		.align	2
 3006              	.L136:
 3007 01f0 00000000 		.word	IRDA_DMAAbortOnError
 3008              		.cfi_endproc
 3009              	.LFE145:
 3011              		.section	.text.IRDA_EndTxTransfer,"ax",%progbits
 3012              		.align	1
 3013              		.syntax unified
 3014              		.thumb
 3015              		.thumb_func
 3016              		.fpu fpv4-sp-d16
 3018              	IRDA_EndTxTransfer:
 3019              	.LFB146:
1422:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1423:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1424:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  End ongoing Tx transfer on IRDA peripheral (following error detection or Transmit compl
1425:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1426:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1427:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1428:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndTxTransfer(IRDA_HandleTypeDef *hirda)
1429:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3020              		.loc 1 1429 1
 3021              		.cfi_startproc
 3022              		@ args = 0, pretend = 0, frame = 8
 3023              		@ frame_needed = 1, uses_anonymous_args = 0
 3024              		@ link register save eliminated.
 3025 0000 80B4     		push	{r7}
 3026              	.LCFI106:
 3027              		.cfi_def_cfa_offset 4
 3028              		.cfi_offset 7, -4
 3029 0002 83B0     		sub	sp, sp, #12
 3030              	.LCFI107:
 3031              		.cfi_def_cfa_offset 16
 3032 0004 00AF     		add	r7, sp, #0
 3033              	.LCFI108:
 3034              		.cfi_def_cfa_register 7
 3035 0006 7860     		str	r0, [r7, #4]
1430:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable TXEIE and TCIE interrupts */
1431:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 3036              		.loc 1 1431 3
 3037 0008 7B68     		ldr	r3, [r7, #4]
 3038 000a 1B68     		ldr	r3, [r3]
 3039 000c DA68     		ldr	r2, [r3, #12]
 3040 000e 7B68     		ldr	r3, [r7, #4]
 3041 0010 1B68     		ldr	r3, [r3]
 3042 0012 22F0C002 		bic	r2, r2, #192
 3043 0016 DA60     		str	r2, [r3, #12]
1432:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1433:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* At end of Tx process, restore hirda->gState to Ready */
1434:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 3044              		.loc 1 1434 17
ARM GAS  /tmp/ccJhy18e.s 			page 79


 3045 0018 7B68     		ldr	r3, [r7, #4]
 3046 001a 2022     		movs	r2, #32
 3047 001c 83F83520 		strb	r2, [r3, #53]
1435:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3048              		.loc 1 1435 1
 3049 0020 00BF     		nop
 3050 0022 0C37     		adds	r7, r7, #12
 3051              	.LCFI109:
 3052              		.cfi_def_cfa_offset 4
 3053 0024 BD46     		mov	sp, r7
 3054              	.LCFI110:
 3055              		.cfi_def_cfa_register 13
 3056              		@ sp needed
 3057 0026 5DF8047B 		ldr	r7, [sp], #4
 3058              	.LCFI111:
 3059              		.cfi_restore 7
 3060              		.cfi_def_cfa_offset 0
 3061 002a 7047     		bx	lr
 3062              		.cfi_endproc
 3063              	.LFE146:
 3065              		.section	.text.IRDA_EndRxTransfer,"ax",%progbits
 3066              		.align	1
 3067              		.syntax unified
 3068              		.thumb
 3069              		.thumb_func
 3070              		.fpu fpv4-sp-d16
 3072              	IRDA_EndRxTransfer:
 3073              	.LFB147:
1436:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1437:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1438:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  End ongoing Rx transfer on IRDA peripheral (following error detection or Reception comp
1439:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1440:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1441:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1442:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
1443:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3074              		.loc 1 1443 1
 3075              		.cfi_startproc
 3076              		@ args = 0, pretend = 0, frame = 8
 3077              		@ frame_needed = 1, uses_anonymous_args = 0
 3078              		@ link register save eliminated.
 3079 0000 80B4     		push	{r7}
 3080              	.LCFI112:
 3081              		.cfi_def_cfa_offset 4
 3082              		.cfi_offset 7, -4
 3083 0002 83B0     		sub	sp, sp, #12
 3084              	.LCFI113:
 3085              		.cfi_def_cfa_offset 16
 3086 0004 00AF     		add	r7, sp, #0
 3087              	.LCFI114:
 3088              		.cfi_def_cfa_register 7
 3089 0006 7860     		str	r0, [r7, #4]
1444:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
1445:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 3090              		.loc 1 1445 3
 3091 0008 7B68     		ldr	r3, [r7, #4]
 3092 000a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJhy18e.s 			page 80


 3093 000c DA68     		ldr	r2, [r3, #12]
 3094 000e 7B68     		ldr	r3, [r7, #4]
 3095 0010 1B68     		ldr	r3, [r3]
 3096 0012 22F49072 		bic	r2, r2, #288
 3097 0016 DA60     		str	r2, [r3, #12]
1446:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 3098              		.loc 1 1446 3
 3099 0018 7B68     		ldr	r3, [r7, #4]
 3100 001a 1B68     		ldr	r3, [r3]
 3101 001c 5A69     		ldr	r2, [r3, #20]
 3102 001e 7B68     		ldr	r3, [r7, #4]
 3103 0020 1B68     		ldr	r3, [r3]
 3104 0022 22F00102 		bic	r2, r2, #1
 3105 0026 5A61     		str	r2, [r3, #20]
1447:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1448:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* At end of Rx process, restore hirda->RxState to Ready */
1449:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3106              		.loc 1 1449 18
 3107 0028 7B68     		ldr	r3, [r7, #4]
 3108 002a 2022     		movs	r2, #32
 3109 002c 83F83620 		strb	r2, [r3, #54]
1450:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3110              		.loc 1 1450 1
 3111 0030 00BF     		nop
 3112 0032 0C37     		adds	r7, r7, #12
 3113              	.LCFI115:
 3114              		.cfi_def_cfa_offset 4
 3115 0034 BD46     		mov	sp, r7
 3116              	.LCFI116:
 3117              		.cfi_def_cfa_register 13
 3118              		@ sp needed
 3119 0036 5DF8047B 		ldr	r7, [sp], #4
 3120              	.LCFI117:
 3121              		.cfi_restore 7
 3122              		.cfi_def_cfa_offset 0
 3123 003a 7047     		bx	lr
 3124              		.cfi_endproc
 3125              	.LFE147:
 3127              		.section	.text.IRDA_DMAAbortOnError,"ax",%progbits
 3128              		.align	1
 3129              		.syntax unified
 3130              		.thumb
 3131              		.thumb_func
 3132              		.fpu fpv4-sp-d16
 3134              	IRDA_DMAAbortOnError:
 3135              	.LFB148:
1451:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1452:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1453:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA communication abort callback, when initiated by HAL services on Error
1454:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
1455:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
1456:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1457:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1458:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
1459:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3136              		.loc 1 1459 1
 3137              		.cfi_startproc
ARM GAS  /tmp/ccJhy18e.s 			page 81


 3138              		@ args = 0, pretend = 0, frame = 16
 3139              		@ frame_needed = 1, uses_anonymous_args = 0
 3140 0000 80B5     		push	{r7, lr}
 3141              	.LCFI118:
 3142              		.cfi_def_cfa_offset 8
 3143              		.cfi_offset 7, -8
 3144              		.cfi_offset 14, -4
 3145 0002 84B0     		sub	sp, sp, #16
 3146              	.LCFI119:
 3147              		.cfi_def_cfa_offset 24
 3148 0004 00AF     		add	r7, sp, #0
 3149              	.LCFI120:
 3150              		.cfi_def_cfa_register 7
 3151 0006 7860     		str	r0, [r7, #4]
1460:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3152              		.loc 1 1460 23
 3153 0008 7B68     		ldr	r3, [r7, #4]
 3154 000a 9B6B     		ldr	r3, [r3, #56]
 3155 000c FB60     		str	r3, [r7, #12]
1461:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3156              		.loc 1 1461 22
 3157 000e FB68     		ldr	r3, [r7, #12]
 3158 0010 0022     		movs	r2, #0
 3159 0012 5A85     		strh	r2, [r3, #42]	@ movhi
1462:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 3160              		.loc 1 1462 22
 3161 0014 FB68     		ldr	r3, [r7, #12]
 3162 0016 0022     		movs	r2, #0
 3163 0018 5A84     		strh	r2, [r3, #34]	@ movhi
1463:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1464:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
 3164              		.loc 1 1464 3
 3165 001a F868     		ldr	r0, [r7, #12]
 3166 001c FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
1465:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3167              		.loc 1 1465 1
 3168 0020 00BF     		nop
 3169 0022 1037     		adds	r7, r7, #16
 3170              	.LCFI121:
 3171              		.cfi_def_cfa_offset 8
 3172 0024 BD46     		mov	sp, r7
 3173              	.LCFI122:
 3174              		.cfi_def_cfa_register 13
 3175              		@ sp needed
 3176 0026 80BD     		pop	{r7, pc}
 3177              		.cfi_endproc
 3178              	.LFE148:
 3180              		.section	.text.IRDA_DMATxAbortCallback,"ax",%progbits
 3181              		.align	1
 3182              		.syntax unified
 3183              		.thumb
 3184              		.thumb_func
 3185              		.fpu fpv4-sp-d16
 3187              	IRDA_DMATxAbortCallback:
 3188              	.LFB149:
1466:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1467:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
ARM GAS  /tmp/ccJhy18e.s 			page 82


1468:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user
1469:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
1470:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
1471:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         Abort still ongoing for Rx DMA Handle.
1472:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
1473:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1474:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1475:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
1476:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3189              		.loc 1 1476 1
 3190              		.cfi_startproc
 3191              		@ args = 0, pretend = 0, frame = 16
 3192              		@ frame_needed = 1, uses_anonymous_args = 0
 3193 0000 80B5     		push	{r7, lr}
 3194              	.LCFI123:
 3195              		.cfi_def_cfa_offset 8
 3196              		.cfi_offset 7, -8
 3197              		.cfi_offset 14, -4
 3198 0002 84B0     		sub	sp, sp, #16
 3199              	.LCFI124:
 3200              		.cfi_def_cfa_offset 24
 3201 0004 00AF     		add	r7, sp, #0
 3202              	.LCFI125:
 3203              		.cfi_def_cfa_register 7
 3204 0006 7860     		str	r0, [r7, #4]
1477:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3205              		.loc 1 1477 23
 3206 0008 7B68     		ldr	r3, [r7, #4]
 3207 000a 9B6B     		ldr	r3, [r3, #56]
 3208 000c FB60     		str	r3, [r7, #12]
1478:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1479:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->hdmatx->XferAbortCallback = NULL;
 3209              		.loc 1 1479 8
 3210 000e FB68     		ldr	r3, [r7, #12]
 3211 0010 DB6A     		ldr	r3, [r3, #44]
 3212              		.loc 1 1479 36
 3213 0012 0022     		movs	r2, #0
 3214 0014 1A65     		str	r2, [r3, #80]
1480:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1481:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
1482:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->hdmarx != NULL)
 3215              		.loc 1 1482 11
 3216 0016 FB68     		ldr	r3, [r7, #12]
 3217 0018 1B6B     		ldr	r3, [r3, #48]
 3218              		.loc 1 1482 5
 3219 001a 002B     		cmp	r3, #0
 3220 001c 04D0     		beq	.L142
1483:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1484:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmarx->XferAbortCallback != NULL)
 3221              		.loc 1 1484 13
 3222 001e FB68     		ldr	r3, [r7, #12]
 3223 0020 1B6B     		ldr	r3, [r3, #48]
 3224              		.loc 1 1484 21
 3225 0022 1B6D     		ldr	r3, [r3, #80]
 3226              		.loc 1 1484 7
 3227 0024 002B     		cmp	r3, #0
 3228 0026 14D1     		bne	.L144
ARM GAS  /tmp/ccJhy18e.s 			page 83


 3229              	.L142:
1485:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return;
1487:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1488:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1489:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1490:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
1491:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 3230              		.loc 1 1491 22
 3231 0028 FB68     		ldr	r3, [r7, #12]
 3232 002a 0022     		movs	r2, #0
 3233 002c 5A84     		strh	r2, [r3, #34]	@ movhi
1492:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3234              		.loc 1 1492 22
 3235 002e FB68     		ldr	r3, [r7, #12]
 3236 0030 0022     		movs	r2, #0
 3237 0032 5A85     		strh	r2, [r3, #42]	@ movhi
1493:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1494:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Reset ErrorCode */
1495:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 3238              		.loc 1 1495 20
 3239 0034 FB68     		ldr	r3, [r7, #12]
 3240 0036 0022     		movs	r2, #0
 3241 0038 9A63     		str	r2, [r3, #56]
1496:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1497:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
1498:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
 3242              		.loc 1 1498 18
 3243 003a FB68     		ldr	r3, [r7, #12]
 3244 003c 2022     		movs	r2, #32
 3245 003e 83F83520 		strb	r2, [r3, #53]
1499:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3246              		.loc 1 1499 18
 3247 0042 FB68     		ldr	r3, [r7, #12]
 3248 0044 2022     		movs	r2, #32
 3249 0046 83F83620 		strb	r2, [r3, #54]
1500:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1501:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
1502:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
 3250              		.loc 1 1502 3
 3251 004a F868     		ldr	r0, [r7, #12]
 3252 004c FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3253 0050 00E0     		b	.L141
 3254              	.L144:
1486:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 3255              		.loc 1 1486 7
 3256 0052 00BF     		nop
 3257              	.L141:
1503:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3258              		.loc 1 1503 1
 3259 0054 1037     		adds	r7, r7, #16
 3260              	.LCFI126:
 3261              		.cfi_def_cfa_offset 8
 3262 0056 BD46     		mov	sp, r7
 3263              	.LCFI127:
 3264              		.cfi_def_cfa_register 13
 3265              		@ sp needed
ARM GAS  /tmp/ccJhy18e.s 			page 84


 3266 0058 80BD     		pop	{r7, pc}
 3267              		.cfi_endproc
 3268              	.LFE149:
 3270              		.section	.text.IRDA_DMARxAbortCallback,"ax",%progbits
 3271              		.align	1
 3272              		.syntax unified
 3273              		.thumb
 3274              		.thumb_func
 3275              		.fpu fpv4-sp-d16
 3277              	IRDA_DMARxAbortCallback:
 3278              	.LFB150:
1504:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1505:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1506:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user
1507:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
1508:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
1509:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         Abort still ongoing for Tx DMA Handle.
1510:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
1511:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1512:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1513:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
1514:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3279              		.loc 1 1514 1
 3280              		.cfi_startproc
 3281              		@ args = 0, pretend = 0, frame = 16
 3282              		@ frame_needed = 1, uses_anonymous_args = 0
 3283 0000 80B5     		push	{r7, lr}
 3284              	.LCFI128:
 3285              		.cfi_def_cfa_offset 8
 3286              		.cfi_offset 7, -8
 3287              		.cfi_offset 14, -4
 3288 0002 84B0     		sub	sp, sp, #16
 3289              	.LCFI129:
 3290              		.cfi_def_cfa_offset 24
 3291 0004 00AF     		add	r7, sp, #0
 3292              	.LCFI130:
 3293              		.cfi_def_cfa_register 7
 3294 0006 7860     		str	r0, [r7, #4]
1515:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3295              		.loc 1 1515 23
 3296 0008 7B68     		ldr	r3, [r7, #4]
 3297 000a 9B6B     		ldr	r3, [r3, #56]
 3298 000c FB60     		str	r3, [r7, #12]
1516:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1517:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->hdmarx->XferAbortCallback = NULL;
 3299              		.loc 1 1517 8
 3300 000e FB68     		ldr	r3, [r7, #12]
 3301 0010 1B6B     		ldr	r3, [r3, #48]
 3302              		.loc 1 1517 36
 3303 0012 0022     		movs	r2, #0
 3304 0014 1A65     		str	r2, [r3, #80]
1518:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1519:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check if an Abort process is still ongoing */
1520:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->hdmatx != NULL)
 3305              		.loc 1 1520 11
 3306 0016 FB68     		ldr	r3, [r7, #12]
 3307 0018 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccJhy18e.s 			page 85


 3308              		.loc 1 1520 5
 3309 001a 002B     		cmp	r3, #0
 3310 001c 04D0     		beq	.L146
1521:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1522:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->hdmatx->XferAbortCallback != NULL)
 3311              		.loc 1 1522 13
 3312 001e FB68     		ldr	r3, [r7, #12]
 3313 0020 DB6A     		ldr	r3, [r3, #44]
 3314              		.loc 1 1522 21
 3315 0022 1B6D     		ldr	r3, [r3, #80]
 3316              		.loc 1 1522 7
 3317 0024 002B     		cmp	r3, #0
 3318 0026 14D1     		bne	.L148
 3319              	.L146:
1523:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return;
1525:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1526:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1527:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1528:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
1529:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 3320              		.loc 1 1529 22
 3321 0028 FB68     		ldr	r3, [r7, #12]
 3322 002a 0022     		movs	r2, #0
 3323 002c 5A84     		strh	r2, [r3, #34]	@ movhi
1530:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3324              		.loc 1 1530 22
 3325 002e FB68     		ldr	r3, [r7, #12]
 3326 0030 0022     		movs	r2, #0
 3327 0032 5A85     		strh	r2, [r3, #42]	@ movhi
1531:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1532:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Reset ErrorCode */
1533:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 3328              		.loc 1 1533 20
 3329 0034 FB68     		ldr	r3, [r7, #12]
 3330 0036 0022     		movs	r2, #0
 3331 0038 9A63     		str	r2, [r3, #56]
1534:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1535:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState and hirda->RxState to Ready */
1536:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState  = HAL_IRDA_STATE_READY;
 3332              		.loc 1 1536 18
 3333 003a FB68     		ldr	r3, [r7, #12]
 3334 003c 2022     		movs	r2, #32
 3335 003e 83F83520 		strb	r2, [r3, #53]
1537:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3336              		.loc 1 1537 18
 3337 0042 FB68     		ldr	r3, [r7, #12]
 3338 0044 2022     		movs	r2, #32
 3339 0046 83F83620 		strb	r2, [r3, #54]
1538:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1539:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
1540:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortCpltCallback(hirda);
 3340              		.loc 1 1540 3
 3341 004a F868     		ldr	r0, [r7, #12]
 3342 004c FFF7FEFF 		bl	HAL_IRDA_AbortCpltCallback
 3343 0050 00E0     		b	.L145
 3344              	.L148:
ARM GAS  /tmp/ccJhy18e.s 			page 86


1524:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
 3345              		.loc 1 1524 7
 3346 0052 00BF     		nop
 3347              	.L145:
1541:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3348              		.loc 1 1541 1
 3349 0054 1037     		adds	r7, r7, #16
 3350              	.LCFI131:
 3351              		.cfi_def_cfa_offset 8
 3352 0056 BD46     		mov	sp, r7
 3353              	.LCFI132:
 3354              		.cfi_def_cfa_register 13
 3355              		@ sp needed
 3356 0058 80BD     		pop	{r7, pc}
 3357              		.cfi_endproc
 3358              	.LFE150:
 3360              		.section	.text.IRDA_DMATxOnlyAbortCallback,"ax",%progbits
 3361              		.align	1
 3362              		.syntax unified
 3363              		.thumb
 3364              		.thumb_func
 3365              		.fpu fpv4-sp-d16
 3367              	IRDA_DMATxOnlyAbortCallback:
 3368              	.LFB151:
1542:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1543:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1544:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Tx communication abort callback, when initiated by user by a call to
1545:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         HAL_IRDA_AbortTransmit_IT API (Abort only Tx transfer)
1546:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
1547:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         and leads to user Tx Abort Complete callback execution).
1548:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
1549:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1550:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1551:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
1552:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3369              		.loc 1 1552 1
 3370              		.cfi_startproc
 3371              		@ args = 0, pretend = 0, frame = 16
 3372              		@ frame_needed = 1, uses_anonymous_args = 0
 3373 0000 80B5     		push	{r7, lr}
 3374              	.LCFI133:
 3375              		.cfi_def_cfa_offset 8
 3376              		.cfi_offset 7, -8
 3377              		.cfi_offset 14, -4
 3378 0002 84B0     		sub	sp, sp, #16
 3379              	.LCFI134:
 3380              		.cfi_def_cfa_offset 24
 3381 0004 00AF     		add	r7, sp, #0
 3382              	.LCFI135:
 3383              		.cfi_def_cfa_register 7
 3384 0006 7860     		str	r0, [r7, #4]
1553:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3385              		.loc 1 1553 23
 3386 0008 7B68     		ldr	r3, [r7, #4]
 3387 000a 9B6B     		ldr	r3, [r3, #56]
 3388 000c FB60     		str	r3, [r7, #12]
1554:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
ARM GAS  /tmp/ccJhy18e.s 			page 87


1555:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->TxXferCount = 0x00U;
 3389              		.loc 1 1555 22
 3390 000e FB68     		ldr	r3, [r7, #12]
 3391 0010 0022     		movs	r2, #0
 3392 0012 5A84     		strh	r2, [r3, #34]	@ movhi
1556:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1557:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->gState to Ready */
1558:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 3393              		.loc 1 1558 17
 3394 0014 FB68     		ldr	r3, [r7, #12]
 3395 0016 2022     		movs	r2, #32
 3396 0018 83F83520 		strb	r2, [r3, #53]
1559:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1560:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
1561:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortTransmitCpltCallback(hirda);
 3397              		.loc 1 1561 3
 3398 001c F868     		ldr	r0, [r7, #12]
 3399 001e FFF7FEFF 		bl	HAL_IRDA_AbortTransmitCpltCallback
1562:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3400              		.loc 1 1562 1
 3401 0022 00BF     		nop
 3402 0024 1037     		adds	r7, r7, #16
 3403              	.LCFI136:
 3404              		.cfi_def_cfa_offset 8
 3405 0026 BD46     		mov	sp, r7
 3406              	.LCFI137:
 3407              		.cfi_def_cfa_register 13
 3408              		@ sp needed
 3409 0028 80BD     		pop	{r7, pc}
 3410              		.cfi_endproc
 3411              	.LFE151:
 3413              		.section	.text.IRDA_DMARxOnlyAbortCallback,"ax",%progbits
 3414              		.align	1
 3415              		.syntax unified
 3416              		.thumb
 3417              		.thumb_func
 3418              		.fpu fpv4-sp-d16
 3420              	IRDA_DMARxOnlyAbortCallback:
 3421              	.LFB152:
1563:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1564:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1565:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA Rx communication abort callback, when initiated by user by a call to
1566:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         HAL_IRDA_AbortReceive_IT API (Abort only Rx transfer)
1567:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
1568:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *         and leads to user Rx Abort Complete callback execution).
1569:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle.
1570:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1571:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1572:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
1573:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3422              		.loc 1 1573 1
 3423              		.cfi_startproc
 3424              		@ args = 0, pretend = 0, frame = 16
 3425              		@ frame_needed = 1, uses_anonymous_args = 0
 3426 0000 80B5     		push	{r7, lr}
 3427              	.LCFI138:
 3428              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccJhy18e.s 			page 88


 3429              		.cfi_offset 7, -8
 3430              		.cfi_offset 14, -4
 3431 0002 84B0     		sub	sp, sp, #16
 3432              	.LCFI139:
 3433              		.cfi_def_cfa_offset 24
 3434 0004 00AF     		add	r7, sp, #0
 3435              	.LCFI140:
 3436              		.cfi_def_cfa_register 7
 3437 0006 7860     		str	r0, [r7, #4]
1574:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3438              		.loc 1 1574 23
 3439 0008 7B68     		ldr	r3, [r7, #4]
 3440 000a 9B6B     		ldr	r3, [r3, #56]
 3441 000c FB60     		str	r3, [r7, #12]
1575:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1576:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxXferCount = 0x00U;
 3442              		.loc 1 1576 22
 3443 000e FB68     		ldr	r3, [r7, #12]
 3444 0010 0022     		movs	r2, #0
 3445 0012 5A85     		strh	r2, [r3, #42]	@ movhi
1577:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1578:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Restore hirda->RxState to Ready */
1579:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->RxState = HAL_IRDA_STATE_READY;
 3446              		.loc 1 1579 18
 3447 0014 FB68     		ldr	r3, [r7, #12]
 3448 0016 2022     		movs	r2, #32
 3449 0018 83F83620 		strb	r2, [r3, #54]
1580:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1581:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Call user Abort complete callback */
1582:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_AbortReceiveCpltCallback(hirda);
 3450              		.loc 1 1582 3
 3451 001c F868     		ldr	r0, [r7, #12]
 3452 001e FFF7FEFF 		bl	HAL_IRDA_AbortReceiveCpltCallback
1583:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3453              		.loc 1 1583 1
 3454 0022 00BF     		nop
 3455 0024 1037     		adds	r7, r7, #16
 3456              	.LCFI141:
 3457              		.cfi_def_cfa_offset 8
 3458 0026 BD46     		mov	sp, r7
 3459              	.LCFI142:
 3460              		.cfi_def_cfa_register 13
 3461              		@ sp needed
 3462 0028 80BD     		pop	{r7, pc}
 3463              		.cfi_endproc
 3464              	.LFE152:
 3466              		.section	.text.HAL_IRDA_TxCpltCallback,"ax",%progbits
 3467              		.align	1
 3468              		.weak	HAL_IRDA_TxCpltCallback
 3469              		.syntax unified
 3470              		.thumb
 3471              		.thumb_func
 3472              		.fpu fpv4-sp-d16
 3474              	HAL_IRDA_TxCpltCallback:
 3475              	.LFB153:
1584:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1585:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
ARM GAS  /tmp/ccJhy18e.s 			page 89


1586:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Tx Transfer complete callbacks.
1587:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1588:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1589:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1590:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1591:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
1592:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3476              		.loc 1 1592 1
 3477              		.cfi_startproc
 3478              		@ args = 0, pretend = 0, frame = 8
 3479              		@ frame_needed = 1, uses_anonymous_args = 0
 3480              		@ link register save eliminated.
 3481 0000 80B4     		push	{r7}
 3482              	.LCFI143:
 3483              		.cfi_def_cfa_offset 4
 3484              		.cfi_offset 7, -4
 3485 0002 83B0     		sub	sp, sp, #12
 3486              	.LCFI144:
 3487              		.cfi_def_cfa_offset 16
 3488 0004 00AF     		add	r7, sp, #0
 3489              	.LCFI145:
 3490              		.cfi_def_cfa_register 7
 3491 0006 7860     		str	r0, [r7, #4]
1593:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1594:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1595:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1596:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_TxCpltCallback could be implemented in the user file
1597:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */ 
1598:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3492              		.loc 1 1598 1
 3493 0008 00BF     		nop
 3494 000a 0C37     		adds	r7, r7, #12
 3495              	.LCFI146:
 3496              		.cfi_def_cfa_offset 4
 3497 000c BD46     		mov	sp, r7
 3498              	.LCFI147:
 3499              		.cfi_def_cfa_register 13
 3500              		@ sp needed
 3501 000e 5DF8047B 		ldr	r7, [sp], #4
 3502              	.LCFI148:
 3503              		.cfi_restore 7
 3504              		.cfi_def_cfa_offset 0
 3505 0012 7047     		bx	lr
 3506              		.cfi_endproc
 3507              	.LFE153:
 3509              		.section	.text.HAL_IRDA_TxHalfCpltCallback,"ax",%progbits
 3510              		.align	1
 3511              		.weak	HAL_IRDA_TxHalfCpltCallback
 3512              		.syntax unified
 3513              		.thumb
 3514              		.thumb_func
 3515              		.fpu fpv4-sp-d16
 3517              	HAL_IRDA_TxHalfCpltCallback:
 3518              	.LFB154:
1599:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1600:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1601:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Tx Half Transfer completed callbacks.
ARM GAS  /tmp/ccJhy18e.s 			page 90


1602:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1603:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified USART module.
1604:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1605:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1606:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_TxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1607:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3519              		.loc 1 1607 1
 3520              		.cfi_startproc
 3521              		@ args = 0, pretend = 0, frame = 8
 3522              		@ frame_needed = 1, uses_anonymous_args = 0
 3523              		@ link register save eliminated.
 3524 0000 80B4     		push	{r7}
 3525              	.LCFI149:
 3526              		.cfi_def_cfa_offset 4
 3527              		.cfi_offset 7, -4
 3528 0002 83B0     		sub	sp, sp, #12
 3529              	.LCFI150:
 3530              		.cfi_def_cfa_offset 16
 3531 0004 00AF     		add	r7, sp, #0
 3532              	.LCFI151:
 3533              		.cfi_def_cfa_register 7
 3534 0006 7860     		str	r0, [r7, #4]
1608:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1609:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1610:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
1611:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_TxHalfCpltCallback could be implemented in the user file
1612:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1613:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3535              		.loc 1 1613 1
 3536 0008 00BF     		nop
 3537 000a 0C37     		adds	r7, r7, #12
 3538              	.LCFI152:
 3539              		.cfi_def_cfa_offset 4
 3540 000c BD46     		mov	sp, r7
 3541              	.LCFI153:
 3542              		.cfi_def_cfa_register 13
 3543              		@ sp needed
 3544 000e 5DF8047B 		ldr	r7, [sp], #4
 3545              	.LCFI154:
 3546              		.cfi_restore 7
 3547              		.cfi_def_cfa_offset 0
 3548 0012 7047     		bx	lr
 3549              		.cfi_endproc
 3550              	.LFE154:
 3552              		.section	.text.HAL_IRDA_RxCpltCallback,"ax",%progbits
 3553              		.align	1
 3554              		.weak	HAL_IRDA_RxCpltCallback
 3555              		.syntax unified
 3556              		.thumb
 3557              		.thumb_func
 3558              		.fpu fpv4-sp-d16
 3560              	HAL_IRDA_RxCpltCallback:
 3561              	.LFB155:
1614:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1615:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1616:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Rx Transfer complete callbacks.
1617:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
ARM GAS  /tmp/ccJhy18e.s 			page 91


1618:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1619:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1620:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1621:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
1622:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3562              		.loc 1 1622 1
 3563              		.cfi_startproc
 3564              		@ args = 0, pretend = 0, frame = 8
 3565              		@ frame_needed = 1, uses_anonymous_args = 0
 3566              		@ link register save eliminated.
 3567 0000 80B4     		push	{r7}
 3568              	.LCFI155:
 3569              		.cfi_def_cfa_offset 4
 3570              		.cfi_offset 7, -4
 3571 0002 83B0     		sub	sp, sp, #12
 3572              	.LCFI156:
 3573              		.cfi_def_cfa_offset 16
 3574 0004 00AF     		add	r7, sp, #0
 3575              	.LCFI157:
 3576              		.cfi_def_cfa_register 7
 3577 0006 7860     		str	r0, [r7, #4]
1623:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1624:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1625:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1626:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_RxCpltCallback could be implemented in the user file
1627:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1628:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3578              		.loc 1 1628 1
 3579 0008 00BF     		nop
 3580 000a 0C37     		adds	r7, r7, #12
 3581              	.LCFI158:
 3582              		.cfi_def_cfa_offset 4
 3583 000c BD46     		mov	sp, r7
 3584              	.LCFI159:
 3585              		.cfi_def_cfa_register 13
 3586              		@ sp needed
 3587 000e 5DF8047B 		ldr	r7, [sp], #4
 3588              	.LCFI160:
 3589              		.cfi_restore 7
 3590              		.cfi_def_cfa_offset 0
 3591 0012 7047     		bx	lr
 3592              		.cfi_endproc
 3593              	.LFE155:
 3595              		.section	.text.HAL_IRDA_RxHalfCpltCallback,"ax",%progbits
 3596              		.align	1
 3597              		.weak	HAL_IRDA_RxHalfCpltCallback
 3598              		.syntax unified
 3599              		.thumb
 3600              		.thumb_func
 3601              		.fpu fpv4-sp-d16
 3603              	HAL_IRDA_RxHalfCpltCallback:
 3604              	.LFB156:
1629:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1630:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1631:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Rx Half Transfer complete callbacks.
1632:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1633:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
ARM GAS  /tmp/ccJhy18e.s 			page 92


1634:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1635:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1636:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_RxHalfCpltCallback(IRDA_HandleTypeDef *hirda)
1637:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3605              		.loc 1 1637 1
 3606              		.cfi_startproc
 3607              		@ args = 0, pretend = 0, frame = 8
 3608              		@ frame_needed = 1, uses_anonymous_args = 0
 3609              		@ link register save eliminated.
 3610 0000 80B4     		push	{r7}
 3611              	.LCFI161:
 3612              		.cfi_def_cfa_offset 4
 3613              		.cfi_offset 7, -4
 3614 0002 83B0     		sub	sp, sp, #12
 3615              	.LCFI162:
 3616              		.cfi_def_cfa_offset 16
 3617 0004 00AF     		add	r7, sp, #0
 3618              	.LCFI163:
 3619              		.cfi_def_cfa_register 7
 3620 0006 7860     		str	r0, [r7, #4]
1638:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1639:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1640:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1641:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_RxHalfCpltCallback could be implemented in the user file
1642:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1643:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3621              		.loc 1 1643 1
 3622 0008 00BF     		nop
 3623 000a 0C37     		adds	r7, r7, #12
 3624              	.LCFI164:
 3625              		.cfi_def_cfa_offset 4
 3626 000c BD46     		mov	sp, r7
 3627              	.LCFI165:
 3628              		.cfi_def_cfa_register 13
 3629              		@ sp needed
 3630 000e 5DF8047B 		ldr	r7, [sp], #4
 3631              	.LCFI166:
 3632              		.cfi_restore 7
 3633              		.cfi_def_cfa_offset 0
 3634 0012 7047     		bx	lr
 3635              		.cfi_endproc
 3636              	.LFE156:
 3638              		.section	.text.HAL_IRDA_ErrorCallback,"ax",%progbits
 3639              		.align	1
 3640              		.weak	HAL_IRDA_ErrorCallback
 3641              		.syntax unified
 3642              		.thumb
 3643              		.thumb_func
 3644              		.fpu fpv4-sp-d16
 3646              	HAL_IRDA_ErrorCallback:
 3647              	.LFB157:
1644:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1645:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1646:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief IRDA error callbacks.
1647:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1648:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1649:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
ARM GAS  /tmp/ccJhy18e.s 			page 93


1650:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1651:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
1652:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3648              		.loc 1 1652 1
 3649              		.cfi_startproc
 3650              		@ args = 0, pretend = 0, frame = 8
 3651              		@ frame_needed = 1, uses_anonymous_args = 0
 3652              		@ link register save eliminated.
 3653 0000 80B4     		push	{r7}
 3654              	.LCFI167:
 3655              		.cfi_def_cfa_offset 4
 3656              		.cfi_offset 7, -4
 3657 0002 83B0     		sub	sp, sp, #12
 3658              	.LCFI168:
 3659              		.cfi_def_cfa_offset 16
 3660 0004 00AF     		add	r7, sp, #0
 3661              	.LCFI169:
 3662              		.cfi_def_cfa_register 7
 3663 0006 7860     		str	r0, [r7, #4]
1653:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1654:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1655:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1656:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   the HAL_IRDA_ErrorCallback could be implemented in the user file
1657:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */ 
1658:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3664              		.loc 1 1658 1
 3665 0008 00BF     		nop
 3666 000a 0C37     		adds	r7, r7, #12
 3667              	.LCFI170:
 3668              		.cfi_def_cfa_offset 4
 3669 000c BD46     		mov	sp, r7
 3670              	.LCFI171:
 3671              		.cfi_def_cfa_register 13
 3672              		@ sp needed
 3673 000e 5DF8047B 		ldr	r7, [sp], #4
 3674              	.LCFI172:
 3675              		.cfi_restore 7
 3676              		.cfi_def_cfa_offset 0
 3677 0012 7047     		bx	lr
 3678              		.cfi_endproc
 3679              	.LFE157:
 3681              		.section	.text.HAL_IRDA_AbortCpltCallback,"ax",%progbits
 3682              		.align	1
 3683              		.weak	HAL_IRDA_AbortCpltCallback
 3684              		.syntax unified
 3685              		.thumb
 3686              		.thumb_func
 3687              		.fpu fpv4-sp-d16
 3689              	HAL_IRDA_AbortCpltCallback:
 3690              	.LFB158:
1659:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1660:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1661:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA Abort Complete callback.
1662:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1663:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1664:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1665:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_AbortCpltCallback(IRDA_HandleTypeDef *hirda)
ARM GAS  /tmp/ccJhy18e.s 			page 94


1666:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3691              		.loc 1 1666 1
 3692              		.cfi_startproc
 3693              		@ args = 0, pretend = 0, frame = 8
 3694              		@ frame_needed = 1, uses_anonymous_args = 0
 3695              		@ link register save eliminated.
 3696 0000 80B4     		push	{r7}
 3697              	.LCFI173:
 3698              		.cfi_def_cfa_offset 4
 3699              		.cfi_offset 7, -4
 3700 0002 83B0     		sub	sp, sp, #12
 3701              	.LCFI174:
 3702              		.cfi_def_cfa_offset 16
 3703 0004 00AF     		add	r7, sp, #0
 3704              	.LCFI175:
 3705              		.cfi_def_cfa_register 7
 3706 0006 7860     		str	r0, [r7, #4]
1667:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1668:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1669:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1670:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1671:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_AbortCpltCallback can be implemented in the user file.
1672:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    */
1673:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3707              		.loc 1 1673 1
 3708 0008 00BF     		nop
 3709 000a 0C37     		adds	r7, r7, #12
 3710              	.LCFI176:
 3711              		.cfi_def_cfa_offset 4
 3712 000c BD46     		mov	sp, r7
 3713              	.LCFI177:
 3714              		.cfi_def_cfa_register 13
 3715              		@ sp needed
 3716 000e 5DF8047B 		ldr	r7, [sp], #4
 3717              	.LCFI178:
 3718              		.cfi_restore 7
 3719              		.cfi_def_cfa_offset 0
 3720 0012 7047     		bx	lr
 3721              		.cfi_endproc
 3722              	.LFE158:
 3724              		.section	.text.HAL_IRDA_AbortTransmitCpltCallback,"ax",%progbits
 3725              		.align	1
 3726              		.weak	HAL_IRDA_AbortTransmitCpltCallback
 3727              		.syntax unified
 3728              		.thumb
 3729              		.thumb_func
 3730              		.fpu fpv4-sp-d16
 3732              	HAL_IRDA_AbortTransmitCpltCallback:
 3733              	.LFB159:
1674:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1675:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1676:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA Abort Transmit Complete callback.
1677:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1678:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1679:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1680:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_AbortTransmitCpltCallback(IRDA_HandleTypeDef *hirda)
1681:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
ARM GAS  /tmp/ccJhy18e.s 			page 95


 3734              		.loc 1 1681 1
 3735              		.cfi_startproc
 3736              		@ args = 0, pretend = 0, frame = 8
 3737              		@ frame_needed = 1, uses_anonymous_args = 0
 3738              		@ link register save eliminated.
 3739 0000 80B4     		push	{r7}
 3740              	.LCFI179:
 3741              		.cfi_def_cfa_offset 4
 3742              		.cfi_offset 7, -4
 3743 0002 83B0     		sub	sp, sp, #12
 3744              	.LCFI180:
 3745              		.cfi_def_cfa_offset 16
 3746 0004 00AF     		add	r7, sp, #0
 3747              	.LCFI181:
 3748              		.cfi_def_cfa_register 7
 3749 0006 7860     		str	r0, [r7, #4]
1682:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1683:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1684:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1685:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1686:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_AbortTransmitCpltCallback can be implemented in the user file.
1687:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    */
1688:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3750              		.loc 1 1688 1
 3751 0008 00BF     		nop
 3752 000a 0C37     		adds	r7, r7, #12
 3753              	.LCFI182:
 3754              		.cfi_def_cfa_offset 4
 3755 000c BD46     		mov	sp, r7
 3756              	.LCFI183:
 3757              		.cfi_def_cfa_register 13
 3758              		@ sp needed
 3759 000e 5DF8047B 		ldr	r7, [sp], #4
 3760              	.LCFI184:
 3761              		.cfi_restore 7
 3762              		.cfi_def_cfa_offset 0
 3763 0012 7047     		bx	lr
 3764              		.cfi_endproc
 3765              	.LFE159:
 3767              		.section	.text.HAL_IRDA_AbortReceiveCpltCallback,"ax",%progbits
 3768              		.align	1
 3769              		.weak	HAL_IRDA_AbortReceiveCpltCallback
 3770              		.syntax unified
 3771              		.thumb
 3772              		.thumb_func
 3773              		.fpu fpv4-sp-d16
 3775              	HAL_IRDA_AbortReceiveCpltCallback:
 3776              	.LFB160:
1689:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1690:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1691:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  IRDA Abort ReceiveComplete callback.
1692:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda IRDA handle.
1693:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1694:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1695:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** __weak void HAL_IRDA_AbortReceiveCpltCallback(IRDA_HandleTypeDef *hirda)
1696:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3777              		.loc 1 1696 1
ARM GAS  /tmp/ccJhy18e.s 			page 96


 3778              		.cfi_startproc
 3779              		@ args = 0, pretend = 0, frame = 8
 3780              		@ frame_needed = 1, uses_anonymous_args = 0
 3781              		@ link register save eliminated.
 3782 0000 80B4     		push	{r7}
 3783              	.LCFI185:
 3784              		.cfi_def_cfa_offset 4
 3785              		.cfi_offset 7, -4
 3786 0002 83B0     		sub	sp, sp, #12
 3787              	.LCFI186:
 3788              		.cfi_def_cfa_offset 16
 3789 0004 00AF     		add	r7, sp, #0
 3790              	.LCFI187:
 3791              		.cfi_def_cfa_register 7
 3792 0006 7860     		str	r0, [r7, #4]
1697:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Prevent unused argument(s) compilation warning */
1698:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   UNUSED(hirda);
1699:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1700:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1701:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****             the HAL_IRDA_AbortReceiveCpltCallback can be implemented in the user file.
1702:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****    */
1703:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3793              		.loc 1 1703 1
 3794 0008 00BF     		nop
 3795 000a 0C37     		adds	r7, r7, #12
 3796              	.LCFI188:
 3797              		.cfi_def_cfa_offset 4
 3798 000c BD46     		mov	sp, r7
 3799              	.LCFI189:
 3800              		.cfi_def_cfa_register 13
 3801              		@ sp needed
 3802 000e 5DF8047B 		ldr	r7, [sp], #4
 3803              	.LCFI190:
 3804              		.cfi_restore 7
 3805              		.cfi_def_cfa_offset 0
 3806 0012 7047     		bx	lr
 3807              		.cfi_endproc
 3808              	.LFE160:
 3810              		.section	.text.HAL_IRDA_GetState,"ax",%progbits
 3811              		.align	1
 3812              		.global	HAL_IRDA_GetState
 3813              		.syntax unified
 3814              		.thumb
 3815              		.thumb_func
 3816              		.fpu fpv4-sp-d16
 3818              	HAL_IRDA_GetState:
 3819              	.LFB161:
1704:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1705:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1706:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @}
1707:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1708:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1709:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /** @defgroup IRDA_Exported_Functions_Group3 Peripheral State and Errors functions 
1710:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *  @brief   IRDA State and Errors functions 
1711:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *
1712:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** @verbatim   
1713:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================
ARM GAS  /tmp/ccJhy18e.s 			page 97


1714:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****                   ##### Peripheral State and Errors functions #####
1715:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   ==============================================================================  
1716:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   [..]
1717:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     This subsection provides a set of functions allowing to return the State of IrDA 
1718:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     communication process and also return Peripheral Errors occurred during communication process
1719:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) HAL_IRDA_GetState() API can be helpful to check in run-time the state of the IrDA peripher
1720:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      (+) HAL_IRDA_GetError() check in run-time errors that could be occurred during communication. 
1721:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****      
1722:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** @endverbatim
1723:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @{
1724:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1725:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1726:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1727:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Returns the IRDA state.
1728:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1729:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1730:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL state
1731:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1732:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** HAL_IRDA_StateTypeDef HAL_IRDA_GetState(IRDA_HandleTypeDef *hirda)
1733:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3820              		.loc 1 1733 1
 3821              		.cfi_startproc
 3822              		@ args = 0, pretend = 0, frame = 16
 3823              		@ frame_needed = 1, uses_anonymous_args = 0
 3824              		@ link register save eliminated.
 3825 0000 80B4     		push	{r7}
 3826              	.LCFI191:
 3827              		.cfi_def_cfa_offset 4
 3828              		.cfi_offset 7, -4
 3829 0002 85B0     		sub	sp, sp, #20
 3830              	.LCFI192:
 3831              		.cfi_def_cfa_offset 24
 3832 0004 00AF     		add	r7, sp, #0
 3833              	.LCFI193:
 3834              		.cfi_def_cfa_register 7
 3835 0006 7860     		str	r0, [r7, #4]
1734:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t temp1 = 0x00U, temp2 = 0x00U;
 3836              		.loc 1 1734 12
 3837 0008 0023     		movs	r3, #0
 3838 000a FB60     		str	r3, [r7, #12]
 3839              		.loc 1 1734 27
 3840 000c 0023     		movs	r3, #0
 3841 000e BB60     		str	r3, [r7, #8]
1735:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   temp1 = hirda->gState;
 3842              		.loc 1 1735 16
 3843 0010 7B68     		ldr	r3, [r7, #4]
 3844 0012 93F83530 		ldrb	r3, [r3, #53]
 3845 0016 DBB2     		uxtb	r3, r3
 3846              		.loc 1 1735 9
 3847 0018 FB60     		str	r3, [r7, #12]
1736:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   temp2 = hirda->RxState;
 3848              		.loc 1 1736 16
 3849 001a 7B68     		ldr	r3, [r7, #4]
 3850 001c 93F83630 		ldrb	r3, [r3, #54]
 3851 0020 DBB2     		uxtb	r3, r3
 3852              		.loc 1 1736 9
 3853 0022 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccJhy18e.s 			page 98


1737:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1738:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return (HAL_IRDA_StateTypeDef)(temp1 | temp2);
 3854              		.loc 1 1738 10
 3855 0024 FB68     		ldr	r3, [r7, #12]
 3856 0026 DAB2     		uxtb	r2, r3
 3857 0028 BB68     		ldr	r3, [r7, #8]
 3858 002a DBB2     		uxtb	r3, r3
 3859 002c 1343     		orrs	r3, r3, r2
 3860 002e DBB2     		uxtb	r3, r3
1739:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3861              		.loc 1 1739 1
 3862 0030 1846     		mov	r0, r3
 3863 0032 1437     		adds	r7, r7, #20
 3864              	.LCFI194:
 3865              		.cfi_def_cfa_offset 4
 3866 0034 BD46     		mov	sp, r7
 3867              	.LCFI195:
 3868              		.cfi_def_cfa_register 13
 3869              		@ sp needed
 3870 0036 5DF8047B 		ldr	r7, [sp], #4
 3871              	.LCFI196:
 3872              		.cfi_restore 7
 3873              		.cfi_def_cfa_offset 0
 3874 003a 7047     		bx	lr
 3875              		.cfi_endproc
 3876              	.LFE161:
 3878              		.section	.text.HAL_IRDA_GetError,"ax",%progbits
 3879              		.align	1
 3880              		.global	HAL_IRDA_GetError
 3881              		.syntax unified
 3882              		.thumb
 3883              		.thumb_func
 3884              		.fpu fpv4-sp-d16
 3886              	HAL_IRDA_GetError:
 3887              	.LFB162:
1740:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1741:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1742:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Return the IARDA error code
1743:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda  pointer to a IRDA_HandleTypeDef structure that contains
1744:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *              the configuration information for the specified IRDA.
1745:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval IRDA Error Code
1746:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1747:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** uint32_t HAL_IRDA_GetError(IRDA_HandleTypeDef *hirda)
1748:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3888              		.loc 1 1748 1
 3889              		.cfi_startproc
 3890              		@ args = 0, pretend = 0, frame = 8
 3891              		@ frame_needed = 1, uses_anonymous_args = 0
 3892              		@ link register save eliminated.
 3893 0000 80B4     		push	{r7}
 3894              	.LCFI197:
 3895              		.cfi_def_cfa_offset 4
 3896              		.cfi_offset 7, -4
 3897 0002 83B0     		sub	sp, sp, #12
 3898              	.LCFI198:
 3899              		.cfi_def_cfa_offset 16
 3900 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccJhy18e.s 			page 99


 3901              	.LCFI199:
 3902              		.cfi_def_cfa_register 7
 3903 0006 7860     		str	r0, [r7, #4]
1749:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return hirda->ErrorCode;
 3904              		.loc 1 1749 15
 3905 0008 7B68     		ldr	r3, [r7, #4]
 3906 000a 9B6B     		ldr	r3, [r3, #56]
1750:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3907              		.loc 1 1750 1
 3908 000c 1846     		mov	r0, r3
 3909 000e 0C37     		adds	r7, r7, #12
 3910              	.LCFI200:
 3911              		.cfi_def_cfa_offset 4
 3912 0010 BD46     		mov	sp, r7
 3913              	.LCFI201:
 3914              		.cfi_def_cfa_register 13
 3915              		@ sp needed
 3916 0012 5DF8047B 		ldr	r7, [sp], #4
 3917              	.LCFI202:
 3918              		.cfi_restore 7
 3919              		.cfi_def_cfa_offset 0
 3920 0016 7047     		bx	lr
 3921              		.cfi_endproc
 3922              	.LFE162:
 3924              		.section	.text.IRDA_DMATransmitCplt,"ax",%progbits
 3925              		.align	1
 3926              		.syntax unified
 3927              		.thumb
 3928              		.thumb_func
 3929              		.fpu fpv4-sp-d16
 3931              	IRDA_DMATransmitCplt:
 3932              	.LFB163:
1751:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1752:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1753:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @}
1754:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1755:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1756:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1757:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA transmit process complete callback. 
1758:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma  DMA handle
1759:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1760:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1761:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitCplt(DMA_HandleTypeDef *hdma)
1762:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 3933              		.loc 1 1762 1
 3934              		.cfi_startproc
 3935              		@ args = 0, pretend = 0, frame = 16
 3936              		@ frame_needed = 1, uses_anonymous_args = 0
 3937 0000 80B5     		push	{r7, lr}
 3938              	.LCFI203:
 3939              		.cfi_def_cfa_offset 8
 3940              		.cfi_offset 7, -8
 3941              		.cfi_offset 14, -4
 3942 0002 84B0     		sub	sp, sp, #16
 3943              	.LCFI204:
 3944              		.cfi_def_cfa_offset 24
 3945 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccJhy18e.s 			page 100


 3946              	.LCFI205:
 3947              		.cfi_def_cfa_register 7
 3948 0006 7860     		str	r0, [r7, #4]
1763:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 3949              		.loc 1 1763 23
 3950 0008 7B68     		ldr	r3, [r7, #4]
 3951 000a 9B6B     		ldr	r3, [r3, #56]
 3952 000c FB60     		str	r3, [r7, #12]
1764:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Normal mode */
1765:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 3953              		.loc 1 1765 11
 3954 000e 7B68     		ldr	r3, [r7, #4]
 3955 0010 1B68     		ldr	r3, [r3]
 3956              		.loc 1 1765 21
 3957 0012 1B68     		ldr	r3, [r3]
 3958              		.loc 1 1765 26
 3959 0014 03F48073 		and	r3, r3, #256
 3960              		.loc 1 1765 5
 3961 0018 002B     		cmp	r3, #0
 3962 001a 13D1     		bne	.L164
1766:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1767:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0U;
 3963              		.loc 1 1767 24
 3964 001c FB68     		ldr	r3, [r7, #12]
 3965 001e 0022     		movs	r2, #0
 3966 0020 5A84     		strh	r2, [r3, #34]	@ movhi
1768:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1769:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the DMA transfer for transmit request by setting the DMAT bit
1770:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     in the IRDA CR3 register */
1771:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAT);
 3967              		.loc 1 1771 5
 3968 0022 FB68     		ldr	r3, [r7, #12]
 3969 0024 1B68     		ldr	r3, [r3]
 3970 0026 5A69     		ldr	r2, [r3, #20]
 3971 0028 FB68     		ldr	r3, [r7, #12]
 3972 002a 1B68     		ldr	r3, [r3]
 3973 002c 22F08002 		bic	r2, r2, #128
 3974 0030 5A61     		str	r2, [r3, #20]
1772:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1773:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Enable the IRDA Transmit Complete Interrupt */
1774:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 3975              		.loc 1 1774 5
 3976 0032 FB68     		ldr	r3, [r7, #12]
 3977 0034 1B68     		ldr	r3, [r3]
 3978 0036 DA68     		ldr	r2, [r3, #12]
 3979 0038 FB68     		ldr	r3, [r7, #12]
 3980 003a 1B68     		ldr	r3, [r3]
 3981 003c 42F04002 		orr	r2, r2, #64
 3982 0040 DA60     		str	r2, [r3, #12]
1775:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1776:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Circular mode */
1777:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
1778:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1779:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     HAL_IRDA_TxCpltCallback(hirda);
1780:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1781:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 3983              		.loc 1 1781 1
ARM GAS  /tmp/ccJhy18e.s 			page 101


 3984 0042 02E0     		b	.L166
 3985              	.L164:
1779:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
 3986              		.loc 1 1779 5
 3987 0044 F868     		ldr	r0, [r7, #12]
 3988 0046 FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
 3989              	.L166:
 3990              		.loc 1 1781 1
 3991 004a 00BF     		nop
 3992 004c 1037     		adds	r7, r7, #16
 3993              	.LCFI206:
 3994              		.cfi_def_cfa_offset 8
 3995 004e BD46     		mov	sp, r7
 3996              	.LCFI207:
 3997              		.cfi_def_cfa_register 13
 3998              		@ sp needed
 3999 0050 80BD     		pop	{r7, pc}
 4000              		.cfi_endproc
 4001              	.LFE163:
 4003              		.section	.text.IRDA_DMATransmitHalfCplt,"ax",%progbits
 4004              		.align	1
 4005              		.syntax unified
 4006              		.thumb
 4007              		.thumb_func
 4008              		.fpu fpv4-sp-d16
 4010              	IRDA_DMATransmitHalfCplt:
 4011              	.LFB164:
1782:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1783:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1784:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback 
1785:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1786:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified DMA module.
1787:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1788:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1789:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMATransmitHalfCplt(DMA_HandleTypeDef *hdma)
1790:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4012              		.loc 1 1790 1
 4013              		.cfi_startproc
 4014              		@ args = 0, pretend = 0, frame = 16
 4015              		@ frame_needed = 1, uses_anonymous_args = 0
 4016 0000 80B5     		push	{r7, lr}
 4017              	.LCFI208:
 4018              		.cfi_def_cfa_offset 8
 4019              		.cfi_offset 7, -8
 4020              		.cfi_offset 14, -4
 4021 0002 84B0     		sub	sp, sp, #16
 4022              	.LCFI209:
 4023              		.cfi_def_cfa_offset 24
 4024 0004 00AF     		add	r7, sp, #0
 4025              	.LCFI210:
 4026              		.cfi_def_cfa_register 7
 4027 0006 7860     		str	r0, [r7, #4]
1791:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4028              		.loc 1 1791 23
 4029 0008 7B68     		ldr	r3, [r7, #4]
 4030 000a 9B6B     		ldr	r3, [r3, #56]
 4031 000c FB60     		str	r3, [r7, #12]
ARM GAS  /tmp/ccJhy18e.s 			page 102


1792:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1793:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_TxHalfCpltCallback(hirda); 
 4032              		.loc 1 1793 3
 4033 000e F868     		ldr	r0, [r7, #12]
 4034 0010 FFF7FEFF 		bl	HAL_IRDA_TxHalfCpltCallback
1794:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4035              		.loc 1 1794 1
 4036 0014 00BF     		nop
 4037 0016 1037     		adds	r7, r7, #16
 4038              	.LCFI211:
 4039              		.cfi_def_cfa_offset 8
 4040 0018 BD46     		mov	sp, r7
 4041              	.LCFI212:
 4042              		.cfi_def_cfa_register 13
 4043              		@ sp needed
 4044 001a 80BD     		pop	{r7, pc}
 4045              		.cfi_endproc
 4046              	.LFE164:
 4048              		.section	.text.IRDA_DMAReceiveCplt,"ax",%progbits
 4049              		.align	1
 4050              		.syntax unified
 4051              		.thumb
 4052              		.thumb_func
 4053              		.fpu fpv4-sp-d16
 4055              	IRDA_DMAReceiveCplt:
 4056              	.LFB165:
1795:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1796:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1797:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA receive process complete callback. 
1798:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle
1799:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1800:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1801:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveCplt(DMA_HandleTypeDef *hdma)   
1802:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4057              		.loc 1 1802 1
 4058              		.cfi_startproc
 4059              		@ args = 0, pretend = 0, frame = 16
 4060              		@ frame_needed = 1, uses_anonymous_args = 0
 4061 0000 80B5     		push	{r7, lr}
 4062              	.LCFI213:
 4063              		.cfi_def_cfa_offset 8
 4064              		.cfi_offset 7, -8
 4065              		.cfi_offset 14, -4
 4066 0002 84B0     		sub	sp, sp, #16
 4067              	.LCFI214:
 4068              		.cfi_def_cfa_offset 24
 4069 0004 00AF     		add	r7, sp, #0
 4070              	.LCFI215:
 4071              		.cfi_def_cfa_register 7
 4072 0006 7860     		str	r0, [r7, #4]
1803:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4073              		.loc 1 1803 23
 4074 0008 7B68     		ldr	r3, [r7, #4]
 4075 000a 9B6B     		ldr	r3, [r3, #56]
 4076 000c FB60     		str	r3, [r7, #12]
1804:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* DMA Normal mode */
1805:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
ARM GAS  /tmp/ccJhy18e.s 			page 103


 4077              		.loc 1 1805 11
 4078 000e 7B68     		ldr	r3, [r7, #4]
 4079 0010 1B68     		ldr	r3, [r3]
 4080              		.loc 1 1805 21
 4081 0012 1B68     		ldr	r3, [r3]
 4082              		.loc 1 1805 26
 4083 0014 03F48073 		and	r3, r3, #256
 4084              		.loc 1 1805 5
 4085 0018 002B     		cmp	r3, #0
 4086 001a 1ED1     		bne	.L169
1806:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1807:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0U;
 4087              		.loc 1 1807 24
 4088 001c FB68     		ldr	r3, [r7, #12]
 4089 001e 0022     		movs	r2, #0
 4090 0020 5A85     		strh	r2, [r3, #42]	@ movhi
1808:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1809:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1810:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 4091              		.loc 1 1810 5
 4092 0022 FB68     		ldr	r3, [r7, #12]
 4093 0024 1B68     		ldr	r3, [r3]
 4094 0026 DA68     		ldr	r2, [r3, #12]
 4095 0028 FB68     		ldr	r3, [r7, #12]
 4096 002a 1B68     		ldr	r3, [r3]
 4097 002c 22F48072 		bic	r2, r2, #256
 4098 0030 DA60     		str	r2, [r3, #12]
1811:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 4099              		.loc 1 1811 5
 4100 0032 FB68     		ldr	r3, [r7, #12]
 4101 0034 1B68     		ldr	r3, [r3]
 4102 0036 5A69     		ldr	r2, [r3, #20]
 4103 0038 FB68     		ldr	r3, [r7, #12]
 4104 003a 1B68     		ldr	r3, [r3]
 4105 003c 22F00102 		bic	r2, r2, #1
 4106 0040 5A61     		str	r2, [r3, #20]
1812:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1813:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
1814:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     in the IRDA CR3 register */
1815:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 4107              		.loc 1 1815 5
 4108 0042 FB68     		ldr	r3, [r7, #12]
 4109 0044 1B68     		ldr	r3, [r3]
 4110 0046 5A69     		ldr	r2, [r3, #20]
 4111 0048 FB68     		ldr	r3, [r7, #12]
 4112 004a 1B68     		ldr	r3, [r3]
 4113 004c 22F04002 		bic	r2, r2, #64
 4114 0050 5A61     		str	r2, [r3, #20]
1816:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1817:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* At end of Rx process, restore hirda->RxState to Ready */
1818:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxState = HAL_IRDA_STATE_READY;
 4115              		.loc 1 1818 20
 4116 0052 FB68     		ldr	r3, [r7, #12]
 4117 0054 2022     		movs	r2, #32
 4118 0056 83F83620 		strb	r2, [r3, #54]
 4119              	.L169:
1819:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
ARM GAS  /tmp/ccJhy18e.s 			page 104


1820:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1821:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_RxCpltCallback(hirda);
 4120              		.loc 1 1821 3
 4121 005a F868     		ldr	r0, [r7, #12]
 4122 005c FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
1822:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4123              		.loc 1 1822 1
 4124 0060 00BF     		nop
 4125 0062 1037     		adds	r7, r7, #16
 4126              	.LCFI216:
 4127              		.cfi_def_cfa_offset 8
 4128 0064 BD46     		mov	sp, r7
 4129              	.LCFI217:
 4130              		.cfi_def_cfa_register 13
 4131              		@ sp needed
 4132 0066 80BD     		pop	{r7, pc}
 4133              		.cfi_endproc
 4134              	.LFE165:
 4136              		.section	.text.IRDA_DMAReceiveHalfCplt,"ax",%progbits
 4137              		.align	1
 4138              		.syntax unified
 4139              		.thumb
 4140              		.thumb_func
 4141              		.fpu fpv4-sp-d16
 4143              	IRDA_DMAReceiveHalfCplt:
 4144              	.LFB166:
1823:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1824:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1825:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief DMA IRDA receive process half complete callback 
1826:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1827:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified DMA module.
1828:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1829:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1830:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAReceiveHalfCplt(DMA_HandleTypeDef *hdma)
1831:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4145              		.loc 1 1831 1
 4146              		.cfi_startproc
 4147              		@ args = 0, pretend = 0, frame = 16
 4148              		@ frame_needed = 1, uses_anonymous_args = 0
 4149 0000 80B5     		push	{r7, lr}
 4150              	.LCFI218:
 4151              		.cfi_def_cfa_offset 8
 4152              		.cfi_offset 7, -8
 4153              		.cfi_offset 14, -4
 4154 0002 84B0     		sub	sp, sp, #16
 4155              	.LCFI219:
 4156              		.cfi_def_cfa_offset 24
 4157 0004 00AF     		add	r7, sp, #0
 4158              	.LCFI220:
 4159              		.cfi_def_cfa_register 7
 4160 0006 7860     		str	r0, [r7, #4]
1832:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4161              		.loc 1 1832 23
 4162 0008 7B68     		ldr	r3, [r7, #4]
 4163 000a 9B6B     		ldr	r3, [r3, #56]
 4164 000c FB60     		str	r3, [r7, #12]
1833:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_RxHalfCpltCallback(hirda); 
ARM GAS  /tmp/ccJhy18e.s 			page 105


 4165              		.loc 1 1833 3
 4166 000e F868     		ldr	r0, [r7, #12]
 4167 0010 FFF7FEFF 		bl	HAL_IRDA_RxHalfCpltCallback
1834:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4168              		.loc 1 1834 1
 4169 0014 00BF     		nop
 4170 0016 1037     		adds	r7, r7, #16
 4171              	.LCFI221:
 4172              		.cfi_def_cfa_offset 8
 4173 0018 BD46     		mov	sp, r7
 4174              	.LCFI222:
 4175              		.cfi_def_cfa_register 13
 4176              		@ sp needed
 4177 001a 80BD     		pop	{r7, pc}
 4178              		.cfi_endproc
 4179              	.LFE166:
 4181              		.section	.text.IRDA_DMAError,"ax",%progbits
 4182              		.align	1
 4183              		.syntax unified
 4184              		.thumb
 4185              		.thumb_func
 4186              		.fpu fpv4-sp-d16
 4188              	IRDA_DMAError:
 4189              	.LFB167:
1835:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1836:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1837:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  DMA IRDA communication error callback.
1838:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hdma DMA handle
1839:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
1840:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1841:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_DMAError(DMA_HandleTypeDef *hdma)
1842:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4190              		.loc 1 1842 1
 4191              		.cfi_startproc
 4192              		@ args = 0, pretend = 0, frame = 16
 4193              		@ frame_needed = 1, uses_anonymous_args = 0
 4194 0000 80B5     		push	{r7, lr}
 4195              	.LCFI223:
 4196              		.cfi_def_cfa_offset 8
 4197              		.cfi_offset 7, -8
 4198              		.cfi_offset 14, -4
 4199 0002 84B0     		sub	sp, sp, #16
 4200              	.LCFI224:
 4201              		.cfi_def_cfa_offset 24
 4202 0004 00AF     		add	r7, sp, #0
 4203              	.LCFI225:
 4204              		.cfi_def_cfa_register 7
 4205 0006 7860     		str	r0, [r7, #4]
1843:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint32_t dmarequest = 0x00U;
 4206              		.loc 1 1843 12
 4207 0008 0023     		movs	r3, #0
 4208 000a FB60     		str	r3, [r7, #12]
1844:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   IRDA_HandleTypeDef* hirda = ( IRDA_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 4209              		.loc 1 1844 23
 4210 000c 7B68     		ldr	r3, [r7, #4]
 4211 000e 9B6B     		ldr	r3, [r3, #56]
 4212 0010 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/ccJhy18e.s 			page 106


1845:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1846:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Tx request if ongoing */
1847:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAT);
 4213              		.loc 1 1847 16
 4214 0012 BB68     		ldr	r3, [r7, #8]
 4215 0014 1B68     		ldr	r3, [r3]
 4216 0016 5B69     		ldr	r3, [r3, #20]
 4217 0018 03F08003 		and	r3, r3, #128
 4218 001c 002B     		cmp	r3, #0
 4219 001e 14BF     		ite	ne
 4220 0020 0123     		movne	r3, #1
 4221 0022 0023     		moveq	r3, #0
 4222 0024 DBB2     		uxtb	r3, r3
 4223              		.loc 1 1847 14
 4224 0026 FB60     		str	r3, [r7, #12]
1848:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->gState == HAL_IRDA_STATE_BUSY_TX) && dmarequest)
 4225              		.loc 1 1848 12
 4226 0028 BB68     		ldr	r3, [r7, #8]
 4227 002a 93F83530 		ldrb	r3, [r3, #53]
 4228 002e DBB2     		uxtb	r3, r3
 4229              		.loc 1 1848 5
 4230 0030 212B     		cmp	r3, #33
 4231 0032 08D1     		bne	.L172
 4232              		.loc 1 1848 48 discriminator 1
 4233 0034 FB68     		ldr	r3, [r7, #12]
 4234 0036 002B     		cmp	r3, #0
 4235 0038 05D0     		beq	.L172
1849:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1850:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->TxXferCount = 0U;
 4236              		.loc 1 1850 24
 4237 003a BB68     		ldr	r3, [r7, #8]
 4238 003c 0022     		movs	r2, #0
 4239 003e 5A84     		strh	r2, [r3, #34]	@ movhi
1851:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndTxTransfer(hirda);
 4240              		.loc 1 1851 5
 4241 0040 B868     		ldr	r0, [r7, #8]
 4242 0042 FFF7FEFF 		bl	IRDA_EndTxTransfer
 4243              	.L172:
1852:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1853:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1854:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Stop IRDA DMA Rx request if ongoing */
1855:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   dmarequest = HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR);
 4244              		.loc 1 1855 16
 4245 0046 BB68     		ldr	r3, [r7, #8]
 4246 0048 1B68     		ldr	r3, [r3]
 4247 004a 5B69     		ldr	r3, [r3, #20]
 4248 004c 03F04003 		and	r3, r3, #64
 4249 0050 002B     		cmp	r3, #0
 4250 0052 14BF     		ite	ne
 4251 0054 0123     		movne	r3, #1
 4252 0056 0023     		moveq	r3, #0
 4253 0058 DBB2     		uxtb	r3, r3
 4254              		.loc 1 1855 14
 4255 005a FB60     		str	r3, [r7, #12]
1856:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->RxState == HAL_IRDA_STATE_BUSY_RX) && dmarequest)
 4256              		.loc 1 1856 12
 4257 005c BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccJhy18e.s 			page 107


 4258 005e 93F83630 		ldrb	r3, [r3, #54]
 4259 0062 DBB2     		uxtb	r3, r3
 4260              		.loc 1 1856 5
 4261 0064 222B     		cmp	r3, #34
 4262 0066 08D1     		bne	.L173
 4263              		.loc 1 1856 49 discriminator 1
 4264 0068 FB68     		ldr	r3, [r7, #12]
 4265 006a 002B     		cmp	r3, #0
 4266 006c 05D0     		beq	.L173
1857:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1858:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     hirda->RxXferCount = 0U;
 4267              		.loc 1 1858 24
 4268 006e BB68     		ldr	r3, [r7, #8]
 4269 0070 0022     		movs	r2, #0
 4270 0072 5A85     		strh	r2, [r3, #42]	@ movhi
1859:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     IRDA_EndRxTransfer(hirda);
 4271              		.loc 1 1859 5
 4272 0074 B868     		ldr	r0, [r7, #8]
 4273 0076 FFF7FEFF 		bl	IRDA_EndRxTransfer
 4274              	.L173:
1860:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1861:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1862:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->ErrorCode |= HAL_IRDA_ERROR_DMA; 
 4275              		.loc 1 1862 20
 4276 007a BB68     		ldr	r3, [r7, #8]
 4277 007c 9B6B     		ldr	r3, [r3, #56]
 4278 007e 43F01002 		orr	r2, r3, #16
 4279 0082 BB68     		ldr	r3, [r7, #8]
 4280 0084 9A63     		str	r2, [r3, #56]
1863:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1864:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_ErrorCallback(hirda);
 4281              		.loc 1 1864 3
 4282 0086 B868     		ldr	r0, [r7, #8]
 4283 0088 FFF7FEFF 		bl	HAL_IRDA_ErrorCallback
1865:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4284              		.loc 1 1865 1
 4285 008c 00BF     		nop
 4286 008e 1037     		adds	r7, r7, #16
 4287              	.LCFI226:
 4288              		.cfi_def_cfa_offset 8
 4289 0090 BD46     		mov	sp, r7
 4290              	.LCFI227:
 4291              		.cfi_def_cfa_register 13
 4292              		@ sp needed
 4293 0092 80BD     		pop	{r7, pc}
 4294              		.cfi_endproc
 4295              	.LFE167:
 4297              		.section	.text.IRDA_WaitOnFlagUntilTimeout,"ax",%progbits
 4298              		.align	1
 4299              		.syntax unified
 4300              		.thumb
 4301              		.thumb_func
 4302              		.fpu fpv4-sp-d16
 4304              	IRDA_WaitOnFlagUntilTimeout:
 4305              	.LFB168:
1866:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1867:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
ARM GAS  /tmp/ccJhy18e.s 			page 108


1868:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  This function handles IRDA Communication Timeout.
1869:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1870:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1871:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Flag specifies the IRDA flag to check.
1872:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Status The new Flag status (SET or RESET).
1873:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Tickstart Tick start value
1874:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  Timeout Timeout duration
1875:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1876:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1877:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, Flag
1878:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4306              		.loc 1 1878 1
 4307              		.cfi_startproc
 4308              		@ args = 4, pretend = 0, frame = 16
 4309              		@ frame_needed = 1, uses_anonymous_args = 0
 4310 0000 80B5     		push	{r7, lr}
 4311              	.LCFI228:
 4312              		.cfi_def_cfa_offset 8
 4313              		.cfi_offset 7, -8
 4314              		.cfi_offset 14, -4
 4315 0002 84B0     		sub	sp, sp, #16
 4316              	.LCFI229:
 4317              		.cfi_def_cfa_offset 24
 4318 0004 00AF     		add	r7, sp, #0
 4319              	.LCFI230:
 4320              		.cfi_def_cfa_register 7
 4321 0006 F860     		str	r0, [r7, #12]
 4322 0008 B960     		str	r1, [r7, #8]
 4323 000a 3B60     		str	r3, [r7]
 4324 000c 1346     		mov	r3, r2
 4325 000e FB71     		strb	r3, [r7, #7]
1879:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Wait until flag is set */
1880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   while((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 4326              		.loc 1 1880 8
 4327 0010 2CE0     		b	.L175
 4328              	.L178:
1881:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1882:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     /* Check for the Timeout */
1883:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(Timeout != HAL_MAX_DELAY)
 4329              		.loc 1 1883 7
 4330 0012 BB69     		ldr	r3, [r7, #24]
 4331 0014 B3F1FF3F 		cmp	r3, #-1
 4332 0018 28D0     		beq	.L175
1884:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1885:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 4333              		.loc 1 1885 9
 4334 001a BB69     		ldr	r3, [r7, #24]
 4335 001c 002B     		cmp	r3, #0
 4336 001e 07D0     		beq	.L176
 4337              		.loc 1 1885 29 discriminator 1
 4338 0020 FFF7FEFF 		bl	HAL_GetTick
 4339 0024 0246     		mov	r2, r0
 4340              		.loc 1 1885 43 discriminator 1
 4341 0026 3B68     		ldr	r3, [r7]
 4342 0028 D31A     		subs	r3, r2, r3
 4343              		.loc 1 1885 25 discriminator 1
 4344 002a BA69     		ldr	r2, [r7, #24]
ARM GAS  /tmp/ccJhy18e.s 			page 109


 4345 002c 9A42     		cmp	r2, r3
 4346 002e 1DD2     		bcs	.L175
 4347              	.L176:
1886:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1887:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
1888:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 4348              		.loc 1 1888 9
 4349 0030 FB68     		ldr	r3, [r7, #12]
 4350 0032 1B68     		ldr	r3, [r3]
 4351 0034 DA68     		ldr	r2, [r3, #12]
 4352 0036 FB68     		ldr	r3, [r7, #12]
 4353 0038 1B68     		ldr	r3, [r3]
 4354 003a 22F4D072 		bic	r2, r2, #416
 4355 003e DA60     		str	r2, [r3, #12]
1889:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 4356              		.loc 1 1889 9
 4357 0040 FB68     		ldr	r3, [r7, #12]
 4358 0042 1B68     		ldr	r3, [r3]
 4359 0044 5A69     		ldr	r2, [r3, #20]
 4360 0046 FB68     		ldr	r3, [r7, #12]
 4361 0048 1B68     		ldr	r3, [r3]
 4362 004a 22F00102 		bic	r2, r2, #1
 4363 004e 5A61     		str	r2, [r3, #20]
1890:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         
1891:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->gState  = HAL_IRDA_STATE_READY;
 4364              		.loc 1 1891 24
 4365 0050 FB68     		ldr	r3, [r7, #12]
 4366 0052 2022     		movs	r2, #32
 4367 0054 83F83520 		strb	r2, [r3, #53]
1892:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->RxState = HAL_IRDA_STATE_READY;
 4368              		.loc 1 1892 24
 4369 0058 FB68     		ldr	r3, [r7, #12]
 4370 005a 2022     		movs	r2, #32
 4371 005c 83F83620 		strb	r2, [r3, #54]
1893:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         
1894:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         /* Process Unlocked */
1895:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         __HAL_UNLOCK(hirda);
 4372              		.loc 1 1895 9
 4373 0060 FB68     		ldr	r3, [r7, #12]
 4374 0062 0022     		movs	r2, #0
 4375 0064 83F83420 		strb	r2, [r3, #52]
1896:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         
1897:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         return HAL_TIMEOUT;
 4376              		.loc 1 1897 16
 4377 0068 0323     		movs	r3, #3
 4378 006a 0FE0     		b	.L177
 4379              	.L175:
1880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 4380              		.loc 1 1880 10
 4381 006c FB68     		ldr	r3, [r7, #12]
 4382 006e 1B68     		ldr	r3, [r3]
 4383 0070 1A68     		ldr	r2, [r3]
 4384 0072 BB68     		ldr	r3, [r7, #8]
 4385 0074 1340     		ands	r3, r3, r2
1880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 4386              		.loc 1 1880 49
 4387 0076 BA68     		ldr	r2, [r7, #8]
ARM GAS  /tmp/ccJhy18e.s 			page 110


 4388 0078 9A42     		cmp	r2, r3
 4389 007a 0CBF     		ite	eq
 4390 007c 0123     		moveq	r3, #1
 4391 007e 0023     		movne	r3, #0
 4392 0080 DBB2     		uxtb	r3, r3
 4393 0082 1A46     		mov	r2, r3
1880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 4394              		.loc 1 1880 58
 4395 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1880:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
 4396              		.loc 1 1880 8
 4397 0086 9A42     		cmp	r2, r3
 4398 0088 C3D0     		beq	.L178
1898:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1899:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1900:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1901:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 4399              		.loc 1 1901 10
 4400 008a 0023     		movs	r3, #0
 4401              	.L177:
1902:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4402              		.loc 1 1902 1
 4403 008c 1846     		mov	r0, r3
 4404 008e 1037     		adds	r7, r7, #16
 4405              	.LCFI231:
 4406              		.cfi_def_cfa_offset 8
 4407 0090 BD46     		mov	sp, r7
 4408              	.LCFI232:
 4409              		.cfi_def_cfa_register 13
 4410              		@ sp needed
 4411 0092 80BD     		pop	{r7, pc}
 4412              		.cfi_endproc
 4413              	.LFE168:
 4415              		.section	.text.IRDA_Transmit_IT,"ax",%progbits
 4416              		.align	1
 4417              		.syntax unified
 4418              		.thumb
 4419              		.thumb_func
 4420              		.fpu fpv4-sp-d16
 4422              	IRDA_Transmit_IT:
 4423              	.LFB169:
1903:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1904:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****  /**
1905:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Send an amount of data in non blocking mode. 
1906:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1907:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1908:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1909:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1910:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
1911:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4424              		.loc 1 1911 1
 4425              		.cfi_startproc
 4426              		@ args = 0, pretend = 0, frame = 16
 4427              		@ frame_needed = 1, uses_anonymous_args = 0
 4428              		@ link register save eliminated.
 4429 0000 80B4     		push	{r7}
 4430              	.LCFI233:
ARM GAS  /tmp/ccJhy18e.s 			page 111


 4431              		.cfi_def_cfa_offset 4
 4432              		.cfi_offset 7, -4
 4433 0002 85B0     		sub	sp, sp, #20
 4434              	.LCFI234:
 4435              		.cfi_def_cfa_offset 24
 4436 0004 00AF     		add	r7, sp, #0
 4437              	.LCFI235:
 4438              		.cfi_def_cfa_register 7
 4439 0006 7860     		str	r0, [r7, #4]
1912:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint16_t* tmp;
1913:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1914:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Tx process is ongoing */
1915:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 4440              		.loc 1 1915 11
 4441 0008 7B68     		ldr	r3, [r7, #4]
 4442 000a 93F83530 		ldrb	r3, [r3, #53]
 4443 000e DBB2     		uxtb	r3, r3
 4444              		.loc 1 1915 5
 4445 0010 212B     		cmp	r3, #33
 4446 0012 44D1     		bne	.L180
1916:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1917:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 4447              		.loc 1 1917 19
 4448 0014 7B68     		ldr	r3, [r7, #4]
 4449 0016 9B68     		ldr	r3, [r3, #8]
 4450              		.loc 1 1917 7
 4451 0018 B3F5805F 		cmp	r3, #4096
 4452 001c 1AD1     		bne	.L181
1918:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1919:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       tmp = (uint16_t*) hirda->pTxBuffPtr;
 4453              		.loc 1 1919 11
 4454 001e 7B68     		ldr	r3, [r7, #4]
 4455 0020 DB69     		ldr	r3, [r3, #28]
 4456 0022 FB60     		str	r3, [r7, #12]
1920:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 4457              		.loc 1 1920 40
 4458 0024 FB68     		ldr	r3, [r7, #12]
 4459 0026 1B88     		ldrh	r3, [r3]
 4460              		.loc 1 1920 29
 4461 0028 1A46     		mov	r2, r3
 4462              		.loc 1 1920 12
 4463 002a 7B68     		ldr	r3, [r7, #4]
 4464 002c 1B68     		ldr	r3, [r3]
 4465              		.loc 1 1920 29
 4466 002e C2F30802 		ubfx	r2, r2, #0, #9
 4467              		.loc 1 1920 27
 4468 0032 5A60     		str	r2, [r3, #4]
1921:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 4469              		.loc 1 1921 21
 4470 0034 7B68     		ldr	r3, [r7, #4]
 4471 0036 DB68     		ldr	r3, [r3, #12]
 4472              		.loc 1 1921 9
 4473 0038 002B     		cmp	r3, #0
 4474 003a 05D1     		bne	.L182
1922:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1923:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->pTxBuffPtr += 2U;
 4475              		.loc 1 1923 27
ARM GAS  /tmp/ccJhy18e.s 			page 112


 4476 003c 7B68     		ldr	r3, [r7, #4]
 4477 003e DB69     		ldr	r3, [r3, #28]
 4478 0040 9A1C     		adds	r2, r3, #2
 4479 0042 7B68     		ldr	r3, [r7, #4]
 4480 0044 DA61     		str	r2, [r3, #28]
 4481 0046 0EE0     		b	.L183
 4482              	.L182:
1924:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1925:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
1926:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1927:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->pTxBuffPtr += 1U;
 4483              		.loc 1 1927 27
 4484 0048 7B68     		ldr	r3, [r7, #4]
 4485 004a DB69     		ldr	r3, [r3, #28]
 4486 004c 5A1C     		adds	r2, r3, #1
 4487 004e 7B68     		ldr	r3, [r7, #4]
 4488 0050 DA61     		str	r2, [r3, #28]
 4489 0052 08E0     		b	.L183
 4490              	.L181:
1928:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
1929:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     } 
1930:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     else
1931:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1932:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->Instance->DR = (uint8_t)(*hirda->pTxBuffPtr++ & (uint8_t)0x00FF);
 4491              		.loc 1 1932 45
 4492 0054 7B68     		ldr	r3, [r7, #4]
 4493 0056 DB69     		ldr	r3, [r3, #28]
 4494              		.loc 1 1932 57
 4495 0058 591C     		adds	r1, r3, #1
 4496 005a 7A68     		ldr	r2, [r7, #4]
 4497 005c D161     		str	r1, [r2, #28]
 4498              		.loc 1 1932 39
 4499 005e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 4500              		.loc 1 1932 12
 4501 0060 7B68     		ldr	r3, [r7, #4]
 4502 0062 1B68     		ldr	r3, [r3]
 4503              		.loc 1 1932 27
 4504 0064 5A60     		str	r2, [r3, #4]
 4505              	.L183:
1933:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1934:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1935:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(--hirda->TxXferCount == 0U)
 4506              		.loc 1 1935 15
 4507 0066 7B68     		ldr	r3, [r7, #4]
 4508 0068 5B8C     		ldrh	r3, [r3, #34]	@ movhi
 4509 006a 9BB2     		uxth	r3, r3
 4510              		.loc 1 1935 8
 4511 006c 013B     		subs	r3, r3, #1
 4512 006e 9BB2     		uxth	r3, r3
 4513              		.loc 1 1935 7
 4514 0070 7A68     		ldr	r2, [r7, #4]
 4515 0072 1946     		mov	r1, r3	@ movhi
 4516 0074 5184     		strh	r1, [r2, #34]	@ movhi
 4517 0076 002B     		cmp	r3, #0
 4518 0078 0FD1     		bne	.L184
1936:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1937:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Transmit Data Register Empty Interrupt */
ARM GAS  /tmp/ccJhy18e.s 			page 113


1938:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE);
 4519              		.loc 1 1938 7
 4520 007a 7B68     		ldr	r3, [r7, #4]
 4521 007c 1B68     		ldr	r3, [r3]
 4522 007e DA68     		ldr	r2, [r3, #12]
 4523 0080 7B68     		ldr	r3, [r7, #4]
 4524 0082 1B68     		ldr	r3, [r3]
 4525 0084 22F08002 		bic	r2, r2, #128
 4526 0088 DA60     		str	r2, [r3, #12]
1939:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
1940:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Enable the IRDA Transmit Complete Interrupt */
1941:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 4527              		.loc 1 1941 7
 4528 008a 7B68     		ldr	r3, [r7, #4]
 4529 008c 1B68     		ldr	r3, [r3]
 4530 008e DA68     		ldr	r2, [r3, #12]
 4531 0090 7B68     		ldr	r3, [r7, #4]
 4532 0092 1B68     		ldr	r3, [r3]
 4533 0094 42F04002 		orr	r2, r2, #64
 4534 0098 DA60     		str	r2, [r3, #12]
 4535              	.L184:
1942:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
1943:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
1944:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 4536              		.loc 1 1944 12
 4537 009a 0023     		movs	r3, #0
 4538 009c 00E0     		b	.L185
 4539              	.L180:
1945:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1946:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
1947:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1948:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY;
 4540              		.loc 1 1948 12
 4541 009e 0223     		movs	r3, #2
 4542              	.L185:
1949:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
1950:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4543              		.loc 1 1950 1
 4544 00a0 1846     		mov	r0, r3
 4545 00a2 1437     		adds	r7, r7, #20
 4546              	.LCFI236:
 4547              		.cfi_def_cfa_offset 4
 4548 00a4 BD46     		mov	sp, r7
 4549              	.LCFI237:
 4550              		.cfi_def_cfa_register 13
 4551              		@ sp needed
 4552 00a6 5DF8047B 		ldr	r7, [sp], #4
 4553              	.LCFI238:
 4554              		.cfi_restore 7
 4555              		.cfi_def_cfa_offset 0
 4556 00aa 7047     		bx	lr
 4557              		.cfi_endproc
 4558              	.LFE169:
 4560              		.section	.text.IRDA_EndTransmit_IT,"ax",%progbits
 4561              		.align	1
 4562              		.syntax unified
 4563              		.thumb
ARM GAS  /tmp/ccJhy18e.s 			page 114


 4564              		.thumb_func
 4565              		.fpu fpv4-sp-d16
 4567              	IRDA_EndTransmit_IT:
 4568              	.LFB170:
1951:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1952:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1953:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Wraps up transmission in non blocking mode.
1954:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1955:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1956:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1957:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1958:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
1959:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4569              		.loc 1 1959 1
 4570              		.cfi_startproc
 4571              		@ args = 0, pretend = 0, frame = 8
 4572              		@ frame_needed = 1, uses_anonymous_args = 0
 4573 0000 80B5     		push	{r7, lr}
 4574              	.LCFI239:
 4575              		.cfi_def_cfa_offset 8
 4576              		.cfi_offset 7, -8
 4577              		.cfi_offset 14, -4
 4578 0002 82B0     		sub	sp, sp, #8
 4579              	.LCFI240:
 4580              		.cfi_def_cfa_offset 16
 4581 0004 00AF     		add	r7, sp, #0
 4582              	.LCFI241:
 4583              		.cfi_def_cfa_register 7
 4584 0006 7860     		str	r0, [r7, #4]
1960:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA Transmit Complete Interrupt */    
1961:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 4585              		.loc 1 1961 3
 4586 0008 7B68     		ldr	r3, [r7, #4]
 4587 000a 1B68     		ldr	r3, [r3]
 4588 000c DA68     		ldr	r2, [r3, #12]
 4589 000e 7B68     		ldr	r3, [r7, #4]
 4590 0010 1B68     		ldr	r3, [r3]
 4591 0012 22F04002 		bic	r2, r2, #64
 4592 0016 DA60     		str	r2, [r3, #12]
1962:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1963:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
1964:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 4593              		.loc 1 1964 3
 4594 0018 7B68     		ldr	r3, [r7, #4]
 4595 001a 1B68     		ldr	r3, [r3]
 4596 001c 5A69     		ldr	r2, [r3, #20]
 4597 001e 7B68     		ldr	r3, [r7, #4]
 4598 0020 1B68     		ldr	r3, [r3]
 4599 0022 22F00102 		bic	r2, r2, #1
 4600 0026 5A61     		str	r2, [r3, #20]
1965:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1966:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Tx process is ended, restore hirda->gState to Ready */
1967:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   hirda->gState = HAL_IRDA_STATE_READY;
 4601              		.loc 1 1967 17
 4602 0028 7B68     		ldr	r3, [r7, #4]
 4603 002a 2022     		movs	r2, #32
 4604 002c 83F83520 		strb	r2, [r3, #53]
ARM GAS  /tmp/ccJhy18e.s 			page 115


1968:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1969:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   HAL_IRDA_TxCpltCallback(hirda);
 4605              		.loc 1 1969 3
 4606 0030 7868     		ldr	r0, [r7, #4]
 4607 0032 FFF7FEFF 		bl	HAL_IRDA_TxCpltCallback
1970:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1971:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   return HAL_OK;
 4608              		.loc 1 1971 10
 4609 0036 0023     		movs	r3, #0
1972:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4610              		.loc 1 1972 1
 4611 0038 1846     		mov	r0, r3
 4612 003a 0837     		adds	r7, r7, #8
 4613              	.LCFI242:
 4614              		.cfi_def_cfa_offset 8
 4615 003c BD46     		mov	sp, r7
 4616              	.LCFI243:
 4617              		.cfi_def_cfa_register 13
 4618              		@ sp needed
 4619 003e 80BD     		pop	{r7, pc}
 4620              		.cfi_endproc
 4621              	.LFE170:
 4623              		.section	.text.IRDA_Receive_IT,"ax",%progbits
 4624              		.align	1
 4625              		.syntax unified
 4626              		.thumb
 4627              		.thumb_func
 4628              		.fpu fpv4-sp-d16
 4630              	IRDA_Receive_IT:
 4631              	.LFB171:
1973:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
1974:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
1975:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Receives an amount of data in non blocking mode. 
1976:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
1977:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
1978:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval HAL status
1979:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
1980:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static HAL_StatusTypeDef IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
1981:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4632              		.loc 1 1981 1
 4633              		.cfi_startproc
 4634              		@ args = 0, pretend = 0, frame = 16
 4635              		@ frame_needed = 1, uses_anonymous_args = 0
 4636 0000 80B5     		push	{r7, lr}
 4637              	.LCFI244:
 4638              		.cfi_def_cfa_offset 8
 4639              		.cfi_offset 7, -8
 4640              		.cfi_offset 14, -4
 4641 0002 84B0     		sub	sp, sp, #16
 4642              	.LCFI245:
 4643              		.cfi_def_cfa_offset 24
 4644 0004 00AF     		add	r7, sp, #0
 4645              	.LCFI246:
 4646              		.cfi_def_cfa_register 7
 4647 0006 7860     		str	r0, [r7, #4]
1982:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint16_t* tmp;
1983:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   uint16_t  uhdata;
ARM GAS  /tmp/ccJhy18e.s 			page 116


1984:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
1985:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check that a Rx process is ongoing */
1986:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->RxState == HAL_IRDA_STATE_BUSY_RX) 
 4648              		.loc 1 1986 11
 4649 0008 7B68     		ldr	r3, [r7, #4]
 4650 000a 93F83630 		ldrb	r3, [r3, #54]
 4651 000e DBB2     		uxtb	r3, r3
 4652              		.loc 1 1986 5
 4653 0010 222B     		cmp	r3, #34
 4654 0012 6BD1     		bne	.L189
1987:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
1988:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     uhdata = (uint16_t) READ_REG(hirda->Instance->DR);
 4655              		.loc 1 1988 25
 4656 0014 7B68     		ldr	r3, [r7, #4]
 4657 0016 1B68     		ldr	r3, [r3]
 4658 0018 5B68     		ldr	r3, [r3, #4]
 4659              		.loc 1 1988 12
 4660 001a FB81     		strh	r3, [r7, #14]	@ movhi
1989:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(hirda->Init.WordLength == IRDA_WORDLENGTH_9B)
 4661              		.loc 1 1989 19
 4662 001c 7B68     		ldr	r3, [r7, #4]
 4663 001e 9B68     		ldr	r3, [r3, #8]
 4664              		.loc 1 1989 7
 4665 0020 B3F5805F 		cmp	r3, #4096
 4666 0024 1DD1     		bne	.L190
1990:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
1991:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       tmp = (uint16_t*) hirda->pRxBuffPtr;
 4667              		.loc 1 1991 11
 4668 0026 7B68     		ldr	r3, [r7, #4]
 4669 0028 5B6A     		ldr	r3, [r3, #36]
 4670 002a BB60     		str	r3, [r7, #8]
1992:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 4671              		.loc 1 1992 21
 4672 002c 7B68     		ldr	r3, [r7, #4]
 4673 002e DB68     		ldr	r3, [r3, #12]
 4674              		.loc 1 1992 9
 4675 0030 002B     		cmp	r3, #0
 4676 0032 0BD1     		bne	.L191
1993:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1994:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x01FF);
 4677              		.loc 1 1994 16
 4678 0034 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4679 0036 C3F30803 		ubfx	r3, r3, #0, #9
 4680 003a 9AB2     		uxth	r2, r3
 4681              		.loc 1 1994 14
 4682 003c BB68     		ldr	r3, [r7, #8]
 4683 003e 1A80     		strh	r2, [r3]	@ movhi
1995:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 2U;
 4684              		.loc 1 1995 27
 4685 0040 7B68     		ldr	r3, [r7, #4]
 4686 0042 5B6A     		ldr	r3, [r3, #36]
 4687 0044 9A1C     		adds	r2, r3, #2
 4688 0046 7B68     		ldr	r3, [r7, #4]
 4689 0048 5A62     		str	r2, [r3, #36]
 4690 004a 22E0     		b	.L192
 4691              	.L191:
1996:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
ARM GAS  /tmp/ccJhy18e.s 			page 117


1997:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
1998:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
1999:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         *tmp = (uint16_t)(uhdata & (uint16_t)0x00FF);
 4692              		.loc 1 1999 16
 4693 004c FB89     		ldrh	r3, [r7, #14]	@ movhi
 4694 004e DBB2     		uxtb	r3, r3
 4695 0050 9AB2     		uxth	r2, r3
 4696              		.loc 1 1999 14
 4697 0052 BB68     		ldr	r3, [r7, #8]
 4698 0054 1A80     		strh	r2, [r3]	@ movhi
2000:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         hirda->pRxBuffPtr += 1U;
 4699              		.loc 1 2000 27
 4700 0056 7B68     		ldr	r3, [r7, #4]
 4701 0058 5B6A     		ldr	r3, [r3, #36]
 4702 005a 5A1C     		adds	r2, r3, #1
 4703 005c 7B68     		ldr	r3, [r7, #4]
 4704 005e 5A62     		str	r2, [r3, #36]
 4705 0060 17E0     		b	.L192
 4706              	.L190:
2001:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
2002:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     } 
2003:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     else
2004:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
2005:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       if(hirda->Init.Parity == IRDA_PARITY_NONE)
 4707              		.loc 1 2005 21
 4708 0062 7B68     		ldr	r3, [r7, #4]
 4709 0064 DB68     		ldr	r3, [r3, #12]
 4710              		.loc 1 2005 9
 4711 0066 002B     		cmp	r3, #0
 4712 0068 08D1     		bne	.L193
2006:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
2007:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x00FF);
 4713              		.loc 1 2007 15
 4714 006a 7B68     		ldr	r3, [r7, #4]
 4715 006c 5B6A     		ldr	r3, [r3, #36]
 4716              		.loc 1 2007 27
 4717 006e 591C     		adds	r1, r3, #1
 4718 0070 7A68     		ldr	r2, [r7, #4]
 4719 0072 5162     		str	r1, [r2, #36]
 4720              		.loc 1 2007 32
 4721 0074 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4722 0076 D2B2     		uxtb	r2, r2
 4723              		.loc 1 2007 30
 4724 0078 1A70     		strb	r2, [r3]
 4725 007a 0AE0     		b	.L192
 4726              	.L193:
2008:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
2009:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       else
2010:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       {
2011:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****         *hirda->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)0x007F);
 4727              		.loc 1 2011 49
 4728 007c FB89     		ldrh	r3, [r7, #14]	@ movhi
 4729 007e DAB2     		uxtb	r2, r3
 4730              		.loc 1 2011 15
 4731 0080 7B68     		ldr	r3, [r7, #4]
 4732 0082 5B6A     		ldr	r3, [r3, #36]
 4733              		.loc 1 2011 27
ARM GAS  /tmp/ccJhy18e.s 			page 118


 4734 0084 581C     		adds	r0, r3, #1
 4735 0086 7968     		ldr	r1, [r7, #4]
 4736 0088 4862     		str	r0, [r1, #36]
 4737              		.loc 1 2011 32
 4738 008a 02F07F02 		and	r2, r2, #127
 4739 008e D2B2     		uxtb	r2, r2
 4740              		.loc 1 2011 30
 4741 0090 1A70     		strb	r2, [r3]
 4742              	.L192:
2012:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       }
2013:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
2014:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     
2015:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     if(--hirda->RxXferCount == 0U)
 4743              		.loc 1 2015 15
 4744 0092 7B68     		ldr	r3, [r7, #4]
 4745 0094 5B8D     		ldrh	r3, [r3, #42]	@ movhi
 4746 0096 9BB2     		uxth	r3, r3
 4747              		.loc 1 2015 8
 4748 0098 013B     		subs	r3, r3, #1
 4749 009a 9BB2     		uxth	r3, r3
 4750              		.loc 1 2015 7
 4751 009c 7A68     		ldr	r2, [r7, #4]
 4752 009e 1946     		mov	r1, r3	@ movhi
 4753 00a0 5185     		strh	r1, [r2, #42]	@ movhi
 4754 00a2 002B     		cmp	r3, #0
 4755 00a4 20D1     		bne	.L194
2016:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     {
2017:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Data Register not empty Interrupt */
2018:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_RXNEIE);
 4756              		.loc 1 2018 7
 4757 00a6 7B68     		ldr	r3, [r7, #4]
 4758 00a8 1B68     		ldr	r3, [r3]
 4759 00aa DA68     		ldr	r2, [r3, #12]
 4760 00ac 7B68     		ldr	r3, [r7, #4]
 4761 00ae 1B68     		ldr	r3, [r3]
 4762 00b0 22F02002 		bic	r2, r2, #32
 4763 00b4 DA60     		str	r2, [r3, #12]
2019:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
2020:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Parity Error Interrupt */
2021:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR1, USART_CR1_PEIE);
 4764              		.loc 1 2021 7
 4765 00b6 7B68     		ldr	r3, [r7, #4]
 4766 00b8 1B68     		ldr	r3, [r3]
 4767 00ba DA68     		ldr	r2, [r3, #12]
 4768 00bc 7B68     		ldr	r3, [r7, #4]
 4769 00be 1B68     		ldr	r3, [r3]
 4770 00c0 22F48072 		bic	r2, r2, #256
 4771 00c4 DA60     		str	r2, [r3, #12]
2022:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
2023:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
2024:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 4772              		.loc 1 2024 7
 4773 00c6 7B68     		ldr	r3, [r7, #4]
 4774 00c8 1B68     		ldr	r3, [r3]
 4775 00ca 5A69     		ldr	r2, [r3, #20]
 4776 00cc 7B68     		ldr	r3, [r7, #4]
 4777 00ce 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccJhy18e.s 			page 119


 4778 00d0 22F00102 		bic	r2, r2, #1
 4779 00d4 5A61     		str	r2, [r3, #20]
2025:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
2026:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       /* Rx process is completed, restore hirda->RxState to Ready */
2027:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       hirda->RxState = HAL_IRDA_STATE_READY;
 4780              		.loc 1 2027 22
 4781 00d6 7B68     		ldr	r3, [r7, #4]
 4782 00d8 2022     		movs	r2, #32
 4783 00da 83F83620 		strb	r2, [r3, #54]
2028:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
2029:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       HAL_IRDA_RxCpltCallback(hirda);
 4784              		.loc 1 2029 7
 4785 00de 7868     		ldr	r0, [r7, #4]
 4786 00e0 FFF7FEFF 		bl	HAL_IRDA_RxCpltCallback
2030:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       
2031:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****       return HAL_OK;
 4787              		.loc 1 2031 14
 4788 00e4 0023     		movs	r3, #0
 4789 00e6 02E0     		b	.L195
 4790              	.L194:
2032:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     }
2033:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_OK;
 4791              		.loc 1 2033 12
 4792 00e8 0023     		movs	r3, #0
 4793 00ea 00E0     		b	.L195
 4794              	.L189:
2034:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
2035:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
2036:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
2037:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     return HAL_BUSY; 
 4795              		.loc 1 2037 12
 4796 00ec 0223     		movs	r3, #2
 4797              	.L195:
2038:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
2039:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 4798              		.loc 1 2039 1
 4799 00ee 1846     		mov	r0, r3
 4800 00f0 1037     		adds	r7, r7, #16
 4801              	.LCFI247:
 4802              		.cfi_def_cfa_offset 8
 4803 00f2 BD46     		mov	sp, r7
 4804              	.LCFI248:
 4805              		.cfi_def_cfa_register 13
 4806              		@ sp needed
 4807 00f4 80BD     		pop	{r7, pc}
 4808              		.cfi_endproc
 4809              	.LFE171:
 4811              		.section	.text.IRDA_SetConfig,"ax",%progbits
 4812              		.align	1
 4813              		.syntax unified
 4814              		.thumb
 4815              		.thumb_func
 4816              		.fpu fpv4-sp-d16
 4818              	IRDA_SetConfig:
 4819              	.LFB172:
2040:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** 
2041:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** /**
ARM GAS  /tmp/ccJhy18e.s 			page 120


2042:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @brief  Configures the IRDA peripheral. 
2043:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @param  hirda pointer to a IRDA_HandleTypeDef structure that contains
2044:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   *                the configuration information for the specified IRDA module.
2045:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   * @retval None
2046:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   */
2047:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** static void IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
2048:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** {
 4820              		.loc 1 2048 1
 4821              		.cfi_startproc
 4822              		@ args = 0, pretend = 0, frame = 8
 4823              		@ frame_needed = 1, uses_anonymous_args = 0
 4824 0000 B0B5     		push	{r4, r5, r7, lr}
 4825              	.LCFI249:
 4826              		.cfi_def_cfa_offset 16
 4827              		.cfi_offset 4, -16
 4828              		.cfi_offset 5, -12
 4829              		.cfi_offset 7, -8
 4830              		.cfi_offset 14, -4
 4831 0002 82B0     		sub	sp, sp, #8
 4832              	.LCFI250:
 4833              		.cfi_def_cfa_offset 24
 4834 0004 00AF     		add	r7, sp, #0
 4835              	.LCFI251:
 4836              		.cfi_def_cfa_register 7
 4837 0006 7860     		str	r0, [r7, #4]
2049:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Check the parameters */
2050:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_INSTANCE(hirda->Instance));
2051:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_BAUDRATE(hirda->Init.BaudRate));  
2052:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_WORD_LENGTH(hirda->Init.WordLength));
2053:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_PARITY(hirda->Init.Parity));
2054:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   assert_param(IS_IRDA_MODE(hirda->Init.Mode));
2055:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
2056:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- IRDA CR2 Configuration ------------------------*/
2057:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Clear STOP[13:12] bits */
2058:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR2, USART_CR2_STOP);
 4838              		.loc 1 2058 3
 4839 0008 7B68     		ldr	r3, [r7, #4]
 4840 000a 1B68     		ldr	r3, [r3]
 4841 000c 1A69     		ldr	r2, [r3, #16]
 4842 000e 7B68     		ldr	r3, [r7, #4]
 4843 0010 1B68     		ldr	r3, [r3]
 4844 0012 22F44052 		bic	r2, r2, #12288
 4845 0016 1A61     		str	r2, [r3, #16]
2059:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
2060:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2061:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Clear M, PCE, PS, TE and RE bits */
2062:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR1, USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART
 4846              		.loc 1 2062 3
 4847 0018 7B68     		ldr	r3, [r7, #4]
 4848 001a 1B68     		ldr	r3, [r3]
 4849 001c DB68     		ldr	r3, [r3, #12]
 4850 001e 7A68     		ldr	r2, [r7, #4]
 4851 0020 1268     		ldr	r2, [r2]
 4852 0022 23F4B053 		bic	r3, r3, #5632
 4853 0026 23F00C03 		bic	r3, r3, #12
 4854 002a D360     		str	r3, [r2, #12]
2063:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
ARM GAS  /tmp/ccJhy18e.s 			page 121


2064:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Configure the USART Word Length, Parity and mode: 
2065:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   Set the M bits according to hirda->Init.WordLength value 
2066:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   Set PCE and PS bits according to hirda->Init.Parity value
2067:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   Set TE and RE bits according to hirda->Init.Mode value */
2068:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Write to USART CR1 */
2069:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   SET_BIT(hirda->Instance->CR1, (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init
 4855              		.loc 1 2069 3
 4856 002c 7B68     		ldr	r3, [r7, #4]
 4857 002e 1B68     		ldr	r3, [r3]
 4858 0030 D968     		ldr	r1, [r3, #12]
 4859 0032 7B68     		ldr	r3, [r7, #4]
 4860 0034 9A68     		ldr	r2, [r3, #8]
 4861 0036 7B68     		ldr	r3, [r7, #4]
 4862 0038 DB68     		ldr	r3, [r3, #12]
 4863 003a 1A43     		orrs	r2, r2, r3
 4864 003c 7B68     		ldr	r3, [r7, #4]
 4865 003e 1B69     		ldr	r3, [r3, #16]
 4866 0040 1A43     		orrs	r2, r2, r3
 4867 0042 7B68     		ldr	r3, [r7, #4]
 4868 0044 1B68     		ldr	r3, [r3]
 4869 0046 0A43     		orrs	r2, r2, r1
 4870 0048 DA60     		str	r2, [r3, #12]
2070:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
2071:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2072:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /* Clear CTSE and RTSE bits */
2073:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   CLEAR_BIT(hirda->Instance->CR3, USART_CR3_RTSE | USART_CR3_CTSE);
 4871              		.loc 1 2073 3
 4872 004a 7B68     		ldr	r3, [r7, #4]
 4873 004c 1B68     		ldr	r3, [r3]
 4874 004e 5A69     		ldr	r2, [r3, #20]
 4875 0050 7B68     		ldr	r3, [r7, #4]
 4876 0052 1B68     		ldr	r3, [r3]
 4877 0054 22F44072 		bic	r2, r2, #768
 4878 0058 5A61     		str	r2, [r3, #20]
2074:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   
2075:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2076:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** #if defined(USART6)  
2077:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if((hirda->Instance == USART1) || (hirda->Instance == USART6))
 4879              		.loc 1 2077 12
 4880 005a 7B68     		ldr	r3, [r7, #4]
 4881 005c 1B68     		ldr	r3, [r3]
 4882              		.loc 1 2077 5
 4883 005e 764A     		ldr	r2, .L200
 4884 0060 9342     		cmp	r3, r2
 4885 0062 04D0     		beq	.L197
 4886              		.loc 1 2077 43 discriminator 1
 4887 0064 7B68     		ldr	r3, [r7, #4]
 4888 0066 1B68     		ldr	r3, [r3]
 4889              		.loc 1 2077 34 discriminator 1
 4890 0068 744A     		ldr	r2, .L200+4
 4891 006a 9342     		cmp	r3, r2
 4892 006c 6FD1     		bne	.L198
 4893              	.L197:
2078:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
2079:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK2Freq(), hirda->Init.BaudRate));
 4894              		.loc 1 2079 5
 4895 006e FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
ARM GAS  /tmp/ccJhy18e.s 			page 122


 4896 0072 0246     		mov	r2, r0
 4897 0074 1346     		mov	r3, r2
 4898 0076 9B00     		lsls	r3, r3, #2
 4899 0078 1344     		add	r3, r3, r2
 4900 007a 9A00     		lsls	r2, r3, #2
 4901 007c 1A44     		add	r2, r2, r3
 4902 007e 7B68     		ldr	r3, [r7, #4]
 4903 0080 5B68     		ldr	r3, [r3, #4]
 4904 0082 9B00     		lsls	r3, r3, #2
 4905 0084 B2FBF3F3 		udiv	r3, r2, r3
 4906 0088 6D4A     		ldr	r2, .L200+8
 4907 008a A2FB0323 		umull	r2, r3, r2, r3
 4908 008e 5B09     		lsrs	r3, r3, #5
 4909 0090 1C01     		lsls	r4, r3, #4
 4910 0092 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4911 0096 0246     		mov	r2, r0
 4912 0098 1346     		mov	r3, r2
 4913 009a 9B00     		lsls	r3, r3, #2
 4914 009c 1344     		add	r3, r3, r2
 4915 009e 9A00     		lsls	r2, r3, #2
 4916 00a0 1A44     		add	r2, r2, r3
 4917 00a2 7B68     		ldr	r3, [r7, #4]
 4918 00a4 5B68     		ldr	r3, [r3, #4]
 4919 00a6 9B00     		lsls	r3, r3, #2
 4920 00a8 B2FBF3F5 		udiv	r5, r2, r3
 4921 00ac FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4922 00b0 0246     		mov	r2, r0
 4923 00b2 1346     		mov	r3, r2
 4924 00b4 9B00     		lsls	r3, r3, #2
 4925 00b6 1344     		add	r3, r3, r2
 4926 00b8 9A00     		lsls	r2, r3, #2
 4927 00ba 1A44     		add	r2, r2, r3
 4928 00bc 7B68     		ldr	r3, [r7, #4]
 4929 00be 5B68     		ldr	r3, [r3, #4]
 4930 00c0 9B00     		lsls	r3, r3, #2
 4931 00c2 B2FBF3F3 		udiv	r3, r2, r3
 4932 00c6 5E4A     		ldr	r2, .L200+8
 4933 00c8 A2FB0323 		umull	r2, r3, r2, r3
 4934 00cc 5B09     		lsrs	r3, r3, #5
 4935 00ce 6422     		movs	r2, #100
 4936 00d0 02FB03F3 		mul	r3, r2, r3
 4937 00d4 EB1A     		subs	r3, r5, r3
 4938 00d6 1B01     		lsls	r3, r3, #4
 4939 00d8 3233     		adds	r3, r3, #50
 4940 00da 594A     		ldr	r2, .L200+8
 4941 00dc A2FB0323 		umull	r2, r3, r2, r3
 4942 00e0 5B09     		lsrs	r3, r3, #5
 4943 00e2 03F0F003 		and	r3, r3, #240
 4944 00e6 1C44     		add	r4, r4, r3
 4945 00e8 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4946 00ec 0246     		mov	r2, r0
 4947 00ee 1346     		mov	r3, r2
 4948 00f0 9B00     		lsls	r3, r3, #2
 4949 00f2 1344     		add	r3, r3, r2
 4950 00f4 9A00     		lsls	r2, r3, #2
 4951 00f6 1A44     		add	r2, r2, r3
 4952 00f8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJhy18e.s 			page 123


 4953 00fa 5B68     		ldr	r3, [r3, #4]
 4954 00fc 9B00     		lsls	r3, r3, #2
 4955 00fe B2FBF3F5 		udiv	r5, r2, r3
 4956 0102 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 4957 0106 0246     		mov	r2, r0
 4958 0108 1346     		mov	r3, r2
 4959 010a 9B00     		lsls	r3, r3, #2
 4960 010c 1344     		add	r3, r3, r2
 4961 010e 9A00     		lsls	r2, r3, #2
 4962 0110 1A44     		add	r2, r2, r3
 4963 0112 7B68     		ldr	r3, [r7, #4]
 4964 0114 5B68     		ldr	r3, [r3, #4]
 4965 0116 9B00     		lsls	r3, r3, #2
 4966 0118 B2FBF3F3 		udiv	r3, r2, r3
 4967 011c 484A     		ldr	r2, .L200+8
 4968 011e A2FB0323 		umull	r2, r3, r2, r3
 4969 0122 5B09     		lsrs	r3, r3, #5
 4970 0124 6422     		movs	r2, #100
 4971 0126 02FB03F3 		mul	r3, r2, r3
 4972 012a EB1A     		subs	r3, r5, r3
 4973 012c 1B01     		lsls	r3, r3, #4
 4974 012e 3233     		adds	r3, r3, #50
 4975 0130 434A     		ldr	r2, .L200+8
 4976 0132 A2FB0323 		umull	r2, r3, r2, r3
 4977 0136 5B09     		lsrs	r3, r3, #5
 4978 0138 03F00F03 		and	r3, r3, #15
 4979 013c E118     		adds	r1, r4, r3
 4980 013e 7B68     		ldr	r3, [r7, #4]
 4981 0140 1B68     		ldr	r3, [r3]
 4982 0142 9A68     		ldr	r2, [r3, #8]
 4983 0144 7B68     		ldr	r3, [r7, #4]
 4984 0146 1B68     		ldr	r3, [r3]
 4985 0148 0A43     		orrs	r2, r2, r1
 4986 014a 9A60     		str	r2, [r3, #8]
 4987 014c 6FE0     		b	.L199
 4988              	.L198:
2080:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
2081:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** #else
2082:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   if(hirda->Instance == USART1)
2083:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
2084:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK2Freq(), hirda->Init.BaudRate));
2085:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }	
2086:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** #endif /* USART6 */
2087:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   else
2088:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   {
2089:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****     SET_BIT(hirda->Instance->BRR, IRDA_BRR(HAL_RCC_GetPCLK1Freq(), hirda->Init.BaudRate));
 4989              		.loc 1 2089 5
 4990 014e FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 4991 0152 0246     		mov	r2, r0
 4992 0154 1346     		mov	r3, r2
 4993 0156 9B00     		lsls	r3, r3, #2
 4994 0158 1344     		add	r3, r3, r2
 4995 015a 9A00     		lsls	r2, r3, #2
 4996 015c 1A44     		add	r2, r2, r3
 4997 015e 7B68     		ldr	r3, [r7, #4]
 4998 0160 5B68     		ldr	r3, [r3, #4]
 4999 0162 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccJhy18e.s 			page 124


 5000 0164 B2FBF3F3 		udiv	r3, r2, r3
 5001 0168 354A     		ldr	r2, .L200+8
 5002 016a A2FB0323 		umull	r2, r3, r2, r3
 5003 016e 5B09     		lsrs	r3, r3, #5
 5004 0170 1C01     		lsls	r4, r3, #4
 5005 0172 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5006 0176 0246     		mov	r2, r0
 5007 0178 1346     		mov	r3, r2
 5008 017a 9B00     		lsls	r3, r3, #2
 5009 017c 1344     		add	r3, r3, r2
 5010 017e 9A00     		lsls	r2, r3, #2
 5011 0180 1A44     		add	r2, r2, r3
 5012 0182 7B68     		ldr	r3, [r7, #4]
 5013 0184 5B68     		ldr	r3, [r3, #4]
 5014 0186 9B00     		lsls	r3, r3, #2
 5015 0188 B2FBF3F5 		udiv	r5, r2, r3
 5016 018c FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5017 0190 0246     		mov	r2, r0
 5018 0192 1346     		mov	r3, r2
 5019 0194 9B00     		lsls	r3, r3, #2
 5020 0196 1344     		add	r3, r3, r2
 5021 0198 9A00     		lsls	r2, r3, #2
 5022 019a 1A44     		add	r2, r2, r3
 5023 019c 7B68     		ldr	r3, [r7, #4]
 5024 019e 5B68     		ldr	r3, [r3, #4]
 5025 01a0 9B00     		lsls	r3, r3, #2
 5026 01a2 B2FBF3F3 		udiv	r3, r2, r3
 5027 01a6 264A     		ldr	r2, .L200+8
 5028 01a8 A2FB0323 		umull	r2, r3, r2, r3
 5029 01ac 5B09     		lsrs	r3, r3, #5
 5030 01ae 6422     		movs	r2, #100
 5031 01b0 02FB03F3 		mul	r3, r2, r3
 5032 01b4 EB1A     		subs	r3, r5, r3
 5033 01b6 1B01     		lsls	r3, r3, #4
 5034 01b8 3233     		adds	r3, r3, #50
 5035 01ba 214A     		ldr	r2, .L200+8
 5036 01bc A2FB0323 		umull	r2, r3, r2, r3
 5037 01c0 5B09     		lsrs	r3, r3, #5
 5038 01c2 03F0F003 		and	r3, r3, #240
 5039 01c6 1C44     		add	r4, r4, r3
 5040 01c8 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5041 01cc 0246     		mov	r2, r0
 5042 01ce 1346     		mov	r3, r2
 5043 01d0 9B00     		lsls	r3, r3, #2
 5044 01d2 1344     		add	r3, r3, r2
 5045 01d4 9A00     		lsls	r2, r3, #2
 5046 01d6 1A44     		add	r2, r2, r3
 5047 01d8 7B68     		ldr	r3, [r7, #4]
 5048 01da 5B68     		ldr	r3, [r3, #4]
 5049 01dc 9B00     		lsls	r3, r3, #2
 5050 01de B2FBF3F5 		udiv	r5, r2, r3
 5051 01e2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5052 01e6 0246     		mov	r2, r0
 5053 01e8 1346     		mov	r3, r2
 5054 01ea 9B00     		lsls	r3, r3, #2
 5055 01ec 1344     		add	r3, r3, r2
 5056 01ee 9A00     		lsls	r2, r3, #2
ARM GAS  /tmp/ccJhy18e.s 			page 125


 5057 01f0 1A44     		add	r2, r2, r3
 5058 01f2 7B68     		ldr	r3, [r7, #4]
 5059 01f4 5B68     		ldr	r3, [r3, #4]
 5060 01f6 9B00     		lsls	r3, r3, #2
 5061 01f8 B2FBF3F3 		udiv	r3, r2, r3
 5062 01fc 104A     		ldr	r2, .L200+8
 5063 01fe A2FB0323 		umull	r2, r3, r2, r3
 5064 0202 5B09     		lsrs	r3, r3, #5
 5065 0204 6422     		movs	r2, #100
 5066 0206 02FB03F3 		mul	r3, r2, r3
 5067 020a EB1A     		subs	r3, r5, r3
 5068 020c 1B01     		lsls	r3, r3, #4
 5069 020e 3233     		adds	r3, r3, #50
 5070 0210 0B4A     		ldr	r2, .L200+8
 5071 0212 A2FB0323 		umull	r2, r3, r2, r3
 5072 0216 5B09     		lsrs	r3, r3, #5
 5073 0218 03F00F03 		and	r3, r3, #15
 5074 021c E118     		adds	r1, r4, r3
 5075 021e 7B68     		ldr	r3, [r7, #4]
 5076 0220 1B68     		ldr	r3, [r3]
 5077 0222 9A68     		ldr	r2, [r3, #8]
 5078 0224 7B68     		ldr	r3, [r7, #4]
 5079 0226 1B68     		ldr	r3, [r3]
 5080 0228 0A43     		orrs	r2, r2, r1
 5081 022a 9A60     		str	r2, [r3, #8]
2090:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c ****   }
2091:./Libraries/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_irda.c **** }
 5082              		.loc 1 2091 1
 5083 022c 00BF     		nop
 5084              	.L199:
 5085 022e 00BF     		nop
 5086 0230 0837     		adds	r7, r7, #8
 5087              	.LCFI252:
 5088              		.cfi_def_cfa_offset 16
 5089 0232 BD46     		mov	sp, r7
 5090              	.LCFI253:
 5091              		.cfi_def_cfa_register 13
 5092              		@ sp needed
 5093 0234 B0BD     		pop	{r4, r5, r7, pc}
 5094              	.L201:
 5095 0236 00BF     		.align	2
 5096              	.L200:
 5097 0238 00100140 		.word	1073811456
 5098 023c 00140140 		.word	1073812480
 5099 0240 1F85EB51 		.word	1374389535
 5100              		.cfi_endproc
 5101              	.LFE172:
 5103              		.text
 5104              	.Letext0:
 5105              		.file 2 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 5106              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 5107              		.file 4 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f429xx.h"
 5108              		.file 5 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 5109              		.file 6 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 5110              		.file 7 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 5111              		.file 8 "./Libraries/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_irda.h"
ARM GAS  /tmp/ccJhy18e.s 			page 126


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_irda.c
     /tmp/ccJhy18e.s:18     .text.HAL_IRDA_Init:0000000000000000 $t
     /tmp/ccJhy18e.s:26     .text.HAL_IRDA_Init:0000000000000000 HAL_IRDA_Init
     /tmp/ccJhy18e.s:255    .text.HAL_IRDA_MspInit:0000000000000000 HAL_IRDA_MspInit
     /tmp/ccJhy18e.s:4818   .text.IRDA_SetConfig:0000000000000000 IRDA_SetConfig
     /tmp/ccJhy18e.s:167    .text.HAL_IRDA_DeInit:0000000000000000 $t
     /tmp/ccJhy18e.s:174    .text.HAL_IRDA_DeInit:0000000000000000 HAL_IRDA_DeInit
     /tmp/ccJhy18e.s:298    .text.HAL_IRDA_MspDeInit:0000000000000000 HAL_IRDA_MspDeInit
     /tmp/ccJhy18e.s:248    .text.HAL_IRDA_MspInit:0000000000000000 $t
     /tmp/ccJhy18e.s:291    .text.HAL_IRDA_MspDeInit:0000000000000000 $t
     /tmp/ccJhy18e.s:334    .text.HAL_IRDA_Transmit:0000000000000000 $t
     /tmp/ccJhy18e.s:341    .text.HAL_IRDA_Transmit:0000000000000000 HAL_IRDA_Transmit
     /tmp/ccJhy18e.s:4304   .text.IRDA_WaitOnFlagUntilTimeout:0000000000000000 IRDA_WaitOnFlagUntilTimeout
     /tmp/ccJhy18e.s:565    .text.HAL_IRDA_Receive:0000000000000000 $t
     /tmp/ccJhy18e.s:572    .text.HAL_IRDA_Receive:0000000000000000 HAL_IRDA_Receive
     /tmp/ccJhy18e.s:818    .text.HAL_IRDA_Transmit_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:825    .text.HAL_IRDA_Transmit_IT:0000000000000000 HAL_IRDA_Transmit_IT
     /tmp/ccJhy18e.s:936    .text.HAL_IRDA_Receive_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:943    .text.HAL_IRDA_Receive_IT:0000000000000000 HAL_IRDA_Receive_IT
     /tmp/ccJhy18e.s:1062   .text.HAL_IRDA_Transmit_DMA:0000000000000000 $t
     /tmp/ccJhy18e.s:1069   .text.HAL_IRDA_Transmit_DMA:0000000000000000 HAL_IRDA_Transmit_DMA
     /tmp/ccJhy18e.s:1222   .text.HAL_IRDA_Transmit_DMA:00000000000000cc $d
     /tmp/ccJhy18e.s:3931   .text.IRDA_DMATransmitCplt:0000000000000000 IRDA_DMATransmitCplt
     /tmp/ccJhy18e.s:4010   .text.IRDA_DMATransmitHalfCplt:0000000000000000 IRDA_DMATransmitHalfCplt
     /tmp/ccJhy18e.s:4188   .text.IRDA_DMAError:0000000000000000 IRDA_DMAError
     /tmp/ccJhy18e.s:1229   .text.HAL_IRDA_Receive_DMA:0000000000000000 $t
     /tmp/ccJhy18e.s:1236   .text.HAL_IRDA_Receive_DMA:0000000000000000 HAL_IRDA_Receive_DMA
     /tmp/ccJhy18e.s:1406   .text.HAL_IRDA_Receive_DMA:00000000000000ec $d
     /tmp/ccJhy18e.s:4055   .text.IRDA_DMAReceiveCplt:0000000000000000 IRDA_DMAReceiveCplt
     /tmp/ccJhy18e.s:4143   .text.IRDA_DMAReceiveHalfCplt:0000000000000000 IRDA_DMAReceiveHalfCplt
     /tmp/ccJhy18e.s:1413   .text.HAL_IRDA_DMAPause:0000000000000000 $t
     /tmp/ccJhy18e.s:1420   .text.HAL_IRDA_DMAPause:0000000000000000 HAL_IRDA_DMAPause
     /tmp/ccJhy18e.s:1559   .text.HAL_IRDA_DMAResume:0000000000000000 $t
     /tmp/ccJhy18e.s:1566   .text.HAL_IRDA_DMAResume:0000000000000000 HAL_IRDA_DMAResume
     /tmp/ccJhy18e.s:1680   .text.HAL_IRDA_DMAStop:0000000000000000 $t
     /tmp/ccJhy18e.s:1687   .text.HAL_IRDA_DMAStop:0000000000000000 HAL_IRDA_DMAStop
     /tmp/ccJhy18e.s:3018   .text.IRDA_EndTxTransfer:0000000000000000 IRDA_EndTxTransfer
     /tmp/ccJhy18e.s:3072   .text.IRDA_EndRxTransfer:0000000000000000 IRDA_EndRxTransfer
     /tmp/ccJhy18e.s:1818   .text.HAL_IRDA_Abort:0000000000000000 $t
     /tmp/ccJhy18e.s:1825   .text.HAL_IRDA_Abort:0000000000000000 HAL_IRDA_Abort
     /tmp/ccJhy18e.s:1963   .text.HAL_IRDA_AbortTransmit:0000000000000000 $t
     /tmp/ccJhy18e.s:1970   .text.HAL_IRDA_AbortTransmit:0000000000000000 HAL_IRDA_AbortTransmit
     /tmp/ccJhy18e.s:2054   .text.HAL_IRDA_AbortReceive:0000000000000000 $t
     /tmp/ccJhy18e.s:2061   .text.HAL_IRDA_AbortReceive:0000000000000000 HAL_IRDA_AbortReceive
     /tmp/ccJhy18e.s:2153   .text.HAL_IRDA_Abort_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:2160   .text.HAL_IRDA_Abort_IT:0000000000000000 HAL_IRDA_Abort_IT
     /tmp/ccJhy18e.s:3689   .text.HAL_IRDA_AbortCpltCallback:0000000000000000 HAL_IRDA_AbortCpltCallback
     /tmp/ccJhy18e.s:2387   .text.HAL_IRDA_Abort_IT:0000000000000140 $d
     /tmp/ccJhy18e.s:3187   .text.IRDA_DMATxAbortCallback:0000000000000000 IRDA_DMATxAbortCallback
     /tmp/ccJhy18e.s:3277   .text.IRDA_DMARxAbortCallback:0000000000000000 IRDA_DMARxAbortCallback
     /tmp/ccJhy18e.s:2393   .text.HAL_IRDA_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:2400   .text.HAL_IRDA_AbortTransmit_IT:0000000000000000 HAL_IRDA_AbortTransmit_IT
     /tmp/ccJhy18e.s:3732   .text.HAL_IRDA_AbortTransmitCpltCallback:0000000000000000 HAL_IRDA_AbortTransmitCpltCallback
     /tmp/ccJhy18e.s:2517   .text.HAL_IRDA_AbortTransmit_IT:000000000000009c $d
     /tmp/ccJhy18e.s:3367   .text.IRDA_DMATxOnlyAbortCallback:0000000000000000 IRDA_DMATxOnlyAbortCallback
     /tmp/ccJhy18e.s:2522   .text.HAL_IRDA_AbortReceive_IT:0000000000000000 $t
ARM GAS  /tmp/ccJhy18e.s 			page 127


     /tmp/ccJhy18e.s:2529   .text.HAL_IRDA_AbortReceive_IT:0000000000000000 HAL_IRDA_AbortReceive_IT
     /tmp/ccJhy18e.s:3775   .text.HAL_IRDA_AbortReceiveCpltCallback:0000000000000000 HAL_IRDA_AbortReceiveCpltCallback
     /tmp/ccJhy18e.s:2654   .text.HAL_IRDA_AbortReceive_IT:00000000000000ac $d
     /tmp/ccJhy18e.s:3420   .text.IRDA_DMARxOnlyAbortCallback:0000000000000000 IRDA_DMARxOnlyAbortCallback
     /tmp/ccJhy18e.s:2659   .text.HAL_IRDA_IRQHandler:0000000000000000 $t
     /tmp/ccJhy18e.s:2666   .text.HAL_IRDA_IRQHandler:0000000000000000 HAL_IRDA_IRQHandler
     /tmp/ccJhy18e.s:4630   .text.IRDA_Receive_IT:0000000000000000 IRDA_Receive_IT
     /tmp/ccJhy18e.s:3646   .text.HAL_IRDA_ErrorCallback:0000000000000000 HAL_IRDA_ErrorCallback
     /tmp/ccJhy18e.s:4422   .text.IRDA_Transmit_IT:0000000000000000 IRDA_Transmit_IT
     /tmp/ccJhy18e.s:4567   .text.IRDA_EndTransmit_IT:0000000000000000 IRDA_EndTransmit_IT
     /tmp/ccJhy18e.s:3007   .text.HAL_IRDA_IRQHandler:00000000000001f0 $d
     /tmp/ccJhy18e.s:3134   .text.IRDA_DMAAbortOnError:0000000000000000 IRDA_DMAAbortOnError
     /tmp/ccJhy18e.s:3012   .text.IRDA_EndTxTransfer:0000000000000000 $t
     /tmp/ccJhy18e.s:3066   .text.IRDA_EndRxTransfer:0000000000000000 $t
     /tmp/ccJhy18e.s:3128   .text.IRDA_DMAAbortOnError:0000000000000000 $t
     /tmp/ccJhy18e.s:3181   .text.IRDA_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3271   .text.IRDA_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3361   .text.IRDA_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3414   .text.IRDA_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3467   .text.HAL_IRDA_TxCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3474   .text.HAL_IRDA_TxCpltCallback:0000000000000000 HAL_IRDA_TxCpltCallback
     /tmp/ccJhy18e.s:3510   .text.HAL_IRDA_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3517   .text.HAL_IRDA_TxHalfCpltCallback:0000000000000000 HAL_IRDA_TxHalfCpltCallback
     /tmp/ccJhy18e.s:3553   .text.HAL_IRDA_RxCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3560   .text.HAL_IRDA_RxCpltCallback:0000000000000000 HAL_IRDA_RxCpltCallback
     /tmp/ccJhy18e.s:3596   .text.HAL_IRDA_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3603   .text.HAL_IRDA_RxHalfCpltCallback:0000000000000000 HAL_IRDA_RxHalfCpltCallback
     /tmp/ccJhy18e.s:3639   .text.HAL_IRDA_ErrorCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3682   .text.HAL_IRDA_AbortCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3725   .text.HAL_IRDA_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3768   .text.HAL_IRDA_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccJhy18e.s:3811   .text.HAL_IRDA_GetState:0000000000000000 $t
     /tmp/ccJhy18e.s:3818   .text.HAL_IRDA_GetState:0000000000000000 HAL_IRDA_GetState
     /tmp/ccJhy18e.s:3879   .text.HAL_IRDA_GetError:0000000000000000 $t
     /tmp/ccJhy18e.s:3886   .text.HAL_IRDA_GetError:0000000000000000 HAL_IRDA_GetError
     /tmp/ccJhy18e.s:3925   .text.IRDA_DMATransmitCplt:0000000000000000 $t
     /tmp/ccJhy18e.s:4004   .text.IRDA_DMATransmitHalfCplt:0000000000000000 $t
     /tmp/ccJhy18e.s:4049   .text.IRDA_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccJhy18e.s:4137   .text.IRDA_DMAReceiveHalfCplt:0000000000000000 $t
     /tmp/ccJhy18e.s:4182   .text.IRDA_DMAError:0000000000000000 $t
     /tmp/ccJhy18e.s:4298   .text.IRDA_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccJhy18e.s:4416   .text.IRDA_Transmit_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:4561   .text.IRDA_EndTransmit_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:4624   .text.IRDA_Receive_IT:0000000000000000 $t
     /tmp/ccJhy18e.s:4812   .text.IRDA_SetConfig:0000000000000000 $t
     /tmp/ccJhy18e.s:5097   .text.IRDA_SetConfig:0000000000000238 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_Abort_IT
HAL_RCC_GetPCLK2Freq
HAL_RCC_GetPCLK1Freq
