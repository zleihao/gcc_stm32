ARM GAS  /tmp/ccpGFB92.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvIsQueueFull,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvIsQueueFull:
  26              	.LVL0:
  27              	.LFB149:
  28              		.file 1 "./FreeRtos/src/queue.c"
   1:./FreeRtos/src/queue.c **** /*
   2:./FreeRtos/src/queue.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:./FreeRtos/src/queue.c ****     All rights reserved
   4:./FreeRtos/src/queue.c **** 
   5:./FreeRtos/src/queue.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:./FreeRtos/src/queue.c **** 
   7:./FreeRtos/src/queue.c ****     This file is part of the FreeRTOS distribution.
   8:./FreeRtos/src/queue.c **** 
   9:./FreeRtos/src/queue.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:./FreeRtos/src/queue.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:./FreeRtos/src/queue.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:./FreeRtos/src/queue.c **** 
  13:./FreeRtos/src/queue.c ****     ***************************************************************************
  14:./FreeRtos/src/queue.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:./FreeRtos/src/queue.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:./FreeRtos/src/queue.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:./FreeRtos/src/queue.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:./FreeRtos/src/queue.c ****     ***************************************************************************
  19:./FreeRtos/src/queue.c **** 
  20:./FreeRtos/src/queue.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:./FreeRtos/src/queue.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:./FreeRtos/src/queue.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:./FreeRtos/src/queue.c ****     link: http://www.freertos.org/a00114.html
  24:./FreeRtos/src/queue.c **** 
  25:./FreeRtos/src/queue.c ****     ***************************************************************************
  26:./FreeRtos/src/queue.c ****      *                                                                       *
  27:./FreeRtos/src/queue.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:./FreeRtos/src/queue.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:./FreeRtos/src/queue.c ****      *    platform software that is more than just the market leader, it     *
  30:./FreeRtos/src/queue.c ****      *    is the industry's de facto standard.                               *
ARM GAS  /tmp/ccpGFB92.s 			page 2


  31:./FreeRtos/src/queue.c ****      *                                                                       *
  32:./FreeRtos/src/queue.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:./FreeRtos/src/queue.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:./FreeRtos/src/queue.c ****      *    tutorial book, reference manual, or both:                          *
  35:./FreeRtos/src/queue.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:./FreeRtos/src/queue.c ****      *                                                                       *
  37:./FreeRtos/src/queue.c ****     ***************************************************************************
  38:./FreeRtos/src/queue.c **** 
  39:./FreeRtos/src/queue.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:./FreeRtos/src/queue.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:./FreeRtos/src/queue.c ****     defined configASSERT()?
  42:./FreeRtos/src/queue.c **** 
  43:./FreeRtos/src/queue.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:./FreeRtos/src/queue.c ****     embedded software for free we request you assist our global community by
  45:./FreeRtos/src/queue.c ****     participating in the support forum.
  46:./FreeRtos/src/queue.c **** 
  47:./FreeRtos/src/queue.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:./FreeRtos/src/queue.c ****     be as productive as possible as early as possible.  Now you can receive
  49:./FreeRtos/src/queue.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:./FreeRtos/src/queue.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:./FreeRtos/src/queue.c **** 
  52:./FreeRtos/src/queue.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:./FreeRtos/src/queue.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:./FreeRtos/src/queue.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:./FreeRtos/src/queue.c **** 
  56:./FreeRtos/src/queue.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:./FreeRtos/src/queue.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:./FreeRtos/src/queue.c **** 
  59:./FreeRtos/src/queue.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:./FreeRtos/src/queue.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:./FreeRtos/src/queue.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:./FreeRtos/src/queue.c **** 
  63:./FreeRtos/src/queue.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:./FreeRtos/src/queue.c ****     engineered and independently SIL3 certified version for use in safety and
  65:./FreeRtos/src/queue.c ****     mission critical applications that require provable dependability.
  66:./FreeRtos/src/queue.c **** 
  67:./FreeRtos/src/queue.c ****     1 tab == 4 spaces!
  68:./FreeRtos/src/queue.c **** */
  69:./FreeRtos/src/queue.c **** 
  70:./FreeRtos/src/queue.c **** #include <stdlib.h>
  71:./FreeRtos/src/queue.c **** #include <string.h>
  72:./FreeRtos/src/queue.c **** 
  73:./FreeRtos/src/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:./FreeRtos/src/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:./FreeRtos/src/queue.c **** task.h is included from an application file. */
  76:./FreeRtos/src/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:./FreeRtos/src/queue.c **** 
  78:./FreeRtos/src/queue.c **** #include "FreeRTOS.h"
  79:./FreeRtos/src/queue.c **** #include "task.h"
  80:./FreeRtos/src/queue.c **** #include "queue.h"
  81:./FreeRtos/src/queue.c **** 
  82:./FreeRtos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  83:./FreeRtos/src/queue.c **** 	#include "croutine.h"
  84:./FreeRtos/src/queue.c **** #endif
  85:./FreeRtos/src/queue.c **** 
  86:./FreeRtos/src/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  87:./FreeRtos/src/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
ARM GAS  /tmp/ccpGFB92.s 			page 3


  88:./FreeRtos/src/queue.c **** header files above, but not in this file, in order to generate the correct
  89:./FreeRtos/src/queue.c **** privileged Vs unprivileged linkage and placement. */
  90:./FreeRtos/src/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  91:./FreeRtos/src/queue.c **** 
  92:./FreeRtos/src/queue.c **** 
  93:./FreeRtos/src/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  94:./FreeRtos/src/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  95:./FreeRtos/src/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  96:./FreeRtos/src/queue.c **** 
  97:./FreeRtos/src/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  98:./FreeRtos/src/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  99:./FreeRtos/src/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
 100:./FreeRtos/src/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
 101:./FreeRtos/src/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
 102:./FreeRtos/src/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
 103:./FreeRtos/src/queue.c **** the code is maintained despite this dual use of two structure members.  An
 104:./FreeRtos/src/queue.c **** alternative implementation would be to use a union, but use of a union is
 105:./FreeRtos/src/queue.c **** against the coding standard (although an exception to the standard has been
 106:./FreeRtos/src/queue.c **** permitted where the dual use also significantly changes the type of the
 107:./FreeRtos/src/queue.c **** structure member). */
 108:./FreeRtos/src/queue.c **** #define pxMutexHolder					pcTail
 109:./FreeRtos/src/queue.c **** #define uxQueueType						pcHead
 110:./FreeRtos/src/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
 111:./FreeRtos/src/queue.c **** 
 112:./FreeRtos/src/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
 113:./FreeRtos/src/queue.c **** zero. */
 114:./FreeRtos/src/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
 115:./FreeRtos/src/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
 116:./FreeRtos/src/queue.c **** 
 117:./FreeRtos/src/queue.c **** #if( configUSE_PREEMPTION == 0 )
 118:./FreeRtos/src/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 119:./FreeRtos/src/queue.c **** 	performed just because a higher priority task has been woken. */
 120:./FreeRtos/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
 121:./FreeRtos/src/queue.c **** #else
 122:./FreeRtos/src/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 123:./FreeRtos/src/queue.c **** #endif
 124:./FreeRtos/src/queue.c **** 
 125:./FreeRtos/src/queue.c **** /*
 126:./FreeRtos/src/queue.c ****  * Definition of the queue used by the scheduler.
 127:./FreeRtos/src/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
 128:./FreeRtos/src/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
 129:./FreeRtos/src/queue.c ****  */
 130:./FreeRtos/src/queue.c **** typedef struct QueueDefinition
 131:./FreeRtos/src/queue.c **** {
 132:./FreeRtos/src/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
 133:./FreeRtos/src/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
 134:./FreeRtos/src/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
 135:./FreeRtos/src/queue.c **** 
 136:./FreeRtos/src/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
 137:./FreeRtos/src/queue.c **** 	{
 138:./FreeRtos/src/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
 139:./FreeRtos/src/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
 140:./FreeRtos/src/queue.c **** 	} u;
 141:./FreeRtos/src/queue.c **** 
 142:./FreeRtos/src/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 143:./FreeRtos/src/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 144:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 4


 145:./FreeRtos/src/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 146:./FreeRtos/src/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 147:./FreeRtos/src/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 148:./FreeRtos/src/queue.c **** 
 149:./FreeRtos/src/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 150:./FreeRtos/src/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 151:./FreeRtos/src/queue.c **** 
 152:./FreeRtos/src/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 153:./FreeRtos/src/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 154:./FreeRtos/src/queue.c **** 	#endif
 155:./FreeRtos/src/queue.c **** 
 156:./FreeRtos/src/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 157:./FreeRtos/src/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 158:./FreeRtos/src/queue.c **** 	#endif
 159:./FreeRtos/src/queue.c **** 
 160:./FreeRtos/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 161:./FreeRtos/src/queue.c **** 		UBaseType_t uxQueueNumber;
 162:./FreeRtos/src/queue.c **** 		uint8_t ucQueueType;
 163:./FreeRtos/src/queue.c **** 	#endif
 164:./FreeRtos/src/queue.c **** 
 165:./FreeRtos/src/queue.c **** } xQUEUE;
 166:./FreeRtos/src/queue.c **** 
 167:./FreeRtos/src/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 168:./FreeRtos/src/queue.c **** name below to enable the use of older kernel aware debuggers. */
 169:./FreeRtos/src/queue.c **** typedef xQUEUE Queue_t;
 170:./FreeRtos/src/queue.c **** 
 171:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 172:./FreeRtos/src/queue.c **** 
 173:./FreeRtos/src/queue.c **** /*
 174:./FreeRtos/src/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 175:./FreeRtos/src/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 176:./FreeRtos/src/queue.c ****  */
 177:./FreeRtos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 178:./FreeRtos/src/queue.c **** 
 179:./FreeRtos/src/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 180:./FreeRtos/src/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 181:./FreeRtos/src/queue.c **** 	more user friendly. */
 182:./FreeRtos/src/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 183:./FreeRtos/src/queue.c **** 	{
 184:./FreeRtos/src/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 185:./FreeRtos/src/queue.c **** 		QueueHandle_t xHandle;
 186:./FreeRtos/src/queue.c **** 	} xQueueRegistryItem;
 187:./FreeRtos/src/queue.c **** 
 188:./FreeRtos/src/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 189:./FreeRtos/src/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 190:./FreeRtos/src/queue.c **** 	debuggers. */
 191:./FreeRtos/src/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 192:./FreeRtos/src/queue.c **** 
 193:./FreeRtos/src/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 194:./FreeRtos/src/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 195:./FreeRtos/src/queue.c **** 	array position being vacant. */
 196:./FreeRtos/src/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 197:./FreeRtos/src/queue.c **** 
 198:./FreeRtos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 199:./FreeRtos/src/queue.c **** 
 200:./FreeRtos/src/queue.c **** /*
 201:./FreeRtos/src/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
ARM GAS  /tmp/ccpGFB92.s 			page 5


 202:./FreeRtos/src/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 203:./FreeRtos/src/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 204:./FreeRtos/src/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 205:./FreeRtos/src/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 206:./FreeRtos/src/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 207:./FreeRtos/src/queue.c ****  */
 208:./FreeRtos/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 209:./FreeRtos/src/queue.c **** 
 210:./FreeRtos/src/queue.c **** /*
 211:./FreeRtos/src/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 212:./FreeRtos/src/queue.c ****  *
 213:./FreeRtos/src/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 214:./FreeRtos/src/queue.c ****  */
 215:./FreeRtos/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 216:./FreeRtos/src/queue.c **** 
 217:./FreeRtos/src/queue.c **** /*
 218:./FreeRtos/src/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 219:./FreeRtos/src/queue.c ****  *
 220:./FreeRtos/src/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 221:./FreeRtos/src/queue.c ****  */
 222:./FreeRtos/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 223:./FreeRtos/src/queue.c **** 
 224:./FreeRtos/src/queue.c **** /*
 225:./FreeRtos/src/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 226:./FreeRtos/src/queue.c ****  * back of the queue.
 227:./FreeRtos/src/queue.c ****  */
 228:./FreeRtos/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 229:./FreeRtos/src/queue.c **** 
 230:./FreeRtos/src/queue.c **** /*
 231:./FreeRtos/src/queue.c ****  * Copies an item out of a queue.
 232:./FreeRtos/src/queue.c ****  */
 233:./FreeRtos/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 234:./FreeRtos/src/queue.c **** 
 235:./FreeRtos/src/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 236:./FreeRtos/src/queue.c **** 	/*
 237:./FreeRtos/src/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 238:./FreeRtos/src/queue.c **** 	 * the queue set that the queue contains data.
 239:./FreeRtos/src/queue.c **** 	 */
 240:./FreeRtos/src/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 241:./FreeRtos/src/queue.c **** #endif
 242:./FreeRtos/src/queue.c **** 
 243:./FreeRtos/src/queue.c **** /*
 244:./FreeRtos/src/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 245:./FreeRtos/src/queue.c ****  * dynamically to fill in the structure's members.
 246:./FreeRtos/src/queue.c ****  */
 247:./FreeRtos/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 248:./FreeRtos/src/queue.c **** 
 249:./FreeRtos/src/queue.c **** /*
 250:./FreeRtos/src/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 251:./FreeRtos/src/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 252:./FreeRtos/src/queue.c ****  * as a mutex.
 253:./FreeRtos/src/queue.c ****  */
 254:./FreeRtos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 255:./FreeRtos/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 256:./FreeRtos/src/queue.c **** #endif
 257:./FreeRtos/src/queue.c **** 
 258:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccpGFB92.s 			page 6


 259:./FreeRtos/src/queue.c **** 
 260:./FreeRtos/src/queue.c **** /*
 261:./FreeRtos/src/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 262:./FreeRtos/src/queue.c ****  * accessing the queue event lists.
 263:./FreeRtos/src/queue.c ****  */
 264:./FreeRtos/src/queue.c **** #define prvLockQueue( pxQueue )								\
 265:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();									\
 266:./FreeRtos/src/queue.c **** 	{														\
 267:./FreeRtos/src/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 268:./FreeRtos/src/queue.c **** 		{													\
 269:./FreeRtos/src/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 270:./FreeRtos/src/queue.c **** 		}													\
 271:./FreeRtos/src/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 272:./FreeRtos/src/queue.c **** 		{													\
 273:./FreeRtos/src/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 274:./FreeRtos/src/queue.c **** 		}													\
 275:./FreeRtos/src/queue.c **** 	}														\
 276:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL()
 277:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 278:./FreeRtos/src/queue.c **** 
 279:./FreeRtos/src/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 280:./FreeRtos/src/queue.c **** {
 281:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 282:./FreeRtos/src/queue.c **** 
 283:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
 284:./FreeRtos/src/queue.c **** 
 285:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
 286:./FreeRtos/src/queue.c **** 	{
 287:./FreeRtos/src/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 288:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 289:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 290:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 291:./FreeRtos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 292:./FreeRtos/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 293:./FreeRtos/src/queue.c **** 
 294:./FreeRtos/src/queue.c **** 		if( xNewQueue == pdFALSE )
 295:./FreeRtos/src/queue.c **** 		{
 296:./FreeRtos/src/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 297:./FreeRtos/src/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 298:./FreeRtos/src/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 299:./FreeRtos/src/queue.c **** 			the queue, then one should be unblocked as after this function exits
 300:./FreeRtos/src/queue.c **** 			it will be possible to write to it. */
 301:./FreeRtos/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 302:./FreeRtos/src/queue.c **** 			{
 303:./FreeRtos/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 304:./FreeRtos/src/queue.c **** 				{
 305:./FreeRtos/src/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 306:./FreeRtos/src/queue.c **** 				}
 307:./FreeRtos/src/queue.c **** 				else
 308:./FreeRtos/src/queue.c **** 				{
 309:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 310:./FreeRtos/src/queue.c **** 				}
 311:./FreeRtos/src/queue.c **** 			}
 312:./FreeRtos/src/queue.c **** 			else
 313:./FreeRtos/src/queue.c **** 			{
 314:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 315:./FreeRtos/src/queue.c **** 			}
ARM GAS  /tmp/ccpGFB92.s 			page 7


 316:./FreeRtos/src/queue.c **** 		}
 317:./FreeRtos/src/queue.c **** 		else
 318:./FreeRtos/src/queue.c **** 		{
 319:./FreeRtos/src/queue.c **** 			/* Ensure the event queues start in the correct state. */
 320:./FreeRtos/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 321:./FreeRtos/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 322:./FreeRtos/src/queue.c **** 		}
 323:./FreeRtos/src/queue.c **** 	}
 324:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
 325:./FreeRtos/src/queue.c **** 
 326:./FreeRtos/src/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 327:./FreeRtos/src/queue.c **** 	versions. */
 328:./FreeRtos/src/queue.c **** 	return pdPASS;
 329:./FreeRtos/src/queue.c **** }
 330:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 331:./FreeRtos/src/queue.c **** 
 332:./FreeRtos/src/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 333:./FreeRtos/src/queue.c **** 
 334:./FreeRtos/src/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 335:./FreeRtos/src/queue.c **** 	{
 336:./FreeRtos/src/queue.c **** 	Queue_t *pxNewQueue;
 337:./FreeRtos/src/queue.c **** 
 338:./FreeRtos/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 339:./FreeRtos/src/queue.c **** 
 340:./FreeRtos/src/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 341:./FreeRtos/src/queue.c **** 		supplied. */
 342:./FreeRtos/src/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 343:./FreeRtos/src/queue.c **** 
 344:./FreeRtos/src/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 345:./FreeRtos/src/queue.c **** 		should not be provided if the item size is 0. */
 346:./FreeRtos/src/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 347:./FreeRtos/src/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 348:./FreeRtos/src/queue.c **** 
 349:./FreeRtos/src/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 350:./FreeRtos/src/queue.c **** 		{
 351:./FreeRtos/src/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 352:./FreeRtos/src/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 353:./FreeRtos/src/queue.c **** 			the real queue and semaphore structures. */
 354:./FreeRtos/src/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 355:./FreeRtos/src/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 356:./FreeRtos/src/queue.c **** 		}
 357:./FreeRtos/src/queue.c **** 		#endif /* configASSERT_DEFINED */
 358:./FreeRtos/src/queue.c **** 
 359:./FreeRtos/src/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 360:./FreeRtos/src/queue.c **** 		The address of a statically allocated storage area was also passed in
 361:./FreeRtos/src/queue.c **** 		but is already set. */
 362:./FreeRtos/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 363:./FreeRtos/src/queue.c **** 
 364:./FreeRtos/src/queue.c **** 		if( pxNewQueue != NULL )
 365:./FreeRtos/src/queue.c **** 		{
 366:./FreeRtos/src/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 367:./FreeRtos/src/queue.c **** 			{
 368:./FreeRtos/src/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 369:./FreeRtos/src/queue.c **** 				note this queue was allocated statically in case the queue is
 370:./FreeRtos/src/queue.c **** 				later deleted. */
 371:./FreeRtos/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 372:./FreeRtos/src/queue.c **** 			}
ARM GAS  /tmp/ccpGFB92.s 			page 8


 373:./FreeRtos/src/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 374:./FreeRtos/src/queue.c **** 
 375:./FreeRtos/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 376:./FreeRtos/src/queue.c **** 		}
 377:./FreeRtos/src/queue.c **** 
 378:./FreeRtos/src/queue.c **** 		return pxNewQueue;
 379:./FreeRtos/src/queue.c **** 	}
 380:./FreeRtos/src/queue.c **** 
 381:./FreeRtos/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 382:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 383:./FreeRtos/src/queue.c **** 
 384:./FreeRtos/src/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 385:./FreeRtos/src/queue.c **** 
 386:./FreeRtos/src/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 387:./FreeRtos/src/queue.c **** 	{
 388:./FreeRtos/src/queue.c **** 	Queue_t *pxNewQueue;
 389:./FreeRtos/src/queue.c **** 	size_t xQueueSizeInBytes;
 390:./FreeRtos/src/queue.c **** 	uint8_t *pucQueueStorage;
 391:./FreeRtos/src/queue.c **** 
 392:./FreeRtos/src/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 393:./FreeRtos/src/queue.c **** 
 394:./FreeRtos/src/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 395:./FreeRtos/src/queue.c **** 		{
 396:./FreeRtos/src/queue.c **** 			/* There is not going to be a queue storage area. */
 397:./FreeRtos/src/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 398:./FreeRtos/src/queue.c **** 		}
 399:./FreeRtos/src/queue.c **** 		else
 400:./FreeRtos/src/queue.c **** 		{
 401:./FreeRtos/src/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 402:./FreeRtos/src/queue.c **** 			can be in the queue at any time. */
 403:./FreeRtos/src/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 404:./FreeRtos/src/queue.c **** 		}
 405:./FreeRtos/src/queue.c **** 
 406:./FreeRtos/src/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 407:./FreeRtos/src/queue.c **** 
 408:./FreeRtos/src/queue.c **** 		if( pxNewQueue != NULL )
 409:./FreeRtos/src/queue.c **** 		{
 410:./FreeRtos/src/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 411:./FreeRtos/src/queue.c **** 			storage area. */
 412:./FreeRtos/src/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 413:./FreeRtos/src/queue.c **** 
 414:./FreeRtos/src/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:./FreeRtos/src/queue.c **** 			{
 416:./FreeRtos/src/queue.c **** 				/* Queues can be created either statically or dynamically, so
 417:./FreeRtos/src/queue.c **** 				note this task was created dynamically in case it is later
 418:./FreeRtos/src/queue.c **** 				deleted. */
 419:./FreeRtos/src/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 420:./FreeRtos/src/queue.c **** 			}
 421:./FreeRtos/src/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 422:./FreeRtos/src/queue.c **** 
 423:./FreeRtos/src/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 424:./FreeRtos/src/queue.c **** 		}
 425:./FreeRtos/src/queue.c **** 
 426:./FreeRtos/src/queue.c **** 		return pxNewQueue;
 427:./FreeRtos/src/queue.c **** 	}
 428:./FreeRtos/src/queue.c **** 
 429:./FreeRtos/src/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
ARM GAS  /tmp/ccpGFB92.s 			page 9


 430:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 431:./FreeRtos/src/queue.c **** 
 432:./FreeRtos/src/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 433:./FreeRtos/src/queue.c **** {
 434:./FreeRtos/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 435:./FreeRtos/src/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 436:./FreeRtos/src/queue.c **** 	( void ) ucQueueType;
 437:./FreeRtos/src/queue.c **** 
 438:./FreeRtos/src/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 439:./FreeRtos/src/queue.c **** 	{
 440:./FreeRtos/src/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 441:./FreeRtos/src/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 442:./FreeRtos/src/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 443:./FreeRtos/src/queue.c **** 		value that is known to be within the memory map. */
 444:./FreeRtos/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 445:./FreeRtos/src/queue.c **** 	}
 446:./FreeRtos/src/queue.c **** 	else
 447:./FreeRtos/src/queue.c **** 	{
 448:./FreeRtos/src/queue.c **** 		/* Set the head to the start of the queue storage area. */
 449:./FreeRtos/src/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 450:./FreeRtos/src/queue.c **** 	}
 451:./FreeRtos/src/queue.c **** 
 452:./FreeRtos/src/queue.c **** 	/* Initialise the queue members as described where the queue type is
 453:./FreeRtos/src/queue.c **** 	defined. */
 454:./FreeRtos/src/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 455:./FreeRtos/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 456:./FreeRtos/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 457:./FreeRtos/src/queue.c **** 
 458:./FreeRtos/src/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 459:./FreeRtos/src/queue.c **** 	{
 460:./FreeRtos/src/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 461:./FreeRtos/src/queue.c **** 	}
 462:./FreeRtos/src/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 463:./FreeRtos/src/queue.c **** 
 464:./FreeRtos/src/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 465:./FreeRtos/src/queue.c **** 	{
 466:./FreeRtos/src/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 467:./FreeRtos/src/queue.c **** 	}
 468:./FreeRtos/src/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 469:./FreeRtos/src/queue.c **** 
 470:./FreeRtos/src/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 471:./FreeRtos/src/queue.c **** }
 472:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 473:./FreeRtos/src/queue.c **** 
 474:./FreeRtos/src/queue.c **** #if( configUSE_MUTEXES == 1 )
 475:./FreeRtos/src/queue.c **** 
 476:./FreeRtos/src/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 477:./FreeRtos/src/queue.c **** 	{
 478:./FreeRtos/src/queue.c **** 		if( pxNewQueue != NULL )
 479:./FreeRtos/src/queue.c **** 		{
 480:./FreeRtos/src/queue.c **** 			/* The queue create function will set all the queue structure members
 481:./FreeRtos/src/queue.c **** 			correctly for a generic queue, but this function is creating a
 482:./FreeRtos/src/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 483:./FreeRtos/src/queue.c **** 			in particular the information required for priority inheritance. */
 484:./FreeRtos/src/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 485:./FreeRtos/src/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 486:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 10


 487:./FreeRtos/src/queue.c **** 			/* In case this is a recursive mutex. */
 488:./FreeRtos/src/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 489:./FreeRtos/src/queue.c **** 
 490:./FreeRtos/src/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 491:./FreeRtos/src/queue.c **** 
 492:./FreeRtos/src/queue.c **** 			/* Start with the semaphore in the expected state. */
 493:./FreeRtos/src/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 494:./FreeRtos/src/queue.c **** 		}
 495:./FreeRtos/src/queue.c **** 		else
 496:./FreeRtos/src/queue.c **** 		{
 497:./FreeRtos/src/queue.c **** 			traceCREATE_MUTEX_FAILED();
 498:./FreeRtos/src/queue.c **** 		}
 499:./FreeRtos/src/queue.c **** 	}
 500:./FreeRtos/src/queue.c **** 
 501:./FreeRtos/src/queue.c **** #endif /* configUSE_MUTEXES */
 502:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 503:./FreeRtos/src/queue.c **** 
 504:./FreeRtos/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 505:./FreeRtos/src/queue.c **** 
 506:./FreeRtos/src/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 507:./FreeRtos/src/queue.c **** 	{
 508:./FreeRtos/src/queue.c **** 	Queue_t *pxNewQueue;
 509:./FreeRtos/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 510:./FreeRtos/src/queue.c **** 
 511:./FreeRtos/src/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 512:./FreeRtos/src/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 513:./FreeRtos/src/queue.c **** 
 514:./FreeRtos/src/queue.c **** 		return pxNewQueue;
 515:./FreeRtos/src/queue.c **** 	}
 516:./FreeRtos/src/queue.c **** 
 517:./FreeRtos/src/queue.c **** #endif /* configUSE_MUTEXES */
 518:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 519:./FreeRtos/src/queue.c **** 
 520:./FreeRtos/src/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 521:./FreeRtos/src/queue.c **** 
 522:./FreeRtos/src/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 523:./FreeRtos/src/queue.c **** 	{
 524:./FreeRtos/src/queue.c **** 	Queue_t *pxNewQueue;
 525:./FreeRtos/src/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 526:./FreeRtos/src/queue.c **** 
 527:./FreeRtos/src/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 528:./FreeRtos/src/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 529:./FreeRtos/src/queue.c **** 		( void ) ucQueueType;
 530:./FreeRtos/src/queue.c **** 
 531:./FreeRtos/src/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 532:./FreeRtos/src/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 533:./FreeRtos/src/queue.c **** 
 534:./FreeRtos/src/queue.c **** 		return pxNewQueue;
 535:./FreeRtos/src/queue.c **** 	}
 536:./FreeRtos/src/queue.c **** 
 537:./FreeRtos/src/queue.c **** #endif /* configUSE_MUTEXES */
 538:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 539:./FreeRtos/src/queue.c **** 
 540:./FreeRtos/src/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 541:./FreeRtos/src/queue.c **** 
 542:./FreeRtos/src/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 543:./FreeRtos/src/queue.c **** 	{
ARM GAS  /tmp/ccpGFB92.s 			page 11


 544:./FreeRtos/src/queue.c **** 	void *pxReturn;
 545:./FreeRtos/src/queue.c **** 
 546:./FreeRtos/src/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 547:./FreeRtos/src/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 548:./FreeRtos/src/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 549:./FreeRtos/src/queue.c **** 		identity of the mutex holder, as the holder may change between the
 550:./FreeRtos/src/queue.c **** 		following critical section exiting and the function returning. */
 551:./FreeRtos/src/queue.c **** 		taskENTER_CRITICAL();
 552:./FreeRtos/src/queue.c **** 		{
 553:./FreeRtos/src/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 554:./FreeRtos/src/queue.c **** 			{
 555:./FreeRtos/src/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 556:./FreeRtos/src/queue.c **** 			}
 557:./FreeRtos/src/queue.c **** 			else
 558:./FreeRtos/src/queue.c **** 			{
 559:./FreeRtos/src/queue.c **** 				pxReturn = NULL;
 560:./FreeRtos/src/queue.c **** 			}
 561:./FreeRtos/src/queue.c **** 		}
 562:./FreeRtos/src/queue.c **** 		taskEXIT_CRITICAL();
 563:./FreeRtos/src/queue.c **** 
 564:./FreeRtos/src/queue.c **** 		return pxReturn;
 565:./FreeRtos/src/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 566:./FreeRtos/src/queue.c **** 
 567:./FreeRtos/src/queue.c **** #endif
 568:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 569:./FreeRtos/src/queue.c **** 
 570:./FreeRtos/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 571:./FreeRtos/src/queue.c **** 
 572:./FreeRtos/src/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 573:./FreeRtos/src/queue.c **** 	{
 574:./FreeRtos/src/queue.c **** 	BaseType_t xReturn;
 575:./FreeRtos/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 576:./FreeRtos/src/queue.c **** 
 577:./FreeRtos/src/queue.c **** 		configASSERT( pxMutex );
 578:./FreeRtos/src/queue.c **** 
 579:./FreeRtos/src/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 580:./FreeRtos/src/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 581:./FreeRtos/src/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 582:./FreeRtos/src/queue.c **** 		this is the only condition we are interested in it does not matter if
 583:./FreeRtos/src/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 584:./FreeRtos/src/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 585:./FreeRtos/src/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 586:./FreeRtos/src/queue.c **** 		{
 587:./FreeRtos/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 588:./FreeRtos/src/queue.c **** 
 589:./FreeRtos/src/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 590:./FreeRtos/src/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 591:./FreeRtos/src/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 592:./FreeRtos/src/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 593:./FreeRtos/src/queue.c **** 			uxRecursiveCallCount member. */
 594:./FreeRtos/src/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 595:./FreeRtos/src/queue.c **** 
 596:./FreeRtos/src/queue.c **** 			/* Has the recursive call count unwound to 0? */
 597:./FreeRtos/src/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 598:./FreeRtos/src/queue.c **** 			{
 599:./FreeRtos/src/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 600:./FreeRtos/src/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  /tmp/ccpGFB92.s 			page 12


 601:./FreeRtos/src/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 602:./FreeRtos/src/queue.c **** 			}
 603:./FreeRtos/src/queue.c **** 			else
 604:./FreeRtos/src/queue.c **** 			{
 605:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 606:./FreeRtos/src/queue.c **** 			}
 607:./FreeRtos/src/queue.c **** 
 608:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
 609:./FreeRtos/src/queue.c **** 		}
 610:./FreeRtos/src/queue.c **** 		else
 611:./FreeRtos/src/queue.c **** 		{
 612:./FreeRtos/src/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 613:./FreeRtos/src/queue.c **** 			holder. */
 614:./FreeRtos/src/queue.c **** 			xReturn = pdFAIL;
 615:./FreeRtos/src/queue.c **** 
 616:./FreeRtos/src/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 617:./FreeRtos/src/queue.c **** 		}
 618:./FreeRtos/src/queue.c **** 
 619:./FreeRtos/src/queue.c **** 		return xReturn;
 620:./FreeRtos/src/queue.c **** 	}
 621:./FreeRtos/src/queue.c **** 
 622:./FreeRtos/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 623:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 624:./FreeRtos/src/queue.c **** 
 625:./FreeRtos/src/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 626:./FreeRtos/src/queue.c **** 
 627:./FreeRtos/src/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 628:./FreeRtos/src/queue.c **** 	{
 629:./FreeRtos/src/queue.c **** 	BaseType_t xReturn;
 630:./FreeRtos/src/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 631:./FreeRtos/src/queue.c **** 
 632:./FreeRtos/src/queue.c **** 		configASSERT( pxMutex );
 633:./FreeRtos/src/queue.c **** 
 634:./FreeRtos/src/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 635:./FreeRtos/src/queue.c **** 		xQueueGiveMutexRecursive(). */
 636:./FreeRtos/src/queue.c **** 
 637:./FreeRtos/src/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 638:./FreeRtos/src/queue.c **** 
 639:./FreeRtos/src/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 640:./FreeRtos/src/queue.c **** 		{
 641:./FreeRtos/src/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 642:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
 643:./FreeRtos/src/queue.c **** 		}
 644:./FreeRtos/src/queue.c **** 		else
 645:./FreeRtos/src/queue.c **** 		{
 646:./FreeRtos/src/queue.c **** 			xReturn = xQueueGenericReceive( pxMutex, NULL, xTicksToWait, pdFALSE );
 647:./FreeRtos/src/queue.c **** 
 648:./FreeRtos/src/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 649:./FreeRtos/src/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 650:./FreeRtos/src/queue.c **** 			before reaching here. */
 651:./FreeRtos/src/queue.c **** 			if( xReturn != pdFAIL )
 652:./FreeRtos/src/queue.c **** 			{
 653:./FreeRtos/src/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 654:./FreeRtos/src/queue.c **** 			}
 655:./FreeRtos/src/queue.c **** 			else
 656:./FreeRtos/src/queue.c **** 			{
 657:./FreeRtos/src/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
ARM GAS  /tmp/ccpGFB92.s 			page 13


 658:./FreeRtos/src/queue.c **** 			}
 659:./FreeRtos/src/queue.c **** 		}
 660:./FreeRtos/src/queue.c **** 
 661:./FreeRtos/src/queue.c **** 		return xReturn;
 662:./FreeRtos/src/queue.c **** 	}
 663:./FreeRtos/src/queue.c **** 
 664:./FreeRtos/src/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 665:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 666:./FreeRtos/src/queue.c **** 
 667:./FreeRtos/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 668:./FreeRtos/src/queue.c **** 
 669:./FreeRtos/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 670:./FreeRtos/src/queue.c **** 	{
 671:./FreeRtos/src/queue.c **** 	QueueHandle_t xHandle;
 672:./FreeRtos/src/queue.c **** 
 673:./FreeRtos/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 674:./FreeRtos/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 675:./FreeRtos/src/queue.c **** 
 676:./FreeRtos/src/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 677:./FreeRtos/src/queue.c **** 
 678:./FreeRtos/src/queue.c **** 		if( xHandle != NULL )
 679:./FreeRtos/src/queue.c **** 		{
 680:./FreeRtos/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 681:./FreeRtos/src/queue.c **** 
 682:./FreeRtos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 683:./FreeRtos/src/queue.c **** 		}
 684:./FreeRtos/src/queue.c **** 		else
 685:./FreeRtos/src/queue.c **** 		{
 686:./FreeRtos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 687:./FreeRtos/src/queue.c **** 		}
 688:./FreeRtos/src/queue.c **** 
 689:./FreeRtos/src/queue.c **** 		return xHandle;
 690:./FreeRtos/src/queue.c **** 	}
 691:./FreeRtos/src/queue.c **** 
 692:./FreeRtos/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 693:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 694:./FreeRtos/src/queue.c **** 
 695:./FreeRtos/src/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 696:./FreeRtos/src/queue.c **** 
 697:./FreeRtos/src/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 698:./FreeRtos/src/queue.c **** 	{
 699:./FreeRtos/src/queue.c **** 	QueueHandle_t xHandle;
 700:./FreeRtos/src/queue.c **** 
 701:./FreeRtos/src/queue.c **** 		configASSERT( uxMaxCount != 0 );
 702:./FreeRtos/src/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 703:./FreeRtos/src/queue.c **** 
 704:./FreeRtos/src/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 705:./FreeRtos/src/queue.c **** 
 706:./FreeRtos/src/queue.c **** 		if( xHandle != NULL )
 707:./FreeRtos/src/queue.c **** 		{
 708:./FreeRtos/src/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 709:./FreeRtos/src/queue.c **** 
 710:./FreeRtos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 711:./FreeRtos/src/queue.c **** 		}
 712:./FreeRtos/src/queue.c **** 		else
 713:./FreeRtos/src/queue.c **** 		{
 714:./FreeRtos/src/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  /tmp/ccpGFB92.s 			page 14


 715:./FreeRtos/src/queue.c **** 		}
 716:./FreeRtos/src/queue.c **** 
 717:./FreeRtos/src/queue.c **** 		return xHandle;
 718:./FreeRtos/src/queue.c **** 	}
 719:./FreeRtos/src/queue.c **** 
 720:./FreeRtos/src/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 721:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 722:./FreeRtos/src/queue.c **** 
 723:./FreeRtos/src/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 724:./FreeRtos/src/queue.c **** {
 725:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 726:./FreeRtos/src/queue.c **** TimeOut_t xTimeOut;
 727:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 728:./FreeRtos/src/queue.c **** 
 729:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
 730:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 731:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 732:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 733:./FreeRtos/src/queue.c **** 	{
 734:./FreeRtos/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 735:./FreeRtos/src/queue.c **** 	}
 736:./FreeRtos/src/queue.c **** 	#endif
 737:./FreeRtos/src/queue.c **** 
 738:./FreeRtos/src/queue.c **** 
 739:./FreeRtos/src/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 740:./FreeRtos/src/queue.c **** 	statements within the function itself.  This is done in the interest
 741:./FreeRtos/src/queue.c **** 	of execution time efficiency. */
 742:./FreeRtos/src/queue.c **** 	for( ;; )
 743:./FreeRtos/src/queue.c **** 	{
 744:./FreeRtos/src/queue.c **** 		taskENTER_CRITICAL();
 745:./FreeRtos/src/queue.c **** 		{
 746:./FreeRtos/src/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 747:./FreeRtos/src/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 748:./FreeRtos/src/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 749:./FreeRtos/src/queue.c **** 			queue is full. */
 750:./FreeRtos/src/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 751:./FreeRtos/src/queue.c **** 			{
 752:./FreeRtos/src/queue.c **** 				traceQUEUE_SEND( pxQueue );
 753:./FreeRtos/src/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 754:./FreeRtos/src/queue.c **** 
 755:./FreeRtos/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 756:./FreeRtos/src/queue.c **** 				{
 757:./FreeRtos/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 758:./FreeRtos/src/queue.c **** 					{
 759:./FreeRtos/src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 760:./FreeRtos/src/queue.c **** 						{
 761:./FreeRtos/src/queue.c **** 							/* The queue is a member of a queue set, and posting
 762:./FreeRtos/src/queue.c **** 							to the queue set caused a higher priority task to
 763:./FreeRtos/src/queue.c **** 							unblock. A context switch is required. */
 764:./FreeRtos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 765:./FreeRtos/src/queue.c **** 						}
 766:./FreeRtos/src/queue.c **** 						else
 767:./FreeRtos/src/queue.c **** 						{
 768:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 769:./FreeRtos/src/queue.c **** 						}
 770:./FreeRtos/src/queue.c **** 					}
 771:./FreeRtos/src/queue.c **** 					else
ARM GAS  /tmp/ccpGFB92.s 			page 15


 772:./FreeRtos/src/queue.c **** 					{
 773:./FreeRtos/src/queue.c **** 						/* If there was a task waiting for data to arrive on the
 774:./FreeRtos/src/queue.c **** 						queue then unblock it now. */
 775:./FreeRtos/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 776:./FreeRtos/src/queue.c **** 						{
 777:./FreeRtos/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 778:./FreeRtos/src/queue.c **** 							{
 779:./FreeRtos/src/queue.c **** 								/* The unblocked task has a priority higher than
 780:./FreeRtos/src/queue.c **** 								our own so yield immediately.  Yes it is ok to
 781:./FreeRtos/src/queue.c **** 								do this from within the critical section - the
 782:./FreeRtos/src/queue.c **** 								kernel takes care of that. */
 783:./FreeRtos/src/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 784:./FreeRtos/src/queue.c **** 							}
 785:./FreeRtos/src/queue.c **** 							else
 786:./FreeRtos/src/queue.c **** 							{
 787:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 788:./FreeRtos/src/queue.c **** 							}
 789:./FreeRtos/src/queue.c **** 						}
 790:./FreeRtos/src/queue.c **** 						else if( xYieldRequired != pdFALSE )
 791:./FreeRtos/src/queue.c **** 						{
 792:./FreeRtos/src/queue.c **** 							/* This path is a special case that will only get
 793:./FreeRtos/src/queue.c **** 							executed if the task was holding multiple mutexes
 794:./FreeRtos/src/queue.c **** 							and the mutexes were given back in an order that is
 795:./FreeRtos/src/queue.c **** 							different to that in which they were taken. */
 796:./FreeRtos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 797:./FreeRtos/src/queue.c **** 						}
 798:./FreeRtos/src/queue.c **** 						else
 799:./FreeRtos/src/queue.c **** 						{
 800:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 801:./FreeRtos/src/queue.c **** 						}
 802:./FreeRtos/src/queue.c **** 					}
 803:./FreeRtos/src/queue.c **** 				}
 804:./FreeRtos/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 805:./FreeRtos/src/queue.c **** 				{
 806:./FreeRtos/src/queue.c **** 					/* If there was a task waiting for data to arrive on the
 807:./FreeRtos/src/queue.c **** 					queue then unblock it now. */
 808:./FreeRtos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 809:./FreeRtos/src/queue.c **** 					{
 810:./FreeRtos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 811:./FreeRtos/src/queue.c **** 						{
 812:./FreeRtos/src/queue.c **** 							/* The unblocked task has a priority higher than
 813:./FreeRtos/src/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 814:./FreeRtos/src/queue.c **** 							this from within the critical section - the kernel
 815:./FreeRtos/src/queue.c **** 							takes care of that. */
 816:./FreeRtos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 817:./FreeRtos/src/queue.c **** 						}
 818:./FreeRtos/src/queue.c **** 						else
 819:./FreeRtos/src/queue.c **** 						{
 820:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 821:./FreeRtos/src/queue.c **** 						}
 822:./FreeRtos/src/queue.c **** 					}
 823:./FreeRtos/src/queue.c **** 					else if( xYieldRequired != pdFALSE )
 824:./FreeRtos/src/queue.c **** 					{
 825:./FreeRtos/src/queue.c **** 						/* This path is a special case that will only get
 826:./FreeRtos/src/queue.c **** 						executed if the task was holding multiple mutexes and
 827:./FreeRtos/src/queue.c **** 						the mutexes were given back in an order that is
 828:./FreeRtos/src/queue.c **** 						different to that in which they were taken. */
ARM GAS  /tmp/ccpGFB92.s 			page 16


 829:./FreeRtos/src/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 830:./FreeRtos/src/queue.c **** 					}
 831:./FreeRtos/src/queue.c **** 					else
 832:./FreeRtos/src/queue.c **** 					{
 833:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 834:./FreeRtos/src/queue.c **** 					}
 835:./FreeRtos/src/queue.c **** 				}
 836:./FreeRtos/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 837:./FreeRtos/src/queue.c **** 
 838:./FreeRtos/src/queue.c **** 				taskEXIT_CRITICAL();
 839:./FreeRtos/src/queue.c **** 				return pdPASS;
 840:./FreeRtos/src/queue.c **** 			}
 841:./FreeRtos/src/queue.c **** 			else
 842:./FreeRtos/src/queue.c **** 			{
 843:./FreeRtos/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 844:./FreeRtos/src/queue.c **** 				{
 845:./FreeRtos/src/queue.c **** 					/* The queue was full and no block time is specified (or
 846:./FreeRtos/src/queue.c **** 					the block time has expired) so leave now. */
 847:./FreeRtos/src/queue.c **** 					taskEXIT_CRITICAL();
 848:./FreeRtos/src/queue.c **** 
 849:./FreeRtos/src/queue.c **** 					/* Return to the original privilege level before exiting
 850:./FreeRtos/src/queue.c **** 					the function. */
 851:./FreeRtos/src/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 852:./FreeRtos/src/queue.c **** 					return errQUEUE_FULL;
 853:./FreeRtos/src/queue.c **** 				}
 854:./FreeRtos/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 855:./FreeRtos/src/queue.c **** 				{
 856:./FreeRtos/src/queue.c **** 					/* The queue was full and a block time was specified so
 857:./FreeRtos/src/queue.c **** 					configure the timeout structure. */
 858:./FreeRtos/src/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
 859:./FreeRtos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 860:./FreeRtos/src/queue.c **** 				}
 861:./FreeRtos/src/queue.c **** 				else
 862:./FreeRtos/src/queue.c **** 				{
 863:./FreeRtos/src/queue.c **** 					/* Entry time was already set. */
 864:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 865:./FreeRtos/src/queue.c **** 				}
 866:./FreeRtos/src/queue.c **** 			}
 867:./FreeRtos/src/queue.c **** 		}
 868:./FreeRtos/src/queue.c **** 		taskEXIT_CRITICAL();
 869:./FreeRtos/src/queue.c **** 
 870:./FreeRtos/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 871:./FreeRtos/src/queue.c **** 		now the critical section has been exited. */
 872:./FreeRtos/src/queue.c **** 
 873:./FreeRtos/src/queue.c **** 		vTaskSuspendAll();
 874:./FreeRtos/src/queue.c **** 		prvLockQueue( pxQueue );
 875:./FreeRtos/src/queue.c **** 
 876:./FreeRtos/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 877:./FreeRtos/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 878:./FreeRtos/src/queue.c **** 		{
 879:./FreeRtos/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 880:./FreeRtos/src/queue.c **** 			{
 881:./FreeRtos/src/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 882:./FreeRtos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 883:./FreeRtos/src/queue.c **** 
 884:./FreeRtos/src/queue.c **** 				/* Unlocking the queue means queue events can effect the
 885:./FreeRtos/src/queue.c **** 				event list.  It is possible	that interrupts occurring now
ARM GAS  /tmp/ccpGFB92.s 			page 17


 886:./FreeRtos/src/queue.c **** 				remove this task from the event	list again - but as the
 887:./FreeRtos/src/queue.c **** 				scheduler is suspended the task will go onto the pending
 888:./FreeRtos/src/queue.c **** 				ready last instead of the actual ready list. */
 889:./FreeRtos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 890:./FreeRtos/src/queue.c **** 
 891:./FreeRtos/src/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 892:./FreeRtos/src/queue.c **** 				ready list into the ready list - so it is feasible that this
 893:./FreeRtos/src/queue.c **** 				task is already in a ready list before it yields - in which
 894:./FreeRtos/src/queue.c **** 				case the yield will not cause a context switch unless there
 895:./FreeRtos/src/queue.c **** 				is also a higher priority task in the pending ready list. */
 896:./FreeRtos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 897:./FreeRtos/src/queue.c **** 				{
 898:./FreeRtos/src/queue.c **** 					portYIELD_WITHIN_API();
 899:./FreeRtos/src/queue.c **** 				}
 900:./FreeRtos/src/queue.c **** 			}
 901:./FreeRtos/src/queue.c **** 			else
 902:./FreeRtos/src/queue.c **** 			{
 903:./FreeRtos/src/queue.c **** 				/* Try again. */
 904:./FreeRtos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 905:./FreeRtos/src/queue.c **** 				( void ) xTaskResumeAll();
 906:./FreeRtos/src/queue.c **** 			}
 907:./FreeRtos/src/queue.c **** 		}
 908:./FreeRtos/src/queue.c **** 		else
 909:./FreeRtos/src/queue.c **** 		{
 910:./FreeRtos/src/queue.c **** 			/* The timeout has expired. */
 911:./FreeRtos/src/queue.c **** 			prvUnlockQueue( pxQueue );
 912:./FreeRtos/src/queue.c **** 			( void ) xTaskResumeAll();
 913:./FreeRtos/src/queue.c **** 
 914:./FreeRtos/src/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 915:./FreeRtos/src/queue.c **** 			return errQUEUE_FULL;
 916:./FreeRtos/src/queue.c **** 		}
 917:./FreeRtos/src/queue.c **** 	}
 918:./FreeRtos/src/queue.c **** }
 919:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 920:./FreeRtos/src/queue.c **** 
 921:./FreeRtos/src/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 922:./FreeRtos/src/queue.c **** {
 923:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 924:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 925:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 926:./FreeRtos/src/queue.c **** 
 927:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
 928:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 929:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 930:./FreeRtos/src/queue.c **** 
 931:./FreeRtos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 932:./FreeRtos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 933:./FreeRtos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 934:./FreeRtos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 935:./FreeRtos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 936:./FreeRtos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 937:./FreeRtos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 938:./FreeRtos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
 939:./FreeRtos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 940:./FreeRtos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 941:./FreeRtos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 942:./FreeRtos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  /tmp/ccpGFB92.s 			page 18


 943:./FreeRtos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 944:./FreeRtos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 945:./FreeRtos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 946:./FreeRtos/src/queue.c **** 
 947:./FreeRtos/src/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 948:./FreeRtos/src/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 949:./FreeRtos/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 950:./FreeRtos/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 951:./FreeRtos/src/queue.c **** 	post). */
 952:./FreeRtos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 953:./FreeRtos/src/queue.c **** 	{
 954:./FreeRtos/src/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 955:./FreeRtos/src/queue.c **** 		{
 956:./FreeRtos/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 957:./FreeRtos/src/queue.c **** 
 958:./FreeRtos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 959:./FreeRtos/src/queue.c **** 
 960:./FreeRtos/src/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 961:./FreeRtos/src/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 962:./FreeRtos/src/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 963:./FreeRtos/src/queue.c **** 			called here even though the disinherit function does not check if
 964:./FreeRtos/src/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 965:./FreeRtos/src/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 966:./FreeRtos/src/queue.c **** 
 967:./FreeRtos/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 968:./FreeRtos/src/queue.c **** 			be done when the queue is unlocked later. */
 969:./FreeRtos/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
 970:./FreeRtos/src/queue.c **** 			{
 971:./FreeRtos/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 972:./FreeRtos/src/queue.c **** 				{
 973:./FreeRtos/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 974:./FreeRtos/src/queue.c **** 					{
 975:./FreeRtos/src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 976:./FreeRtos/src/queue.c **** 						{
 977:./FreeRtos/src/queue.c **** 							/* The queue is a member of a queue set, and posting
 978:./FreeRtos/src/queue.c **** 							to the queue set caused a higher priority task to
 979:./FreeRtos/src/queue.c **** 							unblock.  A context switch is required. */
 980:./FreeRtos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 981:./FreeRtos/src/queue.c **** 							{
 982:./FreeRtos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 983:./FreeRtos/src/queue.c **** 							}
 984:./FreeRtos/src/queue.c **** 							else
 985:./FreeRtos/src/queue.c **** 							{
 986:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 987:./FreeRtos/src/queue.c **** 							}
 988:./FreeRtos/src/queue.c **** 						}
 989:./FreeRtos/src/queue.c **** 						else
 990:./FreeRtos/src/queue.c **** 						{
 991:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 992:./FreeRtos/src/queue.c **** 						}
 993:./FreeRtos/src/queue.c **** 					}
 994:./FreeRtos/src/queue.c **** 					else
 995:./FreeRtos/src/queue.c **** 					{
 996:./FreeRtos/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 997:./FreeRtos/src/queue.c **** 						{
 998:./FreeRtos/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 999:./FreeRtos/src/queue.c **** 							{
ARM GAS  /tmp/ccpGFB92.s 			page 19


1000:./FreeRtos/src/queue.c **** 								/* The task waiting has a higher priority so
1001:./FreeRtos/src/queue.c **** 								record that a context switch is required. */
1002:./FreeRtos/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1003:./FreeRtos/src/queue.c **** 								{
1004:./FreeRtos/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1005:./FreeRtos/src/queue.c **** 								}
1006:./FreeRtos/src/queue.c **** 								else
1007:./FreeRtos/src/queue.c **** 								{
1008:./FreeRtos/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1009:./FreeRtos/src/queue.c **** 								}
1010:./FreeRtos/src/queue.c **** 							}
1011:./FreeRtos/src/queue.c **** 							else
1012:./FreeRtos/src/queue.c **** 							{
1013:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1014:./FreeRtos/src/queue.c **** 							}
1015:./FreeRtos/src/queue.c **** 						}
1016:./FreeRtos/src/queue.c **** 						else
1017:./FreeRtos/src/queue.c **** 						{
1018:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1019:./FreeRtos/src/queue.c **** 						}
1020:./FreeRtos/src/queue.c **** 					}
1021:./FreeRtos/src/queue.c **** 				}
1022:./FreeRtos/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1023:./FreeRtos/src/queue.c **** 				{
1024:./FreeRtos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1025:./FreeRtos/src/queue.c **** 					{
1026:./FreeRtos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1027:./FreeRtos/src/queue.c **** 						{
1028:./FreeRtos/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1029:./FreeRtos/src/queue.c **** 							context	switch is required. */
1030:./FreeRtos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1031:./FreeRtos/src/queue.c **** 							{
1032:./FreeRtos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1033:./FreeRtos/src/queue.c **** 							}
1034:./FreeRtos/src/queue.c **** 							else
1035:./FreeRtos/src/queue.c **** 							{
1036:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1037:./FreeRtos/src/queue.c **** 							}
1038:./FreeRtos/src/queue.c **** 						}
1039:./FreeRtos/src/queue.c **** 						else
1040:./FreeRtos/src/queue.c **** 						{
1041:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1042:./FreeRtos/src/queue.c **** 						}
1043:./FreeRtos/src/queue.c **** 					}
1044:./FreeRtos/src/queue.c **** 					else
1045:./FreeRtos/src/queue.c **** 					{
1046:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1047:./FreeRtos/src/queue.c **** 					}
1048:./FreeRtos/src/queue.c **** 				}
1049:./FreeRtos/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1050:./FreeRtos/src/queue.c **** 			}
1051:./FreeRtos/src/queue.c **** 			else
1052:./FreeRtos/src/queue.c **** 			{
1053:./FreeRtos/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1054:./FreeRtos/src/queue.c **** 				knows that data was posted while it was locked. */
1055:./FreeRtos/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1056:./FreeRtos/src/queue.c **** 			}
ARM GAS  /tmp/ccpGFB92.s 			page 20


1057:./FreeRtos/src/queue.c **** 
1058:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
1059:./FreeRtos/src/queue.c **** 		}
1060:./FreeRtos/src/queue.c **** 		else
1061:./FreeRtos/src/queue.c **** 		{
1062:./FreeRtos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1063:./FreeRtos/src/queue.c **** 			xReturn = errQUEUE_FULL;
1064:./FreeRtos/src/queue.c **** 		}
1065:./FreeRtos/src/queue.c **** 	}
1066:./FreeRtos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1067:./FreeRtos/src/queue.c **** 
1068:./FreeRtos/src/queue.c **** 	return xReturn;
1069:./FreeRtos/src/queue.c **** }
1070:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1071:./FreeRtos/src/queue.c **** 
1072:./FreeRtos/src/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1073:./FreeRtos/src/queue.c **** {
1074:./FreeRtos/src/queue.c **** BaseType_t xReturn;
1075:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1076:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1077:./FreeRtos/src/queue.c **** 
1078:./FreeRtos/src/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1079:./FreeRtos/src/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1080:./FreeRtos/src/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1081:./FreeRtos/src/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1082:./FreeRtos/src/queue.c **** 	post). */
1083:./FreeRtos/src/queue.c **** 
1084:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
1085:./FreeRtos/src/queue.c **** 
1086:./FreeRtos/src/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1087:./FreeRtos/src/queue.c **** 	if the item size is not 0. */
1088:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1089:./FreeRtos/src/queue.c **** 
1090:./FreeRtos/src/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1091:./FreeRtos/src/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1092:./FreeRtos/src/queue.c **** 	interrupts, only tasks. */
1093:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1094:./FreeRtos/src/queue.c **** 
1095:./FreeRtos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1096:./FreeRtos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1097:./FreeRtos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1098:./FreeRtos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1099:./FreeRtos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1100:./FreeRtos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1101:./FreeRtos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1102:./FreeRtos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1103:./FreeRtos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1104:./FreeRtos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1105:./FreeRtos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1106:./FreeRtos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1107:./FreeRtos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1108:./FreeRtos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1109:./FreeRtos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1110:./FreeRtos/src/queue.c **** 
1111:./FreeRtos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1112:./FreeRtos/src/queue.c **** 	{
1113:./FreeRtos/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  /tmp/ccpGFB92.s 			page 21


1114:./FreeRtos/src/queue.c **** 
1115:./FreeRtos/src/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1116:./FreeRtos/src/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1117:./FreeRtos/src/queue.c **** 		space'. */
1118:./FreeRtos/src/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1119:./FreeRtos/src/queue.c **** 		{
1120:./FreeRtos/src/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1121:./FreeRtos/src/queue.c **** 
1122:./FreeRtos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1123:./FreeRtos/src/queue.c **** 
1124:./FreeRtos/src/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1125:./FreeRtos/src/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1126:./FreeRtos/src/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1127:./FreeRtos/src/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1128:./FreeRtos/src/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1129:./FreeRtos/src/queue.c **** 			messages (semaphores) available. */
1130:./FreeRtos/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1131:./FreeRtos/src/queue.c **** 
1132:./FreeRtos/src/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1133:./FreeRtos/src/queue.c **** 			be done when the queue is unlocked later. */
1134:./FreeRtos/src/queue.c **** 			if( cTxLock == queueUNLOCKED )
1135:./FreeRtos/src/queue.c **** 			{
1136:./FreeRtos/src/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1137:./FreeRtos/src/queue.c **** 				{
1138:./FreeRtos/src/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1139:./FreeRtos/src/queue.c **** 					{
1140:./FreeRtos/src/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1141:./FreeRtos/src/queue.c **** 						{
1142:./FreeRtos/src/queue.c **** 							/* The semaphore is a member of a queue set, and
1143:./FreeRtos/src/queue.c **** 							posting	to the queue set caused a higher priority
1144:./FreeRtos/src/queue.c **** 							task to	unblock.  A context switch is required. */
1145:./FreeRtos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1146:./FreeRtos/src/queue.c **** 							{
1147:./FreeRtos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1148:./FreeRtos/src/queue.c **** 							}
1149:./FreeRtos/src/queue.c **** 							else
1150:./FreeRtos/src/queue.c **** 							{
1151:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1152:./FreeRtos/src/queue.c **** 							}
1153:./FreeRtos/src/queue.c **** 						}
1154:./FreeRtos/src/queue.c **** 						else
1155:./FreeRtos/src/queue.c **** 						{
1156:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1157:./FreeRtos/src/queue.c **** 						}
1158:./FreeRtos/src/queue.c **** 					}
1159:./FreeRtos/src/queue.c **** 					else
1160:./FreeRtos/src/queue.c **** 					{
1161:./FreeRtos/src/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1162:./FreeRtos/src/queue.c **** 						{
1163:./FreeRtos/src/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1164:./FreeRtos/src/queue.c **** 							{
1165:./FreeRtos/src/queue.c **** 								/* The task waiting has a higher priority so
1166:./FreeRtos/src/queue.c **** 								record that a context switch is required. */
1167:./FreeRtos/src/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1168:./FreeRtos/src/queue.c **** 								{
1169:./FreeRtos/src/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1170:./FreeRtos/src/queue.c **** 								}
ARM GAS  /tmp/ccpGFB92.s 			page 22


1171:./FreeRtos/src/queue.c **** 								else
1172:./FreeRtos/src/queue.c **** 								{
1173:./FreeRtos/src/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1174:./FreeRtos/src/queue.c **** 								}
1175:./FreeRtos/src/queue.c **** 							}
1176:./FreeRtos/src/queue.c **** 							else
1177:./FreeRtos/src/queue.c **** 							{
1178:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1179:./FreeRtos/src/queue.c **** 							}
1180:./FreeRtos/src/queue.c **** 						}
1181:./FreeRtos/src/queue.c **** 						else
1182:./FreeRtos/src/queue.c **** 						{
1183:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1184:./FreeRtos/src/queue.c **** 						}
1185:./FreeRtos/src/queue.c **** 					}
1186:./FreeRtos/src/queue.c **** 				}
1187:./FreeRtos/src/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1188:./FreeRtos/src/queue.c **** 				{
1189:./FreeRtos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1190:./FreeRtos/src/queue.c **** 					{
1191:./FreeRtos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1192:./FreeRtos/src/queue.c **** 						{
1193:./FreeRtos/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1194:./FreeRtos/src/queue.c **** 							context	switch is required. */
1195:./FreeRtos/src/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1196:./FreeRtos/src/queue.c **** 							{
1197:./FreeRtos/src/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1198:./FreeRtos/src/queue.c **** 							}
1199:./FreeRtos/src/queue.c **** 							else
1200:./FreeRtos/src/queue.c **** 							{
1201:./FreeRtos/src/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1202:./FreeRtos/src/queue.c **** 							}
1203:./FreeRtos/src/queue.c **** 						}
1204:./FreeRtos/src/queue.c **** 						else
1205:./FreeRtos/src/queue.c **** 						{
1206:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1207:./FreeRtos/src/queue.c **** 						}
1208:./FreeRtos/src/queue.c **** 					}
1209:./FreeRtos/src/queue.c **** 					else
1210:./FreeRtos/src/queue.c **** 					{
1211:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1212:./FreeRtos/src/queue.c **** 					}
1213:./FreeRtos/src/queue.c **** 				}
1214:./FreeRtos/src/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1215:./FreeRtos/src/queue.c **** 			}
1216:./FreeRtos/src/queue.c **** 			else
1217:./FreeRtos/src/queue.c **** 			{
1218:./FreeRtos/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1219:./FreeRtos/src/queue.c **** 				knows that data was posted while it was locked. */
1220:./FreeRtos/src/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1221:./FreeRtos/src/queue.c **** 			}
1222:./FreeRtos/src/queue.c **** 
1223:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
1224:./FreeRtos/src/queue.c **** 		}
1225:./FreeRtos/src/queue.c **** 		else
1226:./FreeRtos/src/queue.c **** 		{
1227:./FreeRtos/src/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  /tmp/ccpGFB92.s 			page 23


1228:./FreeRtos/src/queue.c **** 			xReturn = errQUEUE_FULL;
1229:./FreeRtos/src/queue.c **** 		}
1230:./FreeRtos/src/queue.c **** 	}
1231:./FreeRtos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1232:./FreeRtos/src/queue.c **** 
1233:./FreeRtos/src/queue.c **** 	return xReturn;
1234:./FreeRtos/src/queue.c **** }
1235:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1236:./FreeRtos/src/queue.c **** 
1237:./FreeRtos/src/queue.c **** BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWa
1238:./FreeRtos/src/queue.c **** {
1239:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1240:./FreeRtos/src/queue.c **** TimeOut_t xTimeOut;
1241:./FreeRtos/src/queue.c **** int8_t *pcOriginalReadPosition;
1242:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1243:./FreeRtos/src/queue.c **** 
1244:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
1245:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1246:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1247:./FreeRtos/src/queue.c **** 	{
1248:./FreeRtos/src/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1249:./FreeRtos/src/queue.c **** 	}
1250:./FreeRtos/src/queue.c **** 	#endif
1251:./FreeRtos/src/queue.c **** 
1252:./FreeRtos/src/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1253:./FreeRtos/src/queue.c **** 	statements within the function itself.  This is done in the interest
1254:./FreeRtos/src/queue.c **** 	of execution time efficiency. */
1255:./FreeRtos/src/queue.c **** 
1256:./FreeRtos/src/queue.c **** 	for( ;; )
1257:./FreeRtos/src/queue.c **** 	{
1258:./FreeRtos/src/queue.c **** 		taskENTER_CRITICAL();
1259:./FreeRtos/src/queue.c **** 		{
1260:./FreeRtos/src/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1261:./FreeRtos/src/queue.c **** 
1262:./FreeRtos/src/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1263:./FreeRtos/src/queue.c **** 			must be the highest priority task wanting to access the queue. */
1264:./FreeRtos/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1265:./FreeRtos/src/queue.c **** 			{
1266:./FreeRtos/src/queue.c **** 				/* Remember the read position in case the queue is only being
1267:./FreeRtos/src/queue.c **** 				peeked. */
1268:./FreeRtos/src/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1269:./FreeRtos/src/queue.c **** 
1270:./FreeRtos/src/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1271:./FreeRtos/src/queue.c **** 
1272:./FreeRtos/src/queue.c **** 				if( xJustPeeking == pdFALSE )
1273:./FreeRtos/src/queue.c **** 				{
1274:./FreeRtos/src/queue.c **** 					traceQUEUE_RECEIVE( pxQueue );
1275:./FreeRtos/src/queue.c **** 
1276:./FreeRtos/src/queue.c **** 					/* Actually removing data, not just peeking. */
1277:./FreeRtos/src/queue.c **** 					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1278:./FreeRtos/src/queue.c **** 
1279:./FreeRtos/src/queue.c **** 					#if ( configUSE_MUTEXES == 1 )
1280:./FreeRtos/src/queue.c **** 					{
1281:./FreeRtos/src/queue.c **** 						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1282:./FreeRtos/src/queue.c **** 						{
1283:./FreeRtos/src/queue.c **** 							/* Record the information required to implement
1284:./FreeRtos/src/queue.c **** 							priority inheritance should it become necessary. */
ARM GAS  /tmp/ccpGFB92.s 			page 24


1285:./FreeRtos/src/queue.c **** 							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is 
1286:./FreeRtos/src/queue.c **** 						}
1287:./FreeRtos/src/queue.c **** 						else
1288:./FreeRtos/src/queue.c **** 						{
1289:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1290:./FreeRtos/src/queue.c **** 						}
1291:./FreeRtos/src/queue.c **** 					}
1292:./FreeRtos/src/queue.c **** 					#endif /* configUSE_MUTEXES */
1293:./FreeRtos/src/queue.c **** 
1294:./FreeRtos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1295:./FreeRtos/src/queue.c **** 					{
1296:./FreeRtos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1297:./FreeRtos/src/queue.c **** 						{
1298:./FreeRtos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1299:./FreeRtos/src/queue.c **** 						}
1300:./FreeRtos/src/queue.c **** 						else
1301:./FreeRtos/src/queue.c **** 						{
1302:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1303:./FreeRtos/src/queue.c **** 						}
1304:./FreeRtos/src/queue.c **** 					}
1305:./FreeRtos/src/queue.c **** 					else
1306:./FreeRtos/src/queue.c **** 					{
1307:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1308:./FreeRtos/src/queue.c **** 					}
1309:./FreeRtos/src/queue.c **** 				}
1310:./FreeRtos/src/queue.c **** 				else
1311:./FreeRtos/src/queue.c **** 				{
1312:./FreeRtos/src/queue.c **** 					traceQUEUE_PEEK( pxQueue );
1313:./FreeRtos/src/queue.c **** 
1314:./FreeRtos/src/queue.c **** 					/* The data is not being removed, so reset the read
1315:./FreeRtos/src/queue.c **** 					pointer. */
1316:./FreeRtos/src/queue.c **** 					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1317:./FreeRtos/src/queue.c **** 
1318:./FreeRtos/src/queue.c **** 					/* The data is being left in the queue, so see if there are
1319:./FreeRtos/src/queue.c **** 					any other tasks waiting for the data. */
1320:./FreeRtos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1321:./FreeRtos/src/queue.c **** 					{
1322:./FreeRtos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1323:./FreeRtos/src/queue.c **** 						{
1324:./FreeRtos/src/queue.c **** 							/* The task waiting has a higher priority than this task. */
1325:./FreeRtos/src/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
1326:./FreeRtos/src/queue.c **** 						}
1327:./FreeRtos/src/queue.c **** 						else
1328:./FreeRtos/src/queue.c **** 						{
1329:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1330:./FreeRtos/src/queue.c **** 						}
1331:./FreeRtos/src/queue.c **** 					}
1332:./FreeRtos/src/queue.c **** 					else
1333:./FreeRtos/src/queue.c **** 					{
1334:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1335:./FreeRtos/src/queue.c **** 					}
1336:./FreeRtos/src/queue.c **** 				}
1337:./FreeRtos/src/queue.c **** 
1338:./FreeRtos/src/queue.c **** 				taskEXIT_CRITICAL();
1339:./FreeRtos/src/queue.c **** 				return pdPASS;
1340:./FreeRtos/src/queue.c **** 			}
1341:./FreeRtos/src/queue.c **** 			else
ARM GAS  /tmp/ccpGFB92.s 			page 25


1342:./FreeRtos/src/queue.c **** 			{
1343:./FreeRtos/src/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1344:./FreeRtos/src/queue.c **** 				{
1345:./FreeRtos/src/queue.c **** 					/* The queue was empty and no block time is specified (or
1346:./FreeRtos/src/queue.c **** 					the block time has expired) so leave now. */
1347:./FreeRtos/src/queue.c **** 					taskEXIT_CRITICAL();
1348:./FreeRtos/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1349:./FreeRtos/src/queue.c **** 					return errQUEUE_EMPTY;
1350:./FreeRtos/src/queue.c **** 				}
1351:./FreeRtos/src/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1352:./FreeRtos/src/queue.c **** 				{
1353:./FreeRtos/src/queue.c **** 					/* The queue was empty and a block time was specified so
1354:./FreeRtos/src/queue.c **** 					configure the timeout structure. */
1355:./FreeRtos/src/queue.c **** 					vTaskSetTimeOutState( &xTimeOut );
1356:./FreeRtos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
1357:./FreeRtos/src/queue.c **** 				}
1358:./FreeRtos/src/queue.c **** 				else
1359:./FreeRtos/src/queue.c **** 				{
1360:./FreeRtos/src/queue.c **** 					/* Entry time was already set. */
1361:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1362:./FreeRtos/src/queue.c **** 				}
1363:./FreeRtos/src/queue.c **** 			}
1364:./FreeRtos/src/queue.c **** 		}
1365:./FreeRtos/src/queue.c **** 		taskEXIT_CRITICAL();
1366:./FreeRtos/src/queue.c **** 
1367:./FreeRtos/src/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1368:./FreeRtos/src/queue.c **** 		now the critical section has been exited. */
1369:./FreeRtos/src/queue.c **** 
1370:./FreeRtos/src/queue.c **** 		vTaskSuspendAll();
1371:./FreeRtos/src/queue.c **** 		prvLockQueue( pxQueue );
1372:./FreeRtos/src/queue.c **** 
1373:./FreeRtos/src/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1374:./FreeRtos/src/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1375:./FreeRtos/src/queue.c **** 		{
1376:./FreeRtos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1377:./FreeRtos/src/queue.c **** 			{
1378:./FreeRtos/src/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1379:./FreeRtos/src/queue.c **** 
1380:./FreeRtos/src/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1381:./FreeRtos/src/queue.c **** 				{
1382:./FreeRtos/src/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1383:./FreeRtos/src/queue.c **** 					{
1384:./FreeRtos/src/queue.c **** 						taskENTER_CRITICAL();
1385:./FreeRtos/src/queue.c **** 						{
1386:./FreeRtos/src/queue.c **** 							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1387:./FreeRtos/src/queue.c **** 						}
1388:./FreeRtos/src/queue.c **** 						taskEXIT_CRITICAL();
1389:./FreeRtos/src/queue.c **** 					}
1390:./FreeRtos/src/queue.c **** 					else
1391:./FreeRtos/src/queue.c **** 					{
1392:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1393:./FreeRtos/src/queue.c **** 					}
1394:./FreeRtos/src/queue.c **** 				}
1395:./FreeRtos/src/queue.c **** 				#endif
1396:./FreeRtos/src/queue.c **** 
1397:./FreeRtos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1398:./FreeRtos/src/queue.c **** 				prvUnlockQueue( pxQueue );
ARM GAS  /tmp/ccpGFB92.s 			page 26


1399:./FreeRtos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1400:./FreeRtos/src/queue.c **** 				{
1401:./FreeRtos/src/queue.c **** 					portYIELD_WITHIN_API();
1402:./FreeRtos/src/queue.c **** 				}
1403:./FreeRtos/src/queue.c **** 				else
1404:./FreeRtos/src/queue.c **** 				{
1405:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1406:./FreeRtos/src/queue.c **** 				}
1407:./FreeRtos/src/queue.c **** 			}
1408:./FreeRtos/src/queue.c **** 			else
1409:./FreeRtos/src/queue.c **** 			{
1410:./FreeRtos/src/queue.c **** 				/* Try again. */
1411:./FreeRtos/src/queue.c **** 				prvUnlockQueue( pxQueue );
1412:./FreeRtos/src/queue.c **** 				( void ) xTaskResumeAll();
1413:./FreeRtos/src/queue.c **** 			}
1414:./FreeRtos/src/queue.c **** 		}
1415:./FreeRtos/src/queue.c **** 		else
1416:./FreeRtos/src/queue.c **** 		{
1417:./FreeRtos/src/queue.c **** 			prvUnlockQueue( pxQueue );
1418:./FreeRtos/src/queue.c **** 			( void ) xTaskResumeAll();
1419:./FreeRtos/src/queue.c **** 
1420:./FreeRtos/src/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1421:./FreeRtos/src/queue.c **** 			{
1422:./FreeRtos/src/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1423:./FreeRtos/src/queue.c **** 				return errQUEUE_EMPTY;
1424:./FreeRtos/src/queue.c **** 			}
1425:./FreeRtos/src/queue.c **** 			else
1426:./FreeRtos/src/queue.c **** 			{
1427:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1428:./FreeRtos/src/queue.c **** 			}
1429:./FreeRtos/src/queue.c **** 		}
1430:./FreeRtos/src/queue.c **** 	}
1431:./FreeRtos/src/queue.c **** }
1432:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1433:./FreeRtos/src/queue.c **** 
1434:./FreeRtos/src/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1435:./FreeRtos/src/queue.c **** {
1436:./FreeRtos/src/queue.c **** BaseType_t xReturn;
1437:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1438:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1439:./FreeRtos/src/queue.c **** 
1440:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
1441:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1442:./FreeRtos/src/queue.c **** 
1443:./FreeRtos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1444:./FreeRtos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1445:./FreeRtos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1446:./FreeRtos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1447:./FreeRtos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1448:./FreeRtos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1449:./FreeRtos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1450:./FreeRtos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1451:./FreeRtos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1452:./FreeRtos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1453:./FreeRtos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1454:./FreeRtos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1455:./FreeRtos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
ARM GAS  /tmp/ccpGFB92.s 			page 27


1456:./FreeRtos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1457:./FreeRtos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1458:./FreeRtos/src/queue.c **** 
1459:./FreeRtos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1460:./FreeRtos/src/queue.c **** 	{
1461:./FreeRtos/src/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1462:./FreeRtos/src/queue.c **** 
1463:./FreeRtos/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1464:./FreeRtos/src/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1465:./FreeRtos/src/queue.c **** 		{
1466:./FreeRtos/src/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1467:./FreeRtos/src/queue.c **** 
1468:./FreeRtos/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1469:./FreeRtos/src/queue.c **** 
1470:./FreeRtos/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1471:./FreeRtos/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
1472:./FreeRtos/src/queue.c **** 
1473:./FreeRtos/src/queue.c **** 			/* If the queue is locked the event list will not be modified.
1474:./FreeRtos/src/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1475:./FreeRtos/src/queue.c **** 			will know that an ISR has removed data while the queue was
1476:./FreeRtos/src/queue.c **** 			locked. */
1477:./FreeRtos/src/queue.c **** 			if( cRxLock == queueUNLOCKED )
1478:./FreeRtos/src/queue.c **** 			{
1479:./FreeRtos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1480:./FreeRtos/src/queue.c **** 				{
1481:./FreeRtos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1482:./FreeRtos/src/queue.c **** 					{
1483:./FreeRtos/src/queue.c **** 						/* The task waiting has a higher priority than us so
1484:./FreeRtos/src/queue.c **** 						force a context switch. */
1485:./FreeRtos/src/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1486:./FreeRtos/src/queue.c **** 						{
1487:./FreeRtos/src/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1488:./FreeRtos/src/queue.c **** 						}
1489:./FreeRtos/src/queue.c **** 						else
1490:./FreeRtos/src/queue.c **** 						{
1491:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1492:./FreeRtos/src/queue.c **** 						}
1493:./FreeRtos/src/queue.c **** 					}
1494:./FreeRtos/src/queue.c **** 					else
1495:./FreeRtos/src/queue.c **** 					{
1496:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1497:./FreeRtos/src/queue.c **** 					}
1498:./FreeRtos/src/queue.c **** 				}
1499:./FreeRtos/src/queue.c **** 				else
1500:./FreeRtos/src/queue.c **** 				{
1501:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1502:./FreeRtos/src/queue.c **** 				}
1503:./FreeRtos/src/queue.c **** 			}
1504:./FreeRtos/src/queue.c **** 			else
1505:./FreeRtos/src/queue.c **** 			{
1506:./FreeRtos/src/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1507:./FreeRtos/src/queue.c **** 				knows that data was removed while it was locked. */
1508:./FreeRtos/src/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1509:./FreeRtos/src/queue.c **** 			}
1510:./FreeRtos/src/queue.c **** 
1511:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
1512:./FreeRtos/src/queue.c **** 		}
ARM GAS  /tmp/ccpGFB92.s 			page 28


1513:./FreeRtos/src/queue.c **** 		else
1514:./FreeRtos/src/queue.c **** 		{
1515:./FreeRtos/src/queue.c **** 			xReturn = pdFAIL;
1516:./FreeRtos/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1517:./FreeRtos/src/queue.c **** 		}
1518:./FreeRtos/src/queue.c **** 	}
1519:./FreeRtos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1520:./FreeRtos/src/queue.c **** 
1521:./FreeRtos/src/queue.c **** 	return xReturn;
1522:./FreeRtos/src/queue.c **** }
1523:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1524:./FreeRtos/src/queue.c **** 
1525:./FreeRtos/src/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1526:./FreeRtos/src/queue.c **** {
1527:./FreeRtos/src/queue.c **** BaseType_t xReturn;
1528:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
1529:./FreeRtos/src/queue.c **** int8_t *pcOriginalReadPosition;
1530:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1531:./FreeRtos/src/queue.c **** 
1532:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
1533:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1534:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1535:./FreeRtos/src/queue.c **** 
1536:./FreeRtos/src/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1537:./FreeRtos/src/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1538:./FreeRtos/src/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1539:./FreeRtos/src/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1540:./FreeRtos/src/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1541:./FreeRtos/src/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1542:./FreeRtos/src/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1543:./FreeRtos/src/queue.c **** 	assigned a priority above the configured maximum system call priority.
1544:./FreeRtos/src/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1545:./FreeRtos/src/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1546:./FreeRtos/src/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1547:./FreeRtos/src/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1548:./FreeRtos/src/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1549:./FreeRtos/src/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1550:./FreeRtos/src/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1551:./FreeRtos/src/queue.c **** 
1552:./FreeRtos/src/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1553:./FreeRtos/src/queue.c **** 	{
1554:./FreeRtos/src/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1555:./FreeRtos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1556:./FreeRtos/src/queue.c **** 		{
1557:./FreeRtos/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1558:./FreeRtos/src/queue.c **** 
1559:./FreeRtos/src/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1560:./FreeRtos/src/queue.c **** 			actually being removed from the queue. */
1561:./FreeRtos/src/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1562:./FreeRtos/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1563:./FreeRtos/src/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1564:./FreeRtos/src/queue.c **** 
1565:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
1566:./FreeRtos/src/queue.c **** 		}
1567:./FreeRtos/src/queue.c **** 		else
1568:./FreeRtos/src/queue.c **** 		{
1569:./FreeRtos/src/queue.c **** 			xReturn = pdFAIL;
ARM GAS  /tmp/ccpGFB92.s 			page 29


1570:./FreeRtos/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1571:./FreeRtos/src/queue.c **** 		}
1572:./FreeRtos/src/queue.c **** 	}
1573:./FreeRtos/src/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1574:./FreeRtos/src/queue.c **** 
1575:./FreeRtos/src/queue.c **** 	return xReturn;
1576:./FreeRtos/src/queue.c **** }
1577:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1578:./FreeRtos/src/queue.c **** 
1579:./FreeRtos/src/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1580:./FreeRtos/src/queue.c **** {
1581:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
1582:./FreeRtos/src/queue.c **** 
1583:./FreeRtos/src/queue.c **** 	configASSERT( xQueue );
1584:./FreeRtos/src/queue.c **** 
1585:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
1586:./FreeRtos/src/queue.c **** 	{
1587:./FreeRtos/src/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1588:./FreeRtos/src/queue.c **** 	}
1589:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
1590:./FreeRtos/src/queue.c **** 
1591:./FreeRtos/src/queue.c **** 	return uxReturn;
1592:./FreeRtos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1593:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1594:./FreeRtos/src/queue.c **** 
1595:./FreeRtos/src/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1596:./FreeRtos/src/queue.c **** {
1597:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
1598:./FreeRtos/src/queue.c **** Queue_t *pxQueue;
1599:./FreeRtos/src/queue.c **** 
1600:./FreeRtos/src/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1601:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
1602:./FreeRtos/src/queue.c **** 
1603:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
1604:./FreeRtos/src/queue.c **** 	{
1605:./FreeRtos/src/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1606:./FreeRtos/src/queue.c **** 	}
1607:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
1608:./FreeRtos/src/queue.c **** 
1609:./FreeRtos/src/queue.c **** 	return uxReturn;
1610:./FreeRtos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1611:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1612:./FreeRtos/src/queue.c **** 
1613:./FreeRtos/src/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1614:./FreeRtos/src/queue.c **** {
1615:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
1616:./FreeRtos/src/queue.c **** 
1617:./FreeRtos/src/queue.c **** 	configASSERT( xQueue );
1618:./FreeRtos/src/queue.c **** 
1619:./FreeRtos/src/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1620:./FreeRtos/src/queue.c **** 
1621:./FreeRtos/src/queue.c **** 	return uxReturn;
1622:./FreeRtos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1623:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1624:./FreeRtos/src/queue.c **** 
1625:./FreeRtos/src/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1626:./FreeRtos/src/queue.c **** {
ARM GAS  /tmp/ccpGFB92.s 			page 30


1627:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1628:./FreeRtos/src/queue.c **** 
1629:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
1630:./FreeRtos/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1631:./FreeRtos/src/queue.c **** 
1632:./FreeRtos/src/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1633:./FreeRtos/src/queue.c **** 	{
1634:./FreeRtos/src/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1635:./FreeRtos/src/queue.c **** 	}
1636:./FreeRtos/src/queue.c **** 	#endif
1637:./FreeRtos/src/queue.c **** 
1638:./FreeRtos/src/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1639:./FreeRtos/src/queue.c **** 	{
1640:./FreeRtos/src/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1641:./FreeRtos/src/queue.c **** 		again. */
1642:./FreeRtos/src/queue.c **** 		vPortFree( pxQueue );
1643:./FreeRtos/src/queue.c **** 	}
1644:./FreeRtos/src/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1645:./FreeRtos/src/queue.c **** 	{
1646:./FreeRtos/src/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1647:./FreeRtos/src/queue.c **** 		check before attempting to free the memory. */
1648:./FreeRtos/src/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1649:./FreeRtos/src/queue.c **** 		{
1650:./FreeRtos/src/queue.c **** 			vPortFree( pxQueue );
1651:./FreeRtos/src/queue.c **** 		}
1652:./FreeRtos/src/queue.c **** 		else
1653:./FreeRtos/src/queue.c **** 		{
1654:./FreeRtos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1655:./FreeRtos/src/queue.c **** 		}
1656:./FreeRtos/src/queue.c **** 	}
1657:./FreeRtos/src/queue.c **** 	#else
1658:./FreeRtos/src/queue.c **** 	{
1659:./FreeRtos/src/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1660:./FreeRtos/src/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1661:./FreeRtos/src/queue.c **** 		( void ) pxQueue;
1662:./FreeRtos/src/queue.c **** 	}
1663:./FreeRtos/src/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1664:./FreeRtos/src/queue.c **** }
1665:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1666:./FreeRtos/src/queue.c **** 
1667:./FreeRtos/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1668:./FreeRtos/src/queue.c **** 
1669:./FreeRtos/src/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1670:./FreeRtos/src/queue.c **** 	{
1671:./FreeRtos/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1672:./FreeRtos/src/queue.c **** 	}
1673:./FreeRtos/src/queue.c **** 
1674:./FreeRtos/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1675:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1676:./FreeRtos/src/queue.c **** 
1677:./FreeRtos/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1678:./FreeRtos/src/queue.c **** 
1679:./FreeRtos/src/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1680:./FreeRtos/src/queue.c **** 	{
1681:./FreeRtos/src/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1682:./FreeRtos/src/queue.c **** 	}
1683:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 31


1684:./FreeRtos/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1685:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1686:./FreeRtos/src/queue.c **** 
1687:./FreeRtos/src/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1688:./FreeRtos/src/queue.c **** 
1689:./FreeRtos/src/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
1690:./FreeRtos/src/queue.c **** 	{
1691:./FreeRtos/src/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
1692:./FreeRtos/src/queue.c **** 	}
1693:./FreeRtos/src/queue.c **** 
1694:./FreeRtos/src/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1695:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1696:./FreeRtos/src/queue.c **** 
1697:./FreeRtos/src/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
1698:./FreeRtos/src/queue.c **** {
1699:./FreeRtos/src/queue.c **** BaseType_t xReturn = pdFALSE;
1700:./FreeRtos/src/queue.c **** UBaseType_t uxMessagesWaiting;
1701:./FreeRtos/src/queue.c **** 
1702:./FreeRtos/src/queue.c **** 	/* This function is called from a critical section. */
1703:./FreeRtos/src/queue.c **** 
1704:./FreeRtos/src/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1705:./FreeRtos/src/queue.c **** 
1706:./FreeRtos/src/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1707:./FreeRtos/src/queue.c **** 	{
1708:./FreeRtos/src/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
1709:./FreeRtos/src/queue.c **** 		{
1710:./FreeRtos/src/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1711:./FreeRtos/src/queue.c **** 			{
1712:./FreeRtos/src/queue.c **** 				/* The mutex is no longer being held. */
1713:./FreeRtos/src/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1714:./FreeRtos/src/queue.c **** 				pxQueue->pxMutexHolder = NULL;
1715:./FreeRtos/src/queue.c **** 			}
1716:./FreeRtos/src/queue.c **** 			else
1717:./FreeRtos/src/queue.c **** 			{
1718:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1719:./FreeRtos/src/queue.c **** 			}
1720:./FreeRtos/src/queue.c **** 		}
1721:./FreeRtos/src/queue.c **** 		#endif /* configUSE_MUTEXES */
1722:./FreeRtos/src/queue.c **** 	}
1723:./FreeRtos/src/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
1724:./FreeRtos/src/queue.c **** 	{
1725:./FreeRtos/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
1726:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1727:./FreeRtos/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
1728:./FreeRtos/src/queue.c **** 		{
1729:./FreeRtos/src/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
1730:./FreeRtos/src/queue.c **** 		}
1731:./FreeRtos/src/queue.c **** 		else
1732:./FreeRtos/src/queue.c **** 		{
1733:./FreeRtos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1734:./FreeRtos/src/queue.c **** 		}
1735:./FreeRtos/src/queue.c **** 	}
1736:./FreeRtos/src/queue.c **** 	else
1737:./FreeRtos/src/queue.c **** 	{
1738:./FreeRtos/src/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
1739:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1740:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
ARM GAS  /tmp/ccpGFB92.s 			page 32


1741:./FreeRtos/src/queue.c **** 		{
1742:./FreeRtos/src/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1743:./FreeRtos/src/queue.c **** 		}
1744:./FreeRtos/src/queue.c **** 		else
1745:./FreeRtos/src/queue.c **** 		{
1746:./FreeRtos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1747:./FreeRtos/src/queue.c **** 		}
1748:./FreeRtos/src/queue.c **** 
1749:./FreeRtos/src/queue.c **** 		if( xPosition == queueOVERWRITE )
1750:./FreeRtos/src/queue.c **** 		{
1751:./FreeRtos/src/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1752:./FreeRtos/src/queue.c **** 			{
1753:./FreeRtos/src/queue.c **** 				/* An item is not being added but overwritten, so subtract
1754:./FreeRtos/src/queue.c **** 				one from the recorded number of items in the queue so when
1755:./FreeRtos/src/queue.c **** 				one is added again below the number of recorded items remains
1756:./FreeRtos/src/queue.c **** 				correct. */
1757:./FreeRtos/src/queue.c **** 				--uxMessagesWaiting;
1758:./FreeRtos/src/queue.c **** 			}
1759:./FreeRtos/src/queue.c **** 			else
1760:./FreeRtos/src/queue.c **** 			{
1761:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1762:./FreeRtos/src/queue.c **** 			}
1763:./FreeRtos/src/queue.c **** 		}
1764:./FreeRtos/src/queue.c **** 		else
1765:./FreeRtos/src/queue.c **** 		{
1766:./FreeRtos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1767:./FreeRtos/src/queue.c **** 		}
1768:./FreeRtos/src/queue.c **** 	}
1769:./FreeRtos/src/queue.c **** 
1770:./FreeRtos/src/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
1771:./FreeRtos/src/queue.c **** 
1772:./FreeRtos/src/queue.c **** 	return xReturn;
1773:./FreeRtos/src/queue.c **** }
1774:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1775:./FreeRtos/src/queue.c **** 
1776:./FreeRtos/src/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
1777:./FreeRtos/src/queue.c **** {
1778:./FreeRtos/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1779:./FreeRtos/src/queue.c **** 	{
1780:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1781:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
1782:./FreeRtos/src/queue.c **** 		{
1783:./FreeRtos/src/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1784:./FreeRtos/src/queue.c **** 		}
1785:./FreeRtos/src/queue.c **** 		else
1786:./FreeRtos/src/queue.c **** 		{
1787:./FreeRtos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1788:./FreeRtos/src/queue.c **** 		}
1789:./FreeRtos/src/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
1790:./FreeRtos/src/queue.c **** 	}
1791:./FreeRtos/src/queue.c **** }
1792:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1793:./FreeRtos/src/queue.c **** 
1794:./FreeRtos/src/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
1795:./FreeRtos/src/queue.c **** {
1796:./FreeRtos/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
1797:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 33


1798:./FreeRtos/src/queue.c **** 	/* The lock counts contains the number of extra data items placed or
1799:./FreeRtos/src/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
1800:./FreeRtos/src/queue.c **** 	locked items can be added or removed, but the event lists cannot be
1801:./FreeRtos/src/queue.c **** 	updated. */
1802:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
1803:./FreeRtos/src/queue.c **** 	{
1804:./FreeRtos/src/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
1805:./FreeRtos/src/queue.c **** 
1806:./FreeRtos/src/queue.c **** 		/* See if data was added to the queue while it was locked. */
1807:./FreeRtos/src/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
1808:./FreeRtos/src/queue.c **** 		{
1809:./FreeRtos/src/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
1810:./FreeRtos/src/queue.c **** 			blocked waiting for data to become available? */
1811:./FreeRtos/src/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
1812:./FreeRtos/src/queue.c **** 			{
1813:./FreeRtos/src/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
1814:./FreeRtos/src/queue.c **** 				{
1815:./FreeRtos/src/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1816:./FreeRtos/src/queue.c **** 					{
1817:./FreeRtos/src/queue.c **** 						/* The queue is a member of a queue set, and posting to
1818:./FreeRtos/src/queue.c **** 						the queue set caused a higher priority task to unblock.
1819:./FreeRtos/src/queue.c **** 						A context switch is required. */
1820:./FreeRtos/src/queue.c **** 						vTaskMissedYield();
1821:./FreeRtos/src/queue.c **** 					}
1822:./FreeRtos/src/queue.c **** 					else
1823:./FreeRtos/src/queue.c **** 					{
1824:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1825:./FreeRtos/src/queue.c **** 					}
1826:./FreeRtos/src/queue.c **** 				}
1827:./FreeRtos/src/queue.c **** 				else
1828:./FreeRtos/src/queue.c **** 				{
1829:./FreeRtos/src/queue.c **** 					/* Tasks that are removed from the event list will get
1830:./FreeRtos/src/queue.c **** 					added to the pending ready list as the scheduler is still
1831:./FreeRtos/src/queue.c **** 					suspended. */
1832:./FreeRtos/src/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1833:./FreeRtos/src/queue.c **** 					{
1834:./FreeRtos/src/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1835:./FreeRtos/src/queue.c **** 						{
1836:./FreeRtos/src/queue.c **** 							/* The task waiting has a higher priority so record that a
1837:./FreeRtos/src/queue.c **** 							context	switch is required. */
1838:./FreeRtos/src/queue.c **** 							vTaskMissedYield();
1839:./FreeRtos/src/queue.c **** 						}
1840:./FreeRtos/src/queue.c **** 						else
1841:./FreeRtos/src/queue.c **** 						{
1842:./FreeRtos/src/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1843:./FreeRtos/src/queue.c **** 						}
1844:./FreeRtos/src/queue.c **** 					}
1845:./FreeRtos/src/queue.c **** 					else
1846:./FreeRtos/src/queue.c **** 					{
1847:./FreeRtos/src/queue.c **** 						break;
1848:./FreeRtos/src/queue.c **** 					}
1849:./FreeRtos/src/queue.c **** 				}
1850:./FreeRtos/src/queue.c **** 			}
1851:./FreeRtos/src/queue.c **** 			#else /* configUSE_QUEUE_SETS */
1852:./FreeRtos/src/queue.c **** 			{
1853:./FreeRtos/src/queue.c **** 				/* Tasks that are removed from the event list will get added to
1854:./FreeRtos/src/queue.c **** 				the pending ready list as the scheduler is still suspended. */
ARM GAS  /tmp/ccpGFB92.s 			page 34


1855:./FreeRtos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1856:./FreeRtos/src/queue.c **** 				{
1857:./FreeRtos/src/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1858:./FreeRtos/src/queue.c **** 					{
1859:./FreeRtos/src/queue.c **** 						/* The task waiting has a higher priority so record that
1860:./FreeRtos/src/queue.c **** 						a context switch is required. */
1861:./FreeRtos/src/queue.c **** 						vTaskMissedYield();
1862:./FreeRtos/src/queue.c **** 					}
1863:./FreeRtos/src/queue.c **** 					else
1864:./FreeRtos/src/queue.c **** 					{
1865:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1866:./FreeRtos/src/queue.c **** 					}
1867:./FreeRtos/src/queue.c **** 				}
1868:./FreeRtos/src/queue.c **** 				else
1869:./FreeRtos/src/queue.c **** 				{
1870:./FreeRtos/src/queue.c **** 					break;
1871:./FreeRtos/src/queue.c **** 				}
1872:./FreeRtos/src/queue.c **** 			}
1873:./FreeRtos/src/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
1874:./FreeRtos/src/queue.c **** 
1875:./FreeRtos/src/queue.c **** 			--cTxLock;
1876:./FreeRtos/src/queue.c **** 		}
1877:./FreeRtos/src/queue.c **** 
1878:./FreeRtos/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
1879:./FreeRtos/src/queue.c **** 	}
1880:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
1881:./FreeRtos/src/queue.c **** 
1882:./FreeRtos/src/queue.c **** 	/* Do the same for the Rx lock. */
1883:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
1884:./FreeRtos/src/queue.c **** 	{
1885:./FreeRtos/src/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
1886:./FreeRtos/src/queue.c **** 
1887:./FreeRtos/src/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
1888:./FreeRtos/src/queue.c **** 		{
1889:./FreeRtos/src/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1890:./FreeRtos/src/queue.c **** 			{
1891:./FreeRtos/src/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1892:./FreeRtos/src/queue.c **** 				{
1893:./FreeRtos/src/queue.c **** 					vTaskMissedYield();
1894:./FreeRtos/src/queue.c **** 				}
1895:./FreeRtos/src/queue.c **** 				else
1896:./FreeRtos/src/queue.c **** 				{
1897:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1898:./FreeRtos/src/queue.c **** 				}
1899:./FreeRtos/src/queue.c **** 
1900:./FreeRtos/src/queue.c **** 				--cRxLock;
1901:./FreeRtos/src/queue.c **** 			}
1902:./FreeRtos/src/queue.c **** 			else
1903:./FreeRtos/src/queue.c **** 			{
1904:./FreeRtos/src/queue.c **** 				break;
1905:./FreeRtos/src/queue.c **** 			}
1906:./FreeRtos/src/queue.c **** 		}
1907:./FreeRtos/src/queue.c **** 
1908:./FreeRtos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
1909:./FreeRtos/src/queue.c **** 	}
1910:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
1911:./FreeRtos/src/queue.c **** }
ARM GAS  /tmp/ccpGFB92.s 			page 35


1912:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1913:./FreeRtos/src/queue.c **** 
1914:./FreeRtos/src/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
1915:./FreeRtos/src/queue.c **** {
1916:./FreeRtos/src/queue.c **** BaseType_t xReturn;
1917:./FreeRtos/src/queue.c **** 
1918:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
1919:./FreeRtos/src/queue.c **** 	{
1920:./FreeRtos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1921:./FreeRtos/src/queue.c **** 		{
1922:./FreeRtos/src/queue.c **** 			xReturn = pdTRUE;
1923:./FreeRtos/src/queue.c **** 		}
1924:./FreeRtos/src/queue.c **** 		else
1925:./FreeRtos/src/queue.c **** 		{
1926:./FreeRtos/src/queue.c **** 			xReturn = pdFALSE;
1927:./FreeRtos/src/queue.c **** 		}
1928:./FreeRtos/src/queue.c **** 	}
1929:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
1930:./FreeRtos/src/queue.c **** 
1931:./FreeRtos/src/queue.c **** 	return xReturn;
1932:./FreeRtos/src/queue.c **** }
1933:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1934:./FreeRtos/src/queue.c **** 
1935:./FreeRtos/src/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
1936:./FreeRtos/src/queue.c **** {
1937:./FreeRtos/src/queue.c **** BaseType_t xReturn;
1938:./FreeRtos/src/queue.c **** 
1939:./FreeRtos/src/queue.c **** 	configASSERT( xQueue );
1940:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
1941:./FreeRtos/src/queue.c **** 	{
1942:./FreeRtos/src/queue.c **** 		xReturn = pdTRUE;
1943:./FreeRtos/src/queue.c **** 	}
1944:./FreeRtos/src/queue.c **** 	else
1945:./FreeRtos/src/queue.c **** 	{
1946:./FreeRtos/src/queue.c **** 		xReturn = pdFALSE;
1947:./FreeRtos/src/queue.c **** 	}
1948:./FreeRtos/src/queue.c **** 
1949:./FreeRtos/src/queue.c **** 	return xReturn;
1950:./FreeRtos/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
1951:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1952:./FreeRtos/src/queue.c **** 
1953:./FreeRtos/src/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
1954:./FreeRtos/src/queue.c **** {
  29              		.loc 1 1954 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		.loc 1 1954 1 is_stmt 0 view .LVU1
  34 0000 10B5     		push	{r4, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 4, -8
  38              		.cfi_offset 14, -4
  39 0002 0446     		mov	r4, r0
1955:./FreeRtos/src/queue.c **** BaseType_t xReturn;
  40              		.loc 1 1955 1 is_stmt 1 view .LVU2
1956:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 36


1957:./FreeRtos/src/queue.c **** 	taskENTER_CRITICAL();
  41              		.loc 1 1957 2 view .LVU3
  42 0004 FFF7FEFF 		bl	vPortEnterCritical
  43              	.LVL1:
1958:./FreeRtos/src/queue.c **** 	{
1959:./FreeRtos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  44              		.loc 1 1959 3 view .LVU4
  45              		.loc 1 1959 14 is_stmt 0 view .LVU5
  46 0008 A26B     		ldr	r2, [r4, #56]
  47              		.loc 1 1959 44 view .LVU6
  48 000a E36B     		ldr	r3, [r4, #60]
  49              		.loc 1 1959 5 view .LVU7
  50 000c 9A42     		cmp	r2, r3
  51 000e 04D0     		beq	.L5
1960:./FreeRtos/src/queue.c **** 		{
1961:./FreeRtos/src/queue.c **** 			xReturn = pdTRUE;
1962:./FreeRtos/src/queue.c **** 		}
1963:./FreeRtos/src/queue.c **** 		else
1964:./FreeRtos/src/queue.c **** 		{
1965:./FreeRtos/src/queue.c **** 			xReturn = pdFALSE;
  52              		.loc 1 1965 12 view .LVU8
  53 0010 0024     		movs	r4, #0
  54              	.LVL2:
  55              	.L2:
1966:./FreeRtos/src/queue.c **** 		}
1967:./FreeRtos/src/queue.c **** 	}
1968:./FreeRtos/src/queue.c **** 	taskEXIT_CRITICAL();
  56              		.loc 1 1968 2 is_stmt 1 view .LVU9
  57 0012 FFF7FEFF 		bl	vPortExitCritical
  58              	.LVL3:
1969:./FreeRtos/src/queue.c **** 
1970:./FreeRtos/src/queue.c **** 	return xReturn;
  59              		.loc 1 1970 2 view .LVU10
1971:./FreeRtos/src/queue.c **** }
  60              		.loc 1 1971 1 is_stmt 0 view .LVU11
  61 0016 2046     		mov	r0, r4
  62 0018 10BD     		pop	{r4, pc}
  63              	.LVL4:
  64              	.L5:
1961:./FreeRtos/src/queue.c **** 		}
  65              		.loc 1 1961 12 view .LVU12
  66 001a 0124     		movs	r4, #1
  67              	.LVL5:
1961:./FreeRtos/src/queue.c **** 		}
  68              		.loc 1 1961 12 view .LVU13
  69 001c F9E7     		b	.L2
  70              		.cfi_endproc
  71              	.LFE149:
  73              		.section	.text.prvIsQueueEmpty,"ax",%progbits
  74              		.align	1
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu fpv4-sp-d16
  80              	prvIsQueueEmpty:
  81              	.LVL6:
  82              	.LFB147:
ARM GAS  /tmp/ccpGFB92.s 			page 37


1915:./FreeRtos/src/queue.c **** BaseType_t xReturn;
  83              		.loc 1 1915 1 is_stmt 1 view -0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
1915:./FreeRtos/src/queue.c **** BaseType_t xReturn;
  87              		.loc 1 1915 1 is_stmt 0 view .LVU15
  88 0000 10B5     		push	{r4, lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 4, -8
  92              		.cfi_offset 14, -4
  93 0002 0446     		mov	r4, r0
1916:./FreeRtos/src/queue.c **** 
  94              		.loc 1 1916 1 is_stmt 1 view .LVU16
1918:./FreeRtos/src/queue.c **** 	{
  95              		.loc 1 1918 2 view .LVU17
  96 0004 FFF7FEFF 		bl	vPortEnterCritical
  97              	.LVL7:
1920:./FreeRtos/src/queue.c **** 		{
  98              		.loc 1 1920 3 view .LVU18
1920:./FreeRtos/src/queue.c **** 		{
  99              		.loc 1 1920 14 is_stmt 0 view .LVU19
 100 0008 A36B     		ldr	r3, [r4, #56]
1920:./FreeRtos/src/queue.c **** 		{
 101              		.loc 1 1920 5 view .LVU20
 102 000a 23B9     		cbnz	r3, .L8
1922:./FreeRtos/src/queue.c **** 		}
 103              		.loc 1 1922 12 view .LVU21
 104 000c 0124     		movs	r4, #1
 105              	.LVL8:
 106              	.L7:
1929:./FreeRtos/src/queue.c **** 
 107              		.loc 1 1929 2 is_stmt 1 view .LVU22
 108 000e FFF7FEFF 		bl	vPortExitCritical
 109              	.LVL9:
1931:./FreeRtos/src/queue.c **** }
 110              		.loc 1 1931 2 view .LVU23
1932:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 111              		.loc 1 1932 1 is_stmt 0 view .LVU24
 112 0012 2046     		mov	r0, r4
 113 0014 10BD     		pop	{r4, pc}
 114              	.LVL10:
 115              	.L8:
1926:./FreeRtos/src/queue.c **** 		}
 116              		.loc 1 1926 12 view .LVU25
 117 0016 0024     		movs	r4, #0
 118              	.LVL11:
1926:./FreeRtos/src/queue.c **** 		}
 119              		.loc 1 1926 12 view .LVU26
 120 0018 F9E7     		b	.L7
 121              		.cfi_endproc
 122              	.LFE147:
 124              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 125              		.align	1
 126              		.syntax unified
 127              		.thumb
ARM GAS  /tmp/ccpGFB92.s 			page 38


 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	prvCopyDataToQueue:
 132              	.LVL12:
 133              	.LFB144:
1698:./FreeRtos/src/queue.c **** BaseType_t xReturn = pdFALSE;
 134              		.loc 1 1698 1 is_stmt 1 view -0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
1698:./FreeRtos/src/queue.c **** BaseType_t xReturn = pdFALSE;
 138              		.loc 1 1698 1 is_stmt 0 view .LVU28
 139 0000 70B5     		push	{r4, r5, r6, lr}
 140              	.LCFI2:
 141              		.cfi_def_cfa_offset 16
 142              		.cfi_offset 4, -16
 143              		.cfi_offset 5, -12
 144              		.cfi_offset 6, -8
 145              		.cfi_offset 14, -4
 146 0002 0446     		mov	r4, r0
 147 0004 1646     		mov	r6, r2
1699:./FreeRtos/src/queue.c **** UBaseType_t uxMessagesWaiting;
 148              		.loc 1 1699 1 is_stmt 1 view .LVU29
 149              	.LVL13:
1700:./FreeRtos/src/queue.c **** 
 150              		.loc 1 1700 1 view .LVU30
1704:./FreeRtos/src/queue.c **** 
 151              		.loc 1 1704 2 view .LVU31
1704:./FreeRtos/src/queue.c **** 
 152              		.loc 1 1704 20 is_stmt 0 view .LVU32
 153 0006 856B     		ldr	r5, [r0, #56]
 154              	.LVL14:
1706:./FreeRtos/src/queue.c **** 	{
 155              		.loc 1 1706 2 is_stmt 1 view .LVU33
1706:./FreeRtos/src/queue.c **** 	{
 156              		.loc 1 1706 13 is_stmt 0 view .LVU34
 157 0008 026C     		ldr	r2, [r0, #64]
 158              	.LVL15:
1706:./FreeRtos/src/queue.c **** 	{
 159              		.loc 1 1706 4 view .LVU35
 160 000a EAB1     		cbz	r2, .L11
1723:./FreeRtos/src/queue.c **** 	{
 161              		.loc 1 1723 7 is_stmt 1 view .LVU36
1723:./FreeRtos/src/queue.c **** 	{
 162              		.loc 1 1723 9 is_stmt 0 view .LVU37
 163 000c 66B9     		cbnz	r6, .L12
1725:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 164              		.loc 1 1725 3 is_stmt 1 view .LVU38
1725:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 165              		.loc 1 1725 12 is_stmt 0 view .LVU39
 166 000e 8068     		ldr	r0, [r0, #8]
 167              	.LVL16:
1725:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 168              		.loc 1 1725 12 view .LVU40
 169 0010 FFF7FEFF 		bl	memcpy
 170              	.LVL17:
1726:./FreeRtos/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
ARM GAS  /tmp/ccpGFB92.s 			page 39


 171              		.loc 1 1726 3 is_stmt 1 view .LVU41
1726:./FreeRtos/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 172              		.loc 1 1726 32 is_stmt 0 view .LVU42
 173 0014 226C     		ldr	r2, [r4, #64]
1726:./FreeRtos/src/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 174              		.loc 1 1726 22 view .LVU43
 175 0016 A368     		ldr	r3, [r4, #8]
 176 0018 1344     		add	r3, r3, r2
 177 001a A360     		str	r3, [r4, #8]
1727:./FreeRtos/src/queue.c **** 		{
 178              		.loc 1 1727 3 is_stmt 1 view .LVU44
1727:./FreeRtos/src/queue.c **** 		{
 179              		.loc 1 1727 36 is_stmt 0 view .LVU45
 180 001c 6268     		ldr	r2, [r4, #4]
1727:./FreeRtos/src/queue.c **** 		{
 181              		.loc 1 1727 5 view .LVU46
 182 001e 9342     		cmp	r3, r2
 183 0020 12D3     		bcc	.L11
1729:./FreeRtos/src/queue.c **** 		}
 184              		.loc 1 1729 4 is_stmt 1 view .LVU47
1729:./FreeRtos/src/queue.c **** 		}
 185              		.loc 1 1729 32 is_stmt 0 view .LVU48
 186 0022 2368     		ldr	r3, [r4]
1729:./FreeRtos/src/queue.c **** 		}
 187              		.loc 1 1729 23 view .LVU49
 188 0024 A360     		str	r3, [r4, #8]
 189 0026 0FE0     		b	.L11
 190              	.LVL18:
 191              	.L12:
1738:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 192              		.loc 1 1738 3 is_stmt 1 view .LVU50
1738:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 193              		.loc 1 1738 12 is_stmt 0 view .LVU51
 194 0028 C068     		ldr	r0, [r0, #12]
 195              	.LVL19:
1738:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 196              		.loc 1 1738 12 view .LVU52
 197 002a FFF7FEFF 		bl	memcpy
 198              	.LVL20:
1739:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 199              		.loc 1 1739 3 is_stmt 1 view .LVU53
1739:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 200              		.loc 1 1739 35 is_stmt 0 view .LVU54
 201 002e 226C     		ldr	r2, [r4, #64]
1739:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 202              		.loc 1 1739 25 view .LVU55
 203 0030 5142     		rsbs	r1, r2, #0
 204 0032 E368     		ldr	r3, [r4, #12]
 205 0034 9B1A     		subs	r3, r3, r2
 206 0036 E360     		str	r3, [r4, #12]
1740:./FreeRtos/src/queue.c **** 		{
 207              		.loc 1 1740 3 is_stmt 1 view .LVU56
1740:./FreeRtos/src/queue.c **** 		{
 208              		.loc 1 1740 38 is_stmt 0 view .LVU57
 209 0038 2268     		ldr	r2, [r4]
1740:./FreeRtos/src/queue.c **** 		{
 210              		.loc 1 1740 5 view .LVU58
ARM GAS  /tmp/ccpGFB92.s 			page 40


 211 003a 9342     		cmp	r3, r2
 212 003c 02D2     		bcs	.L13
1742:./FreeRtos/src/queue.c **** 		}
 213              		.loc 1 1742 4 is_stmt 1 view .LVU59
1742:./FreeRtos/src/queue.c **** 		}
 214              		.loc 1 1742 37 is_stmt 0 view .LVU60
 215 003e 6368     		ldr	r3, [r4, #4]
1742:./FreeRtos/src/queue.c **** 		}
 216              		.loc 1 1742 46 view .LVU61
 217 0040 0B44     		add	r3, r3, r1
1742:./FreeRtos/src/queue.c **** 		}
 218              		.loc 1 1742 26 view .LVU62
 219 0042 E360     		str	r3, [r4, #12]
 220              	.L13:
1746:./FreeRtos/src/queue.c **** 		}
 221              		.loc 1 1746 28 is_stmt 1 view .LVU63
1749:./FreeRtos/src/queue.c **** 		{
 222              		.loc 1 1749 3 view .LVU64
1749:./FreeRtos/src/queue.c **** 		{
 223              		.loc 1 1749 5 is_stmt 0 view .LVU65
 224 0044 022E     		cmp	r6, #2
 225 0046 03D0     		beq	.L15
 226              	.L11:
1766:./FreeRtos/src/queue.c **** 		}
 227              		.loc 1 1766 28 is_stmt 1 view .LVU66
1770:./FreeRtos/src/queue.c **** 
 228              		.loc 1 1770 2 view .LVU67
1770:./FreeRtos/src/queue.c **** 
 229              		.loc 1 1770 49 is_stmt 0 view .LVU68
 230 0048 0135     		adds	r5, r5, #1
 231              	.LVL21:
1770:./FreeRtos/src/queue.c **** 
 232              		.loc 1 1770 29 view .LVU69
 233 004a A563     		str	r5, [r4, #56]
1772:./FreeRtos/src/queue.c **** }
 234              		.loc 1 1772 2 is_stmt 1 view .LVU70
1773:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 235              		.loc 1 1773 1 is_stmt 0 view .LVU71
 236 004c 0020     		movs	r0, #0
 237 004e 70BD     		pop	{r4, r5, r6, pc}
 238              	.LVL22:
 239              	.L15:
1751:./FreeRtos/src/queue.c **** 			{
 240              		.loc 1 1751 4 is_stmt 1 view .LVU72
1751:./FreeRtos/src/queue.c **** 			{
 241              		.loc 1 1751 6 is_stmt 0 view .LVU73
 242 0050 002D     		cmp	r5, #0
 243 0052 F9D0     		beq	.L11
1757:./FreeRtos/src/queue.c **** 			}
 244              		.loc 1 1757 5 is_stmt 1 view .LVU74
 245 0054 013D     		subs	r5, r5, #1
 246              	.LVL23:
1757:./FreeRtos/src/queue.c **** 			}
 247              		.loc 1 1757 5 is_stmt 0 view .LVU75
 248 0056 F7E7     		b	.L11
 249              		.cfi_endproc
 250              	.LFE144:
ARM GAS  /tmp/ccpGFB92.s 			page 41


 252              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	prvCopyDataFromQueue:
 260              	.LVL24:
 261              	.LFB145:
1777:./FreeRtos/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 262              		.loc 1 1777 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
1777:./FreeRtos/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 266              		.loc 1 1777 1 is_stmt 0 view .LVU77
 267 0000 0346     		mov	r3, r0
1778:./FreeRtos/src/queue.c **** 	{
 268              		.loc 1 1778 2 is_stmt 1 view .LVU78
1778:./FreeRtos/src/queue.c **** 	{
 269              		.loc 1 1778 13 is_stmt 0 view .LVU79
 270 0002 026C     		ldr	r2, [r0, #64]
1778:./FreeRtos/src/queue.c **** 	{
 271              		.loc 1 1778 4 view .LVU80
 272 0004 6AB1     		cbz	r2, .L20
1777:./FreeRtos/src/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 273              		.loc 1 1777 1 view .LVU81
 274 0006 10B5     		push	{r4, lr}
 275              	.LCFI3:
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 4, -8
 278              		.cfi_offset 14, -4
 279 0008 0846     		mov	r0, r1
 280              	.LVL25:
1780:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 281              		.loc 1 1780 3 is_stmt 1 view .LVU82
1780:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 282              		.loc 1 1780 25 is_stmt 0 view .LVU83
 283 000a D968     		ldr	r1, [r3, #12]
 284              	.LVL26:
1780:./FreeRtos/src/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 285              		.loc 1 1780 25 view .LVU84
 286 000c 1144     		add	r1, r1, r2
 287 000e D960     		str	r1, [r3, #12]
1781:./FreeRtos/src/queue.c **** 		{
 288              		.loc 1 1781 3 is_stmt 1 view .LVU85
1781:./FreeRtos/src/queue.c **** 		{
 289              		.loc 1 1781 5 is_stmt 0 view .LVU86
 290 0010 5C68     		ldr	r4, [r3, #4]
 291 0012 A142     		cmp	r1, r4
 292 0014 01D3     		bcc	.L18
1783:./FreeRtos/src/queue.c **** 		}
 293              		.loc 1 1783 4 is_stmt 1 view .LVU87
1783:./FreeRtos/src/queue.c **** 		}
 294              		.loc 1 1783 35 is_stmt 0 view .LVU88
 295 0016 1968     		ldr	r1, [r3]
1783:./FreeRtos/src/queue.c **** 		}
ARM GAS  /tmp/ccpGFB92.s 			page 42


 296              		.loc 1 1783 26 view .LVU89
 297 0018 D960     		str	r1, [r3, #12]
 298              	.L18:
1787:./FreeRtos/src/queue.c **** 		}
 299              		.loc 1 1787 28 is_stmt 1 view .LVU90
1789:./FreeRtos/src/queue.c **** 	}
 300              		.loc 1 1789 3 view .LVU91
1789:./FreeRtos/src/queue.c **** 	}
 301              		.loc 1 1789 12 is_stmt 0 view .LVU92
 302 001a D968     		ldr	r1, [r3, #12]
 303 001c FFF7FEFF 		bl	memcpy
 304              	.LVL27:
1791:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 305              		.loc 1 1791 1 view .LVU93
 306 0020 10BD     		pop	{r4, pc}
 307              	.LVL28:
 308              	.L20:
 309              	.LCFI4:
 310              		.cfi_def_cfa_offset 0
 311              		.cfi_restore 4
 312              		.cfi_restore 14
1791:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 1791 1 view .LVU94
 314 0022 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE145:
 318              		.section	.text.prvUnlockQueue,"ax",%progbits
 319              		.align	1
 320              		.syntax unified
 321              		.thumb
 322              		.thumb_func
 323              		.fpu fpv4-sp-d16
 325              	prvUnlockQueue:
 326              	.LVL29:
 327              	.LFB146:
1795:./FreeRtos/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 328              		.loc 1 1795 1 is_stmt 1 view -0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 0, uses_anonymous_args = 0
1795:./FreeRtos/src/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 332              		.loc 1 1795 1 is_stmt 0 view .LVU96
 333 0000 38B5     		push	{r3, r4, r5, lr}
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 16
 336              		.cfi_offset 3, -16
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 14, -4
 340 0002 0546     		mov	r5, r0
1802:./FreeRtos/src/queue.c **** 	{
 341              		.loc 1 1802 2 is_stmt 1 view .LVU97
 342 0004 FFF7FEFF 		bl	vPortEnterCritical
 343              	.LVL30:
 344              	.LBB23:
1804:./FreeRtos/src/queue.c **** 
 345              		.loc 1 1804 3 view .LVU98
ARM GAS  /tmp/ccpGFB92.s 			page 43


1804:./FreeRtos/src/queue.c **** 
 346              		.loc 1 1804 10 is_stmt 0 view .LVU99
 347 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 348 000c 64B2     		sxtb	r4, r4
 349              	.LVL31:
1807:./FreeRtos/src/queue.c **** 		{
 350              		.loc 1 1807 3 is_stmt 1 view .LVU100
1807:./FreeRtos/src/queue.c **** 		{
 351              		.loc 1 1807 8 is_stmt 0 view .LVU101
 352 000e 01E0     		b	.L24
 353              	.L26:
1865:./FreeRtos/src/queue.c **** 					}
 354              		.loc 1 1865 31 is_stmt 1 view .LVU102
1875:./FreeRtos/src/queue.c **** 		}
 355              		.loc 1 1875 4 view .LVU103
 356 0010 013C     		subs	r4, r4, #1
 357              	.LVL32:
1875:./FreeRtos/src/queue.c **** 		}
 358              		.loc 1 1875 4 is_stmt 0 view .LVU104
 359 0012 64B2     		sxtb	r4, r4
 360              	.LVL33:
 361              	.L24:
1807:./FreeRtos/src/queue.c **** 		{
 362              		.loc 1 1807 8 is_stmt 1 view .LVU105
 363 0014 002C     		cmp	r4, #0
 364 0016 0ADD     		ble	.L25
1855:./FreeRtos/src/queue.c **** 				{
 365              		.loc 1 1855 5 view .LVU106
1855:./FreeRtos/src/queue.c **** 				{
 366              		.loc 1 1855 9 is_stmt 0 view .LVU107
 367 0018 6B6A     		ldr	r3, [r5, #36]
1855:./FreeRtos/src/queue.c **** 				{
 368              		.loc 1 1855 7 view .LVU108
 369 001a 43B1     		cbz	r3, .L25
1857:./FreeRtos/src/queue.c **** 					{
 370              		.loc 1 1857 6 is_stmt 1 view .LVU109
1857:./FreeRtos/src/queue.c **** 					{
 371              		.loc 1 1857 10 is_stmt 0 view .LVU110
 372 001c 05F12400 		add	r0, r5, #36
 373 0020 FFF7FEFF 		bl	xTaskRemoveFromEventList
 374              	.LVL34:
1857:./FreeRtos/src/queue.c **** 					{
 375              		.loc 1 1857 8 view .LVU111
 376 0024 0028     		cmp	r0, #0
 377 0026 F3D0     		beq	.L26
1861:./FreeRtos/src/queue.c **** 					}
 378              		.loc 1 1861 7 is_stmt 1 view .LVU112
 379 0028 FFF7FEFF 		bl	vTaskMissedYield
 380              	.LVL35:
 381 002c F0E7     		b	.L26
 382              	.L25:
1878:./FreeRtos/src/queue.c **** 	}
 383              		.loc 1 1878 3 view .LVU113
1878:./FreeRtos/src/queue.c **** 	}
 384              		.loc 1 1878 20 is_stmt 0 view .LVU114
 385 002e FF23     		movs	r3, #255
 386 0030 85F84530 		strb	r3, [r5, #69]
ARM GAS  /tmp/ccpGFB92.s 			page 44


 387              	.LBE23:
1880:./FreeRtos/src/queue.c **** 
 388              		.loc 1 1880 2 is_stmt 1 view .LVU115
 389 0034 FFF7FEFF 		bl	vPortExitCritical
 390              	.LVL36:
1883:./FreeRtos/src/queue.c **** 	{
 391              		.loc 1 1883 2 view .LVU116
 392 0038 FFF7FEFF 		bl	vPortEnterCritical
 393              	.LVL37:
 394              	.LBB24:
1885:./FreeRtos/src/queue.c **** 
 395              		.loc 1 1885 3 view .LVU117
1885:./FreeRtos/src/queue.c **** 
 396              		.loc 1 1885 10 is_stmt 0 view .LVU118
 397 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 398              	.LVL38:
1885:./FreeRtos/src/queue.c **** 
 399              		.loc 1 1885 10 view .LVU119
 400 0040 64B2     		sxtb	r4, r4
 401              	.LVL39:
1887:./FreeRtos/src/queue.c **** 		{
 402              		.loc 1 1887 3 is_stmt 1 view .LVU120
1887:./FreeRtos/src/queue.c **** 		{
 403              		.loc 1 1887 8 is_stmt 0 view .LVU121
 404 0042 01E0     		b	.L28
 405              	.L30:
1897:./FreeRtos/src/queue.c **** 				}
 406              		.loc 1 1897 30 is_stmt 1 view .LVU122
1900:./FreeRtos/src/queue.c **** 			}
 407              		.loc 1 1900 5 view .LVU123
 408 0044 013C     		subs	r4, r4, #1
 409              	.LVL40:
1900:./FreeRtos/src/queue.c **** 			}
 410              		.loc 1 1900 5 is_stmt 0 view .LVU124
 411 0046 64B2     		sxtb	r4, r4
 412              	.LVL41:
 413              	.L28:
1887:./FreeRtos/src/queue.c **** 		{
 414              		.loc 1 1887 8 is_stmt 1 view .LVU125
 415 0048 002C     		cmp	r4, #0
 416 004a 0ADD     		ble	.L29
1889:./FreeRtos/src/queue.c **** 			{
 417              		.loc 1 1889 4 view .LVU126
1889:./FreeRtos/src/queue.c **** 			{
 418              		.loc 1 1889 8 is_stmt 0 view .LVU127
 419 004c 2B69     		ldr	r3, [r5, #16]
1889:./FreeRtos/src/queue.c **** 			{
 420              		.loc 1 1889 6 view .LVU128
 421 004e 43B1     		cbz	r3, .L29
1891:./FreeRtos/src/queue.c **** 				{
 422              		.loc 1 1891 5 is_stmt 1 view .LVU129
1891:./FreeRtos/src/queue.c **** 				{
 423              		.loc 1 1891 9 is_stmt 0 view .LVU130
 424 0050 05F11000 		add	r0, r5, #16
 425 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 426              	.LVL42:
1891:./FreeRtos/src/queue.c **** 				{
ARM GAS  /tmp/ccpGFB92.s 			page 45


 427              		.loc 1 1891 7 view .LVU131
 428 0058 0028     		cmp	r0, #0
 429 005a F3D0     		beq	.L30
1893:./FreeRtos/src/queue.c **** 				}
 430              		.loc 1 1893 6 is_stmt 1 view .LVU132
 431 005c FFF7FEFF 		bl	vTaskMissedYield
 432              	.LVL43:
 433 0060 F0E7     		b	.L30
 434              	.L29:
1908:./FreeRtos/src/queue.c **** 	}
 435              		.loc 1 1908 3 view .LVU133
1908:./FreeRtos/src/queue.c **** 	}
 436              		.loc 1 1908 20 is_stmt 0 view .LVU134
 437 0062 FF23     		movs	r3, #255
 438 0064 85F84430 		strb	r3, [r5, #68]
 439              	.LBE24:
1910:./FreeRtos/src/queue.c **** }
 440              		.loc 1 1910 2 is_stmt 1 view .LVU135
 441 0068 FFF7FEFF 		bl	vPortExitCritical
 442              	.LVL44:
1911:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 443              		.loc 1 1911 1 is_stmt 0 view .LVU136
 444 006c 38BD     		pop	{r3, r4, r5, pc}
1911:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 445              		.loc 1 1911 1 view .LVU137
 446              		.cfi_endproc
 447              	.LFE146:
 449              		.section	.rodata.xQueueGenericReset.str1.4,"aMS",%progbits,1
 450              		.align	2
 451              	.LC0:
 452 0000 2E2F4672 		.ascii	"./FreeRtos/src/queue.c\000"
 452      65655274 
 452      6F732F73 
 452      72632F71 
 452      75657565 
 453 0017 00       		.align	2
 454              	.LC1:
 455 0018 4572726F 		.ascii	"Error:%s,%d\015\012\000"
 455      723A2573 
 455      2C25640D 
 455      0A00
 456              		.section	.text.xQueueGenericReset,"ax",%progbits
 457              		.align	1
 458              		.global	xQueueGenericReset
 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	xQueueGenericReset:
 465              	.LVL45:
 466              	.LFB131:
 280:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 467              		.loc 1 280 1 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 280:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
ARM GAS  /tmp/ccpGFB92.s 			page 46


 471              		.loc 1 280 1 is_stmt 0 view .LVU139
 472 0000 38B5     		push	{r3, r4, r5, lr}
 473              	.LCFI6:
 474              		.cfi_def_cfa_offset 16
 475              		.cfi_offset 3, -16
 476              		.cfi_offset 4, -12
 477              		.cfi_offset 5, -8
 478              		.cfi_offset 14, -4
 479 0002 0D46     		mov	r5, r1
 281:./FreeRtos/src/queue.c **** 
 480              		.loc 1 281 1 is_stmt 1 view .LVU140
 481              	.LVL46:
 283:./FreeRtos/src/queue.c **** 
 482              		.loc 1 283 2 view .LVU141
 483 0004 0446     		mov	r4, r0
 484 0006 D0B1     		cbz	r0, .L38
 485              	.LVL47:
 486              	.L34:
 285:./FreeRtos/src/queue.c **** 	{
 487              		.loc 1 285 2 view .LVU142
 488 0008 FFF7FEFF 		bl	vPortEnterCritical
 489              	.LVL48:
 287:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 490              		.loc 1 287 3 view .LVU143
 287:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 491              		.loc 1 287 28 is_stmt 0 view .LVU144
 492 000c 2368     		ldr	r3, [r4]
 287:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 493              		.loc 1 287 48 view .LVU145
 494 000e E26B     		ldr	r2, [r4, #60]
 287:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 495              		.loc 1 287 68 view .LVU146
 496 0010 216C     		ldr	r1, [r4, #64]
 287:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 497              		.loc 1 287 37 view .LVU147
 498 0012 01FB0230 		mla	r0, r1, r2, r3
 287:./FreeRtos/src/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 499              		.loc 1 287 19 view .LVU148
 500 0016 6060     		str	r0, [r4, #4]
 288:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 501              		.loc 1 288 3 is_stmt 1 view .LVU149
 288:./FreeRtos/src/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 502              		.loc 1 288 30 is_stmt 0 view .LVU150
 503 0018 0020     		movs	r0, #0
 504 001a A063     		str	r0, [r4, #56]
 289:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 505              		.loc 1 289 3 is_stmt 1 view .LVU151
 289:./FreeRtos/src/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 506              		.loc 1 289 22 is_stmt 0 view .LVU152
 507 001c A360     		str	r3, [r4, #8]
 290:./FreeRtos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 508              		.loc 1 290 3 is_stmt 1 view .LVU153
 290:./FreeRtos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 509              		.loc 1 290 67 is_stmt 0 view .LVU154
 510 001e 013A     		subs	r2, r2, #1
 290:./FreeRtos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 511              		.loc 1 290 43 view .LVU155
ARM GAS  /tmp/ccpGFB92.s 			page 47


 512 0020 02FB0133 		mla	r3, r2, r1, r3
 290:./FreeRtos/src/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 513              		.loc 1 290 25 view .LVU156
 514 0024 E360     		str	r3, [r4, #12]
 291:./FreeRtos/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 515              		.loc 1 291 3 is_stmt 1 view .LVU157
 291:./FreeRtos/src/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 516              		.loc 1 291 20 is_stmt 0 view .LVU158
 517 0026 FF23     		movs	r3, #255
 518 0028 84F84430 		strb	r3, [r4, #68]
 292:./FreeRtos/src/queue.c **** 
 519              		.loc 1 292 3 is_stmt 1 view .LVU159
 292:./FreeRtos/src/queue.c **** 
 520              		.loc 1 292 20 is_stmt 0 view .LVU160
 521 002c 84F84530 		strb	r3, [r4, #69]
 294:./FreeRtos/src/queue.c **** 		{
 522              		.loc 1 294 3 is_stmt 1 view .LVU161
 294:./FreeRtos/src/queue.c **** 		{
 523              		.loc 1 294 5 is_stmt 0 view .LVU162
 524 0030 EDB9     		cbnz	r5, .L35
 301:./FreeRtos/src/queue.c **** 			{
 525              		.loc 1 301 4 is_stmt 1 view .LVU163
 301:./FreeRtos/src/queue.c **** 			{
 526              		.loc 1 301 8 is_stmt 0 view .LVU164
 527 0032 2369     		ldr	r3, [r4, #16]
 301:./FreeRtos/src/queue.c **** 			{
 528              		.loc 1 301 6 view .LVU165
 529 0034 53B9     		cbnz	r3, .L39
 530              	.L36:
 324:./FreeRtos/src/queue.c **** 
 531              		.loc 1 324 2 is_stmt 1 view .LVU166
 532 0036 FFF7FEFF 		bl	vPortExitCritical
 533              	.LVL49:
 328:./FreeRtos/src/queue.c **** }
 534              		.loc 1 328 2 view .LVU167
 329:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 535              		.loc 1 329 1 is_stmt 0 view .LVU168
 536 003a 0120     		movs	r0, #1
 537 003c 38BD     		pop	{r3, r4, r5, pc}
 538              	.LVL50:
 539              	.L38:
 283:./FreeRtos/src/queue.c **** 
 540              		.loc 1 283 2 is_stmt 1 discriminator 1 view .LVU169
 541 003e 40F21B12 		movw	r2, #283
 542 0042 0F49     		ldr	r1, .L40
 543              	.LVL51:
 283:./FreeRtos/src/queue.c **** 
 544              		.loc 1 283 2 is_stmt 0 discriminator 1 view .LVU170
 545 0044 0F48     		ldr	r0, .L40+4
 546              	.LVL52:
 283:./FreeRtos/src/queue.c **** 
 547              		.loc 1 283 2 discriminator 1 view .LVU171
 548 0046 FFF7FEFF 		bl	printf
 549              	.LVL53:
 550 004a DDE7     		b	.L34
 551              	.L39:
 303:./FreeRtos/src/queue.c **** 				{
ARM GAS  /tmp/ccpGFB92.s 			page 48


 552              		.loc 1 303 5 is_stmt 1 view .LVU172
 303:./FreeRtos/src/queue.c **** 				{
 553              		.loc 1 303 9 is_stmt 0 view .LVU173
 554 004c 04F11000 		add	r0, r4, #16
 555 0050 FFF7FEFF 		bl	xTaskRemoveFromEventList
 556              	.LVL54:
 303:./FreeRtos/src/queue.c **** 				{
 557              		.loc 1 303 7 view .LVU174
 558 0054 0028     		cmp	r0, #0
 559 0056 EED0     		beq	.L36
 305:./FreeRtos/src/queue.c **** 				}
 560              		.loc 1 305 6 is_stmt 1 view .LVU175
 561 0058 4FF0E023 		mov	r3, #-536813568
 562 005c 4FF08052 		mov	r2, #268435456
 563 0060 C3F8042D 		str	r2, [r3, #3332]
 305:./FreeRtos/src/queue.c **** 				}
 564              		.loc 1 305 6 view .LVU176
 565              		.syntax unified
 566              	@ 305 "./FreeRtos/src/queue.c" 1
 567 0064 BFF34F8F 		dsb
 568              	@ 0 "" 2
 305:./FreeRtos/src/queue.c **** 				}
 569              		.loc 1 305 6 view .LVU177
 570              	@ 305 "./FreeRtos/src/queue.c" 1
 571 0068 BFF36F8F 		isb
 572              	@ 0 "" 2
 305:./FreeRtos/src/queue.c **** 				}
 573              		.loc 1 305 38 view .LVU178
 574              		.thumb
 575              		.syntax unified
 576 006c E3E7     		b	.L36
 577              	.L35:
 320:./FreeRtos/src/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 578              		.loc 1 320 4 view .LVU179
 579 006e 04F11000 		add	r0, r4, #16
 580 0072 FFF7FEFF 		bl	vListInitialise
 581              	.LVL55:
 321:./FreeRtos/src/queue.c **** 		}
 582              		.loc 1 321 4 view .LVU180
 583 0076 04F12400 		add	r0, r4, #36
 584 007a FFF7FEFF 		bl	vListInitialise
 585              	.LVL56:
 586 007e DAE7     		b	.L36
 587              	.L41:
 588              		.align	2
 589              	.L40:
 590 0080 00000000 		.word	.LC0
 591 0084 18000000 		.word	.LC1
 592              		.cfi_endproc
 593              	.LFE131:
 595              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 596              		.align	1
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	prvInitialiseNewQueue:
ARM GAS  /tmp/ccpGFB92.s 			page 49


 603              	.LVL57:
 604              	.LFB133:
 433:./FreeRtos/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 605              		.loc 1 433 1 view -0
 606              		.cfi_startproc
 607              		@ args = 4, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 433:./FreeRtos/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 609              		.loc 1 433 1 is_stmt 0 view .LVU182
 610 0000 10B5     		push	{r4, lr}
 611              	.LCFI7:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 4, -8
 614              		.cfi_offset 14, -4
 615 0002 0346     		mov	r3, r0
 616              	.LVL58:
 433:./FreeRtos/src/queue.c **** 	/* Remove compiler warnings about unused parameters should
 617              		.loc 1 433 1 view .LVU183
 618 0004 0298     		ldr	r0, [sp, #8]
 619              	.LVL59:
 436:./FreeRtos/src/queue.c **** 
 620              		.loc 1 436 2 is_stmt 1 view .LVU184
 438:./FreeRtos/src/queue.c **** 	{
 621              		.loc 1 438 2 view .LVU185
 438:./FreeRtos/src/queue.c **** 	{
 622              		.loc 1 438 4 is_stmt 0 view .LVU186
 623 0006 0C46     		mov	r4, r1
 624 0008 31B9     		cbnz	r1, .L43
 444:./FreeRtos/src/queue.c **** 	}
 625              		.loc 1 444 3 is_stmt 1 view .LVU187
 444:./FreeRtos/src/queue.c **** 	}
 626              		.loc 1 444 22 is_stmt 0 view .LVU188
 627 000a 0060     		str	r0, [r0]
 628              	.L44:
 454:./FreeRtos/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 629              		.loc 1 454 2 is_stmt 1 view .LVU189
 454:./FreeRtos/src/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 630              		.loc 1 454 23 is_stmt 0 view .LVU190
 631 000c C363     		str	r3, [r0, #60]
 455:./FreeRtos/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 632              		.loc 1 455 2 is_stmt 1 view .LVU191
 455:./FreeRtos/src/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 633              		.loc 1 455 25 is_stmt 0 view .LVU192
 634 000e 0464     		str	r4, [r0, #64]
 456:./FreeRtos/src/queue.c **** 
 635              		.loc 1 456 2 is_stmt 1 view .LVU193
 456:./FreeRtos/src/queue.c **** 
 636              		.loc 1 456 11 is_stmt 0 view .LVU194
 637 0010 0121     		movs	r1, #1
 638              	.LVL60:
 456:./FreeRtos/src/queue.c **** 
 639              		.loc 1 456 11 view .LVU195
 640 0012 FFF7FEFF 		bl	xQueueGenericReset
 641              	.LVL61:
 470:./FreeRtos/src/queue.c **** }
 642              		.loc 1 470 33 is_stmt 1 view .LVU196
 471:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccpGFB92.s 			page 50


 643              		.loc 1 471 1 is_stmt 0 view .LVU197
 644 0016 10BD     		pop	{r4, pc}
 645              	.LVL62:
 646              	.L43:
 449:./FreeRtos/src/queue.c **** 	}
 647              		.loc 1 449 3 is_stmt 1 view .LVU198
 449:./FreeRtos/src/queue.c **** 	}
 648              		.loc 1 449 22 is_stmt 0 view .LVU199
 649 0018 0260     		str	r2, [r0]
 650 001a F7E7     		b	.L44
 651              		.cfi_endproc
 652              	.LFE133:
 654              		.section	.text.xQueueGenericCreate,"ax",%progbits
 655              		.align	1
 656              		.global	xQueueGenericCreate
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	xQueueGenericCreate:
 663              	.LVL63:
 664              	.LFB132:
 387:./FreeRtos/src/queue.c **** 	Queue_t *pxNewQueue;
 665              		.loc 1 387 2 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 387:./FreeRtos/src/queue.c **** 	Queue_t *pxNewQueue;
 669              		.loc 1 387 2 is_stmt 0 view .LVU201
 670 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 671              	.LCFI8:
 672              		.cfi_def_cfa_offset 20
 673              		.cfi_offset 4, -20
 674              		.cfi_offset 5, -16
 675              		.cfi_offset 6, -12
 676              		.cfi_offset 7, -8
 677              		.cfi_offset 14, -4
 678 0002 83B0     		sub	sp, sp, #12
 679              	.LCFI9:
 680              		.cfi_def_cfa_offset 32
 681 0004 0C46     		mov	r4, r1
 682 0006 1546     		mov	r5, r2
 388:./FreeRtos/src/queue.c **** 	size_t xQueueSizeInBytes;
 683              		.loc 1 388 2 is_stmt 1 view .LVU202
 389:./FreeRtos/src/queue.c **** 	uint8_t *pucQueueStorage;
 684              		.loc 1 389 2 view .LVU203
 390:./FreeRtos/src/queue.c **** 
 685              		.loc 1 390 2 view .LVU204
 392:./FreeRtos/src/queue.c **** 
 686              		.loc 1 392 3 view .LVU205
 687 0008 0746     		mov	r7, r0
 688 000a 90B1     		cbz	r0, .L52
 689              	.LVL64:
 690              	.L47:
 394:./FreeRtos/src/queue.c **** 		{
 691              		.loc 1 394 3 view .LVU206
 394:./FreeRtos/src/queue.c **** 		{
ARM GAS  /tmp/ccpGFB92.s 			page 51


 692              		.loc 1 394 5 is_stmt 0 view .LVU207
 693 000c C4B1     		cbz	r4, .L50
 403:./FreeRtos/src/queue.c **** 		}
 694              		.loc 1 403 4 is_stmt 1 view .LVU208
 403:./FreeRtos/src/queue.c **** 		}
 695              		.loc 1 403 22 is_stmt 0 view .LVU209
 696 000e 04FB07F0 		mul	r0, r4, r7
 697              	.LVL65:
 698              	.L48:
 406:./FreeRtos/src/queue.c **** 
 699              		.loc 1 406 3 is_stmt 1 view .LVU210
 406:./FreeRtos/src/queue.c **** 
 700              		.loc 1 406 30 is_stmt 0 view .LVU211
 701 0012 4830     		adds	r0, r0, #72
 702              	.LVL66:
 406:./FreeRtos/src/queue.c **** 
 703              		.loc 1 406 30 view .LVU212
 704 0014 FFF7FEFF 		bl	pvPortMalloc
 705              	.LVL67:
 408:./FreeRtos/src/queue.c **** 		{
 706              		.loc 1 408 3 is_stmt 1 view .LVU213
 408:./FreeRtos/src/queue.c **** 		{
 707              		.loc 1 408 5 is_stmt 0 view .LVU214
 708 0018 0646     		mov	r6, r0
 709 001a 38B1     		cbz	r0, .L46
 412:./FreeRtos/src/queue.c **** 
 710              		.loc 1 412 4 is_stmt 1 view .LVU215
 711              	.LVL68:
 423:./FreeRtos/src/queue.c **** 		}
 712              		.loc 1 423 4 view .LVU216
 713 001c 0090     		str	r0, [sp]
 714 001e 2B46     		mov	r3, r5
 715 0020 00F14802 		add	r2, r0, #72
 716              	.LVL69:
 423:./FreeRtos/src/queue.c **** 		}
 717              		.loc 1 423 4 is_stmt 0 view .LVU217
 718 0024 2146     		mov	r1, r4
 719 0026 3846     		mov	r0, r7
 720              	.LVL70:
 423:./FreeRtos/src/queue.c **** 		}
 721              		.loc 1 423 4 view .LVU218
 722 0028 FFF7FEFF 		bl	prvInitialiseNewQueue
 723              	.LVL71:
 426:./FreeRtos/src/queue.c **** 	}
 724              		.loc 1 426 3 is_stmt 1 view .LVU219
 725              	.L46:
 427:./FreeRtos/src/queue.c **** 
 726              		.loc 1 427 2 is_stmt 0 view .LVU220
 727 002c 3046     		mov	r0, r6
 728 002e 03B0     		add	sp, sp, #12
 729              	.LCFI10:
 730              		.cfi_remember_state
 731              		.cfi_def_cfa_offset 20
 732              		@ sp needed
 733 0030 F0BD     		pop	{r4, r5, r6, r7, pc}
 734              	.LVL72:
 735              	.L52:
ARM GAS  /tmp/ccpGFB92.s 			page 52


 736              	.LCFI11:
 737              		.cfi_restore_state
 392:./FreeRtos/src/queue.c **** 
 738              		.loc 1 392 3 is_stmt 1 discriminator 1 view .LVU221
 739 0032 4FF4C472 		mov	r2, #392
 740              	.LVL73:
 392:./FreeRtos/src/queue.c **** 
 741              		.loc 1 392 3 is_stmt 0 discriminator 1 view .LVU222
 742 0036 0349     		ldr	r1, .L53
 743              	.LVL74:
 392:./FreeRtos/src/queue.c **** 
 744              		.loc 1 392 3 discriminator 1 view .LVU223
 745 0038 0348     		ldr	r0, .L53+4
 746              	.LVL75:
 392:./FreeRtos/src/queue.c **** 
 747              		.loc 1 392 3 discriminator 1 view .LVU224
 748 003a FFF7FEFF 		bl	printf
 749              	.LVL76:
 750 003e E5E7     		b	.L47
 751              	.L50:
 397:./FreeRtos/src/queue.c **** 		}
 752              		.loc 1 397 22 view .LVU225
 753 0040 2046     		mov	r0, r4
 754 0042 E6E7     		b	.L48
 755              	.L54:
 756              		.align	2
 757              	.L53:
 758 0044 00000000 		.word	.LC0
 759 0048 18000000 		.word	.LC1
 760              		.cfi_endproc
 761              	.LFE132:
 763              		.section	.text.xQueueGenericSend,"ax",%progbits
 764              		.align	1
 765              		.global	xQueueGenericSend
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
 769              		.fpu fpv4-sp-d16
 771              	xQueueGenericSend:
 772              	.LVL77:
 773              	.LFB134:
 724:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 774              		.loc 1 724 1 is_stmt 1 view -0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 16
 777              		@ frame_needed = 0, uses_anonymous_args = 0
 724:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 778              		.loc 1 724 1 is_stmt 0 view .LVU227
 779 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 780              	.LCFI12:
 781              		.cfi_def_cfa_offset 20
 782              		.cfi_offset 4, -20
 783              		.cfi_offset 5, -16
 784              		.cfi_offset 6, -12
 785              		.cfi_offset 7, -8
 786              		.cfi_offset 14, -4
 787 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccpGFB92.s 			page 53


 788              	.LCFI13:
 789              		.cfi_def_cfa_offset 40
 790 0004 0F46     		mov	r7, r1
 791 0006 0192     		str	r2, [sp, #4]
 792 0008 1D46     		mov	r5, r3
 725:./FreeRtos/src/queue.c **** TimeOut_t xTimeOut;
 793              		.loc 1 725 1 is_stmt 1 view .LVU228
 794              	.LVL78:
 726:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 795              		.loc 1 726 1 view .LVU229
 727:./FreeRtos/src/queue.c **** 
 796              		.loc 1 727 1 view .LVU230
 729:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 797              		.loc 1 729 2 view .LVU231
 798 000a 0446     		mov	r4, r0
 799 000c 48B1     		cbz	r0, .L74
 800              	.LVL79:
 801              	.L56:
 730:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 802              		.loc 1 730 2 view .LVU232
 803 000e 7FB1     		cbz	r7, .L75
 804              	.L57:
 731:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 805              		.loc 1 731 2 view .LVU233
 806 0010 022D     		cmp	r5, #2
 807 0012 17D0     		beq	.L76
 808              	.L58:
 734:./FreeRtos/src/queue.c **** 	}
 809              		.loc 1 734 3 view .LVU234
 810 0014 FFF7FEFF 		bl	xTaskGetSchedulerState
 811              	.LVL80:
 812 0018 08B9     		cbnz	r0, .L59
 734:./FreeRtos/src/queue.c **** 	}
 813              		.loc 1 734 3 is_stmt 0 discriminator 2 view .LVU235
 814 001a 019B     		ldr	r3, [sp, #4]
 815 001c E3B9     		cbnz	r3, .L77
 816              	.L59:
 724:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 817              		.loc 1 724 1 view .LVU236
 818 001e 0026     		movs	r6, #0
 819 0020 5FE0     		b	.L60
 820              	.LVL81:
 821              	.L74:
 729:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 822              		.loc 1 729 2 is_stmt 1 discriminator 1 view .LVU237
 823 0022 40F2D922 		movw	r2, #729
 824              	.LVL82:
 729:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 825              		.loc 1 729 2 is_stmt 0 discriminator 1 view .LVU238
 826 0026 5349     		ldr	r1, .L83
 827              	.LVL83:
 729:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 828              		.loc 1 729 2 discriminator 1 view .LVU239
 829 0028 5348     		ldr	r0, .L83+4
 830              	.LVL84:
 729:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 831              		.loc 1 729 2 discriminator 1 view .LVU240
ARM GAS  /tmp/ccpGFB92.s 			page 54


 832 002a FFF7FEFF 		bl	printf
 833              	.LVL85:
 729:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 834              		.loc 1 729 2 discriminator 1 view .LVU241
 835 002e EEE7     		b	.L56
 836              	.L75:
 730:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 837              		.loc 1 730 2 discriminator 2 view .LVU242
 838 0030 236C     		ldr	r3, [r4, #64]
 839 0032 002B     		cmp	r3, #0
 840 0034 ECD0     		beq	.L57
 730:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 841              		.loc 1 730 2 is_stmt 1 view .LVU243
 842 0036 40F2DA22 		movw	r2, #730
 843 003a 4E49     		ldr	r1, .L83
 844 003c 4E48     		ldr	r0, .L83+4
 845 003e FFF7FEFF 		bl	printf
 846              	.LVL86:
 847 0042 E5E7     		b	.L57
 848              	.L76:
 731:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 849              		.loc 1 731 2 is_stmt 0 discriminator 2 view .LVU244
 850 0044 E36B     		ldr	r3, [r4, #60]
 851 0046 012B     		cmp	r3, #1
 852 0048 E4D0     		beq	.L58
 731:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 853              		.loc 1 731 2 is_stmt 1 view .LVU245
 854 004a 40F2DB22 		movw	r2, #731
 855 004e 4949     		ldr	r1, .L83
 856 0050 4948     		ldr	r0, .L83+4
 857 0052 FFF7FEFF 		bl	printf
 858              	.LVL87:
 859 0056 DDE7     		b	.L58
 860              	.L77:
 734:./FreeRtos/src/queue.c **** 	}
 861              		.loc 1 734 3 view .LVU246
 862 0058 40F2DE22 		movw	r2, #734
 863 005c 4549     		ldr	r1, .L83
 864 005e 4648     		ldr	r0, .L83+4
 865 0060 FFF7FEFF 		bl	printf
 866              	.LVL88:
 867 0064 DBE7     		b	.L59
 868              	.LVL89:
 869              	.L61:
 752:./FreeRtos/src/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 870              		.loc 1 752 31 view .LVU247
 753:./FreeRtos/src/queue.c **** 
 871              		.loc 1 753 5 view .LVU248
 753:./FreeRtos/src/queue.c **** 
 872              		.loc 1 753 22 is_stmt 0 view .LVU249
 873 0066 2A46     		mov	r2, r5
 874 0068 3946     		mov	r1, r7
 875 006a 2046     		mov	r0, r4
 876 006c FFF7FEFF 		bl	prvCopyDataToQueue
 877              	.LVL90:
 808:./FreeRtos/src/queue.c **** 					{
 878              		.loc 1 808 6 is_stmt 1 view .LVU250
ARM GAS  /tmp/ccpGFB92.s 			page 55


 808:./FreeRtos/src/queue.c **** 					{
 879              		.loc 1 808 10 is_stmt 0 view .LVU251
 880 0070 636A     		ldr	r3, [r4, #36]
 808:./FreeRtos/src/queue.c **** 					{
 881              		.loc 1 808 8 view .LVU252
 882 0072 7BB9     		cbnz	r3, .L78
 823:./FreeRtos/src/queue.c **** 					{
 883              		.loc 1 823 11 is_stmt 1 view .LVU253
 823:./FreeRtos/src/queue.c **** 					{
 884              		.loc 1 823 13 is_stmt 0 view .LVU254
 885 0074 48B1     		cbz	r0, .L64
 829:./FreeRtos/src/queue.c **** 					}
 886              		.loc 1 829 7 is_stmt 1 view .LVU255
 887 0076 4FF0E023 		mov	r3, #-536813568
 888 007a 4FF08052 		mov	r2, #268435456
 889 007e C3F8042D 		str	r2, [r3, #3332]
 829:./FreeRtos/src/queue.c **** 					}
 890              		.loc 1 829 7 view .LVU256
 891              		.syntax unified
 892              	@ 829 "./FreeRtos/src/queue.c" 1
 893 0082 BFF34F8F 		dsb
 894              	@ 0 "" 2
 829:./FreeRtos/src/queue.c **** 					}
 895              		.loc 1 829 7 view .LVU257
 896              	@ 829 "./FreeRtos/src/queue.c" 1
 897 0086 BFF36F8F 		isb
 898              	@ 0 "" 2
 829:./FreeRtos/src/queue.c **** 					}
 899              		.loc 1 829 39 view .LVU258
 900              	.LVL91:
 901              		.thumb
 902              		.syntax unified
 903              	.L64:
 833:./FreeRtos/src/queue.c **** 					}
 904              		.loc 1 833 31 view .LVU259
 838:./FreeRtos/src/queue.c **** 				return pdPASS;
 905              		.loc 1 838 5 view .LVU260
 906 008a FFF7FEFF 		bl	vPortExitCritical
 907              	.LVL92:
 839:./FreeRtos/src/queue.c **** 			}
 908              		.loc 1 839 5 view .LVU261
 839:./FreeRtos/src/queue.c **** 			}
 909              		.loc 1 839 12 is_stmt 0 view .LVU262
 910 008e 0120     		movs	r0, #1
 911              	.L55:
 918:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 912              		.loc 1 918 1 view .LVU263
 913 0090 05B0     		add	sp, sp, #20
 914              	.LCFI14:
 915              		.cfi_remember_state
 916              		.cfi_def_cfa_offset 20
 917              		@ sp needed
 918 0092 F0BD     		pop	{r4, r5, r6, r7, pc}
 919              	.LVL93:
 920              	.L78:
 921              	.LCFI15:
 922              		.cfi_restore_state
ARM GAS  /tmp/ccpGFB92.s 			page 56


 810:./FreeRtos/src/queue.c **** 						{
 923              		.loc 1 810 7 is_stmt 1 view .LVU264
 810:./FreeRtos/src/queue.c **** 						{
 924              		.loc 1 810 11 is_stmt 0 view .LVU265
 925 0094 04F12400 		add	r0, r4, #36
 926              	.LVL94:
 810:./FreeRtos/src/queue.c **** 						{
 927              		.loc 1 810 11 view .LVU266
 928 0098 FFF7FEFF 		bl	xTaskRemoveFromEventList
 929              	.LVL95:
 810:./FreeRtos/src/queue.c **** 						{
 930              		.loc 1 810 9 view .LVU267
 931 009c 0028     		cmp	r0, #0
 932 009e F4D0     		beq	.L64
 816:./FreeRtos/src/queue.c **** 						}
 933              		.loc 1 816 8 is_stmt 1 view .LVU268
 934 00a0 4FF0E023 		mov	r3, #-536813568
 935 00a4 4FF08052 		mov	r2, #268435456
 936 00a8 C3F8042D 		str	r2, [r3, #3332]
 816:./FreeRtos/src/queue.c **** 						}
 937              		.loc 1 816 8 view .LVU269
 938              		.syntax unified
 939              	@ 816 "./FreeRtos/src/queue.c" 1
 940 00ac BFF34F8F 		dsb
 941              	@ 0 "" 2
 816:./FreeRtos/src/queue.c **** 						}
 942              		.loc 1 816 8 view .LVU270
 943              	@ 816 "./FreeRtos/src/queue.c" 1
 944 00b0 BFF36F8F 		isb
 945              	@ 0 "" 2
 816:./FreeRtos/src/queue.c **** 						}
 946              		.loc 1 816 40 view .LVU271
 947              		.thumb
 948              		.syntax unified
 949 00b4 E9E7     		b	.L64
 950              	.L79:
 847:./FreeRtos/src/queue.c **** 
 951              		.loc 1 847 6 view .LVU272
 952 00b6 FFF7FEFF 		bl	vPortExitCritical
 953              	.LVL96:
 851:./FreeRtos/src/queue.c **** 					return errQUEUE_FULL;
 954              		.loc 1 851 39 view .LVU273
 852:./FreeRtos/src/queue.c **** 				}
 955              		.loc 1 852 6 view .LVU274
 852:./FreeRtos/src/queue.c **** 				}
 956              		.loc 1 852 13 is_stmt 0 view .LVU275
 957 00ba 0020     		movs	r0, #0
 958 00bc E8E7     		b	.L55
 959              	.L80:
 858:./FreeRtos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 960              		.loc 1 858 6 is_stmt 1 view .LVU276
 961 00be 02A8     		add	r0, sp, #8
 962 00c0 FFF7FEFF 		bl	vTaskSetTimeOutState
 963              	.LVL97:
 859:./FreeRtos/src/queue.c **** 				}
 964              		.loc 1 859 6 view .LVU277
 859:./FreeRtos/src/queue.c **** 				}
ARM GAS  /tmp/ccpGFB92.s 			page 57


 965              		.loc 1 859 20 is_stmt 0 view .LVU278
 966 00c4 0126     		movs	r6, #1
 967 00c6 19E0     		b	.L67
 968              	.LVL98:
 969              	.L81:
 874:./FreeRtos/src/queue.c **** 
 970              		.loc 1 874 3 is_stmt 1 discriminator 1 view .LVU279
 971 00c8 0023     		movs	r3, #0
 972 00ca 84F84430 		strb	r3, [r4, #68]
 973 00ce 21E0     		b	.L68
 974              	.L82:
 874:./FreeRtos/src/queue.c **** 
 975              		.loc 1 874 3 discriminator 4 view .LVU280
 976 00d0 0023     		movs	r3, #0
 977 00d2 84F84530 		strb	r3, [r4, #69]
 978 00d6 23E0     		b	.L69
 979              	.L71:
 904:./FreeRtos/src/queue.c **** 				( void ) xTaskResumeAll();
 980              		.loc 1 904 5 view .LVU281
 981 00d8 2046     		mov	r0, r4
 982 00da FFF7FEFF 		bl	prvUnlockQueue
 983              	.LVL99:
 905:./FreeRtos/src/queue.c **** 			}
 984              		.loc 1 905 5 view .LVU282
 905:./FreeRtos/src/queue.c **** 			}
 985              		.loc 1 905 14 is_stmt 0 view .LVU283
 986 00de FFF7FEFF 		bl	xTaskResumeAll
 987              	.LVL100:
 988              	.L60:
 742:./FreeRtos/src/queue.c **** 	{
 989              		.loc 1 742 2 is_stmt 1 view .LVU284
 744:./FreeRtos/src/queue.c **** 		{
 990              		.loc 1 744 3 view .LVU285
 991 00e2 FFF7FEFF 		bl	vPortEnterCritical
 992              	.LVL101:
 750:./FreeRtos/src/queue.c **** 			{
 993              		.loc 1 750 4 view .LVU286
 750:./FreeRtos/src/queue.c **** 			{
 994              		.loc 1 750 17 is_stmt 0 view .LVU287
 995 00e6 A26B     		ldr	r2, [r4, #56]
 750:./FreeRtos/src/queue.c **** 			{
 996              		.loc 1 750 46 view .LVU288
 997 00e8 E36B     		ldr	r3, [r4, #60]
 750:./FreeRtos/src/queue.c **** 			{
 998              		.loc 1 750 6 view .LVU289
 999 00ea 9A42     		cmp	r2, r3
 1000 00ec BBD3     		bcc	.L61
 750:./FreeRtos/src/queue.c **** 			{
 1001              		.loc 1 750 59 discriminator 1 view .LVU290
 1002 00ee 022D     		cmp	r5, #2
 1003 00f0 B9D0     		beq	.L61
 843:./FreeRtos/src/queue.c **** 				{
 1004              		.loc 1 843 5 is_stmt 1 view .LVU291
 843:./FreeRtos/src/queue.c **** 				{
 1005              		.loc 1 843 22 is_stmt 0 view .LVU292
 1006 00f2 019B     		ldr	r3, [sp, #4]
 843:./FreeRtos/src/queue.c **** 				{
ARM GAS  /tmp/ccpGFB92.s 			page 58


 1007              		.loc 1 843 7 view .LVU293
 1008 00f4 002B     		cmp	r3, #0
 1009 00f6 DED0     		beq	.L79
 854:./FreeRtos/src/queue.c **** 				{
 1010              		.loc 1 854 10 is_stmt 1 view .LVU294
 854:./FreeRtos/src/queue.c **** 				{
 1011              		.loc 1 854 12 is_stmt 0 view .LVU295
 1012 00f8 002E     		cmp	r6, #0
 1013 00fa E0D0     		beq	.L80
 1014              	.LVL102:
 1015              	.L67:
 864:./FreeRtos/src/queue.c **** 				}
 1016              		.loc 1 864 30 is_stmt 1 view .LVU296
 868:./FreeRtos/src/queue.c **** 
 1017              		.loc 1 868 3 view .LVU297
 1018 00fc FFF7FEFF 		bl	vPortExitCritical
 1019              	.LVL103:
 873:./FreeRtos/src/queue.c **** 		prvLockQueue( pxQueue );
 1020              		.loc 1 873 3 view .LVU298
 1021 0100 FFF7FEFF 		bl	vTaskSuspendAll
 1022              	.LVL104:
 874:./FreeRtos/src/queue.c **** 
 1023              		.loc 1 874 3 view .LVU299
 1024 0104 FFF7FEFF 		bl	vPortEnterCritical
 1025              	.LVL105:
 874:./FreeRtos/src/queue.c **** 
 1026              		.loc 1 874 3 view .LVU300
 1027 0108 94F84400 		ldrb	r0, [r4, #68]	@ zero_extendqisi2
 1028 010c 40B2     		sxtb	r0, r0
 1029 010e B0F1FF3F 		cmp	r0, #-1
 1030 0112 D9D0     		beq	.L81
 1031              	.L68:
 874:./FreeRtos/src/queue.c **** 
 1032              		.loc 1 874 3 discriminator 3 view .LVU301
 1033 0114 94F84500 		ldrb	r0, [r4, #69]	@ zero_extendqisi2
 1034 0118 40B2     		sxtb	r0, r0
 1035 011a B0F1FF3F 		cmp	r0, #-1
 1036 011e D7D0     		beq	.L82
 1037              	.L69:
 874:./FreeRtos/src/queue.c **** 
 1038              		.loc 1 874 3 discriminator 6 view .LVU302
 1039 0120 FFF7FEFF 		bl	vPortExitCritical
 1040              	.LVL106:
 877:./FreeRtos/src/queue.c **** 		{
 1041              		.loc 1 877 3 discriminator 6 view .LVU303
 877:./FreeRtos/src/queue.c **** 		{
 1042              		.loc 1 877 7 is_stmt 0 discriminator 6 view .LVU304
 1043 0124 01A9     		add	r1, sp, #4
 1044 0126 02A8     		add	r0, sp, #8
 1045 0128 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1046              	.LVL107:
 877:./FreeRtos/src/queue.c **** 		{
 1047              		.loc 1 877 5 discriminator 6 view .LVU305
 1048 012c D8B9     		cbnz	r0, .L70
 879:./FreeRtos/src/queue.c **** 			{
 1049              		.loc 1 879 4 is_stmt 1 view .LVU306
 879:./FreeRtos/src/queue.c **** 			{
ARM GAS  /tmp/ccpGFB92.s 			page 59


 1050              		.loc 1 879 8 is_stmt 0 view .LVU307
 1051 012e 2046     		mov	r0, r4
 1052 0130 FFF7FEFF 		bl	prvIsQueueFull
 1053              	.LVL108:
 879:./FreeRtos/src/queue.c **** 			{
 1054              		.loc 1 879 6 view .LVU308
 1055 0134 0028     		cmp	r0, #0
 1056 0136 CFD0     		beq	.L71
 881:./FreeRtos/src/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 1057              		.loc 1 881 43 is_stmt 1 view .LVU309
 882:./FreeRtos/src/queue.c **** 
 1058              		.loc 1 882 5 view .LVU310
 1059 0138 0199     		ldr	r1, [sp, #4]
 1060 013a 04F11000 		add	r0, r4, #16
 1061 013e FFF7FEFF 		bl	vTaskPlaceOnEventList
 1062              	.LVL109:
 889:./FreeRtos/src/queue.c **** 
 1063              		.loc 1 889 5 view .LVU311
 1064 0142 2046     		mov	r0, r4
 1065 0144 FFF7FEFF 		bl	prvUnlockQueue
 1066              	.LVL110:
 896:./FreeRtos/src/queue.c **** 				{
 1067              		.loc 1 896 5 view .LVU312
 896:./FreeRtos/src/queue.c **** 				{
 1068              		.loc 1 896 9 is_stmt 0 view .LVU313
 1069 0148 FFF7FEFF 		bl	xTaskResumeAll
 1070              	.LVL111:
 896:./FreeRtos/src/queue.c **** 				{
 1071              		.loc 1 896 7 view .LVU314
 1072 014c 0028     		cmp	r0, #0
 1073 014e C8D1     		bne	.L60
 898:./FreeRtos/src/queue.c **** 				}
 1074              		.loc 1 898 6 is_stmt 1 view .LVU315
 1075 0150 4FF0E023 		mov	r3, #-536813568
 1076 0154 4FF08052 		mov	r2, #268435456
 1077 0158 C3F8042D 		str	r2, [r3, #3332]
 898:./FreeRtos/src/queue.c **** 				}
 1078              		.loc 1 898 6 view .LVU316
 1079              		.syntax unified
 1080              	@ 898 "./FreeRtos/src/queue.c" 1
 1081 015c BFF34F8F 		dsb
 1082              	@ 0 "" 2
 898:./FreeRtos/src/queue.c **** 				}
 1083              		.loc 1 898 6 view .LVU317
 1084              	@ 898 "./FreeRtos/src/queue.c" 1
 1085 0160 BFF36F8F 		isb
 1086              	@ 0 "" 2
 1087              		.thumb
 1088              		.syntax unified
 1089 0164 BDE7     		b	.L60
 1090              	.L70:
 911:./FreeRtos/src/queue.c **** 			( void ) xTaskResumeAll();
 1091              		.loc 1 911 4 view .LVU318
 1092 0166 2046     		mov	r0, r4
 1093 0168 FFF7FEFF 		bl	prvUnlockQueue
 1094              	.LVL112:
 912:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 60


 1095              		.loc 1 912 4 view .LVU319
 912:./FreeRtos/src/queue.c **** 
 1096              		.loc 1 912 13 is_stmt 0 view .LVU320
 1097 016c FFF7FEFF 		bl	xTaskResumeAll
 1098              	.LVL113:
 914:./FreeRtos/src/queue.c **** 			return errQUEUE_FULL;
 1099              		.loc 1 914 37 is_stmt 1 view .LVU321
 915:./FreeRtos/src/queue.c **** 		}
 1100              		.loc 1 915 4 view .LVU322
 915:./FreeRtos/src/queue.c **** 		}
 1101              		.loc 1 915 11 is_stmt 0 view .LVU323
 1102 0170 0020     		movs	r0, #0
 1103 0172 8DE7     		b	.L55
 1104              	.L84:
 1105              		.align	2
 1106              	.L83:
 1107 0174 00000000 		.word	.LC0
 1108 0178 18000000 		.word	.LC1
 1109              		.cfi_endproc
 1110              	.LFE134:
 1112              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1113              		.align	1
 1114              		.global	xQueueGenericSendFromISR
 1115              		.syntax unified
 1116              		.thumb
 1117              		.thumb_func
 1118              		.fpu fpv4-sp-d16
 1120              	xQueueGenericSendFromISR:
 1121              	.LVL114:
 1122              	.LFB135:
 922:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 1123              		.loc 1 922 1 is_stmt 1 view -0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 922:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 1127              		.loc 1 922 1 is_stmt 0 view .LVU325
 1128 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1129              	.LCFI16:
 1130              		.cfi_def_cfa_offset 32
 1131              		.cfi_offset 3, -32
 1132              		.cfi_offset 4, -28
 1133              		.cfi_offset 5, -24
 1134              		.cfi_offset 6, -20
 1135              		.cfi_offset 7, -16
 1136              		.cfi_offset 8, -12
 1137              		.cfi_offset 9, -8
 1138              		.cfi_offset 14, -4
 1139 0004 0E46     		mov	r6, r1
 1140 0006 9146     		mov	r9, r2
 1141 0008 1D46     		mov	r5, r3
 923:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1142              		.loc 1 923 1 is_stmt 1 view .LVU326
 924:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1143              		.loc 1 924 1 view .LVU327
 925:./FreeRtos/src/queue.c **** 
 1144              		.loc 1 925 1 view .LVU328
ARM GAS  /tmp/ccpGFB92.s 			page 61


 1145              	.LVL115:
 927:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1146              		.loc 1 927 2 view .LVU329
 1147 000a 0446     		mov	r4, r0
 1148 000c C8B1     		cbz	r0, .L97
 1149              	.LVL116:
 1150              	.L86:
 928:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1151              		.loc 1 928 2 view .LVU330
 1152 000e FEB1     		cbz	r6, .L98
 1153              	.L87:
 929:./FreeRtos/src/queue.c **** 
 1154              		.loc 1 929 2 view .LVU331
 1155 0010 022D     		cmp	r5, #2
 1156 0012 27D0     		beq	.L99
 1157              	.L88:
 945:./FreeRtos/src/queue.c **** 
 1158              		.loc 1 945 2 view .LVU332
 1159 0014 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1160              	.LVL117:
 952:./FreeRtos/src/queue.c **** 	{
 1161              		.loc 1 952 2 view .LVU333
 1162              	.LBB25:
 1163              	.LBI25:
 1164              		.file 2 "./FreeRtos/port/ARM_CM4F/portmacro.h"
   1:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*
   2:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
   5:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  12:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  15:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  22:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  25:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./FreeRtos/port/ARM_CM4F/portmacro.h ****  */
  27:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  28:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  29:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  32:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
ARM GAS  /tmp/ccpGFB92.s 			page 62


  33:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern "C" {
  34:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
  35:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  36:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  39:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  42:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./FreeRtos/port/ARM_CM4F/portmacro.h ****  */
  45:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  46:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  55:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  59:./FreeRtos/port/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./FreeRtos/port/ARM_CM4F/portmacro.h **** #else
  63:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  66:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
  70:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  72:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  78:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./FreeRtos/port/ARM_CM4F/portmacro.h **** {																				\
  81:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./FreeRtos/port/ARM_CM4F/portmacro.h **** 																				\
  84:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
  89:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccpGFB92.s 			page 63


  90:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  96:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 106:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 108:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./FreeRtos/port/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./FreeRtos/port/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 115:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 120:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 122:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 126:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 127:./FreeRtos/port/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 129:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 132:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 134:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 137:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 138:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#endif
 142:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 143:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
ARM GAS  /tmp/ccpGFB92.s 			page 64


 147:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 149:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 151:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 153:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 155:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 159:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 160:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 163:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 165:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 168:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 169:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 171:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./FreeRtos/port/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 174:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 177:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 179:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 181:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	else
 182:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 183:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 185:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 186:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 188:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 189:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 195:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 196:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 197:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	);
 203:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
ARM GAS  /tmp/ccpGFB92.s 			page 65


 204:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 205:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1165              		.loc 2 207 34 view .LVU334
 1166              	.LBB26:
 208:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1167              		.loc 2 209 1 view .LVU335
 210:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 1168              		.loc 2 211 2 view .LVU336
 1169              		.syntax unified
 1170              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1171 0018 EFF31188 			mrs r8, basepri											
 1172 001c 4FF05003 		mov r3, #80												
 1173 0020 83F31188 		msr basepri, r3											
 1174 0024 BFF36F8F 		isb														
 1175 0028 BFF34F8F 		dsb														
 1176              	
 1177              	@ 0 "" 2
 1178              	.LVL118:
 212:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 213:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	);
 220:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 221:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1179              		.loc 2 223 2 view .LVU337
 1180              		.loc 2 223 2 is_stmt 0 view .LVU338
 1181              		.thumb
 1182              		.syntax unified
 1183              	.LBE26:
 1184              	.LBE25:
 954:./FreeRtos/src/queue.c **** 		{
 1185              		.loc 1 954 3 is_stmt 1 view .LVU339
 954:./FreeRtos/src/queue.c **** 		{
 1186              		.loc 1 954 16 is_stmt 0 view .LVU340
 1187 002c A26B     		ldr	r2, [r4, #56]
 954:./FreeRtos/src/queue.c **** 		{
 1188              		.loc 1 954 45 view .LVU341
 1189 002e E36B     		ldr	r3, [r4, #60]
 954:./FreeRtos/src/queue.c **** 		{
 1190              		.loc 1 954 5 view .LVU342
 1191 0030 9A42     		cmp	r2, r3
 1192 0032 21D3     		bcc	.L89
 954:./FreeRtos/src/queue.c **** 		{
 1193              		.loc 1 954 58 discriminator 1 view .LVU343
 1194 0034 022D     		cmp	r5, #2
 1195 0036 1FD0     		beq	.L89
1063:./FreeRtos/src/queue.c **** 		}
ARM GAS  /tmp/ccpGFB92.s 			page 66


 1196              		.loc 1 1063 12 view .LVU344
 1197 0038 0020     		movs	r0, #0
 1198              	.L90:
 1199              	.LVL119:
1066:./FreeRtos/src/queue.c **** 
 1200              		.loc 1 1066 2 is_stmt 1 view .LVU345
 1201              	.LBB27:
 1202              	.LBI27:
 224:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 225:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1203              		.loc 2 227 30 view .LVU346
 1204              	.LBB28:
 228:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 229:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 1205              		.loc 2 229 2 view .LVU347
 1206              		.syntax unified
 1207              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1208 003a 88F31188 			msr basepri, r8	
 1209              	@ 0 "" 2
 1210              	.LVL120:
 1211              		.loc 2 229 2 is_stmt 0 view .LVU348
 1212              		.thumb
 1213              		.syntax unified
 1214              	.LBE28:
 1215              	.LBE27:
1068:./FreeRtos/src/queue.c **** }
 1216              		.loc 1 1068 2 is_stmt 1 view .LVU349
1069:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 1217              		.loc 1 1069 1 is_stmt 0 view .LVU350
 1218 003e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1219              	.LVL121:
 1220              	.L97:
 927:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1221              		.loc 1 927 2 is_stmt 1 discriminator 1 view .LVU351
 1222 0042 40F29F32 		movw	r2, #927
 1223              	.LVL122:
 927:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1224              		.loc 1 927 2 is_stmt 0 discriminator 1 view .LVU352
 1225 0046 1F49     		ldr	r1, .L102
 1226              	.LVL123:
 927:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1227              		.loc 1 927 2 discriminator 1 view .LVU353
 1228 0048 1F48     		ldr	r0, .L102+4
 1229              	.LVL124:
 927:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1230              		.loc 1 927 2 discriminator 1 view .LVU354
 1231 004a FFF7FEFF 		bl	printf
 1232              	.LVL125:
 927:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1233              		.loc 1 927 2 discriminator 1 view .LVU355
 1234 004e DEE7     		b	.L86
 1235              	.L98:
 928:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1236              		.loc 1 928 2 discriminator 2 view .LVU356
 1237 0050 236C     		ldr	r3, [r4, #64]
ARM GAS  /tmp/ccpGFB92.s 			page 67


 1238 0052 002B     		cmp	r3, #0
 1239 0054 DCD0     		beq	.L87
 928:./FreeRtos/src/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1240              		.loc 1 928 2 is_stmt 1 view .LVU357
 1241 0056 4FF46872 		mov	r2, #928
 1242 005a 1A49     		ldr	r1, .L102
 1243 005c 1A48     		ldr	r0, .L102+4
 1244 005e FFF7FEFF 		bl	printf
 1245              	.LVL126:
 1246 0062 D5E7     		b	.L87
 1247              	.L99:
 929:./FreeRtos/src/queue.c **** 
 1248              		.loc 1 929 2 is_stmt 0 discriminator 2 view .LVU358
 1249 0064 E36B     		ldr	r3, [r4, #60]
 1250 0066 012B     		cmp	r3, #1
 1251 0068 D4D0     		beq	.L88
 929:./FreeRtos/src/queue.c **** 
 1252              		.loc 1 929 2 is_stmt 1 view .LVU359
 1253 006a 40F2A132 		movw	r2, #929
 1254 006e 1549     		ldr	r1, .L102
 1255 0070 1548     		ldr	r0, .L102+4
 1256 0072 FFF7FEFF 		bl	printf
 1257              	.LVL127:
 1258 0076 CDE7     		b	.L88
 1259              	.LVL128:
 1260              	.L89:
 1261              	.LBB29:
 956:./FreeRtos/src/queue.c **** 
 1262              		.loc 1 956 4 view .LVU360
 956:./FreeRtos/src/queue.c **** 
 1263              		.loc 1 956 17 is_stmt 0 view .LVU361
 1264 0078 94F84570 		ldrb	r7, [r4, #69]	@ zero_extendqisi2
 1265 007c 7FB2     		sxtb	r7, r7
 1266              	.LVL129:
 958:./FreeRtos/src/queue.c **** 
 1267              		.loc 1 958 39 is_stmt 1 view .LVU362
 965:./FreeRtos/src/queue.c **** 
 1268              		.loc 1 965 4 view .LVU363
 965:./FreeRtos/src/queue.c **** 
 1269              		.loc 1 965 13 is_stmt 0 view .LVU364
 1270 007e 2A46     		mov	r2, r5
 1271 0080 3146     		mov	r1, r6
 1272 0082 2046     		mov	r0, r4
 1273 0084 FFF7FEFF 		bl	prvCopyDataToQueue
 1274              	.LVL130:
 969:./FreeRtos/src/queue.c **** 			{
 1275              		.loc 1 969 4 is_stmt 1 view .LVU365
 969:./FreeRtos/src/queue.c **** 			{
 1276              		.loc 1 969 6 is_stmt 0 view .LVU366
 1277 0088 B7F1FF3F 		cmp	r7, #-1
 1278 008c 05D0     		beq	.L100
1055:./FreeRtos/src/queue.c **** 			}
 1279              		.loc 1 1055 5 is_stmt 1 view .LVU367
1055:./FreeRtos/src/queue.c **** 			}
 1280              		.loc 1 1055 45 is_stmt 0 view .LVU368
 1281 008e 0137     		adds	r7, r7, #1
 1282              	.LVL131:
ARM GAS  /tmp/ccpGFB92.s 			page 68


1055:./FreeRtos/src/queue.c **** 			}
 1283              		.loc 1 1055 24 view .LVU369
 1284 0090 7FB2     		sxtb	r7, r7
 1285              	.LVL132:
1055:./FreeRtos/src/queue.c **** 			}
 1286              		.loc 1 1055 22 view .LVU370
 1287 0092 84F84570 		strb	r7, [r4, #69]
1058:./FreeRtos/src/queue.c **** 		}
 1288              		.loc 1 1058 12 view .LVU371
 1289 0096 0120     		movs	r0, #1
 1290 0098 CFE7     		b	.L90
 1291              	.LVL133:
 1292              	.L100:
1024:./FreeRtos/src/queue.c **** 					{
 1293              		.loc 1 1024 6 is_stmt 1 view .LVU372
1024:./FreeRtos/src/queue.c **** 					{
 1294              		.loc 1 1024 10 is_stmt 0 view .LVU373
 1295 009a 636A     		ldr	r3, [r4, #36]
1024:./FreeRtos/src/queue.c **** 					{
 1296              		.loc 1 1024 8 view .LVU374
 1297 009c 0BB9     		cbnz	r3, .L101
1058:./FreeRtos/src/queue.c **** 		}
 1298              		.loc 1 1058 12 view .LVU375
 1299 009e 0120     		movs	r0, #1
 1300 00a0 CBE7     		b	.L90
 1301              	.L101:
1026:./FreeRtos/src/queue.c **** 						{
 1302              		.loc 1 1026 7 is_stmt 1 view .LVU376
1026:./FreeRtos/src/queue.c **** 						{
 1303              		.loc 1 1026 11 is_stmt 0 view .LVU377
 1304 00a2 04F12400 		add	r0, r4, #36
 1305 00a6 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1306              	.LVL134:
1026:./FreeRtos/src/queue.c **** 						{
 1307              		.loc 1 1026 9 view .LVU378
 1308 00aa 30B1     		cbz	r0, .L94
1030:./FreeRtos/src/queue.c **** 							{
 1309              		.loc 1 1030 8 is_stmt 1 view .LVU379
1030:./FreeRtos/src/queue.c **** 							{
 1310              		.loc 1 1030 10 is_stmt 0 view .LVU380
 1311 00ac B9F1000F 		cmp	r9, #0
 1312 00b0 05D0     		beq	.L95
1032:./FreeRtos/src/queue.c **** 							}
 1313              		.loc 1 1032 9 is_stmt 1 view .LVU381
1032:./FreeRtos/src/queue.c **** 							}
 1314              		.loc 1 1032 36 is_stmt 0 view .LVU382
 1315 00b2 0120     		movs	r0, #1
 1316 00b4 C9F80000 		str	r0, [r9]
 1317 00b8 BFE7     		b	.L90
 1318              	.L94:
1058:./FreeRtos/src/queue.c **** 		}
 1319              		.loc 1 1058 12 view .LVU383
 1320 00ba 0120     		movs	r0, #1
 1321 00bc BDE7     		b	.L90
 1322              	.L95:
 1323 00be 0120     		movs	r0, #1
 1324 00c0 BBE7     		b	.L90
ARM GAS  /tmp/ccpGFB92.s 			page 69


 1325              	.L103:
 1326 00c2 00BF     		.align	2
 1327              	.L102:
 1328 00c4 00000000 		.word	.LC0
 1329 00c8 18000000 		.word	.LC1
 1330              	.LBE29:
 1331              		.cfi_endproc
 1332              	.LFE135:
 1334              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1335              		.align	1
 1336              		.global	xQueueGiveFromISR
 1337              		.syntax unified
 1338              		.thumb
 1339              		.thumb_func
 1340              		.fpu fpv4-sp-d16
 1342              	xQueueGiveFromISR:
 1343              	.LVL135:
 1344              	.LFB136:
1073:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 1345              		.loc 1 1073 1 is_stmt 1 view -0
 1346              		.cfi_startproc
 1347              		@ args = 0, pretend = 0, frame = 0
 1348              		@ frame_needed = 0, uses_anonymous_args = 0
1073:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 1349              		.loc 1 1073 1 is_stmt 0 view .LVU385
 1350 0000 70B5     		push	{r4, r5, r6, lr}
 1351              	.LCFI17:
 1352              		.cfi_def_cfa_offset 16
 1353              		.cfi_offset 4, -16
 1354              		.cfi_offset 5, -12
 1355              		.cfi_offset 6, -8
 1356              		.cfi_offset 14, -4
 1357 0002 0E46     		mov	r6, r1
1074:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1358              		.loc 1 1074 1 is_stmt 1 view .LVU386
1075:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1359              		.loc 1 1075 1 view .LVU387
1076:./FreeRtos/src/queue.c **** 
 1360              		.loc 1 1076 1 view .LVU388
 1361              	.LVL136:
1084:./FreeRtos/src/queue.c **** 
 1362              		.loc 1 1084 2 view .LVU389
 1363 0004 0446     		mov	r4, r0
 1364 0006 08B3     		cbz	r0, .L115
 1365              	.LVL137:
 1366              	.L105:
1088:./FreeRtos/src/queue.c **** 
 1367              		.loc 1 1088 2 view .LVU390
 1368 0008 236C     		ldr	r3, [r4, #64]
 1369 000a 33BB     		cbnz	r3, .L116
 1370              	.L106:
1093:./FreeRtos/src/queue.c **** 
 1371              		.loc 1 1093 2 view .LVU391
 1372 000c 2368     		ldr	r3, [r4]
 1373 000e 5BB3     		cbz	r3, .L117
 1374              	.L107:
1109:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 70


 1375              		.loc 1 1109 2 view .LVU392
 1376 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1377              	.LVL138:
1111:./FreeRtos/src/queue.c **** 	{
 1378              		.loc 1 1111 2 view .LVU393
 1379              	.LBB30:
 1380              	.LBI30:
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 1381              		.loc 2 207 34 view .LVU394
 1382              	.LBB31:
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 1383              		.loc 2 209 1 view .LVU395
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 1384              		.loc 2 211 2 view .LVU396
 1385              		.syntax unified
 1386              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1387 0014 EFF31185 			mrs r5, basepri											
 1388 0018 4FF05003 		mov r3, #80												
 1389 001c 83F31188 		msr basepri, r3											
 1390 0020 BFF36F8F 		isb														
 1391 0024 BFF34F8F 		dsb														
 1392              	
 1393              	@ 0 "" 2
 1394              	.LVL139:
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 1395              		.loc 2 223 2 view .LVU397
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 1396              		.loc 2 223 2 is_stmt 0 view .LVU398
 1397              		.thumb
 1398              		.syntax unified
 1399              	.LBE31:
 1400              	.LBE30:
 1401              	.LBB32:
1113:./FreeRtos/src/queue.c **** 
 1402              		.loc 1 1113 3 is_stmt 1 view .LVU399
1113:./FreeRtos/src/queue.c **** 
 1403              		.loc 1 1113 21 is_stmt 0 view .LVU400
 1404 0028 A26B     		ldr	r2, [r4, #56]
 1405              	.LVL140:
1118:./FreeRtos/src/queue.c **** 		{
 1406              		.loc 1 1118 3 is_stmt 1 view .LVU401
1118:./FreeRtos/src/queue.c **** 		{
 1407              		.loc 1 1118 34 is_stmt 0 view .LVU402
 1408 002a E36B     		ldr	r3, [r4, #60]
1118:./FreeRtos/src/queue.c **** 		{
 1409              		.loc 1 1118 5 view .LVU403
 1410 002c 9342     		cmp	r3, r2
 1411 002e 32D9     		bls	.L110
 1412              	.LBB33:
1120:./FreeRtos/src/queue.c **** 
 1413              		.loc 1 1120 4 is_stmt 1 view .LVU404
1120:./FreeRtos/src/queue.c **** 
 1414              		.loc 1 1120 17 is_stmt 0 view .LVU405
 1415 0030 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1416 0034 5BB2     		sxtb	r3, r3
 1417              	.LVL141:
1122:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 71


 1418              		.loc 1 1122 39 is_stmt 1 view .LVU406
1130:./FreeRtos/src/queue.c **** 
 1419              		.loc 1 1130 4 view .LVU407
1130:./FreeRtos/src/queue.c **** 
 1420              		.loc 1 1130 51 is_stmt 0 view .LVU408
 1421 0036 0132     		adds	r2, r2, #1
 1422              	.LVL142:
1130:./FreeRtos/src/queue.c **** 
 1423              		.loc 1 1130 31 view .LVU409
 1424 0038 A263     		str	r2, [r4, #56]
1134:./FreeRtos/src/queue.c **** 			{
 1425              		.loc 1 1134 4 is_stmt 1 view .LVU410
1134:./FreeRtos/src/queue.c **** 			{
 1426              		.loc 1 1134 6 is_stmt 0 view .LVU411
 1427 003a B3F1FF3F 		cmp	r3, #-1
 1428 003e 1DD0     		beq	.L118
1220:./FreeRtos/src/queue.c **** 			}
 1429              		.loc 1 1220 5 is_stmt 1 view .LVU412
1220:./FreeRtos/src/queue.c **** 			}
 1430              		.loc 1 1220 45 is_stmt 0 view .LVU413
 1431 0040 0133     		adds	r3, r3, #1
 1432              	.LVL143:
1220:./FreeRtos/src/queue.c **** 			}
 1433              		.loc 1 1220 24 view .LVU414
 1434 0042 5BB2     		sxtb	r3, r3
 1435              	.LVL144:
1220:./FreeRtos/src/queue.c **** 			}
 1436              		.loc 1 1220 22 view .LVU415
 1437 0044 84F84530 		strb	r3, [r4, #69]
1223:./FreeRtos/src/queue.c **** 		}
 1438              		.loc 1 1223 12 view .LVU416
 1439 0048 0120     		movs	r0, #1
 1440 004a 25E0     		b	.L108
 1441              	.LVL145:
 1442              	.L115:
1223:./FreeRtos/src/queue.c **** 		}
 1443              		.loc 1 1223 12 view .LVU417
 1444              	.LBE33:
 1445              	.LBE32:
1084:./FreeRtos/src/queue.c **** 
 1446              		.loc 1 1084 2 is_stmt 1 discriminator 1 view .LVU418
 1447 004c 40F23C42 		movw	r2, #1084
 1448 0050 1549     		ldr	r1, .L120
 1449              	.LVL146:
1084:./FreeRtos/src/queue.c **** 
 1450              		.loc 1 1084 2 is_stmt 0 discriminator 1 view .LVU419
 1451 0052 1648     		ldr	r0, .L120+4
 1452              	.LVL147:
1084:./FreeRtos/src/queue.c **** 
 1453              		.loc 1 1084 2 discriminator 1 view .LVU420
 1454 0054 FFF7FEFF 		bl	printf
 1455              	.LVL148:
 1456 0058 D6E7     		b	.L105
 1457              	.L116:
1088:./FreeRtos/src/queue.c **** 
 1458              		.loc 1 1088 2 is_stmt 1 discriminator 1 view .LVU421
 1459 005a 4FF48862 		mov	r2, #1088
ARM GAS  /tmp/ccpGFB92.s 			page 72


 1460 005e 1249     		ldr	r1, .L120
 1461 0060 1248     		ldr	r0, .L120+4
 1462 0062 FFF7FEFF 		bl	printf
 1463              	.LVL149:
 1464 0066 D1E7     		b	.L106
 1465              	.L117:
1093:./FreeRtos/src/queue.c **** 
 1466              		.loc 1 1093 2 is_stmt 0 discriminator 2 view .LVU422
 1467 0068 6368     		ldr	r3, [r4, #4]
 1468 006a 002B     		cmp	r3, #0
 1469 006c D0D0     		beq	.L107
1093:./FreeRtos/src/queue.c **** 
 1470              		.loc 1 1093 2 is_stmt 1 view .LVU423
 1471 006e 40F24542 		movw	r2, #1093
 1472 0072 0D49     		ldr	r1, .L120
 1473 0074 0D48     		ldr	r0, .L120+4
 1474 0076 FFF7FEFF 		bl	printf
 1475              	.LVL150:
 1476 007a C9E7     		b	.L107
 1477              	.LVL151:
 1478              	.L118:
 1479              	.LBB36:
 1480              	.LBB34:
1189:./FreeRtos/src/queue.c **** 					{
 1481              		.loc 1 1189 6 view .LVU424
1189:./FreeRtos/src/queue.c **** 					{
 1482              		.loc 1 1189 10 is_stmt 0 view .LVU425
 1483 007c 636A     		ldr	r3, [r4, #36]
 1484              	.LVL152:
1189:./FreeRtos/src/queue.c **** 					{
 1485              		.loc 1 1189 8 view .LVU426
 1486 007e 0BB9     		cbnz	r3, .L119
1223:./FreeRtos/src/queue.c **** 		}
 1487              		.loc 1 1223 12 view .LVU427
 1488 0080 0120     		movs	r0, #1
 1489 0082 09E0     		b	.L108
 1490              	.L119:
1191:./FreeRtos/src/queue.c **** 						{
 1491              		.loc 1 1191 7 is_stmt 1 view .LVU428
1191:./FreeRtos/src/queue.c **** 						{
 1492              		.loc 1 1191 11 is_stmt 0 view .LVU429
 1493 0084 04F12400 		add	r0, r4, #36
 1494 0088 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1495              	.LVL153:
1191:./FreeRtos/src/queue.c **** 						{
 1496              		.loc 1 1191 9 view .LVU430
 1497 008c 38B1     		cbz	r0, .L112
1195:./FreeRtos/src/queue.c **** 							{
 1498              		.loc 1 1195 8 is_stmt 1 view .LVU431
1195:./FreeRtos/src/queue.c **** 							{
 1499              		.loc 1 1195 10 is_stmt 0 view .LVU432
 1500 008e 46B1     		cbz	r6, .L113
1197:./FreeRtos/src/queue.c **** 							}
 1501              		.loc 1 1197 9 is_stmt 1 view .LVU433
1197:./FreeRtos/src/queue.c **** 							}
 1502              		.loc 1 1197 36 is_stmt 0 view .LVU434
 1503 0090 0120     		movs	r0, #1
ARM GAS  /tmp/ccpGFB92.s 			page 73


 1504 0092 3060     		str	r0, [r6]
 1505 0094 00E0     		b	.L108
 1506              	.LVL154:
 1507              	.L110:
1197:./FreeRtos/src/queue.c **** 							}
 1508              		.loc 1 1197 36 view .LVU435
 1509              	.LBE34:
1228:./FreeRtos/src/queue.c **** 		}
 1510              		.loc 1 1228 12 view .LVU436
 1511 0096 0020     		movs	r0, #0
 1512              	.LVL155:
 1513              	.L108:
1228:./FreeRtos/src/queue.c **** 		}
 1514              		.loc 1 1228 12 view .LVU437
 1515              	.LBE36:
1231:./FreeRtos/src/queue.c **** 
 1516              		.loc 1 1231 2 is_stmt 1 view .LVU438
 1517              	.LBB37:
 1518              	.LBI37:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 1519              		.loc 2 227 30 view .LVU439
 1520              	.LBB38:
 1521              		.loc 2 229 2 view .LVU440
 1522              		.syntax unified
 1523              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1524 0098 85F31188 			msr basepri, r5	
 1525              	@ 0 "" 2
 1526              	.LVL156:
 1527              		.loc 2 229 2 is_stmt 0 view .LVU441
 1528              		.thumb
 1529              		.syntax unified
 1530              	.LBE38:
 1531              	.LBE37:
1233:./FreeRtos/src/queue.c **** }
 1532              		.loc 1 1233 2 is_stmt 1 view .LVU442
1234:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 1533              		.loc 1 1234 1 is_stmt 0 view .LVU443
 1534 009c 70BD     		pop	{r4, r5, r6, pc}
 1535              	.LVL157:
 1536              	.L112:
 1537              	.LBB39:
 1538              	.LBB35:
1223:./FreeRtos/src/queue.c **** 		}
 1539              		.loc 1 1223 12 view .LVU444
 1540 009e 0120     		movs	r0, #1
 1541 00a0 FAE7     		b	.L108
 1542              	.L113:
 1543 00a2 0120     		movs	r0, #1
 1544 00a4 F8E7     		b	.L108
 1545              	.L121:
 1546 00a6 00BF     		.align	2
 1547              	.L120:
 1548 00a8 00000000 		.word	.LC0
 1549 00ac 18000000 		.word	.LC1
 1550              	.LBE35:
 1551              	.LBE39:
 1552              		.cfi_endproc
ARM GAS  /tmp/ccpGFB92.s 			page 74


 1553              	.LFE136:
 1555              		.section	.text.xQueueGenericReceive,"ax",%progbits
 1556              		.align	1
 1557              		.global	xQueueGenericReceive
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1561              		.fpu fpv4-sp-d16
 1563              	xQueueGenericReceive:
 1564              	.LVL158:
 1565              	.LFB137:
1238:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1566              		.loc 1 1238 1 is_stmt 1 view -0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 16
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
1238:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1570              		.loc 1 1238 1 is_stmt 0 view .LVU446
 1571 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1572              	.LCFI18:
 1573              		.cfi_def_cfa_offset 24
 1574              		.cfi_offset 4, -24
 1575              		.cfi_offset 5, -20
 1576              		.cfi_offset 6, -16
 1577              		.cfi_offset 7, -12
 1578              		.cfi_offset 8, -8
 1579              		.cfi_offset 14, -4
 1580 0004 84B0     		sub	sp, sp, #16
 1581              	.LCFI19:
 1582              		.cfi_def_cfa_offset 40
 1583 0006 0E46     		mov	r6, r1
 1584 0008 0192     		str	r2, [sp, #4]
 1585 000a 9846     		mov	r8, r3
1239:./FreeRtos/src/queue.c **** TimeOut_t xTimeOut;
 1586              		.loc 1 1239 1 is_stmt 1 view .LVU447
 1587              	.LVL159:
1240:./FreeRtos/src/queue.c **** int8_t *pcOriginalReadPosition;
 1588              		.loc 1 1240 1 view .LVU448
1241:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1589              		.loc 1 1241 1 view .LVU449
1242:./FreeRtos/src/queue.c **** 
 1590              		.loc 1 1242 1 view .LVU450
1244:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1591              		.loc 1 1244 2 view .LVU451
 1592 000c 0446     		mov	r4, r0
 1593 000e 38B1     		cbz	r0, .L139
 1594              	.LVL160:
 1595              	.L123:
1245:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1596              		.loc 1 1245 2 view .LVU452
 1597 0010 6EB1     		cbz	r6, .L140
 1598              	.L124:
1248:./FreeRtos/src/queue.c **** 	}
 1599              		.loc 1 1248 3 view .LVU453
 1600 0012 FFF7FEFF 		bl	xTaskGetSchedulerState
 1601              	.LVL161:
 1602 0016 08B9     		cbnz	r0, .L125
ARM GAS  /tmp/ccpGFB92.s 			page 75


1248:./FreeRtos/src/queue.c **** 	}
 1603              		.loc 1 1248 3 is_stmt 0 discriminator 2 view .LVU454
 1604 0018 019B     		ldr	r3, [sp, #4]
 1605 001a 93B9     		cbnz	r3, .L141
 1606              	.L125:
1238:./FreeRtos/src/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1607              		.loc 1 1238 1 view .LVU455
 1608 001c 0025     		movs	r5, #0
 1609 001e 70E0     		b	.L126
 1610              	.LVL162:
 1611              	.L139:
1244:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1612              		.loc 1 1244 2 is_stmt 1 discriminator 1 view .LVU456
 1613 0020 40F2DC42 		movw	r2, #1244
 1614              	.LVL163:
1244:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1615              		.loc 1 1244 2 is_stmt 0 discriminator 1 view .LVU457
 1616 0024 5849     		ldr	r1, .L149
 1617              	.LVL164:
1244:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1618              		.loc 1 1244 2 discriminator 1 view .LVU458
 1619 0026 5948     		ldr	r0, .L149+4
 1620              	.LVL165:
1244:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1621              		.loc 1 1244 2 discriminator 1 view .LVU459
 1622 0028 FFF7FEFF 		bl	printf
 1623              	.LVL166:
1244:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1624              		.loc 1 1244 2 discriminator 1 view .LVU460
 1625 002c F0E7     		b	.L123
 1626              	.L140:
1245:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1627              		.loc 1 1245 2 discriminator 2 view .LVU461
 1628 002e 236C     		ldr	r3, [r4, #64]
 1629 0030 002B     		cmp	r3, #0
 1630 0032 EED0     		beq	.L124
1245:./FreeRtos/src/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 1631              		.loc 1 1245 2 is_stmt 1 view .LVU462
 1632 0034 40F2DD42 		movw	r2, #1245
 1633 0038 5349     		ldr	r1, .L149
 1634 003a 5448     		ldr	r0, .L149+4
 1635 003c FFF7FEFF 		bl	printf
 1636              	.LVL167:
 1637 0040 E7E7     		b	.L124
 1638              	.L141:
1248:./FreeRtos/src/queue.c **** 	}
 1639              		.loc 1 1248 3 view .LVU463
 1640 0042 4FF49C62 		mov	r2, #1248
 1641 0046 5049     		ldr	r1, .L149
 1642 0048 5048     		ldr	r0, .L149+4
 1643 004a FFF7FEFF 		bl	printf
 1644              	.LVL168:
 1645 004e E5E7     		b	.L125
 1646              	.LVL169:
 1647              	.L144:
 1648              	.LBB40:
1268:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 76


 1649              		.loc 1 1268 5 view .LVU464
1268:./FreeRtos/src/queue.c **** 
 1650              		.loc 1 1268 28 is_stmt 0 view .LVU465
 1651 0050 E568     		ldr	r5, [r4, #12]
 1652              	.LVL170:
1270:./FreeRtos/src/queue.c **** 
 1653              		.loc 1 1270 5 is_stmt 1 view .LVU466
 1654 0052 3146     		mov	r1, r6
 1655 0054 2046     		mov	r0, r4
 1656 0056 FFF7FEFF 		bl	prvCopyDataFromQueue
 1657              	.LVL171:
1272:./FreeRtos/src/queue.c **** 				{
 1658              		.loc 1 1272 5 view .LVU467
1272:./FreeRtos/src/queue.c **** 				{
 1659              		.loc 1 1272 7 is_stmt 0 view .LVU468
 1660 005a B8F1000F 		cmp	r8, #0
 1661 005e 1AD1     		bne	.L128
1274:./FreeRtos/src/queue.c **** 
 1662              		.loc 1 1274 35 is_stmt 1 view .LVU469
1277:./FreeRtos/src/queue.c **** 
 1663              		.loc 1 1277 6 view .LVU470
1277:./FreeRtos/src/queue.c **** 
 1664              		.loc 1 1277 53 is_stmt 0 view .LVU471
 1665 0060 7B1E     		subs	r3, r7, #1
1277:./FreeRtos/src/queue.c **** 
 1666              		.loc 1 1277 33 view .LVU472
 1667 0062 A363     		str	r3, [r4, #56]
1294:./FreeRtos/src/queue.c **** 					{
 1668              		.loc 1 1294 6 is_stmt 1 view .LVU473
1294:./FreeRtos/src/queue.c **** 					{
 1669              		.loc 1 1294 10 is_stmt 0 view .LVU474
 1670 0064 2369     		ldr	r3, [r4, #16]
1294:./FreeRtos/src/queue.c **** 					{
 1671              		.loc 1 1294 8 view .LVU475
 1672 0066 2BB9     		cbnz	r3, .L142
 1673              	.L129:
1334:./FreeRtos/src/queue.c **** 					}
 1674              		.loc 1 1334 31 is_stmt 1 view .LVU476
1338:./FreeRtos/src/queue.c **** 				return pdPASS;
 1675              		.loc 1 1338 5 view .LVU477
 1676 0068 FFF7FEFF 		bl	vPortExitCritical
 1677              	.LVL172:
1339:./FreeRtos/src/queue.c **** 			}
 1678              		.loc 1 1339 5 view .LVU478
1339:./FreeRtos/src/queue.c **** 			}
 1679              		.loc 1 1339 12 is_stmt 0 view .LVU479
 1680 006c 0120     		movs	r0, #1
 1681              	.LVL173:
 1682              	.L122:
1339:./FreeRtos/src/queue.c **** 			}
 1683              		.loc 1 1339 12 view .LVU480
 1684              	.LBE40:
1431:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 1685              		.loc 1 1431 1 view .LVU481
 1686 006e 04B0     		add	sp, sp, #16
 1687              	.LCFI20:
 1688              		.cfi_remember_state
ARM GAS  /tmp/ccpGFB92.s 			page 77


 1689              		.cfi_def_cfa_offset 24
 1690              		@ sp needed
 1691 0070 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1692              	.LVL174:
 1693              	.L142:
 1694              	.LCFI21:
 1695              		.cfi_restore_state
 1696              	.LBB41:
1296:./FreeRtos/src/queue.c **** 						{
 1697              		.loc 1 1296 7 is_stmt 1 view .LVU482
1296:./FreeRtos/src/queue.c **** 						{
 1698              		.loc 1 1296 11 is_stmt 0 view .LVU483
 1699 0074 04F11000 		add	r0, r4, #16
 1700 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1701              	.LVL175:
1296:./FreeRtos/src/queue.c **** 						{
 1702              		.loc 1 1296 9 view .LVU484
 1703 007c 0028     		cmp	r0, #0
 1704 007e F3D0     		beq	.L129
1298:./FreeRtos/src/queue.c **** 						}
 1705              		.loc 1 1298 8 is_stmt 1 view .LVU485
 1706 0080 4FF0E023 		mov	r3, #-536813568
 1707 0084 4FF08052 		mov	r2, #268435456
 1708 0088 C3F8042D 		str	r2, [r3, #3332]
1298:./FreeRtos/src/queue.c **** 						}
 1709              		.loc 1 1298 8 view .LVU486
 1710              		.syntax unified
 1711              	@ 1298 "./FreeRtos/src/queue.c" 1
 1712 008c BFF34F8F 		dsb
 1713              	@ 0 "" 2
1298:./FreeRtos/src/queue.c **** 						}
 1714              		.loc 1 1298 8 view .LVU487
 1715              	@ 1298 "./FreeRtos/src/queue.c" 1
 1716 0090 BFF36F8F 		isb
 1717              	@ 0 "" 2
1298:./FreeRtos/src/queue.c **** 						}
 1718              		.loc 1 1298 40 view .LVU488
 1719              		.thumb
 1720              		.syntax unified
 1721 0094 E8E7     		b	.L129
 1722              	.L128:
1312:./FreeRtos/src/queue.c **** 
 1723              		.loc 1 1312 32 view .LVU489
1316:./FreeRtos/src/queue.c **** 
 1724              		.loc 1 1316 6 view .LVU490
1316:./FreeRtos/src/queue.c **** 
 1725              		.loc 1 1316 28 is_stmt 0 view .LVU491
 1726 0096 E560     		str	r5, [r4, #12]
1320:./FreeRtos/src/queue.c **** 					{
 1727              		.loc 1 1320 6 is_stmt 1 view .LVU492
1320:./FreeRtos/src/queue.c **** 					{
 1728              		.loc 1 1320 10 is_stmt 0 view .LVU493
 1729 0098 636A     		ldr	r3, [r4, #36]
1320:./FreeRtos/src/queue.c **** 					{
 1730              		.loc 1 1320 8 view .LVU494
 1731 009a 002B     		cmp	r3, #0
 1732 009c E4D0     		beq	.L129
ARM GAS  /tmp/ccpGFB92.s 			page 78


1322:./FreeRtos/src/queue.c **** 						{
 1733              		.loc 1 1322 7 is_stmt 1 view .LVU495
1322:./FreeRtos/src/queue.c **** 						{
 1734              		.loc 1 1322 11 is_stmt 0 view .LVU496
 1735 009e 04F12400 		add	r0, r4, #36
 1736 00a2 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1737              	.LVL176:
1322:./FreeRtos/src/queue.c **** 						{
 1738              		.loc 1 1322 9 view .LVU497
 1739 00a6 0028     		cmp	r0, #0
 1740 00a8 DED0     		beq	.L129
1325:./FreeRtos/src/queue.c **** 						}
 1741              		.loc 1 1325 8 is_stmt 1 view .LVU498
 1742 00aa 4FF0E023 		mov	r3, #-536813568
 1743 00ae 4FF08052 		mov	r2, #268435456
 1744 00b2 C3F8042D 		str	r2, [r3, #3332]
1325:./FreeRtos/src/queue.c **** 						}
 1745              		.loc 1 1325 8 view .LVU499
 1746              		.syntax unified
 1747              	@ 1325 "./FreeRtos/src/queue.c" 1
 1748 00b6 BFF34F8F 		dsb
 1749              	@ 0 "" 2
1325:./FreeRtos/src/queue.c **** 						}
 1750              		.loc 1 1325 8 view .LVU500
 1751              	@ 1325 "./FreeRtos/src/queue.c" 1
 1752 00ba BFF36F8F 		isb
 1753              	@ 0 "" 2
1325:./FreeRtos/src/queue.c **** 						}
 1754              		.loc 1 1325 40 view .LVU501
 1755              		.thumb
 1756              		.syntax unified
 1757 00be D3E7     		b	.L129
 1758              	.LVL177:
 1759              	.L145:
1347:./FreeRtos/src/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 1760              		.loc 1 1347 6 view .LVU502
 1761 00c0 FFF7FEFF 		bl	vPortExitCritical
 1762              	.LVL178:
1348:./FreeRtos/src/queue.c **** 					return errQUEUE_EMPTY;
 1763              		.loc 1 1348 42 view .LVU503
1349:./FreeRtos/src/queue.c **** 				}
 1764              		.loc 1 1349 6 view .LVU504
1349:./FreeRtos/src/queue.c **** 				}
 1765              		.loc 1 1349 13 is_stmt 0 view .LVU505
 1766 00c4 0020     		movs	r0, #0
 1767 00c6 D2E7     		b	.L122
 1768              	.L146:
1355:./FreeRtos/src/queue.c **** 					xEntryTimeSet = pdTRUE;
 1769              		.loc 1 1355 6 is_stmt 1 view .LVU506
 1770 00c8 02A8     		add	r0, sp, #8
 1771 00ca FFF7FEFF 		bl	vTaskSetTimeOutState
 1772              	.LVL179:
1356:./FreeRtos/src/queue.c **** 				}
 1773              		.loc 1 1356 6 view .LVU507
1356:./FreeRtos/src/queue.c **** 				}
 1774              		.loc 1 1356 20 is_stmt 0 view .LVU508
 1775 00ce 0125     		movs	r5, #1
ARM GAS  /tmp/ccpGFB92.s 			page 79


 1776 00d0 21E0     		b	.L132
 1777              	.LVL180:
 1778              	.L147:
1356:./FreeRtos/src/queue.c **** 				}
 1779              		.loc 1 1356 20 view .LVU509
 1780              	.LBE41:
1371:./FreeRtos/src/queue.c **** 
 1781              		.loc 1 1371 3 is_stmt 1 discriminator 1 view .LVU510
 1782 00d2 0023     		movs	r3, #0
 1783 00d4 84F84430 		strb	r3, [r4, #68]
 1784 00d8 29E0     		b	.L133
 1785              	.L148:
1371:./FreeRtos/src/queue.c **** 
 1786              		.loc 1 1371 3 discriminator 4 view .LVU511
 1787 00da 0023     		movs	r3, #0
 1788 00dc 84F84530 		strb	r3, [r4, #69]
 1789 00e0 2BE0     		b	.L134
 1790              	.L136:
1411:./FreeRtos/src/queue.c **** 				( void ) xTaskResumeAll();
 1791              		.loc 1 1411 5 view .LVU512
 1792 00e2 2046     		mov	r0, r4
 1793 00e4 FFF7FEFF 		bl	prvUnlockQueue
 1794              	.LVL181:
1412:./FreeRtos/src/queue.c **** 			}
 1795              		.loc 1 1412 5 view .LVU513
1412:./FreeRtos/src/queue.c **** 			}
 1796              		.loc 1 1412 14 is_stmt 0 view .LVU514
 1797 00e8 FFF7FEFF 		bl	xTaskResumeAll
 1798              	.LVL182:
 1799 00ec 09E0     		b	.L126
 1800              	.L135:
1417:./FreeRtos/src/queue.c **** 			( void ) xTaskResumeAll();
 1801              		.loc 1 1417 4 is_stmt 1 view .LVU515
 1802 00ee 2046     		mov	r0, r4
 1803 00f0 FFF7FEFF 		bl	prvUnlockQueue
 1804              	.LVL183:
1418:./FreeRtos/src/queue.c **** 
 1805              		.loc 1 1418 4 view .LVU516
1418:./FreeRtos/src/queue.c **** 
 1806              		.loc 1 1418 13 is_stmt 0 view .LVU517
 1807 00f4 FFF7FEFF 		bl	xTaskResumeAll
 1808              	.LVL184:
1420:./FreeRtos/src/queue.c **** 			{
 1809              		.loc 1 1420 4 is_stmt 1 view .LVU518
1420:./FreeRtos/src/queue.c **** 			{
 1810              		.loc 1 1420 8 is_stmt 0 view .LVU519
 1811 00f8 2046     		mov	r0, r4
 1812 00fa FFF7FEFF 		bl	prvIsQueueEmpty
 1813              	.LVL185:
1420:./FreeRtos/src/queue.c **** 			{
 1814              		.loc 1 1420 6 view .LVU520
 1815 00fe 0028     		cmp	r0, #0
 1816 0100 3FD1     		bne	.L143
 1817              	.LVL186:
 1818              	.L126:
1256:./FreeRtos/src/queue.c **** 	{
 1819              		.loc 1 1256 2 is_stmt 1 view .LVU521
ARM GAS  /tmp/ccpGFB92.s 			page 80


1258:./FreeRtos/src/queue.c **** 		{
 1820              		.loc 1 1258 3 view .LVU522
 1821 0102 FFF7FEFF 		bl	vPortEnterCritical
 1822              	.LVL187:
 1823              	.LBB42:
1260:./FreeRtos/src/queue.c **** 
 1824              		.loc 1 1260 4 view .LVU523
1260:./FreeRtos/src/queue.c **** 
 1825              		.loc 1 1260 22 is_stmt 0 view .LVU524
 1826 0106 A76B     		ldr	r7, [r4, #56]
 1827              	.LVL188:
1264:./FreeRtos/src/queue.c **** 			{
 1828              		.loc 1 1264 4 is_stmt 1 view .LVU525
1264:./FreeRtos/src/queue.c **** 			{
 1829              		.loc 1 1264 6 is_stmt 0 view .LVU526
 1830 0108 002F     		cmp	r7, #0
 1831 010a A1D1     		bne	.L144
1343:./FreeRtos/src/queue.c **** 				{
 1832              		.loc 1 1343 5 is_stmt 1 view .LVU527
1343:./FreeRtos/src/queue.c **** 				{
 1833              		.loc 1 1343 22 is_stmt 0 view .LVU528
 1834 010c 019B     		ldr	r3, [sp, #4]
1343:./FreeRtos/src/queue.c **** 				{
 1835              		.loc 1 1343 7 view .LVU529
 1836 010e 002B     		cmp	r3, #0
 1837 0110 D6D0     		beq	.L145
1351:./FreeRtos/src/queue.c **** 				{
 1838              		.loc 1 1351 10 is_stmt 1 view .LVU530
1351:./FreeRtos/src/queue.c **** 				{
 1839              		.loc 1 1351 12 is_stmt 0 view .LVU531
 1840 0112 002D     		cmp	r5, #0
 1841 0114 D8D0     		beq	.L146
 1842              	.LVL189:
 1843              	.L132:
1361:./FreeRtos/src/queue.c **** 				}
 1844              		.loc 1 1361 30 is_stmt 1 view .LVU532
 1845              	.LBE42:
1365:./FreeRtos/src/queue.c **** 
 1846              		.loc 1 1365 3 view .LVU533
 1847 0116 FFF7FEFF 		bl	vPortExitCritical
 1848              	.LVL190:
1370:./FreeRtos/src/queue.c **** 		prvLockQueue( pxQueue );
 1849              		.loc 1 1370 3 view .LVU534
 1850 011a FFF7FEFF 		bl	vTaskSuspendAll
 1851              	.LVL191:
1371:./FreeRtos/src/queue.c **** 
 1852              		.loc 1 1371 3 view .LVU535
 1853 011e FFF7FEFF 		bl	vPortEnterCritical
 1854              	.LVL192:
1371:./FreeRtos/src/queue.c **** 
 1855              		.loc 1 1371 3 view .LVU536
 1856 0122 94F84420 		ldrb	r2, [r4, #68]	@ zero_extendqisi2
 1857 0126 52B2     		sxtb	r2, r2
 1858 0128 B2F1FF3F 		cmp	r2, #-1
 1859 012c D1D0     		beq	.L147
 1860              	.L133:
1371:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 81


 1861              		.loc 1 1371 3 discriminator 3 view .LVU537
 1862 012e 94F84520 		ldrb	r2, [r4, #69]	@ zero_extendqisi2
 1863 0132 52B2     		sxtb	r2, r2
 1864 0134 B2F1FF3F 		cmp	r2, #-1
 1865 0138 CFD0     		beq	.L148
 1866              	.L134:
1371:./FreeRtos/src/queue.c **** 
 1867              		.loc 1 1371 3 discriminator 6 view .LVU538
 1868 013a FFF7FEFF 		bl	vPortExitCritical
 1869              	.LVL193:
1374:./FreeRtos/src/queue.c **** 		{
 1870              		.loc 1 1374 3 discriminator 6 view .LVU539
1374:./FreeRtos/src/queue.c **** 		{
 1871              		.loc 1 1374 7 is_stmt 0 discriminator 6 view .LVU540
 1872 013e 01A9     		add	r1, sp, #4
 1873 0140 02A8     		add	r0, sp, #8
 1874 0142 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1875              	.LVL194:
1374:./FreeRtos/src/queue.c **** 		{
 1876              		.loc 1 1374 5 discriminator 6 view .LVU541
 1877 0146 0028     		cmp	r0, #0
 1878 0148 D1D1     		bne	.L135
1376:./FreeRtos/src/queue.c **** 			{
 1879              		.loc 1 1376 4 is_stmt 1 view .LVU542
1376:./FreeRtos/src/queue.c **** 			{
 1880              		.loc 1 1376 8 is_stmt 0 view .LVU543
 1881 014a 2046     		mov	r0, r4
 1882 014c FFF7FEFF 		bl	prvIsQueueEmpty
 1883              	.LVL195:
1376:./FreeRtos/src/queue.c **** 			{
 1884              		.loc 1 1376 6 view .LVU544
 1885 0150 0028     		cmp	r0, #0
 1886 0152 C6D0     		beq	.L136
1378:./FreeRtos/src/queue.c **** 
 1887              		.loc 1 1378 46 is_stmt 1 view .LVU545
1397:./FreeRtos/src/queue.c **** 				prvUnlockQueue( pxQueue );
 1888              		.loc 1 1397 5 view .LVU546
 1889 0154 0199     		ldr	r1, [sp, #4]
 1890 0156 04F12400 		add	r0, r4, #36
 1891 015a FFF7FEFF 		bl	vTaskPlaceOnEventList
 1892              	.LVL196:
1398:./FreeRtos/src/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1893              		.loc 1 1398 5 view .LVU547
 1894 015e 2046     		mov	r0, r4
 1895 0160 FFF7FEFF 		bl	prvUnlockQueue
 1896              	.LVL197:
1399:./FreeRtos/src/queue.c **** 				{
 1897              		.loc 1 1399 5 view .LVU548
1399:./FreeRtos/src/queue.c **** 				{
 1898              		.loc 1 1399 9 is_stmt 0 view .LVU549
 1899 0164 FFF7FEFF 		bl	xTaskResumeAll
 1900              	.LVL198:
1399:./FreeRtos/src/queue.c **** 				{
 1901              		.loc 1 1399 7 view .LVU550
 1902 0168 0028     		cmp	r0, #0
 1903 016a CAD1     		bne	.L126
1401:./FreeRtos/src/queue.c **** 				}
ARM GAS  /tmp/ccpGFB92.s 			page 82


 1904              		.loc 1 1401 6 is_stmt 1 view .LVU551
 1905 016c 4FF0E023 		mov	r3, #-536813568
 1906 0170 4FF08052 		mov	r2, #268435456
 1907 0174 C3F8042D 		str	r2, [r3, #3332]
1401:./FreeRtos/src/queue.c **** 				}
 1908              		.loc 1 1401 6 view .LVU552
 1909              		.syntax unified
 1910              	@ 1401 "./FreeRtos/src/queue.c" 1
 1911 0178 BFF34F8F 		dsb
 1912              	@ 0 "" 2
1401:./FreeRtos/src/queue.c **** 				}
 1913              		.loc 1 1401 6 view .LVU553
 1914              	@ 1401 "./FreeRtos/src/queue.c" 1
 1915 017c BFF36F8F 		isb
 1916              	@ 0 "" 2
1401:./FreeRtos/src/queue.c **** 				}
 1917              		.loc 1 1401 28 view .LVU554
 1918              		.thumb
 1919              		.syntax unified
 1920 0180 BFE7     		b	.L126
 1921              	.L143:
1423:./FreeRtos/src/queue.c **** 			}
 1922              		.loc 1 1423 12 is_stmt 0 view .LVU555
 1923 0182 0020     		movs	r0, #0
 1924 0184 73E7     		b	.L122
 1925              	.L150:
 1926 0186 00BF     		.align	2
 1927              	.L149:
 1928 0188 00000000 		.word	.LC0
 1929 018c 18000000 		.word	.LC1
 1930              		.cfi_endproc
 1931              	.LFE137:
 1933              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1934              		.align	1
 1935              		.global	xQueueReceiveFromISR
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv4-sp-d16
 1941              	xQueueReceiveFromISR:
 1942              	.LVL199:
 1943              	.LFB138:
1435:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 1944              		.loc 1 1435 1 is_stmt 1 view -0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
1435:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 1948              		.loc 1 1435 1 is_stmt 0 view .LVU557
 1949 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1950              	.LCFI22:
 1951              		.cfi_def_cfa_offset 32
 1952              		.cfi_offset 3, -32
 1953              		.cfi_offset 4, -28
 1954              		.cfi_offset 5, -24
 1955              		.cfi_offset 6, -20
 1956              		.cfi_offset 7, -16
ARM GAS  /tmp/ccpGFB92.s 			page 83


 1957              		.cfi_offset 8, -12
 1958              		.cfi_offset 9, -8
 1959              		.cfi_offset 14, -4
 1960 0004 0C46     		mov	r4, r1
 1961 0006 1646     		mov	r6, r2
1436:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 1962              		.loc 1 1436 1 is_stmt 1 view .LVU558
1437:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1963              		.loc 1 1437 1 view .LVU559
1438:./FreeRtos/src/queue.c **** 
 1964              		.loc 1 1438 1 view .LVU560
 1965              	.LVL200:
1440:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1966              		.loc 1 1440 2 view .LVU561
 1967 0008 0546     		mov	r5, r0
 1968 000a 98B1     		cbz	r0, .L161
 1969              	.LVL201:
 1970              	.L152:
1441:./FreeRtos/src/queue.c **** 
 1971              		.loc 1 1441 2 view .LVU562
 1972 000c CCB1     		cbz	r4, .L162
 1973              	.L153:
1457:./FreeRtos/src/queue.c **** 
 1974              		.loc 1 1457 2 view .LVU563
 1975 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 1976              	.LVL202:
1459:./FreeRtos/src/queue.c **** 	{
 1977              		.loc 1 1459 2 view .LVU564
 1978              	.LBB43:
 1979              	.LBI43:
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 1980              		.loc 2 207 34 view .LVU565
 1981              	.LBB44:
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 1982              		.loc 2 209 1 view .LVU566
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 1983              		.loc 2 211 2 view .LVU567
 1984              		.syntax unified
 1985              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 1986 0012 EFF31189 			mrs r9, basepri											
 1987 0016 4FF05003 		mov r3, #80												
 1988 001a 83F31188 		msr basepri, r3											
 1989 001e BFF36F8F 		isb														
 1990 0022 BFF34F8F 		dsb														
 1991              	
 1992              	@ 0 "" 2
 1993              	.LVL203:
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 1994              		.loc 2 223 2 view .LVU568
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 1995              		.loc 2 223 2 is_stmt 0 view .LVU569
 1996              		.thumb
 1997              		.syntax unified
 1998              	.LBE44:
 1999              	.LBE43:
 2000              	.LBB45:
1461:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 84


 2001              		.loc 1 1461 3 is_stmt 1 view .LVU570
1461:./FreeRtos/src/queue.c **** 
 2002              		.loc 1 1461 21 is_stmt 0 view .LVU571
 2003 0026 AF6B     		ldr	r7, [r5, #56]
 2004              	.LVL204:
1464:./FreeRtos/src/queue.c **** 		{
 2005              		.loc 1 1464 3 is_stmt 1 view .LVU572
1464:./FreeRtos/src/queue.c **** 		{
 2006              		.loc 1 1464 5 is_stmt 0 view .LVU573
 2007 0028 AFB9     		cbnz	r7, .L163
1515:./FreeRtos/src/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2008              		.loc 1 1515 12 view .LVU574
 2009 002a 0020     		movs	r0, #0
 2010              	.LVL205:
 2011              	.L154:
1516:./FreeRtos/src/queue.c **** 		}
 2012              		.loc 1 1516 49 is_stmt 1 view .LVU575
 2013              	.LBE45:
1519:./FreeRtos/src/queue.c **** 
 2014              		.loc 1 1519 2 view .LVU576
 2015              	.LBB47:
 2016              	.LBI47:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 2017              		.loc 2 227 30 view .LVU577
 2018              	.LBB48:
 2019              		.loc 2 229 2 view .LVU578
 2020              		.syntax unified
 2021              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 2022 002c 89F31188 			msr basepri, r9	
 2023              	@ 0 "" 2
 2024              	.LVL206:
 2025              		.loc 2 229 2 is_stmt 0 view .LVU579
 2026              		.thumb
 2027              		.syntax unified
 2028              	.LBE48:
 2029              	.LBE47:
1521:./FreeRtos/src/queue.c **** }
 2030              		.loc 1 1521 2 is_stmt 1 view .LVU580
1522:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2031              		.loc 1 1522 1 is_stmt 0 view .LVU581
 2032 0030 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2033              	.LVL207:
 2034              	.L161:
1440:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2035              		.loc 1 1440 2 is_stmt 1 discriminator 1 view .LVU582
 2036 0034 4FF4B462 		mov	r2, #1440
 2037              	.LVL208:
1440:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2038              		.loc 1 1440 2 is_stmt 0 discriminator 1 view .LVU583
 2039 0038 1A49     		ldr	r1, .L166
 2040              	.LVL209:
1440:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2041              		.loc 1 1440 2 discriminator 1 view .LVU584
 2042 003a 1B48     		ldr	r0, .L166+4
 2043              	.LVL210:
1440:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2044              		.loc 1 1440 2 discriminator 1 view .LVU585
ARM GAS  /tmp/ccpGFB92.s 			page 85


 2045 003c FFF7FEFF 		bl	printf
 2046              	.LVL211:
 2047 0040 E4E7     		b	.L152
 2048              	.L162:
1441:./FreeRtos/src/queue.c **** 
 2049              		.loc 1 1441 2 discriminator 2 view .LVU586
 2050 0042 2B6C     		ldr	r3, [r5, #64]
 2051 0044 002B     		cmp	r3, #0
 2052 0046 E2D0     		beq	.L153
1441:./FreeRtos/src/queue.c **** 
 2053              		.loc 1 1441 2 is_stmt 1 view .LVU587
 2054 0048 40F2A152 		movw	r2, #1441
 2055 004c 1549     		ldr	r1, .L166
 2056 004e 1648     		ldr	r0, .L166+4
 2057 0050 FFF7FEFF 		bl	printf
 2058              	.LVL212:
 2059 0054 DBE7     		b	.L153
 2060              	.LVL213:
 2061              	.L163:
 2062              	.LBB49:
 2063              	.LBB46:
1466:./FreeRtos/src/queue.c **** 
 2064              		.loc 1 1466 4 view .LVU588
1466:./FreeRtos/src/queue.c **** 
 2065              		.loc 1 1466 17 is_stmt 0 view .LVU589
 2066 0056 95F84480 		ldrb	r8, [r5, #68]	@ zero_extendqisi2
 2067 005a 4FFA88F8 		sxtb	r8, r8
 2068              	.LVL214:
1468:./FreeRtos/src/queue.c **** 
 2069              		.loc 1 1468 42 is_stmt 1 view .LVU590
1470:./FreeRtos/src/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 2070              		.loc 1 1470 4 view .LVU591
 2071 005e 2146     		mov	r1, r4
 2072 0060 2846     		mov	r0, r5
 2073 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 2074              	.LVL215:
1471:./FreeRtos/src/queue.c **** 
 2075              		.loc 1 1471 4 view .LVU592
1471:./FreeRtos/src/queue.c **** 
 2076              		.loc 1 1471 51 is_stmt 0 view .LVU593
 2077 0066 013F     		subs	r7, r7, #1
 2078              	.LVL216:
1471:./FreeRtos/src/queue.c **** 
 2079              		.loc 1 1471 31 view .LVU594
 2080 0068 AF63     		str	r7, [r5, #56]
1477:./FreeRtos/src/queue.c **** 			{
 2081              		.loc 1 1477 4 is_stmt 1 view .LVU595
1477:./FreeRtos/src/queue.c **** 			{
 2082              		.loc 1 1477 6 is_stmt 0 view .LVU596
 2083 006a B8F1FF3F 		cmp	r8, #-1
 2084 006e 07D0     		beq	.L164
1508:./FreeRtos/src/queue.c **** 			}
 2085              		.loc 1 1508 5 is_stmt 1 view .LVU597
1508:./FreeRtos/src/queue.c **** 			}
 2086              		.loc 1 1508 45 is_stmt 0 view .LVU598
 2087 0070 08F10108 		add	r8, r8, #1
 2088              	.LVL217:
ARM GAS  /tmp/ccpGFB92.s 			page 86


1508:./FreeRtos/src/queue.c **** 			}
 2089              		.loc 1 1508 24 view .LVU599
 2090 0074 4FFA88F8 		sxtb	r8, r8
 2091              	.LVL218:
1508:./FreeRtos/src/queue.c **** 			}
 2092              		.loc 1 1508 22 view .LVU600
 2093 0078 85F84480 		strb	r8, [r5, #68]
1511:./FreeRtos/src/queue.c **** 		}
 2094              		.loc 1 1511 12 view .LVU601
 2095 007c 0120     		movs	r0, #1
 2096 007e D5E7     		b	.L154
 2097              	.LVL219:
 2098              	.L164:
1479:./FreeRtos/src/queue.c **** 				{
 2099              		.loc 1 1479 5 is_stmt 1 view .LVU602
1479:./FreeRtos/src/queue.c **** 				{
 2100              		.loc 1 1479 9 is_stmt 0 view .LVU603
 2101 0080 2B69     		ldr	r3, [r5, #16]
1479:./FreeRtos/src/queue.c **** 				{
 2102              		.loc 1 1479 7 view .LVU604
 2103 0082 0BB9     		cbnz	r3, .L165
1511:./FreeRtos/src/queue.c **** 		}
 2104              		.loc 1 1511 12 view .LVU605
 2105 0084 0120     		movs	r0, #1
 2106 0086 D1E7     		b	.L154
 2107              	.L165:
1481:./FreeRtos/src/queue.c **** 					{
 2108              		.loc 1 1481 6 is_stmt 1 view .LVU606
1481:./FreeRtos/src/queue.c **** 					{
 2109              		.loc 1 1481 10 is_stmt 0 view .LVU607
 2110 0088 05F11000 		add	r0, r5, #16
 2111 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 2112              	.LVL220:
1481:./FreeRtos/src/queue.c **** 					{
 2113              		.loc 1 1481 8 view .LVU608
 2114 0090 18B1     		cbz	r0, .L158
1485:./FreeRtos/src/queue.c **** 						{
 2115              		.loc 1 1485 7 is_stmt 1 view .LVU609
1485:./FreeRtos/src/queue.c **** 						{
 2116              		.loc 1 1485 9 is_stmt 0 view .LVU610
 2117 0092 26B1     		cbz	r6, .L159
1487:./FreeRtos/src/queue.c **** 						}
 2118              		.loc 1 1487 8 is_stmt 1 view .LVU611
1487:./FreeRtos/src/queue.c **** 						}
 2119              		.loc 1 1487 35 is_stmt 0 view .LVU612
 2120 0094 0120     		movs	r0, #1
 2121 0096 3060     		str	r0, [r6]
 2122 0098 C8E7     		b	.L154
 2123              	.L158:
1511:./FreeRtos/src/queue.c **** 		}
 2124              		.loc 1 1511 12 view .LVU613
 2125 009a 0120     		movs	r0, #1
 2126 009c C6E7     		b	.L154
 2127              	.L159:
 2128 009e 0120     		movs	r0, #1
 2129 00a0 C4E7     		b	.L154
 2130              	.L167:
ARM GAS  /tmp/ccpGFB92.s 			page 87


 2131 00a2 00BF     		.align	2
 2132              	.L166:
 2133 00a4 00000000 		.word	.LC0
 2134 00a8 18000000 		.word	.LC1
 2135              	.LBE46:
 2136              	.LBE49:
 2137              		.cfi_endproc
 2138              	.LFE138:
 2140              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2141              		.align	1
 2142              		.global	xQueuePeekFromISR
 2143              		.syntax unified
 2144              		.thumb
 2145              		.thumb_func
 2146              		.fpu fpv4-sp-d16
 2148              	xQueuePeekFromISR:
 2149              	.LVL221:
 2150              	.LFB139:
1526:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 2151              		.loc 1 1526 1 is_stmt 1 view -0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
1526:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 2155              		.loc 1 1526 1 is_stmt 0 view .LVU615
 2156 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2157              	.LCFI23:
 2158              		.cfi_def_cfa_offset 24
 2159              		.cfi_offset 3, -24
 2160              		.cfi_offset 4, -20
 2161              		.cfi_offset 5, -16
 2162              		.cfi_offset 6, -12
 2163              		.cfi_offset 7, -8
 2164              		.cfi_offset 14, -4
 2165 0002 0C46     		mov	r4, r1
1527:./FreeRtos/src/queue.c **** UBaseType_t uxSavedInterruptStatus;
 2166              		.loc 1 1527 1 is_stmt 1 view .LVU616
1528:./FreeRtos/src/queue.c **** int8_t *pcOriginalReadPosition;
 2167              		.loc 1 1528 1 view .LVU617
1529:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2168              		.loc 1 1529 1 view .LVU618
1530:./FreeRtos/src/queue.c **** 
 2169              		.loc 1 1530 1 view .LVU619
 2170              	.LVL222:
1532:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2171              		.loc 1 1532 2 view .LVU620
 2172 0004 0546     		mov	r5, r0
 2173 0006 A0B1     		cbz	r0, .L175
 2174              	.LVL223:
 2175              	.L169:
1533:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2176              		.loc 1 1533 2 view .LVU621
 2177 0008 D4B1     		cbz	r4, .L176
 2178              	.L170:
1534:./FreeRtos/src/queue.c **** 
 2179              		.loc 1 1534 2 view .LVU622
 2180 000a 2B6C     		ldr	r3, [r5, #64]
ARM GAS  /tmp/ccpGFB92.s 			page 88


 2181 000c 13B3     		cbz	r3, .L177
 2182              	.L171:
1550:./FreeRtos/src/queue.c **** 
 2183              		.loc 1 1550 2 view .LVU623
 2184 000e FFF7FEFF 		bl	vPortValidateInterruptPriority
 2185              	.LVL224:
1552:./FreeRtos/src/queue.c **** 	{
 2186              		.loc 1 1552 2 view .LVU624
 2187              	.LBB50:
 2188              	.LBI50:
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 2189              		.loc 2 207 34 view .LVU625
 2190              	.LBB51:
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 2191              		.loc 2 209 1 view .LVU626
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 2192              		.loc 2 211 2 view .LVU627
 2193              		.syntax unified
 2194              	@ 211 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 2195 0012 EFF31186 			mrs r6, basepri											
 2196 0016 4FF05003 		mov r3, #80												
 2197 001a 83F31188 		msr basepri, r3											
 2198 001e BFF36F8F 		isb														
 2199 0022 BFF34F8F 		dsb														
 2200              	
 2201              	@ 0 "" 2
 2202              	.LVL225:
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 2203              		.loc 2 223 2 view .LVU628
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 2204              		.loc 2 223 2 is_stmt 0 view .LVU629
 2205              		.thumb
 2206              		.syntax unified
 2207              	.LBE51:
 2208              	.LBE50:
1555:./FreeRtos/src/queue.c **** 		{
 2209              		.loc 1 1555 3 is_stmt 1 view .LVU630
1555:./FreeRtos/src/queue.c **** 		{
 2210              		.loc 1 1555 14 is_stmt 0 view .LVU631
 2211 0026 AB6B     		ldr	r3, [r5, #56]
1555:./FreeRtos/src/queue.c **** 		{
 2212              		.loc 1 1555 5 view .LVU632
 2213 0028 DBB9     		cbnz	r3, .L178
1569:./FreeRtos/src/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 2214              		.loc 1 1569 12 view .LVU633
 2215 002a 0020     		movs	r0, #0
 2216              	.L172:
 2217              	.LVL226:
1570:./FreeRtos/src/queue.c **** 		}
 2218              		.loc 1 1570 46 is_stmt 1 view .LVU634
1573:./FreeRtos/src/queue.c **** 
 2219              		.loc 1 1573 2 view .LVU635
 2220              	.LBB52:
 2221              	.LBI52:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 2222              		.loc 2 227 30 view .LVU636
 2223              	.LBB53:
ARM GAS  /tmp/ccpGFB92.s 			page 89


 2224              		.loc 2 229 2 view .LVU637
 2225              		.syntax unified
 2226              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 2227 002c 86F31188 			msr basepri, r6	
 2228              	@ 0 "" 2
 2229              	.LVL227:
 2230              		.loc 2 229 2 is_stmt 0 view .LVU638
 2231              		.thumb
 2232              		.syntax unified
 2233              	.LBE53:
 2234              	.LBE52:
1575:./FreeRtos/src/queue.c **** }
 2235              		.loc 1 1575 2 is_stmt 1 view .LVU639
1576:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2236              		.loc 1 1576 1 is_stmt 0 view .LVU640
 2237 0030 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2238              	.LVL228:
 2239              	.L175:
1532:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2240              		.loc 1 1532 2 is_stmt 1 discriminator 1 view .LVU641
 2241 0032 40F2FC52 		movw	r2, #1532
 2242 0036 0F49     		ldr	r1, .L179
 2243              	.LVL229:
1532:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2244              		.loc 1 1532 2 is_stmt 0 discriminator 1 view .LVU642
 2245 0038 0F48     		ldr	r0, .L179+4
 2246              	.LVL230:
1532:./FreeRtos/src/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2247              		.loc 1 1532 2 discriminator 1 view .LVU643
 2248 003a FFF7FEFF 		bl	printf
 2249              	.LVL231:
 2250 003e E3E7     		b	.L169
 2251              	.L176:
1533:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2252              		.loc 1 1533 2 discriminator 2 view .LVU644
 2253 0040 2B6C     		ldr	r3, [r5, #64]
 2254 0042 002B     		cmp	r3, #0
 2255 0044 E1D0     		beq	.L170
1533:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2256              		.loc 1 1533 2 is_stmt 1 view .LVU645
 2257 0046 40F2FD52 		movw	r2, #1533
 2258 004a 0A49     		ldr	r1, .L179
 2259 004c 0A48     		ldr	r0, .L179+4
 2260 004e FFF7FEFF 		bl	printf
 2261              	.LVL232:
 2262 0052 DAE7     		b	.L170
 2263              	.L177:
1534:./FreeRtos/src/queue.c **** 
 2264              		.loc 1 1534 2 discriminator 1 view .LVU646
 2265 0054 40F2FE52 		movw	r2, #1534
 2266 0058 0649     		ldr	r1, .L179
 2267 005a 0748     		ldr	r0, .L179+4
 2268 005c FFF7FEFF 		bl	printf
 2269              	.LVL233:
 2270 0060 D5E7     		b	.L171
 2271              	.LVL234:
 2272              	.L178:
ARM GAS  /tmp/ccpGFB92.s 			page 90


1557:./FreeRtos/src/queue.c **** 
 2273              		.loc 1 1557 39 view .LVU647
1561:./FreeRtos/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2274              		.loc 1 1561 4 view .LVU648
1561:./FreeRtos/src/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 2275              		.loc 1 1561 27 is_stmt 0 view .LVU649
 2276 0062 EF68     		ldr	r7, [r5, #12]
 2277              	.LVL235:
1562:./FreeRtos/src/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2278              		.loc 1 1562 4 is_stmt 1 view .LVU650
 2279 0064 2146     		mov	r1, r4
 2280 0066 2846     		mov	r0, r5
 2281 0068 FFF7FEFF 		bl	prvCopyDataFromQueue
 2282              	.LVL236:
1563:./FreeRtos/src/queue.c **** 
 2283              		.loc 1 1563 4 view .LVU651
1563:./FreeRtos/src/queue.c **** 
 2284              		.loc 1 1563 26 is_stmt 0 view .LVU652
 2285 006c EF60     		str	r7, [r5, #12]
1565:./FreeRtos/src/queue.c **** 		}
 2286              		.loc 1 1565 4 is_stmt 1 view .LVU653
 2287              	.LVL237:
1565:./FreeRtos/src/queue.c **** 		}
 2288              		.loc 1 1565 12 is_stmt 0 view .LVU654
 2289 006e 0120     		movs	r0, #1
 2290 0070 DCE7     		b	.L172
 2291              	.L180:
 2292 0072 00BF     		.align	2
 2293              	.L179:
 2294 0074 00000000 		.word	.LC0
 2295 0078 18000000 		.word	.LC1
 2296              		.cfi_endproc
 2297              	.LFE139:
 2299              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2300              		.align	1
 2301              		.global	uxQueueMessagesWaiting
 2302              		.syntax unified
 2303              		.thumb
 2304              		.thumb_func
 2305              		.fpu fpv4-sp-d16
 2307              	uxQueueMessagesWaiting:
 2308              	.LVL238:
 2309              	.LFB140:
1580:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
 2310              		.loc 1 1580 1 is_stmt 1 view -0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 0
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
1580:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
 2314              		.loc 1 1580 1 is_stmt 0 view .LVU656
 2315 0000 10B5     		push	{r4, lr}
 2316              	.LCFI24:
 2317              		.cfi_def_cfa_offset 8
 2318              		.cfi_offset 4, -8
 2319              		.cfi_offset 14, -4
1581:./FreeRtos/src/queue.c **** 
 2320              		.loc 1 1581 1 is_stmt 1 view .LVU657
ARM GAS  /tmp/ccpGFB92.s 			page 91


1583:./FreeRtos/src/queue.c **** 
 2321              		.loc 1 1583 2 view .LVU658
 2322 0002 0446     		mov	r4, r0
 2323 0004 30B1     		cbz	r0, .L184
 2324              	.LVL239:
 2325              	.L182:
1585:./FreeRtos/src/queue.c **** 	{
 2326              		.loc 1 1585 2 view .LVU659
 2327 0006 FFF7FEFF 		bl	vPortEnterCritical
 2328              	.LVL240:
1587:./FreeRtos/src/queue.c **** 	}
 2329              		.loc 1 1587 3 view .LVU660
1587:./FreeRtos/src/queue.c **** 	}
 2330              		.loc 1 1587 12 is_stmt 0 view .LVU661
 2331 000a A46B     		ldr	r4, [r4, #56]
 2332              	.LVL241:
1589:./FreeRtos/src/queue.c **** 
 2333              		.loc 1 1589 2 is_stmt 1 view .LVU662
 2334 000c FFF7FEFF 		bl	vPortExitCritical
 2335              	.LVL242:
1591:./FreeRtos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2336              		.loc 1 1591 2 view .LVU663
1592:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2337              		.loc 1 1592 1 is_stmt 0 view .LVU664
 2338 0010 2046     		mov	r0, r4
 2339 0012 10BD     		pop	{r4, pc}
 2340              	.LVL243:
 2341              	.L184:
1583:./FreeRtos/src/queue.c **** 
 2342              		.loc 1 1583 2 is_stmt 1 discriminator 1 view .LVU665
 2343 0014 40F22F62 		movw	r2, #1583
 2344 0018 0249     		ldr	r1, .L185
 2345 001a 0348     		ldr	r0, .L185+4
 2346              	.LVL244:
1583:./FreeRtos/src/queue.c **** 
 2347              		.loc 1 1583 2 is_stmt 0 discriminator 1 view .LVU666
 2348 001c FFF7FEFF 		bl	printf
 2349              	.LVL245:
 2350 0020 F1E7     		b	.L182
 2351              	.L186:
 2352 0022 00BF     		.align	2
 2353              	.L185:
 2354 0024 00000000 		.word	.LC0
 2355 0028 18000000 		.word	.LC1
 2356              		.cfi_endproc
 2357              	.LFE140:
 2359              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2360              		.align	1
 2361              		.global	uxQueueSpacesAvailable
 2362              		.syntax unified
 2363              		.thumb
 2364              		.thumb_func
 2365              		.fpu fpv4-sp-d16
 2367              	uxQueueSpacesAvailable:
 2368              	.LVL246:
 2369              	.LFB141:
1596:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
ARM GAS  /tmp/ccpGFB92.s 			page 92


 2370              		.loc 1 1596 1 is_stmt 1 view -0
 2371              		.cfi_startproc
 2372              		@ args = 0, pretend = 0, frame = 0
 2373              		@ frame_needed = 0, uses_anonymous_args = 0
1596:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
 2374              		.loc 1 1596 1 is_stmt 0 view .LVU668
 2375 0000 38B5     		push	{r3, r4, r5, lr}
 2376              	.LCFI25:
 2377              		.cfi_def_cfa_offset 16
 2378              		.cfi_offset 3, -16
 2379              		.cfi_offset 4, -12
 2380              		.cfi_offset 5, -8
 2381              		.cfi_offset 14, -4
1597:./FreeRtos/src/queue.c **** Queue_t *pxQueue;
 2382              		.loc 1 1597 1 is_stmt 1 view .LVU669
1598:./FreeRtos/src/queue.c **** 
 2383              		.loc 1 1598 1 view .LVU670
1600:./FreeRtos/src/queue.c **** 	configASSERT( pxQueue );
 2384              		.loc 1 1600 2 view .LVU671
 2385              	.LVL247:
1601:./FreeRtos/src/queue.c **** 
 2386              		.loc 1 1601 2 view .LVU672
 2387 0002 0546     		mov	r5, r0
 2388 0004 40B1     		cbz	r0, .L190
 2389              	.LVL248:
 2390              	.L188:
1603:./FreeRtos/src/queue.c **** 	{
 2391              		.loc 1 1603 2 view .LVU673
 2392 0006 FFF7FEFF 		bl	vPortEnterCritical
 2393              	.LVL249:
1605:./FreeRtos/src/queue.c **** 	}
 2394              		.loc 1 1605 3 view .LVU674
1605:./FreeRtos/src/queue.c **** 	}
 2395              		.loc 1 1605 21 is_stmt 0 view .LVU675
 2396 000a EC6B     		ldr	r4, [r5, #60]
1605:./FreeRtos/src/queue.c **** 	}
 2397              		.loc 1 1605 41 view .LVU676
 2398 000c AB6B     		ldr	r3, [r5, #56]
1605:./FreeRtos/src/queue.c **** 	}
 2399              		.loc 1 1605 12 view .LVU677
 2400 000e E41A     		subs	r4, r4, r3
 2401              	.LVL250:
1607:./FreeRtos/src/queue.c **** 
 2402              		.loc 1 1607 2 is_stmt 1 view .LVU678
 2403 0010 FFF7FEFF 		bl	vPortExitCritical
 2404              	.LVL251:
1609:./FreeRtos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2405              		.loc 1 1609 2 view .LVU679
1610:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2406              		.loc 1 1610 1 is_stmt 0 view .LVU680
 2407 0014 2046     		mov	r0, r4
 2408 0016 38BD     		pop	{r3, r4, r5, pc}
 2409              	.LVL252:
 2410              	.L190:
1601:./FreeRtos/src/queue.c **** 
 2411              		.loc 1 1601 2 is_stmt 1 discriminator 1 view .LVU681
 2412 0018 40F24162 		movw	r2, #1601
ARM GAS  /tmp/ccpGFB92.s 			page 93


 2413 001c 0249     		ldr	r1, .L191
 2414 001e 0348     		ldr	r0, .L191+4
 2415              	.LVL253:
1601:./FreeRtos/src/queue.c **** 
 2416              		.loc 1 1601 2 is_stmt 0 discriminator 1 view .LVU682
 2417 0020 FFF7FEFF 		bl	printf
 2418              	.LVL254:
 2419 0024 EFE7     		b	.L188
 2420              	.L192:
 2421 0026 00BF     		.align	2
 2422              	.L191:
 2423 0028 00000000 		.word	.LC0
 2424 002c 18000000 		.word	.LC1
 2425              		.cfi_endproc
 2426              	.LFE141:
 2428              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2429              		.align	1
 2430              		.global	uxQueueMessagesWaitingFromISR
 2431              		.syntax unified
 2432              		.thumb
 2433              		.thumb_func
 2434              		.fpu fpv4-sp-d16
 2436              	uxQueueMessagesWaitingFromISR:
 2437              	.LVL255:
 2438              	.LFB142:
1614:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
 2439              		.loc 1 1614 1 is_stmt 1 view -0
 2440              		.cfi_startproc
 2441              		@ args = 0, pretend = 0, frame = 0
 2442              		@ frame_needed = 0, uses_anonymous_args = 0
1614:./FreeRtos/src/queue.c **** UBaseType_t uxReturn;
 2443              		.loc 1 1614 1 is_stmt 0 view .LVU684
 2444 0000 10B5     		push	{r4, lr}
 2445              	.LCFI26:
 2446              		.cfi_def_cfa_offset 8
 2447              		.cfi_offset 4, -8
 2448              		.cfi_offset 14, -4
1615:./FreeRtos/src/queue.c **** 
 2449              		.loc 1 1615 1 is_stmt 1 view .LVU685
1617:./FreeRtos/src/queue.c **** 
 2450              		.loc 1 1617 2 view .LVU686
 2451 0002 0446     		mov	r4, r0
 2452 0004 08B1     		cbz	r0, .L196
 2453              	.LVL256:
 2454              	.L194:
1619:./FreeRtos/src/queue.c **** 
 2455              		.loc 1 1619 2 view .LVU687
1619:./FreeRtos/src/queue.c **** 
 2456              		.loc 1 1619 11 is_stmt 0 view .LVU688
 2457 0006 A06B     		ldr	r0, [r4, #56]
 2458              	.LVL257:
1621:./FreeRtos/src/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2459              		.loc 1 1621 2 is_stmt 1 view .LVU689
1622:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2460              		.loc 1 1622 1 is_stmt 0 view .LVU690
 2461 0008 10BD     		pop	{r4, pc}
 2462              	.LVL258:
ARM GAS  /tmp/ccpGFB92.s 			page 94


 2463              	.L196:
1617:./FreeRtos/src/queue.c **** 
 2464              		.loc 1 1617 2 is_stmt 1 discriminator 1 view .LVU691
 2465 000a 40F25162 		movw	r2, #1617
 2466 000e 0249     		ldr	r1, .L197
 2467 0010 0248     		ldr	r0, .L197+4
 2468              	.LVL259:
1617:./FreeRtos/src/queue.c **** 
 2469              		.loc 1 1617 2 is_stmt 0 discriminator 1 view .LVU692
 2470 0012 FFF7FEFF 		bl	printf
 2471              	.LVL260:
 2472 0016 F6E7     		b	.L194
 2473              	.L198:
 2474              		.align	2
 2475              	.L197:
 2476 0018 00000000 		.word	.LC0
 2477 001c 18000000 		.word	.LC1
 2478              		.cfi_endproc
 2479              	.LFE142:
 2481              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2482              		.align	1
 2483              		.global	xQueueIsQueueEmptyFromISR
 2484              		.syntax unified
 2485              		.thumb
 2486              		.thumb_func
 2487              		.fpu fpv4-sp-d16
 2489              	xQueueIsQueueEmptyFromISR:
 2490              	.LVL261:
 2491              	.LFB148:
1936:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 2492              		.loc 1 1936 1 is_stmt 1 view -0
 2493              		.cfi_startproc
 2494              		@ args = 0, pretend = 0, frame = 0
 2495              		@ frame_needed = 0, uses_anonymous_args = 0
1936:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 2496              		.loc 1 1936 1 is_stmt 0 view .LVU694
 2497 0000 10B5     		push	{r4, lr}
 2498              	.LCFI27:
 2499              		.cfi_def_cfa_offset 8
 2500              		.cfi_offset 4, -8
 2501              		.cfi_offset 14, -4
1937:./FreeRtos/src/queue.c **** 
 2502              		.loc 1 1937 1 is_stmt 1 view .LVU695
1939:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2503              		.loc 1 1939 2 view .LVU696
 2504 0002 0446     		mov	r4, r0
 2505 0004 18B1     		cbz	r0, .L204
 2506              	.LVL262:
 2507              	.L200:
1940:./FreeRtos/src/queue.c **** 	{
 2508              		.loc 1 1940 2 view .LVU697
1940:./FreeRtos/src/queue.c **** 	{
 2509              		.loc 1 1940 30 is_stmt 0 view .LVU698
 2510 0006 A36B     		ldr	r3, [r4, #56]
1940:./FreeRtos/src/queue.c **** 	{
 2511              		.loc 1 1940 4 view .LVU699
 2512 0008 43B9     		cbnz	r3, .L202
ARM GAS  /tmp/ccpGFB92.s 			page 95


1942:./FreeRtos/src/queue.c **** 	}
 2513              		.loc 1 1942 11 view .LVU700
 2514 000a 0120     		movs	r0, #1
 2515              	.L199:
1950:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2516              		.loc 1 1950 1 view .LVU701
 2517 000c 10BD     		pop	{r4, pc}
 2518              	.LVL263:
 2519              	.L204:
1939:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2520              		.loc 1 1939 2 is_stmt 1 discriminator 1 view .LVU702
 2521 000e 40F29372 		movw	r2, #1939
 2522 0012 0349     		ldr	r1, .L205
 2523 0014 0348     		ldr	r0, .L205+4
 2524              	.LVL264:
1939:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2525              		.loc 1 1939 2 is_stmt 0 discriminator 1 view .LVU703
 2526 0016 FFF7FEFF 		bl	printf
 2527              	.LVL265:
 2528 001a F4E7     		b	.L200
 2529              	.L202:
1946:./FreeRtos/src/queue.c **** 	}
 2530              		.loc 1 1946 11 view .LVU704
 2531 001c 0020     		movs	r0, #0
 2532              	.LVL266:
1949:./FreeRtos/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2533              		.loc 1 1949 2 is_stmt 1 view .LVU705
1949:./FreeRtos/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2534              		.loc 1 1949 9 is_stmt 0 view .LVU706
 2535 001e F5E7     		b	.L199
 2536              	.L206:
 2537              		.align	2
 2538              	.L205:
 2539 0020 00000000 		.word	.LC0
 2540 0024 18000000 		.word	.LC1
 2541              		.cfi_endproc
 2542              	.LFE148:
 2544              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2545              		.align	1
 2546              		.global	xQueueIsQueueFullFromISR
 2547              		.syntax unified
 2548              		.thumb
 2549              		.thumb_func
 2550              		.fpu fpv4-sp-d16
 2552              	xQueueIsQueueFullFromISR:
 2553              	.LVL267:
 2554              	.LFB150:
1972:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1973:./FreeRtos/src/queue.c **** 
1974:./FreeRtos/src/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
1975:./FreeRtos/src/queue.c **** {
 2555              		.loc 1 1975 1 is_stmt 1 view -0
 2556              		.cfi_startproc
 2557              		@ args = 0, pretend = 0, frame = 0
 2558              		@ frame_needed = 0, uses_anonymous_args = 0
 2559              		.loc 1 1975 1 is_stmt 0 view .LVU708
 2560 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccpGFB92.s 			page 96


 2561              	.LCFI28:
 2562              		.cfi_def_cfa_offset 8
 2563              		.cfi_offset 4, -8
 2564              		.cfi_offset 14, -4
1976:./FreeRtos/src/queue.c **** BaseType_t xReturn;
 2565              		.loc 1 1976 1 is_stmt 1 view .LVU709
1977:./FreeRtos/src/queue.c **** 
1978:./FreeRtos/src/queue.c **** 	configASSERT( xQueue );
 2566              		.loc 1 1978 2 view .LVU710
 2567 0002 0446     		mov	r4, r0
 2568 0004 28B1     		cbz	r0, .L212
 2569              	.LVL268:
 2570              	.L208:
1979:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2571              		.loc 1 1979 2 view .LVU711
 2572              		.loc 1 1979 30 is_stmt 0 view .LVU712
 2573 0006 A26B     		ldr	r2, [r4, #56]
 2574              		.loc 1 1979 77 view .LVU713
 2575 0008 E36B     		ldr	r3, [r4, #60]
 2576              		.loc 1 1979 4 view .LVU714
 2577 000a 9A42     		cmp	r2, r3
 2578 000c 08D0     		beq	.L213
1980:./FreeRtos/src/queue.c **** 	{
1981:./FreeRtos/src/queue.c **** 		xReturn = pdTRUE;
1982:./FreeRtos/src/queue.c **** 	}
1983:./FreeRtos/src/queue.c **** 	else
1984:./FreeRtos/src/queue.c **** 	{
1985:./FreeRtos/src/queue.c **** 		xReturn = pdFALSE;
 2579              		.loc 1 1985 11 view .LVU715
 2580 000e 0020     		movs	r0, #0
 2581              	.LVL269:
1986:./FreeRtos/src/queue.c **** 	}
1987:./FreeRtos/src/queue.c **** 
1988:./FreeRtos/src/queue.c **** 	return xReturn;
 2582              		.loc 1 1988 2 is_stmt 1 view .LVU716
 2583              	.L207:
1989:./FreeRtos/src/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2584              		.loc 1 1989 1 is_stmt 0 view .LVU717
 2585 0010 10BD     		pop	{r4, pc}
 2586              	.LVL270:
 2587              	.L212:
1978:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2588              		.loc 1 1978 2 is_stmt 1 discriminator 1 view .LVU718
 2589 0012 40F2BA72 		movw	r2, #1978
 2590 0016 0349     		ldr	r1, .L214
 2591 0018 0348     		ldr	r0, .L214+4
 2592              	.LVL271:
1978:./FreeRtos/src/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2593              		.loc 1 1978 2 is_stmt 0 discriminator 1 view .LVU719
 2594 001a FFF7FEFF 		bl	printf
 2595              	.LVL272:
 2596 001e F2E7     		b	.L208
 2597              	.L213:
1981:./FreeRtos/src/queue.c **** 	}
 2598              		.loc 1 1981 11 view .LVU720
 2599 0020 0120     		movs	r0, #1
 2600 0022 F5E7     		b	.L207
ARM GAS  /tmp/ccpGFB92.s 			page 97


 2601              	.L215:
 2602              		.align	2
 2603              	.L214:
 2604 0024 00000000 		.word	.LC0
 2605 0028 18000000 		.word	.LC1
 2606              		.cfi_endproc
 2607              	.LFE150:
 2609              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2610              		.align	1
 2611              		.global	vQueueAddToRegistry
 2612              		.syntax unified
 2613              		.thumb
 2614              		.thumb_func
 2615              		.fpu fpv4-sp-d16
 2617              	vQueueAddToRegistry:
 2618              	.LVL273:
 2619              	.LFB151:
1990:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
1991:./FreeRtos/src/queue.c **** 
1992:./FreeRtos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
1993:./FreeRtos/src/queue.c **** 
1994:./FreeRtos/src/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
1995:./FreeRtos/src/queue.c **** 	{
1996:./FreeRtos/src/queue.c **** 	BaseType_t xReturn;
1997:./FreeRtos/src/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1998:./FreeRtos/src/queue.c **** 
1999:./FreeRtos/src/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2000:./FreeRtos/src/queue.c **** 		is required to prevent an interrupt removing something from the queue
2001:./FreeRtos/src/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2002:./FreeRtos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2003:./FreeRtos/src/queue.c **** 		{
2004:./FreeRtos/src/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2005:./FreeRtos/src/queue.c **** 			{
2006:./FreeRtos/src/queue.c **** 				/* The queue is full - do we want to block or just leave without
2007:./FreeRtos/src/queue.c **** 				posting? */
2008:./FreeRtos/src/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2009:./FreeRtos/src/queue.c **** 				{
2010:./FreeRtos/src/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2011:./FreeRtos/src/queue.c **** 					return indicating that we need to block. */
2012:./FreeRtos/src/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2013:./FreeRtos/src/queue.c **** 					portENABLE_INTERRUPTS();
2014:./FreeRtos/src/queue.c **** 					return errQUEUE_BLOCKED;
2015:./FreeRtos/src/queue.c **** 				}
2016:./FreeRtos/src/queue.c **** 				else
2017:./FreeRtos/src/queue.c **** 				{
2018:./FreeRtos/src/queue.c **** 					portENABLE_INTERRUPTS();
2019:./FreeRtos/src/queue.c **** 					return errQUEUE_FULL;
2020:./FreeRtos/src/queue.c **** 				}
2021:./FreeRtos/src/queue.c **** 			}
2022:./FreeRtos/src/queue.c **** 		}
2023:./FreeRtos/src/queue.c **** 		portENABLE_INTERRUPTS();
2024:./FreeRtos/src/queue.c **** 
2025:./FreeRtos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2026:./FreeRtos/src/queue.c **** 		{
2027:./FreeRtos/src/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2028:./FreeRtos/src/queue.c **** 			{
2029:./FreeRtos/src/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
ARM GAS  /tmp/ccpGFB92.s 			page 98


2030:./FreeRtos/src/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2031:./FreeRtos/src/queue.c **** 				xReturn = pdPASS;
2032:./FreeRtos/src/queue.c **** 
2033:./FreeRtos/src/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2034:./FreeRtos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2035:./FreeRtos/src/queue.c **** 				{
2036:./FreeRtos/src/queue.c **** 					/* In this instance the co-routine could be placed directly
2037:./FreeRtos/src/queue.c **** 					into the ready list as we are within a critical section.
2038:./FreeRtos/src/queue.c **** 					Instead the same pending ready list mechanism is used as if
2039:./FreeRtos/src/queue.c **** 					the event were caused from within an interrupt. */
2040:./FreeRtos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2041:./FreeRtos/src/queue.c **** 					{
2042:./FreeRtos/src/queue.c **** 						/* The co-routine waiting has a higher priority so record
2043:./FreeRtos/src/queue.c **** 						that a yield might be appropriate. */
2044:./FreeRtos/src/queue.c **** 						xReturn = errQUEUE_YIELD;
2045:./FreeRtos/src/queue.c **** 					}
2046:./FreeRtos/src/queue.c **** 					else
2047:./FreeRtos/src/queue.c **** 					{
2048:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2049:./FreeRtos/src/queue.c **** 					}
2050:./FreeRtos/src/queue.c **** 				}
2051:./FreeRtos/src/queue.c **** 				else
2052:./FreeRtos/src/queue.c **** 				{
2053:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2054:./FreeRtos/src/queue.c **** 				}
2055:./FreeRtos/src/queue.c **** 			}
2056:./FreeRtos/src/queue.c **** 			else
2057:./FreeRtos/src/queue.c **** 			{
2058:./FreeRtos/src/queue.c **** 				xReturn = errQUEUE_FULL;
2059:./FreeRtos/src/queue.c **** 			}
2060:./FreeRtos/src/queue.c **** 		}
2061:./FreeRtos/src/queue.c **** 		portENABLE_INTERRUPTS();
2062:./FreeRtos/src/queue.c **** 
2063:./FreeRtos/src/queue.c **** 		return xReturn;
2064:./FreeRtos/src/queue.c **** 	}
2065:./FreeRtos/src/queue.c **** 
2066:./FreeRtos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2067:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
2068:./FreeRtos/src/queue.c **** 
2069:./FreeRtos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2070:./FreeRtos/src/queue.c **** 
2071:./FreeRtos/src/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2072:./FreeRtos/src/queue.c **** 	{
2073:./FreeRtos/src/queue.c **** 	BaseType_t xReturn;
2074:./FreeRtos/src/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2075:./FreeRtos/src/queue.c **** 
2076:./FreeRtos/src/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2077:./FreeRtos/src/queue.c **** 		is required to prevent an interrupt adding something to the queue
2078:./FreeRtos/src/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2079:./FreeRtos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2080:./FreeRtos/src/queue.c **** 		{
2081:./FreeRtos/src/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2082:./FreeRtos/src/queue.c **** 			{
2083:./FreeRtos/src/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2084:./FreeRtos/src/queue.c **** 				leave with nothing? */
2085:./FreeRtos/src/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2086:./FreeRtos/src/queue.c **** 				{
ARM GAS  /tmp/ccpGFB92.s 			page 99


2087:./FreeRtos/src/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2088:./FreeRtos/src/queue.c **** 					indicating that we need to block. */
2089:./FreeRtos/src/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2090:./FreeRtos/src/queue.c **** 					portENABLE_INTERRUPTS();
2091:./FreeRtos/src/queue.c **** 					return errQUEUE_BLOCKED;
2092:./FreeRtos/src/queue.c **** 				}
2093:./FreeRtos/src/queue.c **** 				else
2094:./FreeRtos/src/queue.c **** 				{
2095:./FreeRtos/src/queue.c **** 					portENABLE_INTERRUPTS();
2096:./FreeRtos/src/queue.c **** 					return errQUEUE_FULL;
2097:./FreeRtos/src/queue.c **** 				}
2098:./FreeRtos/src/queue.c **** 			}
2099:./FreeRtos/src/queue.c **** 			else
2100:./FreeRtos/src/queue.c **** 			{
2101:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2102:./FreeRtos/src/queue.c **** 			}
2103:./FreeRtos/src/queue.c **** 		}
2104:./FreeRtos/src/queue.c **** 		portENABLE_INTERRUPTS();
2105:./FreeRtos/src/queue.c **** 
2106:./FreeRtos/src/queue.c **** 		portDISABLE_INTERRUPTS();
2107:./FreeRtos/src/queue.c **** 		{
2108:./FreeRtos/src/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2109:./FreeRtos/src/queue.c **** 			{
2110:./FreeRtos/src/queue.c **** 				/* Data is available from the queue. */
2111:./FreeRtos/src/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2112:./FreeRtos/src/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2113:./FreeRtos/src/queue.c **** 				{
2114:./FreeRtos/src/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2115:./FreeRtos/src/queue.c **** 				}
2116:./FreeRtos/src/queue.c **** 				else
2117:./FreeRtos/src/queue.c **** 				{
2118:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2119:./FreeRtos/src/queue.c **** 				}
2120:./FreeRtos/src/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2121:./FreeRtos/src/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2122:./FreeRtos/src/queue.c **** 
2123:./FreeRtos/src/queue.c **** 				xReturn = pdPASS;
2124:./FreeRtos/src/queue.c **** 
2125:./FreeRtos/src/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2126:./FreeRtos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2127:./FreeRtos/src/queue.c **** 				{
2128:./FreeRtos/src/queue.c **** 					/* In this instance the co-routine could be placed directly
2129:./FreeRtos/src/queue.c **** 					into the ready list as we are within a critical section.
2130:./FreeRtos/src/queue.c **** 					Instead the same pending ready list mechanism is used as if
2131:./FreeRtos/src/queue.c **** 					the event were caused from within an interrupt. */
2132:./FreeRtos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2133:./FreeRtos/src/queue.c **** 					{
2134:./FreeRtos/src/queue.c **** 						xReturn = errQUEUE_YIELD;
2135:./FreeRtos/src/queue.c **** 					}
2136:./FreeRtos/src/queue.c **** 					else
2137:./FreeRtos/src/queue.c **** 					{
2138:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2139:./FreeRtos/src/queue.c **** 					}
2140:./FreeRtos/src/queue.c **** 				}
2141:./FreeRtos/src/queue.c **** 				else
2142:./FreeRtos/src/queue.c **** 				{
2143:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccpGFB92.s 			page 100


2144:./FreeRtos/src/queue.c **** 				}
2145:./FreeRtos/src/queue.c **** 			}
2146:./FreeRtos/src/queue.c **** 			else
2147:./FreeRtos/src/queue.c **** 			{
2148:./FreeRtos/src/queue.c **** 				xReturn = pdFAIL;
2149:./FreeRtos/src/queue.c **** 			}
2150:./FreeRtos/src/queue.c **** 		}
2151:./FreeRtos/src/queue.c **** 		portENABLE_INTERRUPTS();
2152:./FreeRtos/src/queue.c **** 
2153:./FreeRtos/src/queue.c **** 		return xReturn;
2154:./FreeRtos/src/queue.c **** 	}
2155:./FreeRtos/src/queue.c **** 
2156:./FreeRtos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2157:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
2158:./FreeRtos/src/queue.c **** 
2159:./FreeRtos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2160:./FreeRtos/src/queue.c **** 
2161:./FreeRtos/src/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2162:./FreeRtos/src/queue.c **** 	{
2163:./FreeRtos/src/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2164:./FreeRtos/src/queue.c **** 
2165:./FreeRtos/src/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2166:./FreeRtos/src/queue.c **** 		exit without doing anything. */
2167:./FreeRtos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2168:./FreeRtos/src/queue.c **** 		{
2169:./FreeRtos/src/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2170:./FreeRtos/src/queue.c **** 
2171:./FreeRtos/src/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2172:./FreeRtos/src/queue.c **** 			co-routine has not already been woken. */
2173:./FreeRtos/src/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2174:./FreeRtos/src/queue.c **** 			{
2175:./FreeRtos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:./FreeRtos/src/queue.c **** 				{
2177:./FreeRtos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:./FreeRtos/src/queue.c **** 					{
2179:./FreeRtos/src/queue.c **** 						return pdTRUE;
2180:./FreeRtos/src/queue.c **** 					}
2181:./FreeRtos/src/queue.c **** 					else
2182:./FreeRtos/src/queue.c **** 					{
2183:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2184:./FreeRtos/src/queue.c **** 					}
2185:./FreeRtos/src/queue.c **** 				}
2186:./FreeRtos/src/queue.c **** 				else
2187:./FreeRtos/src/queue.c **** 				{
2188:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2189:./FreeRtos/src/queue.c **** 				}
2190:./FreeRtos/src/queue.c **** 			}
2191:./FreeRtos/src/queue.c **** 			else
2192:./FreeRtos/src/queue.c **** 			{
2193:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2194:./FreeRtos/src/queue.c **** 			}
2195:./FreeRtos/src/queue.c **** 		}
2196:./FreeRtos/src/queue.c **** 		else
2197:./FreeRtos/src/queue.c **** 		{
2198:./FreeRtos/src/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2199:./FreeRtos/src/queue.c **** 		}
2200:./FreeRtos/src/queue.c **** 
ARM GAS  /tmp/ccpGFB92.s 			page 101


2201:./FreeRtos/src/queue.c **** 		return xCoRoutinePreviouslyWoken;
2202:./FreeRtos/src/queue.c **** 	}
2203:./FreeRtos/src/queue.c **** 
2204:./FreeRtos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2205:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
2206:./FreeRtos/src/queue.c **** 
2207:./FreeRtos/src/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2208:./FreeRtos/src/queue.c **** 
2209:./FreeRtos/src/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2210:./FreeRtos/src/queue.c **** 	{
2211:./FreeRtos/src/queue.c **** 	BaseType_t xReturn;
2212:./FreeRtos/src/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2213:./FreeRtos/src/queue.c **** 
2214:./FreeRtos/src/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2215:./FreeRtos/src/queue.c **** 		not then just leave without doing anything. */
2216:./FreeRtos/src/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2217:./FreeRtos/src/queue.c **** 		{
2218:./FreeRtos/src/queue.c **** 			/* Copy the data from the queue. */
2219:./FreeRtos/src/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2220:./FreeRtos/src/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2221:./FreeRtos/src/queue.c **** 			{
2222:./FreeRtos/src/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2223:./FreeRtos/src/queue.c **** 			}
2224:./FreeRtos/src/queue.c **** 			else
2225:./FreeRtos/src/queue.c **** 			{
2226:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2227:./FreeRtos/src/queue.c **** 			}
2228:./FreeRtos/src/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2229:./FreeRtos/src/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2230:./FreeRtos/src/queue.c **** 
2231:./FreeRtos/src/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2232:./FreeRtos/src/queue.c **** 			{
2233:./FreeRtos/src/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2234:./FreeRtos/src/queue.c **** 				{
2235:./FreeRtos/src/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2236:./FreeRtos/src/queue.c **** 					{
2237:./FreeRtos/src/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2238:./FreeRtos/src/queue.c **** 					}
2239:./FreeRtos/src/queue.c **** 					else
2240:./FreeRtos/src/queue.c **** 					{
2241:./FreeRtos/src/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2242:./FreeRtos/src/queue.c **** 					}
2243:./FreeRtos/src/queue.c **** 				}
2244:./FreeRtos/src/queue.c **** 				else
2245:./FreeRtos/src/queue.c **** 				{
2246:./FreeRtos/src/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2247:./FreeRtos/src/queue.c **** 				}
2248:./FreeRtos/src/queue.c **** 			}
2249:./FreeRtos/src/queue.c **** 			else
2250:./FreeRtos/src/queue.c **** 			{
2251:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2252:./FreeRtos/src/queue.c **** 			}
2253:./FreeRtos/src/queue.c **** 
2254:./FreeRtos/src/queue.c **** 			xReturn = pdPASS;
2255:./FreeRtos/src/queue.c **** 		}
2256:./FreeRtos/src/queue.c **** 		else
2257:./FreeRtos/src/queue.c **** 		{
ARM GAS  /tmp/ccpGFB92.s 			page 102


2258:./FreeRtos/src/queue.c **** 			xReturn = pdFAIL;
2259:./FreeRtos/src/queue.c **** 		}
2260:./FreeRtos/src/queue.c **** 
2261:./FreeRtos/src/queue.c **** 		return xReturn;
2262:./FreeRtos/src/queue.c **** 	}
2263:./FreeRtos/src/queue.c **** 
2264:./FreeRtos/src/queue.c **** #endif /* configUSE_CO_ROUTINES */
2265:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
2266:./FreeRtos/src/queue.c **** 
2267:./FreeRtos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2268:./FreeRtos/src/queue.c **** 
2269:./FreeRtos/src/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2270:./FreeRtos/src/queue.c **** 	{
 2620              		.loc 1 2270 2 is_stmt 1 view -0
 2621              		.cfi_startproc
 2622              		@ args = 0, pretend = 0, frame = 0
 2623              		@ frame_needed = 0, uses_anonymous_args = 0
 2624              		@ link register save eliminated.
2271:./FreeRtos/src/queue.c **** 	UBaseType_t ux;
 2625              		.loc 1 2271 2 view .LVU722
2272:./FreeRtos/src/queue.c **** 
2273:./FreeRtos/src/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2274:./FreeRtos/src/queue.c **** 		a free slot. */
2275:./FreeRtos/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2626              		.loc 1 2275 3 view .LVU723
 2627              		.loc 1 2275 11 is_stmt 0 view .LVU724
 2628 0000 0023     		movs	r3, #0
 2629              	.LVL274:
 2630              	.L217:
 2631              		.loc 1 2275 33 is_stmt 1 discriminator 1 view .LVU725
 2632              		.loc 1 2275 3 is_stmt 0 discriminator 1 view .LVU726
 2633 0002 092B     		cmp	r3, #9
 2634 0004 0CD8     		bhi	.L221
2276:./FreeRtos/src/queue.c **** 		{
2277:./FreeRtos/src/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2635              		.loc 1 2277 4 is_stmt 1 view .LVU727
 2636              		.loc 1 2277 28 is_stmt 0 view .LVU728
 2637 0006 074A     		ldr	r2, .L223
 2638 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 2639              		.loc 1 2277 6 view .LVU729
 2640 000c 0AB1     		cbz	r2, .L222
2278:./FreeRtos/src/queue.c **** 			{
2279:./FreeRtos/src/queue.c **** 				/* Store the information on this queue. */
2280:./FreeRtos/src/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
2281:./FreeRtos/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
2282:./FreeRtos/src/queue.c **** 
2283:./FreeRtos/src/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2284:./FreeRtos/src/queue.c **** 				break;
2285:./FreeRtos/src/queue.c **** 			}
2286:./FreeRtos/src/queue.c **** 			else
2287:./FreeRtos/src/queue.c **** 			{
2288:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 2641              		.loc 1 2288 29 is_stmt 1 discriminator 2 view .LVU730
2275:./FreeRtos/src/queue.c **** 		{
 2642              		.loc 1 2275 81 discriminator 2 view .LVU731
2275:./FreeRtos/src/queue.c **** 		{
 2643              		.loc 1 2275 83 is_stmt 0 discriminator 2 view .LVU732
ARM GAS  /tmp/ccpGFB92.s 			page 103


 2644 000e 0133     		adds	r3, r3, #1
 2645              	.LVL275:
2275:./FreeRtos/src/queue.c **** 		{
 2646              		.loc 1 2275 83 discriminator 2 view .LVU733
 2647 0010 F7E7     		b	.L217
 2648              	.L222:
2280:./FreeRtos/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2649              		.loc 1 2280 5 is_stmt 1 view .LVU734
2280:./FreeRtos/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2650              		.loc 1 2280 38 is_stmt 0 view .LVU735
 2651 0012 044A     		ldr	r2, .L223
 2652 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2281:./FreeRtos/src/queue.c **** 
 2653              		.loc 1 2281 5 is_stmt 1 view .LVU736
2281:./FreeRtos/src/queue.c **** 
 2654              		.loc 1 2281 34 is_stmt 0 view .LVU737
 2655 0018 02EBC303 		add	r3, r2, r3, lsl #3
 2656              	.LVL276:
2281:./FreeRtos/src/queue.c **** 
 2657              		.loc 1 2281 34 view .LVU738
 2658 001c 5860     		str	r0, [r3, #4]
2283:./FreeRtos/src/queue.c **** 				break;
 2659              		.loc 1 2283 51 is_stmt 1 view .LVU739
2284:./FreeRtos/src/queue.c **** 			}
 2660              		.loc 1 2284 5 view .LVU740
 2661 001e 7047     		bx	lr
 2662              	.LVL277:
 2663              	.L221:
2289:./FreeRtos/src/queue.c **** 			}
2290:./FreeRtos/src/queue.c **** 		}
2291:./FreeRtos/src/queue.c **** 	}
 2664              		.loc 1 2291 2 is_stmt 0 view .LVU741
 2665 0020 7047     		bx	lr
 2666              	.L224:
 2667 0022 00BF     		.align	2
 2668              	.L223:
 2669 0024 00000000 		.word	.LANCHOR0
 2670              		.cfi_endproc
 2671              	.LFE151:
 2673              		.section	.text.pcQueueGetName,"ax",%progbits
 2674              		.align	1
 2675              		.global	pcQueueGetName
 2676              		.syntax unified
 2677              		.thumb
 2678              		.thumb_func
 2679              		.fpu fpv4-sp-d16
 2681              	pcQueueGetName:
 2682              	.LVL278:
 2683              	.LFB152:
2292:./FreeRtos/src/queue.c **** 
2293:./FreeRtos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2294:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
2295:./FreeRtos/src/queue.c **** 
2296:./FreeRtos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2297:./FreeRtos/src/queue.c **** 
2298:./FreeRtos/src/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2299:./FreeRtos/src/queue.c **** 	{
ARM GAS  /tmp/ccpGFB92.s 			page 104


 2684              		.loc 1 2299 2 is_stmt 1 view -0
 2685              		.cfi_startproc
 2686              		@ args = 0, pretend = 0, frame = 0
 2687              		@ frame_needed = 0, uses_anonymous_args = 0
 2688              		@ link register save eliminated.
2300:./FreeRtos/src/queue.c **** 	UBaseType_t ux;
 2689              		.loc 1 2300 2 view .LVU743
2301:./FreeRtos/src/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
 2690              		.loc 1 2301 2 view .LVU744
2302:./FreeRtos/src/queue.c **** 
2303:./FreeRtos/src/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2304:./FreeRtos/src/queue.c **** 		removing entries from the registry while it is being searched. */
2305:./FreeRtos/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2691              		.loc 1 2305 3 view .LVU745
 2692              		.loc 1 2305 11 is_stmt 0 view .LVU746
 2693 0000 0023     		movs	r3, #0
 2694              	.LVL279:
 2695              	.L226:
 2696              		.loc 1 2305 33 is_stmt 1 discriminator 1 view .LVU747
 2697              		.loc 1 2305 3 is_stmt 0 discriminator 1 view .LVU748
 2698 0002 092B     		cmp	r3, #9
 2699 0004 0BD8     		bhi	.L230
2306:./FreeRtos/src/queue.c **** 		{
2307:./FreeRtos/src/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2700              		.loc 1 2307 4 is_stmt 1 view .LVU749
 2701              		.loc 1 2307 28 is_stmt 0 view .LVU750
 2702 0006 074A     		ldr	r2, .L232
 2703 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2704 000c 5268     		ldr	r2, [r2, #4]
 2705              		.loc 1 2307 6 view .LVU751
 2706 000e 8242     		cmp	r2, r0
 2707 0010 01D0     		beq	.L231
2308:./FreeRtos/src/queue.c **** 			{
2309:./FreeRtos/src/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
2310:./FreeRtos/src/queue.c **** 				break;
2311:./FreeRtos/src/queue.c **** 			}
2312:./FreeRtos/src/queue.c **** 			else
2313:./FreeRtos/src/queue.c **** 			{
2314:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 2708              		.loc 1 2314 29 is_stmt 1 discriminator 2 view .LVU752
2305:./FreeRtos/src/queue.c **** 		{
 2709              		.loc 1 2305 81 discriminator 2 view .LVU753
2305:./FreeRtos/src/queue.c **** 		{
 2710              		.loc 1 2305 83 is_stmt 0 discriminator 2 view .LVU754
 2711 0012 0133     		adds	r3, r3, #1
 2712              	.LVL280:
2305:./FreeRtos/src/queue.c **** 		{
 2713              		.loc 1 2305 83 discriminator 2 view .LVU755
 2714 0014 F5E7     		b	.L226
 2715              	.L231:
2309:./FreeRtos/src/queue.c **** 				break;
 2716              		.loc 1 2309 5 is_stmt 1 view .LVU756
2309:./FreeRtos/src/queue.c **** 				break;
 2717              		.loc 1 2309 14 is_stmt 0 view .LVU757
 2718 0016 034A     		ldr	r2, .L232
 2719 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 2720              	.LVL281:
ARM GAS  /tmp/ccpGFB92.s 			page 105


2310:./FreeRtos/src/queue.c **** 			}
 2721              		.loc 1 2310 5 is_stmt 1 view .LVU758
 2722 001c 7047     		bx	lr
 2723              	.LVL282:
 2724              	.L230:
2301:./FreeRtos/src/queue.c **** 
 2725              		.loc 1 2301 14 is_stmt 0 view .LVU759
 2726 001e 0020     		movs	r0, #0
 2727              	.LVL283:
2315:./FreeRtos/src/queue.c **** 			}
2316:./FreeRtos/src/queue.c **** 		}
2317:./FreeRtos/src/queue.c **** 
2318:./FreeRtos/src/queue.c **** 		return pcReturn;
 2728              		.loc 1 2318 3 is_stmt 1 view .LVU760
2319:./FreeRtos/src/queue.c **** 	}
 2729              		.loc 1 2319 2 is_stmt 0 view .LVU761
 2730 0020 7047     		bx	lr
 2731              	.L233:
 2732 0022 00BF     		.align	2
 2733              	.L232:
 2734 0024 00000000 		.word	.LANCHOR0
 2735              		.cfi_endproc
 2736              	.LFE152:
 2738              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2739              		.align	1
 2740              		.global	vQueueUnregisterQueue
 2741              		.syntax unified
 2742              		.thumb
 2743              		.thumb_func
 2744              		.fpu fpv4-sp-d16
 2746              	vQueueUnregisterQueue:
 2747              	.LVL284:
 2748              	.LFB153:
2320:./FreeRtos/src/queue.c **** 
2321:./FreeRtos/src/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2322:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
2323:./FreeRtos/src/queue.c **** 
2324:./FreeRtos/src/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2325:./FreeRtos/src/queue.c **** 
2326:./FreeRtos/src/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2327:./FreeRtos/src/queue.c **** 	{
 2749              		.loc 1 2327 2 is_stmt 1 view -0
 2750              		.cfi_startproc
 2751              		@ args = 0, pretend = 0, frame = 0
 2752              		@ frame_needed = 0, uses_anonymous_args = 0
 2753              		@ link register save eliminated.
2328:./FreeRtos/src/queue.c **** 	UBaseType_t ux;
 2754              		.loc 1 2328 2 view .LVU763
2329:./FreeRtos/src/queue.c **** 
2330:./FreeRtos/src/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2331:./FreeRtos/src/queue.c **** 		registry. */
2332:./FreeRtos/src/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2755              		.loc 1 2332 3 view .LVU764
 2756              		.loc 1 2332 11 is_stmt 0 view .LVU765
 2757 0000 0023     		movs	r3, #0
 2758              	.LVL285:
 2759              	.L235:
ARM GAS  /tmp/ccpGFB92.s 			page 106


 2760              		.loc 1 2332 33 is_stmt 1 discriminator 1 view .LVU766
 2761              		.loc 1 2332 3 is_stmt 0 discriminator 1 view .LVU767
 2762 0002 092B     		cmp	r3, #9
 2763 0004 0FD8     		bhi	.L239
2333:./FreeRtos/src/queue.c **** 		{
2334:./FreeRtos/src/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2764              		.loc 1 2334 4 is_stmt 1 view .LVU768
 2765              		.loc 1 2334 28 is_stmt 0 view .LVU769
 2766 0006 084A     		ldr	r2, .L241
 2767 0008 02EBC302 		add	r2, r2, r3, lsl #3
 2768 000c 5268     		ldr	r2, [r2, #4]
 2769              		.loc 1 2334 6 view .LVU770
 2770 000e 8242     		cmp	r2, r0
 2771 0010 01D0     		beq	.L240
2335:./FreeRtos/src/queue.c **** 			{
2336:./FreeRtos/src/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2337:./FreeRtos/src/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
2338:./FreeRtos/src/queue.c **** 
2339:./FreeRtos/src/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2340:./FreeRtos/src/queue.c **** 				appear in the registry twice if it is added, removed, then
2341:./FreeRtos/src/queue.c **** 				added again. */
2342:./FreeRtos/src/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
2343:./FreeRtos/src/queue.c **** 				break;
2344:./FreeRtos/src/queue.c **** 			}
2345:./FreeRtos/src/queue.c **** 			else
2346:./FreeRtos/src/queue.c **** 			{
2347:./FreeRtos/src/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 2772              		.loc 1 2347 29 is_stmt 1 discriminator 2 view .LVU771
2332:./FreeRtos/src/queue.c **** 		{
 2773              		.loc 1 2332 81 discriminator 2 view .LVU772
2332:./FreeRtos/src/queue.c **** 		{
 2774              		.loc 1 2332 83 is_stmt 0 discriminator 2 view .LVU773
 2775 0012 0133     		adds	r3, r3, #1
 2776              	.LVL286:
2332:./FreeRtos/src/queue.c **** 		{
 2777              		.loc 1 2332 83 discriminator 2 view .LVU774
 2778 0014 F5E7     		b	.L235
 2779              	.L240:
2337:./FreeRtos/src/queue.c **** 
 2780              		.loc 1 2337 5 is_stmt 1 view .LVU775
2337:./FreeRtos/src/queue.c **** 
 2781              		.loc 1 2337 38 is_stmt 0 view .LVU776
 2782 0016 044A     		ldr	r2, .L241
 2783 0018 0021     		movs	r1, #0
 2784 001a 42F83310 		str	r1, [r2, r3, lsl #3]
2342:./FreeRtos/src/queue.c **** 				break;
 2785              		.loc 1 2342 5 is_stmt 1 view .LVU777
2342:./FreeRtos/src/queue.c **** 				break;
 2786              		.loc 1 2342 34 is_stmt 0 view .LVU778
 2787 001e 02EBC303 		add	r3, r2, r3, lsl #3
 2788              	.LVL287:
2342:./FreeRtos/src/queue.c **** 				break;
 2789              		.loc 1 2342 34 view .LVU779
 2790 0022 5960     		str	r1, [r3, #4]
2343:./FreeRtos/src/queue.c **** 			}
 2791              		.loc 1 2343 5 is_stmt 1 view .LVU780
 2792 0024 7047     		bx	lr
ARM GAS  /tmp/ccpGFB92.s 			page 107


 2793              	.LVL288:
 2794              	.L239:
2348:./FreeRtos/src/queue.c **** 			}
2349:./FreeRtos/src/queue.c **** 		}
2350:./FreeRtos/src/queue.c **** 
2351:./FreeRtos/src/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2795              		.loc 1 2351 2 is_stmt 0 view .LVU781
 2796 0026 7047     		bx	lr
 2797              	.L242:
 2798              		.align	2
 2799              	.L241:
 2800 0028 00000000 		.word	.LANCHOR0
 2801              		.cfi_endproc
 2802              	.LFE153:
 2804              		.section	.text.vQueueDelete,"ax",%progbits
 2805              		.align	1
 2806              		.global	vQueueDelete
 2807              		.syntax unified
 2808              		.thumb
 2809              		.thumb_func
 2810              		.fpu fpv4-sp-d16
 2812              	vQueueDelete:
 2813              	.LVL289:
 2814              	.LFB143:
1626:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2815              		.loc 1 1626 1 is_stmt 1 view -0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
1626:./FreeRtos/src/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2819              		.loc 1 1626 1 is_stmt 0 view .LVU783
 2820 0000 10B5     		push	{r4, lr}
 2821              	.LCFI29:
 2822              		.cfi_def_cfa_offset 8
 2823              		.cfi_offset 4, -8
 2824              		.cfi_offset 14, -4
1627:./FreeRtos/src/queue.c **** 
 2825              		.loc 1 1627 1 is_stmt 1 view .LVU784
 2826              	.LVL290:
1629:./FreeRtos/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2827              		.loc 1 1629 2 view .LVU785
 2828 0002 0446     		mov	r4, r0
 2829 0004 30B1     		cbz	r0, .L246
 2830              	.LVL291:
 2831              	.L244:
1630:./FreeRtos/src/queue.c **** 
 2832              		.loc 1 1630 30 view .LVU786
1634:./FreeRtos/src/queue.c **** 	}
 2833              		.loc 1 1634 3 view .LVU787
 2834 0006 2046     		mov	r0, r4
 2835 0008 FFF7FEFF 		bl	vQueueUnregisterQueue
 2836              	.LVL292:
1642:./FreeRtos/src/queue.c **** 	}
 2837              		.loc 1 1642 3 view .LVU788
 2838 000c 2046     		mov	r0, r4
 2839 000e FFF7FEFF 		bl	vPortFree
 2840              	.LVL293:
ARM GAS  /tmp/ccpGFB92.s 			page 108


1664:./FreeRtos/src/queue.c **** /*-----------------------------------------------------------*/
 2841              		.loc 1 1664 1 is_stmt 0 view .LVU789
 2842 0012 10BD     		pop	{r4, pc}
 2843              	.LVL294:
 2844              	.L246:
1629:./FreeRtos/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2845              		.loc 1 1629 2 is_stmt 1 discriminator 1 view .LVU790
 2846 0014 40F25D62 		movw	r2, #1629
 2847 0018 0249     		ldr	r1, .L247
 2848 001a 0348     		ldr	r0, .L247+4
 2849              	.LVL295:
1629:./FreeRtos/src/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 2850              		.loc 1 1629 2 is_stmt 0 discriminator 1 view .LVU791
 2851 001c FFF7FEFF 		bl	printf
 2852              	.LVL296:
 2853 0020 F1E7     		b	.L244
 2854              	.L248:
 2855 0022 00BF     		.align	2
 2856              	.L247:
 2857 0024 00000000 		.word	.LC0
 2858 0028 18000000 		.word	.LC1
 2859              		.cfi_endproc
 2860              	.LFE143:
 2862              		.global	xQueueRegistry
 2863              		.section	.bss.xQueueRegistry,"aw",%nobits
 2864              		.align	2
 2865              		.set	.LANCHOR0,. + 0
 2868              	xQueueRegistry:
 2869 0000 00000000 		.space	80
 2869      00000000 
 2869      00000000 
 2869      00000000 
 2869      00000000 
 2870              		.text
 2871              	.Letext0:
 2872              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/lib/gcc/arm-none-eabi/10.2.1/include/stddef.h"
 2873              		.file 4 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 2874              		.file 5 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 2875              		.file 6 "./FreeRtos/port/include/list.h"
 2876              		.file 7 "./FreeRtos/port/include/task.h"
 2877              		.file 8 "./FreeRtos/port/include/queue.h"
 2878              		.file 9 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 2879              		.file 10 "./FreeRtos/port/include/portable.h"
 2880              		.file 11 "<built-in>"
ARM GAS  /tmp/ccpGFB92.s 			page 109


DEFINED SYMBOLS
                            *ABS*:0000000000000000 queue.c
     /tmp/ccpGFB92.s:18     .text.prvIsQueueFull:0000000000000000 $t
     /tmp/ccpGFB92.s:25     .text.prvIsQueueFull:0000000000000000 prvIsQueueFull
     /tmp/ccpGFB92.s:74     .text.prvIsQueueEmpty:0000000000000000 $t
     /tmp/ccpGFB92.s:80     .text.prvIsQueueEmpty:0000000000000000 prvIsQueueEmpty
     /tmp/ccpGFB92.s:125    .text.prvCopyDataToQueue:0000000000000000 $t
     /tmp/ccpGFB92.s:131    .text.prvCopyDataToQueue:0000000000000000 prvCopyDataToQueue
     /tmp/ccpGFB92.s:253    .text.prvCopyDataFromQueue:0000000000000000 $t
     /tmp/ccpGFB92.s:259    .text.prvCopyDataFromQueue:0000000000000000 prvCopyDataFromQueue
     /tmp/ccpGFB92.s:319    .text.prvUnlockQueue:0000000000000000 $t
     /tmp/ccpGFB92.s:325    .text.prvUnlockQueue:0000000000000000 prvUnlockQueue
     /tmp/ccpGFB92.s:450    .rodata.xQueueGenericReset.str1.4:0000000000000000 $d
     /tmp/ccpGFB92.s:457    .text.xQueueGenericReset:0000000000000000 $t
     /tmp/ccpGFB92.s:464    .text.xQueueGenericReset:0000000000000000 xQueueGenericReset
     /tmp/ccpGFB92.s:590    .text.xQueueGenericReset:0000000000000080 $d
     /tmp/ccpGFB92.s:596    .text.prvInitialiseNewQueue:0000000000000000 $t
     /tmp/ccpGFB92.s:602    .text.prvInitialiseNewQueue:0000000000000000 prvInitialiseNewQueue
     /tmp/ccpGFB92.s:655    .text.xQueueGenericCreate:0000000000000000 $t
     /tmp/ccpGFB92.s:662    .text.xQueueGenericCreate:0000000000000000 xQueueGenericCreate
     /tmp/ccpGFB92.s:758    .text.xQueueGenericCreate:0000000000000044 $d
     /tmp/ccpGFB92.s:764    .text.xQueueGenericSend:0000000000000000 $t
     /tmp/ccpGFB92.s:771    .text.xQueueGenericSend:0000000000000000 xQueueGenericSend
     /tmp/ccpGFB92.s:1107   .text.xQueueGenericSend:0000000000000174 $d
     /tmp/ccpGFB92.s:1113   .text.xQueueGenericSendFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:1120   .text.xQueueGenericSendFromISR:0000000000000000 xQueueGenericSendFromISR
     /tmp/ccpGFB92.s:1328   .text.xQueueGenericSendFromISR:00000000000000c4 $d
     /tmp/ccpGFB92.s:1335   .text.xQueueGiveFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:1342   .text.xQueueGiveFromISR:0000000000000000 xQueueGiveFromISR
     /tmp/ccpGFB92.s:1548   .text.xQueueGiveFromISR:00000000000000a8 $d
     /tmp/ccpGFB92.s:1556   .text.xQueueGenericReceive:0000000000000000 $t
     /tmp/ccpGFB92.s:1563   .text.xQueueGenericReceive:0000000000000000 xQueueGenericReceive
     /tmp/ccpGFB92.s:1928   .text.xQueueGenericReceive:0000000000000188 $d
     /tmp/ccpGFB92.s:1934   .text.xQueueReceiveFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:1941   .text.xQueueReceiveFromISR:0000000000000000 xQueueReceiveFromISR
     /tmp/ccpGFB92.s:2133   .text.xQueueReceiveFromISR:00000000000000a4 $d
     /tmp/ccpGFB92.s:2141   .text.xQueuePeekFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:2148   .text.xQueuePeekFromISR:0000000000000000 xQueuePeekFromISR
     /tmp/ccpGFB92.s:2294   .text.xQueuePeekFromISR:0000000000000074 $d
     /tmp/ccpGFB92.s:2300   .text.uxQueueMessagesWaiting:0000000000000000 $t
     /tmp/ccpGFB92.s:2307   .text.uxQueueMessagesWaiting:0000000000000000 uxQueueMessagesWaiting
     /tmp/ccpGFB92.s:2354   .text.uxQueueMessagesWaiting:0000000000000024 $d
     /tmp/ccpGFB92.s:2360   .text.uxQueueSpacesAvailable:0000000000000000 $t
     /tmp/ccpGFB92.s:2367   .text.uxQueueSpacesAvailable:0000000000000000 uxQueueSpacesAvailable
     /tmp/ccpGFB92.s:2423   .text.uxQueueSpacesAvailable:0000000000000028 $d
     /tmp/ccpGFB92.s:2429   .text.uxQueueMessagesWaitingFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:2436   .text.uxQueueMessagesWaitingFromISR:0000000000000000 uxQueueMessagesWaitingFromISR
     /tmp/ccpGFB92.s:2476   .text.uxQueueMessagesWaitingFromISR:0000000000000018 $d
     /tmp/ccpGFB92.s:2482   .text.xQueueIsQueueEmptyFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:2489   .text.xQueueIsQueueEmptyFromISR:0000000000000000 xQueueIsQueueEmptyFromISR
     /tmp/ccpGFB92.s:2539   .text.xQueueIsQueueEmptyFromISR:0000000000000020 $d
     /tmp/ccpGFB92.s:2545   .text.xQueueIsQueueFullFromISR:0000000000000000 $t
     /tmp/ccpGFB92.s:2552   .text.xQueueIsQueueFullFromISR:0000000000000000 xQueueIsQueueFullFromISR
     /tmp/ccpGFB92.s:2604   .text.xQueueIsQueueFullFromISR:0000000000000024 $d
     /tmp/ccpGFB92.s:2610   .text.vQueueAddToRegistry:0000000000000000 $t
     /tmp/ccpGFB92.s:2617   .text.vQueueAddToRegistry:0000000000000000 vQueueAddToRegistry
     /tmp/ccpGFB92.s:2669   .text.vQueueAddToRegistry:0000000000000024 $d
ARM GAS  /tmp/ccpGFB92.s 			page 110


     /tmp/ccpGFB92.s:2674   .text.pcQueueGetName:0000000000000000 $t
     /tmp/ccpGFB92.s:2681   .text.pcQueueGetName:0000000000000000 pcQueueGetName
     /tmp/ccpGFB92.s:2734   .text.pcQueueGetName:0000000000000024 $d
     /tmp/ccpGFB92.s:2739   .text.vQueueUnregisterQueue:0000000000000000 $t
     /tmp/ccpGFB92.s:2746   .text.vQueueUnregisterQueue:0000000000000000 vQueueUnregisterQueue
     /tmp/ccpGFB92.s:2800   .text.vQueueUnregisterQueue:0000000000000028 $d
     /tmp/ccpGFB92.s:2805   .text.vQueueDelete:0000000000000000 $t
     /tmp/ccpGFB92.s:2812   .text.vQueueDelete:0000000000000000 vQueueDelete
     /tmp/ccpGFB92.s:2857   .text.vQueueDelete:0000000000000024 $d
     /tmp/ccpGFB92.s:2868   .bss.xQueueRegistry:0000000000000000 xQueueRegistry
     /tmp/ccpGFB92.s:2864   .bss.xQueueRegistry:0000000000000000 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
memcpy
xTaskRemoveFromEventList
vTaskMissedYield
printf
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
vPortValidateInterruptPriority
vPortFree
