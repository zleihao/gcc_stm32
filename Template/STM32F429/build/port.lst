ARM GAS  /tmp/ccJubwoR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	prvPortStartFirstTask:
  26              	.LFB134:
  27              		.file 1 "./FreeRtos/port/ARM_CM4F/port.c"
   1:./FreeRtos/port/ARM_CM4F/port.c **** /*
   2:./FreeRtos/port/ARM_CM4F/port.c ****  * FreeRTOS Kernel V10.3.1
   3:./FreeRtos/port/ARM_CM4F/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRtos/port/ARM_CM4F/port.c ****  *
   5:./FreeRtos/port/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./FreeRtos/port/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:./FreeRtos/port/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
   8:./FreeRtos/port/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./FreeRtos/port/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./FreeRtos/port/ARM_CM4F/port.c ****  * subject to the following conditions:
  11:./FreeRtos/port/ARM_CM4F/port.c ****  *
  12:./FreeRtos/port/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:./FreeRtos/port/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
  14:./FreeRtos/port/ARM_CM4F/port.c ****  *
  15:./FreeRtos/port/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./FreeRtos/port/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./FreeRtos/port/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./FreeRtos/port/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./FreeRtos/port/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./FreeRtos/port/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./FreeRtos/port/ARM_CM4F/port.c ****  *
  22:./FreeRtos/port/ARM_CM4F/port.c ****  * http://www.FreeRTOS.org
  23:./FreeRtos/port/ARM_CM4F/port.c ****  * http://aws.amazon.com/freertos
  24:./FreeRtos/port/ARM_CM4F/port.c ****  *
  25:./FreeRtos/port/ARM_CM4F/port.c ****  * 1 tab == 4 spaces!
  26:./FreeRtos/port/ARM_CM4F/port.c ****  */
  27:./FreeRtos/port/ARM_CM4F/port.c **** 
  28:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  29:./FreeRtos/port/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  30:./FreeRtos/port/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  31:./FreeRtos/port/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccJubwoR.s 			page 2


  32:./FreeRtos/port/ARM_CM4F/port.c **** /* Scheduler includes. */
  33:./FreeRtos/port/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  34:./FreeRtos/port/ARM_CM4F/port.c **** #include "task.h"
  35:./FreeRtos/port/ARM_CM4F/port.c **** 
  36:./FreeRtos/port/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  37:./FreeRtos/port/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  38:./FreeRtos/port/ARM_CM4F/port.c **** #endif
  39:./FreeRtos/port/ARM_CM4F/port.c **** 
  40:./FreeRtos/port/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  41:./FreeRtos/port/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  42:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  43:./FreeRtos/port/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  44:./FreeRtos/port/ARM_CM4F/port.c **** #else
  45:./FreeRtos/port/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  46:./FreeRtos/port/ARM_CM4F/port.c **** 	as the core. */
  47:./FreeRtos/port/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  48:./FreeRtos/port/ARM_CM4F/port.c **** #endif
  49:./FreeRtos/port/ARM_CM4F/port.c **** 
  50:./FreeRtos/port/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  52:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  53:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  54:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:./FreeRtos/port/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  56:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  57:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  58:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  59:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  60:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  61:./FreeRtos/port/ARM_CM4F/port.c **** 
  62:./FreeRtos/port/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  63:./FreeRtos/port/ARM_CM4F/port.c **** r0p1 port. */
  64:./FreeRtos/port/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
  65:./FreeRtos/port/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
  66:./FreeRtos/port/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
  67:./FreeRtos/port/ARM_CM4F/port.c **** 
  68:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  69:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  70:./FreeRtos/port/ARM_CM4F/port.c **** 
  71:./FreeRtos/port/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  72:./FreeRtos/port/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  73:./FreeRtos/port/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  74:./FreeRtos/port/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  75:./FreeRtos/port/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  76:./FreeRtos/port/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  77:./FreeRtos/port/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  78:./FreeRtos/port/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  79:./FreeRtos/port/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  80:./FreeRtos/port/ARM_CM4F/port.c **** 
  81:./FreeRtos/port/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  82:./FreeRtos/port/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  83:./FreeRtos/port/ARM_CM4F/port.c **** 
  84:./FreeRtos/port/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  85:./FreeRtos/port/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
  86:./FreeRtos/port/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
  87:./FreeRtos/port/ARM_CM4F/port.c **** 
  88:./FreeRtos/port/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
ARM GAS  /tmp/ccJubwoR.s 			page 3


  89:./FreeRtos/port/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
  90:./FreeRtos/port/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN				( 0xfffffffd )
  91:./FreeRtos/port/ARM_CM4F/port.c **** 
  92:./FreeRtos/port/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  93:./FreeRtos/port/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  94:./FreeRtos/port/ARM_CM4F/port.c **** 
  95:./FreeRtos/port/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  96:./FreeRtos/port/ARM_CM4F/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  97:./FreeRtos/port/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
  98:./FreeRtos/port/ARM_CM4F/port.c **** 
  99:./FreeRtos/port/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 100:./FreeRtos/port/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 101:./FreeRtos/port/ARM_CM4F/port.c **** calculations. */
 102:./FreeRtos/port/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 103:./FreeRtos/port/ARM_CM4F/port.c **** 
 104:./FreeRtos/port/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 105:./FreeRtos/port/ARM_CM4F/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 106:./FreeRtos/port/ARM_CM4F/port.c **** debugger. */
 107:./FreeRtos/port/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 108:./FreeRtos/port/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 109:./FreeRtos/port/ARM_CM4F/port.c **** #else
 110:./FreeRtos/port/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 111:./FreeRtos/port/ARM_CM4F/port.c **** #endif
 112:./FreeRtos/port/ARM_CM4F/port.c **** 
 113:./FreeRtos/port/ARM_CM4F/port.c **** /*
 114:./FreeRtos/port/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 115:./FreeRtos/port/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 116:./FreeRtos/port/ARM_CM4F/port.c ****  * generate the tick interrupt.
 117:./FreeRtos/port/ARM_CM4F/port.c ****  */
 118:./FreeRtos/port/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 119:./FreeRtos/port/ARM_CM4F/port.c **** 
 120:./FreeRtos/port/ARM_CM4F/port.c **** /*
 121:./FreeRtos/port/ARM_CM4F/port.c ****  * Exception handlers.
 122:./FreeRtos/port/ARM_CM4F/port.c ****  */
 123:./FreeRtos/port/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 124:./FreeRtos/port/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 125:./FreeRtos/port/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 126:./FreeRtos/port/ARM_CM4F/port.c **** 
 127:./FreeRtos/port/ARM_CM4F/port.c **** /*
 128:./FreeRtos/port/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 129:./FreeRtos/port/ARM_CM4F/port.c ****  */
 130:./FreeRtos/port/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 131:./FreeRtos/port/ARM_CM4F/port.c **** 
 132:./FreeRtos/port/ARM_CM4F/port.c **** /*
 133:./FreeRtos/port/ARM_CM4F/port.c ****  * Function to enable the VFP.
 134:./FreeRtos/port/ARM_CM4F/port.c ****  */
 135:./FreeRtos/port/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 136:./FreeRtos/port/ARM_CM4F/port.c **** 
 137:./FreeRtos/port/ARM_CM4F/port.c **** /*
 138:./FreeRtos/port/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 139:./FreeRtos/port/ARM_CM4F/port.c ****  */
 140:./FreeRtos/port/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 141:./FreeRtos/port/ARM_CM4F/port.c **** 
 142:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 143:./FreeRtos/port/ARM_CM4F/port.c **** 
 144:./FreeRtos/port/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 145:./FreeRtos/port/ARM_CM4F/port.c **** variable. */
ARM GAS  /tmp/ccJubwoR.s 			page 4


 146:./FreeRtos/port/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 147:./FreeRtos/port/ARM_CM4F/port.c **** 
 148:./FreeRtos/port/ARM_CM4F/port.c **** /*
 149:./FreeRtos/port/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 150:./FreeRtos/port/ARM_CM4F/port.c ****  */
 151:./FreeRtos/port/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 152:./FreeRtos/port/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 153:./FreeRtos/port/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 154:./FreeRtos/port/ARM_CM4F/port.c **** 
 155:./FreeRtos/port/ARM_CM4F/port.c **** /*
 156:./FreeRtos/port/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 157:./FreeRtos/port/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 158:./FreeRtos/port/ARM_CM4F/port.c ****  */
 159:./FreeRtos/port/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 160:./FreeRtos/port/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 161:./FreeRtos/port/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 162:./FreeRtos/port/ARM_CM4F/port.c **** 
 163:./FreeRtos/port/ARM_CM4F/port.c **** /*
 164:./FreeRtos/port/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 165:./FreeRtos/port/ARM_CM4F/port.c ****  * power functionality only.
 166:./FreeRtos/port/ARM_CM4F/port.c ****  */
 167:./FreeRtos/port/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 168:./FreeRtos/port/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 169:./FreeRtos/port/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 170:./FreeRtos/port/ARM_CM4F/port.c **** 
 171:./FreeRtos/port/ARM_CM4F/port.c **** /*
 172:./FreeRtos/port/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 173:./FreeRtos/port/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 174:./FreeRtos/port/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 175:./FreeRtos/port/ARM_CM4F/port.c ****  */
 176:./FreeRtos/port/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 177:./FreeRtos/port/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 178:./FreeRtos/port/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 179:./FreeRtos/port/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 180:./FreeRtos/port/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 181:./FreeRtos/port/ARM_CM4F/port.c **** 
 182:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 183:./FreeRtos/port/ARM_CM4F/port.c **** 
 184:./FreeRtos/port/ARM_CM4F/port.c **** /*
 185:./FreeRtos/port/ARM_CM4F/port.c ****  * See header file for description.
 186:./FreeRtos/port/ARM_CM4F/port.c ****  */
 187:./FreeRtos/port/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 188:./FreeRtos/port/ARM_CM4F/port.c **** {
 189:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 190:./FreeRtos/port/ARM_CM4F/port.c **** 	interrupt. */
 191:./FreeRtos/port/ARM_CM4F/port.c **** 
 192:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 193:./FreeRtos/port/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 194:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 195:./FreeRtos/port/ARM_CM4F/port.c **** 
 196:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 197:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 198:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 199:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 200:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 201:./FreeRtos/port/ARM_CM4F/port.c **** 
 202:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
ARM GAS  /tmp/ccJubwoR.s 			page 5


 203:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 204:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 205:./FreeRtos/port/ARM_CM4F/port.c **** 
 206:./FreeRtos/port/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 207:./FreeRtos/port/ARM_CM4F/port.c **** 	own exec return value. */
 208:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 209:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
 210:./FreeRtos/port/ARM_CM4F/port.c **** 
 211:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 212:./FreeRtos/port/ARM_CM4F/port.c **** 
 213:./FreeRtos/port/ARM_CM4F/port.c **** 	return pxTopOfStack;
 214:./FreeRtos/port/ARM_CM4F/port.c **** }
 215:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 216:./FreeRtos/port/ARM_CM4F/port.c **** 
 217:./FreeRtos/port/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 218:./FreeRtos/port/ARM_CM4F/port.c **** {
 219:./FreeRtos/port/ARM_CM4F/port.c **** volatile uint32_t ulDummy = 0;
 220:./FreeRtos/port/ARM_CM4F/port.c **** 
 221:./FreeRtos/port/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 222:./FreeRtos/port/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 223:./FreeRtos/port/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 224:./FreeRtos/port/ARM_CM4F/port.c **** 
 225:./FreeRtos/port/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 226:./FreeRtos/port/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 227:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
 228:./FreeRtos/port/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 229:./FreeRtos/port/ARM_CM4F/port.c **** 	while( ulDummy == 0 )
 230:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 231:./FreeRtos/port/ARM_CM4F/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 232:./FreeRtos/port/ARM_CM4F/port.c **** 		started to remove a compiler warning about the function being defined
 233:./FreeRtos/port/ARM_CM4F/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 234:./FreeRtos/port/ARM_CM4F/port.c **** 		about code appearing after this function is called - making ulDummy
 235:./FreeRtos/port/ARM_CM4F/port.c **** 		volatile makes the compiler think the function could return and
 236:./FreeRtos/port/ARM_CM4F/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 237:./FreeRtos/port/ARM_CM4F/port.c **** 		after it. */
 238:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 239:./FreeRtos/port/ARM_CM4F/port.c **** }
 240:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 241:./FreeRtos/port/ARM_CM4F/port.c **** 
 242:./FreeRtos/port/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 243:./FreeRtos/port/ARM_CM4F/port.c **** {
 244:./FreeRtos/port/ARM_CM4F/port.c **** 	__asm volatile (
 245:./FreeRtos/port/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 246:./FreeRtos/port/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 247:./FreeRtos/port/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 248:./FreeRtos/port/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 249:./FreeRtos/port/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 250:./FreeRtos/port/ARM_CM4F/port.c **** 					"	isb								\n"
 251:./FreeRtos/port/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 252:./FreeRtos/port/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 253:./FreeRtos/port/ARM_CM4F/port.c **** 					"	bx r14							\n"
 254:./FreeRtos/port/ARM_CM4F/port.c **** 					"									\n"
 255:./FreeRtos/port/ARM_CM4F/port.c **** 					"	.align 4						\n"
 256:./FreeRtos/port/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 257:./FreeRtos/port/ARM_CM4F/port.c **** 				);
 258:./FreeRtos/port/ARM_CM4F/port.c **** }
 259:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccJubwoR.s 			page 6


 260:./FreeRtos/port/ARM_CM4F/port.c **** 
 261:./FreeRtos/port/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 262:./FreeRtos/port/ARM_CM4F/port.c **** {
  28              		.loc 1 262 1 view -0
  29              		.cfi_startproc
  30              		@ Naked Function: prologue and epilogue provided by programmer.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 263:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Start the first task.  This also clears the bit that indicates the FPU is
 264:./FreeRtos/port/ARM_CM4F/port.c **** 	in use in case the FPU was used before the scheduler was started - which
 265:./FreeRtos/port/ARM_CM4F/port.c **** 	would otherwise result in the unnecessary leaving of space in the SVC stack
 266:./FreeRtos/port/ARM_CM4F/port.c **** 	for lazy saving of FPU registers. */
 267:./FreeRtos/port/ARM_CM4F/port.c **** 	__asm volatile(
  33              		.loc 1 267 2 view .LVU1
  34              		.syntax unified
  35              	@ 267 "./FreeRtos/port/ARM_CM4F/port.c" 1
  36 0000 0848     		 ldr r0, =0xE000ED08 	
  37 0002 0068     	 ldr r0, [r0] 			
  38 0004 0068     	 ldr r0, [r0] 			
  39 0006 80F30888 	 msr msp, r0			
  40 000a 4FF00000 	 mov r0, #0			
  41 000e 80F31488 	 msr control, r0		
  42 0012 62B6     	 cpsie i				
  43 0014 61B6     	 cpsie f				
  44 0016 BFF34F8F 	 dsb					
  45 001a BFF36F8F 	 isb					
  46 001e 00DF     	 svc 0					
  47 0020 00BF     	 nop					
  48              	
  49              	@ 0 "" 2
 268:./FreeRtos/port/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 269:./FreeRtos/port/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 270:./FreeRtos/port/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 271:./FreeRtos/port/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 272:./FreeRtos/port/ARM_CM4F/port.c **** 					" mov r0, #0			\n" /* Clear the bit that indicates the FPU is in use, see comment above. */
 273:./FreeRtos/port/ARM_CM4F/port.c **** 					" msr control, r0		\n"
 274:./FreeRtos/port/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 275:./FreeRtos/port/ARM_CM4F/port.c **** 					" cpsie f				\n"
 276:./FreeRtos/port/ARM_CM4F/port.c **** 					" dsb					\n"
 277:./FreeRtos/port/ARM_CM4F/port.c **** 					" isb					\n"
 278:./FreeRtos/port/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 279:./FreeRtos/port/ARM_CM4F/port.c **** 					" nop					\n"
 280:./FreeRtos/port/ARM_CM4F/port.c **** 				);
 281:./FreeRtos/port/ARM_CM4F/port.c **** }
  50              		.loc 1 281 1 is_stmt 0 view .LVU2
  51              		.thumb
  52              		.syntax unified
  53              		.cfi_endproc
  54              	.LFE134:
  56 0022 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
  57              		.align	1
  58              		.syntax unified
  59              		.thumb
  60              		.thumb_func
  61              		.fpu fpv4-sp-d16
  63              	vPortEnableVFP:
  64              	.LFB142:
ARM GAS  /tmp/ccJubwoR.s 			page 7


 282:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 283:./FreeRtos/port/ARM_CM4F/port.c **** 
 284:./FreeRtos/port/ARM_CM4F/port.c **** /*
 285:./FreeRtos/port/ARM_CM4F/port.c ****  * See header file for description.
 286:./FreeRtos/port/ARM_CM4F/port.c ****  */
 287:./FreeRtos/port/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 288:./FreeRtos/port/ARM_CM4F/port.c **** {
 289:./FreeRtos/port/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 290:./FreeRtos/port/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 291:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 292:./FreeRtos/port/ARM_CM4F/port.c **** 
 293:./FreeRtos/port/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 294:./FreeRtos/port/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 295:./FreeRtos/port/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 296:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 297:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 298:./FreeRtos/port/ARM_CM4F/port.c **** 
 299:./FreeRtos/port/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 300:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 301:./FreeRtos/port/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 302:./FreeRtos/port/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 303:./FreeRtos/port/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 304:./FreeRtos/port/ARM_CM4F/port.c **** 
 305:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 306:./FreeRtos/port/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 307:./FreeRtos/port/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 308:./FreeRtos/port/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 309:./FreeRtos/port/ARM_CM4F/port.c **** 
 310:./FreeRtos/port/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 311:./FreeRtos/port/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 312:./FreeRtos/port/ARM_CM4F/port.c **** 
 313:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 314:./FreeRtos/port/ARM_CM4F/port.c **** 		possible bits. */
 315:./FreeRtos/port/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 316:./FreeRtos/port/ARM_CM4F/port.c **** 
 317:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 318:./FreeRtos/port/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 319:./FreeRtos/port/ARM_CM4F/port.c **** 
 320:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 321:./FreeRtos/port/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 322:./FreeRtos/port/ARM_CM4F/port.c **** 
 323:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 324:./FreeRtos/port/ARM_CM4F/port.c **** 		of bits read back. */
 325:./FreeRtos/port/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 327:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 328:./FreeRtos/port/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 329:./FreeRtos/port/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 330:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 331:./FreeRtos/port/ARM_CM4F/port.c **** 
 332:./FreeRtos/port/ARM_CM4F/port.c **** 		#ifdef __NVIC_PRIO_BITS
 333:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 334:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Check the CMSIS configuration that defines the number of
 335:./FreeRtos/port/ARM_CM4F/port.c **** 			priority bits matches the number of priority bits actually queried
 336:./FreeRtos/port/ARM_CM4F/port.c **** 			from the hardware. */
 337:./FreeRtos/port/ARM_CM4F/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 338:./FreeRtos/port/ARM_CM4F/port.c **** 		}
ARM GAS  /tmp/ccJubwoR.s 			page 8


 339:./FreeRtos/port/ARM_CM4F/port.c **** 		#endif
 340:./FreeRtos/port/ARM_CM4F/port.c **** 
 341:./FreeRtos/port/ARM_CM4F/port.c **** 		#ifdef configPRIO_BITS
 342:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 343:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 344:./FreeRtos/port/ARM_CM4F/port.c **** 			priority bits matches the number of priority bits actually queried
 345:./FreeRtos/port/ARM_CM4F/port.c **** 			from the hardware. */
 346:./FreeRtos/port/ARM_CM4F/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 347:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 348:./FreeRtos/port/ARM_CM4F/port.c **** 		#endif
 349:./FreeRtos/port/ARM_CM4F/port.c **** 
 350:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 351:./FreeRtos/port/ARM_CM4F/port.c **** 		register. */
 352:./FreeRtos/port/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 353:./FreeRtos/port/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 354:./FreeRtos/port/ARM_CM4F/port.c **** 
 355:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 356:./FreeRtos/port/ARM_CM4F/port.c **** 		value. */
 357:./FreeRtos/port/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 358:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 359:./FreeRtos/port/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 360:./FreeRtos/port/ARM_CM4F/port.c **** 
 361:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 362:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 363:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 364:./FreeRtos/port/ARM_CM4F/port.c **** 
 365:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 366:./FreeRtos/port/ARM_CM4F/port.c **** 	here already. */
 367:./FreeRtos/port/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 368:./FreeRtos/port/ARM_CM4F/port.c **** 
 369:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 370:./FreeRtos/port/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 371:./FreeRtos/port/ARM_CM4F/port.c **** 
 372:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 373:./FreeRtos/port/ARM_CM4F/port.c **** 	vPortEnableVFP();
 374:./FreeRtos/port/ARM_CM4F/port.c **** 
 375:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Lazy save always. */
 376:./FreeRtos/port/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 377:./FreeRtos/port/ARM_CM4F/port.c **** 
 378:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Start the first task. */
 379:./FreeRtos/port/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 380:./FreeRtos/port/ARM_CM4F/port.c **** 
 381:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 382:./FreeRtos/port/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 383:./FreeRtos/port/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 384:./FreeRtos/port/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 385:./FreeRtos/port/ARM_CM4F/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 386:./FreeRtos/port/ARM_CM4F/port.c **** 	symbol. */
 387:./FreeRtos/port/ARM_CM4F/port.c **** 	vTaskSwitchContext();
 388:./FreeRtos/port/ARM_CM4F/port.c **** 	prvTaskExitError();
 389:./FreeRtos/port/ARM_CM4F/port.c **** 
 390:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Should not get here! */
 391:./FreeRtos/port/ARM_CM4F/port.c **** 	return 0;
 392:./FreeRtos/port/ARM_CM4F/port.c **** }
 393:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 394:./FreeRtos/port/ARM_CM4F/port.c **** 
 395:./FreeRtos/port/ARM_CM4F/port.c **** void vPortEndScheduler( void )
ARM GAS  /tmp/ccJubwoR.s 			page 9


 396:./FreeRtos/port/ARM_CM4F/port.c **** {
 397:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 398:./FreeRtos/port/ARM_CM4F/port.c **** 	Artificially force an assert. */
 399:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 400:./FreeRtos/port/ARM_CM4F/port.c **** }
 401:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 402:./FreeRtos/port/ARM_CM4F/port.c **** 
 403:./FreeRtos/port/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 404:./FreeRtos/port/ARM_CM4F/port.c **** {
 405:./FreeRtos/port/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 406:./FreeRtos/port/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 407:./FreeRtos/port/ARM_CM4F/port.c **** 
 408:./FreeRtos/port/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 409:./FreeRtos/port/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 410:./FreeRtos/port/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
 411:./FreeRtos/port/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 412:./FreeRtos/port/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 413:./FreeRtos/port/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 414:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 415:./FreeRtos/port/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 416:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 417:./FreeRtos/port/ARM_CM4F/port.c **** }
 418:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 419:./FreeRtos/port/ARM_CM4F/port.c **** 
 420:./FreeRtos/port/ARM_CM4F/port.c **** void vPortExitCritical( void )
 421:./FreeRtos/port/ARM_CM4F/port.c **** {
 422:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 423:./FreeRtos/port/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 424:./FreeRtos/port/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 425:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 426:./FreeRtos/port/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 427:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 428:./FreeRtos/port/ARM_CM4F/port.c **** }
 429:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 430:./FreeRtos/port/ARM_CM4F/port.c **** 
 431:./FreeRtos/port/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 432:./FreeRtos/port/ARM_CM4F/port.c **** {
 433:./FreeRtos/port/ARM_CM4F/port.c **** 	/* This is a naked function. */
 434:./FreeRtos/port/ARM_CM4F/port.c **** 
 435:./FreeRtos/port/ARM_CM4F/port.c **** 	__asm volatile
 436:./FreeRtos/port/ARM_CM4F/port.c **** 	(
 437:./FreeRtos/port/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 438:./FreeRtos/port/ARM_CM4F/port.c **** 	"	isb									\n"
 439:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 440:./FreeRtos/port/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 441:./FreeRtos/port/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 442:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 443:./FreeRtos/port/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 444:./FreeRtos/port/ARM_CM4F/port.c **** 	"	it eq								\n"
 445:./FreeRtos/port/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 446:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 447:./FreeRtos/port/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 448:./FreeRtos/port/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 449:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 450:./FreeRtos/port/ARM_CM4F/port.c **** 	"	stmdb sp!, {r0, r3}					\n"
 451:./FreeRtos/port/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 452:./FreeRtos/port/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
ARM GAS  /tmp/ccJubwoR.s 			page 10


 453:./FreeRtos/port/ARM_CM4F/port.c **** 	"	dsb									\n"
 454:./FreeRtos/port/ARM_CM4F/port.c **** 	"	isb									\n"
 455:./FreeRtos/port/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 456:./FreeRtos/port/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 457:./FreeRtos/port/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 458:./FreeRtos/port/ARM_CM4F/port.c **** 	"	ldmia sp!, {r0, r3}					\n"
 459:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 460:./FreeRtos/port/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 461:./FreeRtos/port/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 462:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 463:./FreeRtos/port/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 464:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 465:./FreeRtos/port/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 466:./FreeRtos/port/ARM_CM4F/port.c **** 	"	it eq								\n"
 467:./FreeRtos/port/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 468:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 469:./FreeRtos/port/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 470:./FreeRtos/port/ARM_CM4F/port.c **** 	"	isb									\n"
 471:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 472:./FreeRtos/port/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 473:./FreeRtos/port/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 474:./FreeRtos/port/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 475:./FreeRtos/port/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 476:./FreeRtos/port/ARM_CM4F/port.c **** 		#endif
 477:./FreeRtos/port/ARM_CM4F/port.c **** 	#endif
 478:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 479:./FreeRtos/port/ARM_CM4F/port.c **** 	"	bx r14								\n"
 480:./FreeRtos/port/ARM_CM4F/port.c **** 	"										\n"
 481:./FreeRtos/port/ARM_CM4F/port.c **** 	"	.align 4							\n"
 482:./FreeRtos/port/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 483:./FreeRtos/port/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 484:./FreeRtos/port/ARM_CM4F/port.c **** 	);
 485:./FreeRtos/port/ARM_CM4F/port.c **** }
 486:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 487:./FreeRtos/port/ARM_CM4F/port.c **** 
 488:./FreeRtos/port/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 489:./FreeRtos/port/ARM_CM4F/port.c **** {
 490:./FreeRtos/port/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 491:./FreeRtos/port/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 492:./FreeRtos/port/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 493:./FreeRtos/port/ARM_CM4F/port.c **** 	known. */
 494:./FreeRtos/port/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 495:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 496:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 497:./FreeRtos/port/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 498:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 499:./FreeRtos/port/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 500:./FreeRtos/port/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 501:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 502:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 503:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 504:./FreeRtos/port/ARM_CM4F/port.c **** 	portENABLE_INTERRUPTS();
 505:./FreeRtos/port/ARM_CM4F/port.c **** }
 506:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 507:./FreeRtos/port/ARM_CM4F/port.c **** 
 508:./FreeRtos/port/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 509:./FreeRtos/port/ARM_CM4F/port.c **** 
ARM GAS  /tmp/ccJubwoR.s 			page 11


 510:./FreeRtos/port/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 511:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 512:./FreeRtos/port/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 513:./FreeRtos/port/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 514:./FreeRtos/port/ARM_CM4F/port.c **** 
 515:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 516:./FreeRtos/port/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 517:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 518:./FreeRtos/port/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 519:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 520:./FreeRtos/port/ARM_CM4F/port.c **** 
 521:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 522:./FreeRtos/port/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 523:./FreeRtos/port/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 524:./FreeRtos/port/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
 525:./FreeRtos/port/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 526:./FreeRtos/port/ARM_CM4F/port.c **** 
 527:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 528:./FreeRtos/port/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 529:./FreeRtos/port/ARM_CM4F/port.c **** 		through one of the tick periods. */
 530:./FreeRtos/port/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 531:./FreeRtos/port/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 532:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 533:./FreeRtos/port/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 534:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 535:./FreeRtos/port/ARM_CM4F/port.c **** 
 536:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 537:./FreeRtos/port/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 538:./FreeRtos/port/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 539:./FreeRtos/port/ARM_CM4F/port.c **** 		__asm volatile( "dsb" );
 540:./FreeRtos/port/ARM_CM4F/port.c **** 		__asm volatile( "isb" );
 541:./FreeRtos/port/ARM_CM4F/port.c **** 
 542:./FreeRtos/port/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 543:./FreeRtos/port/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 544:./FreeRtos/port/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 545:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 546:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 547:./FreeRtos/port/ARM_CM4F/port.c **** 			this tick period. */
 548:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 549:./FreeRtos/port/ARM_CM4F/port.c **** 
 550:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 551:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 552:./FreeRtos/port/ARM_CM4F/port.c **** 
 553:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 554:./FreeRtos/port/ARM_CM4F/port.c **** 			periods. */
 555:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 556:./FreeRtos/port/ARM_CM4F/port.c **** 
 557:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 558:./FreeRtos/port/ARM_CM4F/port.c **** 			above. */
 559:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 560:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 561:./FreeRtos/port/ARM_CM4F/port.c **** 		else
 562:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 563:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 564:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 565:./FreeRtos/port/ARM_CM4F/port.c **** 
 566:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
ARM GAS  /tmp/ccJubwoR.s 			page 12


 567:./FreeRtos/port/ARM_CM4F/port.c **** 			zero. */
 568:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 569:./FreeRtos/port/ARM_CM4F/port.c **** 
 570:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 571:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 572:./FreeRtos/port/ARM_CM4F/port.c **** 
 573:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 574:./FreeRtos/port/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 575:./FreeRtos/port/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 576:./FreeRtos/port/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 577:./FreeRtos/port/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 578:./FreeRtos/port/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 579:./FreeRtos/port/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 580:./FreeRtos/port/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 581:./FreeRtos/port/ARM_CM4F/port.c **** 			{
 582:./FreeRtos/port/ARM_CM4F/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 583:./FreeRtos/port/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 584:./FreeRtos/port/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 585:./FreeRtos/port/ARM_CM4F/port.c **** 			}
 586:./FreeRtos/port/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 587:./FreeRtos/port/ARM_CM4F/port.c **** 
 588:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 589:./FreeRtos/port/ARM_CM4F/port.c **** 			out of sleep mode to execute immediately.  see comments above
 590:./FreeRtos/port/ARM_CM4F/port.c **** 			__disable_interrupt() call above. */
 591:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 592:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "dsb" );
 593:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "isb" );
 594:./FreeRtos/port/ARM_CM4F/port.c **** 
 595:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 596:./FreeRtos/port/ARM_CM4F/port.c **** 			and interrupts that execute while the clock is stopped will increase
 597:./FreeRtos/port/ARM_CM4F/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 598:./FreeRtos/port/ARM_CM4F/port.c **** 			time. */
 599:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 600:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "dsb" );
 601:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "isb" );
 602:./FreeRtos/port/ARM_CM4F/port.c **** 
 603:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Disable the SysTick clock without reading the
 604:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 605:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 606:./FreeRtos/port/ARM_CM4F/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 607:./FreeRtos/port/ARM_CM4F/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 608:./FreeRtos/port/ARM_CM4F/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 609:./FreeRtos/port/ARM_CM4F/port.c **** 			time*/
 610:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 611:./FreeRtos/port/ARM_CM4F/port.c **** 
 612:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 613:./FreeRtos/port/ARM_CM4F/port.c **** 			been set back to the current reload value (the reload back being
 614:./FreeRtos/port/ARM_CM4F/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 615:./FreeRtos/port/ARM_CM4F/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 616:./FreeRtos/port/ARM_CM4F/port.c **** 			must have brought the system out of sleep mode). */
 617:./FreeRtos/port/ARM_CM4F/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 618:./FreeRtos/port/ARM_CM4F/port.c **** 			{
 619:./FreeRtos/port/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 620:./FreeRtos/port/ARM_CM4F/port.c **** 
 621:./FreeRtos/port/ARM_CM4F/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 622:./FreeRtos/port/ARM_CM4F/port.c **** 				reloaded with ulReloadValue.  Reset the
 623:./FreeRtos/port/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
ARM GAS  /tmp/ccJubwoR.s 			page 13


 624:./FreeRtos/port/ARM_CM4F/port.c **** 				period. */
 625:./FreeRtos/port/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 626:./FreeRtos/port/ARM_CM4F/port.c **** 
 627:./FreeRtos/port/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 628:./FreeRtos/port/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 629:./FreeRtos/port/ARM_CM4F/port.c **** 				that took too long. */
 630:./FreeRtos/port/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 631:./FreeRtos/port/ARM_CM4F/port.c **** 				{
 632:./FreeRtos/port/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 633:./FreeRtos/port/ARM_CM4F/port.c **** 				}
 634:./FreeRtos/port/ARM_CM4F/port.c **** 
 635:./FreeRtos/port/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 636:./FreeRtos/port/ARM_CM4F/port.c **** 
 637:./FreeRtos/port/ARM_CM4F/port.c **** 				/* As the pending tick will be processed as soon as this
 638:./FreeRtos/port/ARM_CM4F/port.c **** 				function exits, the tick value maintained by the tick is stepped
 639:./FreeRtos/port/ARM_CM4F/port.c **** 				forward by one less than the time spent waiting. */
 640:./FreeRtos/port/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 641:./FreeRtos/port/ARM_CM4F/port.c **** 			}
 642:./FreeRtos/port/ARM_CM4F/port.c **** 			else
 643:./FreeRtos/port/ARM_CM4F/port.c **** 			{
 644:./FreeRtos/port/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 645:./FreeRtos/port/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 646:./FreeRtos/port/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 647:./FreeRtos/port/ARM_CM4F/port.c **** 				ticks). */
 648:./FreeRtos/port/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 649:./FreeRtos/port/ARM_CM4F/port.c **** 
 650:./FreeRtos/port/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 651:./FreeRtos/port/ARM_CM4F/port.c **** 				was waiting? */
 652:./FreeRtos/port/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 653:./FreeRtos/port/ARM_CM4F/port.c **** 
 654:./FreeRtos/port/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 655:./FreeRtos/port/ARM_CM4F/port.c **** 				period remains. */
 656:./FreeRtos/port/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 657:./FreeRtos/port/ARM_CM4F/port.c **** 			}
 658:./FreeRtos/port/ARM_CM4F/port.c **** 
 659:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 660:./FreeRtos/port/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 661:./FreeRtos/port/ARM_CM4F/port.c **** 			value. */
 662:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 663:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 664:./FreeRtos/port/ARM_CM4F/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 665:./FreeRtos/port/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 666:./FreeRtos/port/ARM_CM4F/port.c **** 
 667:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Exit with interrupts enabled. */
 668:./FreeRtos/port/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 669:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 670:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 671:./FreeRtos/port/ARM_CM4F/port.c **** 
 672:./FreeRtos/port/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 673:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 674:./FreeRtos/port/ARM_CM4F/port.c **** 
 675:./FreeRtos/port/ARM_CM4F/port.c **** /*
 676:./FreeRtos/port/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 677:./FreeRtos/port/ARM_CM4F/port.c ****  * frequency.
 678:./FreeRtos/port/ARM_CM4F/port.c ****  */
 679:./FreeRtos/port/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 680:./FreeRtos/port/ARM_CM4F/port.c **** {
ARM GAS  /tmp/ccJubwoR.s 			page 14


 681:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 682:./FreeRtos/port/ARM_CM4F/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 683:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 684:./FreeRtos/port/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 685:./FreeRtos/port/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 686:./FreeRtos/port/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 687:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 688:./FreeRtos/port/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 689:./FreeRtos/port/ARM_CM4F/port.c **** 
 690:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Stop and clear the SysTick. */
 691:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 692:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 693:./FreeRtos/port/ARM_CM4F/port.c **** 
 694:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 695:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 696:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 697:./FreeRtos/port/ARM_CM4F/port.c **** }
 698:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 699:./FreeRtos/port/ARM_CM4F/port.c **** 
 700:./FreeRtos/port/ARM_CM4F/port.c **** /* This is a naked function. */
 701:./FreeRtos/port/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 702:./FreeRtos/port/ARM_CM4F/port.c **** {
  65              		.loc 1 702 1 is_stmt 1 view -0
  66              		.cfi_startproc
  67              		@ Naked Function: prologue and epilogue provided by programmer.
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
 703:./FreeRtos/port/ARM_CM4F/port.c **** 	__asm volatile
  70              		.loc 1 703 2 view .LVU4
  71              		.syntax unified
  72              	@ 703 "./FreeRtos/port/ARM_CM4F/port.c" 1
  73 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
  74 0004 0168     		ldr r1, [r0]				
  75              									
  76 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
  77 000a 0160     		str r1, [r0]				
  78 000c 7047     		bx r14						
  79              	@ 0 "" 2
 704:./FreeRtos/port/ARM_CM4F/port.c **** 	(
 705:./FreeRtos/port/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 706:./FreeRtos/port/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 707:./FreeRtos/port/ARM_CM4F/port.c **** 		"								\n"
 708:./FreeRtos/port/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 709:./FreeRtos/port/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 710:./FreeRtos/port/ARM_CM4F/port.c **** 		"	bx r14						"
 711:./FreeRtos/port/ARM_CM4F/port.c **** 	);
 712:./FreeRtos/port/ARM_CM4F/port.c **** }
  80              		.loc 1 712 1 is_stmt 0 view .LVU5
  81              		.thumb
  82              		.syntax unified
  83              		.cfi_endproc
  84              	.LFE142:
  86 000e 0000     		.section	.rodata.prvTaskExitError.str1.4,"aMS",%progbits,1
  87              		.align	2
  88              	.LC0:
  89 0000 2E2F4672 		.ascii	"./FreeRtos/port/ARM_CM4F/port.c\000"
  89      65655274 
ARM GAS  /tmp/ccJubwoR.s 			page 15


  89      6F732F70 
  89      6F72742F 
  89      41524D5F 
  90              		.align	2
  91              	.LC1:
  92 0020 4572726F 		.ascii	"Error:%s,%d\015\012\000"
  92      723A2573 
  92      2C25640D 
  92      0A00
  93              		.section	.text.prvTaskExitError,"ax",%progbits
  94              		.align	1
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu fpv4-sp-d16
 100              	prvTaskExitError:
 101              	.LFB132:
 218:./FreeRtos/port/ARM_CM4F/port.c **** volatile uint32_t ulDummy = 0;
 102              		.loc 1 218 1 is_stmt 1 view -0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 8
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106 0000 00B5     		push	{lr}
 107              	.LCFI0:
 108              		.cfi_def_cfa_offset 4
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 16
 219:./FreeRtos/port/ARM_CM4F/port.c **** 
 113              		.loc 1 219 1 view .LVU7
 219:./FreeRtos/port/ARM_CM4F/port.c **** 
 114              		.loc 1 219 19 is_stmt 0 view .LVU8
 115 0004 0023     		movs	r3, #0
 116 0006 0193     		str	r3, [sp, #4]
 227:./FreeRtos/port/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 117              		.loc 1 227 2 is_stmt 1 view .LVU9
 118 0008 0C4B     		ldr	r3, .L8
 119 000a 1B68     		ldr	r3, [r3]
 120 000c B3F1FF3F 		cmp	r3, #-1
 121 0010 0DD1     		bne	.L7
 122              	.L4:
 228:./FreeRtos/port/ARM_CM4F/port.c **** 	while( ulDummy == 0 )
 123              		.loc 1 228 2 view .LVU10
 124              	.LBB12:
 125              	.LBI12:
 126              		.file 2 "./FreeRtos/port/ARM_CM4F/portmacro.h"
   1:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*
   2:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.3.1
   3:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
   5:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
ARM GAS  /tmp/ccJubwoR.s 			page 16


  11:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  12:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  15:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  22:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  25:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:./FreeRtos/port/ARM_CM4F/portmacro.h ****  */
  27:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  28:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  29:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  32:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern "C" {
  34:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
  35:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  36:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  39:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *
  42:./FreeRtos/port/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:./FreeRtos/port/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:./FreeRtos/port/ARM_CM4F/portmacro.h ****  */
  45:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  46:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  55:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:./FreeRtos/port/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  59:./FreeRtos/port/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:./FreeRtos/port/ARM_CM4F/portmacro.h **** #else
  63:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  66:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
ARM GAS  /tmp/ccJubwoR.s 			page 17


  68:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
  70:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  72:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  78:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:./FreeRtos/port/ARM_CM4F/portmacro.h **** {																				\
  81:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:./FreeRtos/port/ARM_CM4F/portmacro.h **** 																				\
  84:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
  89:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  90:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
  96:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:./FreeRtos/port/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 106:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 108:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:./FreeRtos/port/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:./FreeRtos/port/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 115:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 120:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 122:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
ARM GAS  /tmp/ccJubwoR.s 			page 18


 125:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 126:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 127:./FreeRtos/port/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 129:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 132:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 134:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 137:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 138:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#endif
 142:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 143:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 147:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 149:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 151:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 153:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 155:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 159:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 160:./FreeRtos/port/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portNOP()
 162:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 163:./FreeRtos/port/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 165:./FreeRtos/port/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:./FreeRtos/port/ARM_CM4F/portmacro.h **** #endif
 168:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 169:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 171:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:./FreeRtos/port/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 174:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 177:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 179:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 181:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	else
ARM GAS  /tmp/ccJubwoR.s 			page 19


 182:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	{
 183:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	}
 185:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 186:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 188:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 189:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 127              		.loc 2 191 30 view .LVU11
 128              	.LBB13:
 192:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 129              		.loc 2 193 1 view .LVU12
 194:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 195:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 130              		.loc 2 195 2 view .LVU13
 131              		.syntax unified
 132              	@ 195 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 133 0012 4FF05003 			mov r3, #80												
 134 0016 83F31188 		msr basepri, r3											
 135 001a BFF36F8F 		isb														
 136 001e BFF34F8F 		dsb														
 137              	
 138              	@ 0 "" 2
 139              	.LVL0:
 140              		.thumb
 141              		.syntax unified
 142              	.L5:
 143              		.loc 2 195 2 is_stmt 0 view .LVU14
 144              	.LBE13:
 145              	.LBE12:
 238:./FreeRtos/port/ARM_CM4F/port.c **** }
 146              		.loc 1 238 2 is_stmt 1 discriminator 1 view .LVU15
 229:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 147              		.loc 1 229 7 discriminator 1 view .LVU16
 229:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 148              		.loc 1 229 17 is_stmt 0 discriminator 1 view .LVU17
 149 0022 019B     		ldr	r3, [sp, #4]
 229:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 150              		.loc 1 229 7 discriminator 1 view .LVU18
 151 0024 002B     		cmp	r3, #0
 152 0026 FCD0     		beq	.L5
 239:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 153              		.loc 1 239 1 view .LVU19
 154 0028 03B0     		add	sp, sp, #12
 155              	.LCFI2:
 156              		.cfi_remember_state
 157              		.cfi_def_cfa_offset 4
 158              		@ sp needed
 159 002a 5DF804FB 		ldr	pc, [sp], #4
 160              	.L7:
 161              	.LCFI3:
 162              		.cfi_restore_state
 227:./FreeRtos/port/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 163              		.loc 1 227 2 is_stmt 1 discriminator 1 view .LVU20
ARM GAS  /tmp/ccJubwoR.s 			page 20


 164 002e E322     		movs	r2, #227
 165 0030 0349     		ldr	r1, .L8+4
 166 0032 0448     		ldr	r0, .L8+8
 167 0034 FFF7FEFF 		bl	printf
 168              	.LVL1:
 169 0038 EBE7     		b	.L4
 170              	.L9:
 171 003a 00BF     		.align	2
 172              	.L8:
 173 003c 00000000 		.word	.LANCHOR0
 174 0040 00000000 		.word	.LC0
 175 0044 20000000 		.word	.LC1
 176              		.cfi_endproc
 177              	.LFE132:
 179              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 180              		.align	1
 181              		.global	pxPortInitialiseStack
 182              		.syntax unified
 183              		.thumb
 184              		.thumb_func
 185              		.fpu fpv4-sp-d16
 187              	pxPortInitialiseStack:
 188              	.LVL2:
 189              	.LFB131:
 188:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 190              		.loc 1 188 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 194:./FreeRtos/port/ARM_CM4F/port.c **** 
 195              		.loc 1 194 2 view .LVU22
 196:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 196              		.loc 1 196 2 view .LVU23
 196:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 197              		.loc 1 196 16 is_stmt 0 view .LVU24
 198 0000 4FF08073 		mov	r3, #16777216
 199 0004 40F8043C 		str	r3, [r0, #-4]
 197:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 200              		.loc 1 197 2 is_stmt 1 view .LVU25
 201              	.LVL3:
 198:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 202              		.loc 1 198 2 view .LVU26
 198:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 203              		.loc 1 198 45 is_stmt 0 view .LVU27
 204 0008 21F00101 		bic	r1, r1, #1
 205              	.LVL4:
 198:./FreeRtos/port/ARM_CM4F/port.c **** 	pxTopOfStack--;
 206              		.loc 1 198 16 view .LVU28
 207 000c 40F8081C 		str	r1, [r0, #-8]
 199:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 208              		.loc 1 199 2 is_stmt 1 view .LVU29
 209              	.LVL5:
 200:./FreeRtos/port/ARM_CM4F/port.c **** 
 210              		.loc 1 200 2 view .LVU30
 200:./FreeRtos/port/ARM_CM4F/port.c **** 
 211              		.loc 1 200 18 is_stmt 0 view .LVU31
ARM GAS  /tmp/ccJubwoR.s 			page 21


 212 0010 054B     		ldr	r3, .L11
 200:./FreeRtos/port/ARM_CM4F/port.c **** 
 213              		.loc 1 200 16 view .LVU32
 214 0012 40F80C3C 		str	r3, [r0, #-12]
 203:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 215              		.loc 1 203 2 is_stmt 1 view .LVU33
 216              	.LVL6:
 204:./FreeRtos/port/ARM_CM4F/port.c **** 
 217              		.loc 1 204 2 view .LVU34
 204:./FreeRtos/port/ARM_CM4F/port.c **** 
 218              		.loc 1 204 16 is_stmt 0 view .LVU35
 219 0016 40F8202C 		str	r2, [r0, #-32]
 208:./FreeRtos/port/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
 220              		.loc 1 208 2 is_stmt 1 view .LVU36
 221              	.LVL7:
 209:./FreeRtos/port/ARM_CM4F/port.c **** 
 222              		.loc 1 209 2 view .LVU37
 209:./FreeRtos/port/ARM_CM4F/port.c **** 
 223              		.loc 1 209 16 is_stmt 0 view .LVU38
 224 001a 6FF00203 		mvn	r3, #2
 225 001e 40F8243C 		str	r3, [r0, #-36]
 211:./FreeRtos/port/ARM_CM4F/port.c **** 
 226              		.loc 1 211 2 is_stmt 1 view .LVU39
 227              	.LVL8:
 213:./FreeRtos/port/ARM_CM4F/port.c **** }
 228              		.loc 1 213 2 view .LVU40
 214:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 229              		.loc 1 214 1 is_stmt 0 view .LVU41
 230 0022 4438     		subs	r0, r0, #68
 231              	.LVL9:
 214:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 232              		.loc 1 214 1 view .LVU42
 233 0024 7047     		bx	lr
 234              	.L12:
 235 0026 00BF     		.align	2
 236              	.L11:
 237 0028 00000000 		.word	prvTaskExitError
 238              		.cfi_endproc
 239              	.LFE131:
 241              		.section	.text.SVC_Handler,"ax",%progbits
 242              		.align	1
 243              		.global	SVC_Handler
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu fpv4-sp-d16
 249              	SVC_Handler:
 250              	.LFB133:
 243:./FreeRtos/port/ARM_CM4F/port.c **** 	__asm volatile (
 251              		.loc 1 243 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ Naked Function: prologue and epilogue provided by programmer.
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 244:./FreeRtos/port/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 256              		.loc 1 244 2 view .LVU44
 257              		.syntax unified
ARM GAS  /tmp/ccJubwoR.s 			page 22


 258              	@ 244 "./FreeRtos/port/ARM_CM4F/port.c" 1
 259 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 260 0002 1968     		ldr r1, [r3]					
 261 0004 0868     		ldr r0, [r1]					
 262 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 263 000a 80F30988 		msr psp, r0						
 264 000e BFF36F8F 		isb								
 265 0012 4FF00000 		mov r0, #0 						
 266 0016 80F31188 		msr	basepri, r0					
 267 001a 7047     		bx r14							
 268              										
 269 001c AFF30080 		.align 4						
 270 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 271              	
 272              	@ 0 "" 2
 258:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 273              		.loc 1 258 1 is_stmt 0 view .LVU45
 274              		.thumb
 275              		.syntax unified
 276              		.cfi_endproc
 277              	.LFE133:
 279              		.section	.text.vPortEndScheduler,"ax",%progbits
 280              		.align	1
 281              		.global	vPortEndScheduler
 282              		.syntax unified
 283              		.thumb
 284              		.thumb_func
 285              		.fpu fpv4-sp-d16
 287              	vPortEndScheduler:
 288              	.LFB136:
 396:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 289              		.loc 1 396 1 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293 0000 08B5     		push	{r3, lr}
 294              	.LCFI4:
 295              		.cfi_def_cfa_offset 8
 296              		.cfi_offset 3, -8
 297              		.cfi_offset 14, -4
 399:./FreeRtos/port/ARM_CM4F/port.c **** }
 298              		.loc 1 399 2 view .LVU47
 299 0002 064B     		ldr	r3, .L18
 300 0004 1B68     		ldr	r3, [r3]
 301 0006 B3F57A7F 		cmp	r3, #1000
 302 000a 00D1     		bne	.L17
 303              	.L14:
 400:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 304              		.loc 1 400 1 is_stmt 0 view .LVU48
 305 000c 08BD     		pop	{r3, pc}
 306              	.L17:
 399:./FreeRtos/port/ARM_CM4F/port.c **** }
 307              		.loc 1 399 2 is_stmt 1 discriminator 1 view .LVU49
 308 000e 40F28F12 		movw	r2, #399
 309 0012 0349     		ldr	r1, .L18+4
 310 0014 0348     		ldr	r0, .L18+8
 311 0016 FFF7FEFF 		bl	printf
ARM GAS  /tmp/ccJubwoR.s 			page 23


 312              	.LVL10:
 400:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 400 1 is_stmt 0 discriminator 1 view .LVU50
 314 001a F7E7     		b	.L14
 315              	.L19:
 316              		.align	2
 317              	.L18:
 318 001c 00000000 		.word	.LANCHOR0
 319 0020 00000000 		.word	.LC0
 320 0024 20000000 		.word	.LC1
 321              		.cfi_endproc
 322              	.LFE136:
 324              		.section	.text.vPortEnterCritical,"ax",%progbits
 325              		.align	1
 326              		.global	vPortEnterCritical
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	vPortEnterCritical:
 333              	.LFB137:
 404:./FreeRtos/port/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 334              		.loc 1 404 1 is_stmt 1 view -0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338 0000 08B5     		push	{r3, lr}
 339              	.LCFI5:
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 3, -8
 342              		.cfi_offset 14, -4
 405:./FreeRtos/port/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 343              		.loc 1 405 2 view .LVU52
 344              	.LBB14:
 345              	.LBI14:
 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 346              		.loc 2 191 30 view .LVU53
 347              	.LBB15:
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 348              		.loc 2 193 1 view .LVU54
 349              		.loc 2 195 2 view .LVU55
 350              		.syntax unified
 351              	@ 195 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 352 0002 4FF05003 			mov r3, #80												
 353 0006 83F31188 		msr basepri, r3											
 354 000a BFF36F8F 		isb														
 355 000e BFF34F8F 		dsb														
 356              	
 357              	@ 0 "" 2
 358              		.thumb
 359              		.syntax unified
 360              	.LBE15:
 361              	.LBE14:
 406:./FreeRtos/port/ARM_CM4F/port.c **** 
 362              		.loc 1 406 2 view .LVU56
 406:./FreeRtos/port/ARM_CM4F/port.c **** 
 363              		.loc 1 406 19 is_stmt 0 view .LVU57
ARM GAS  /tmp/ccJubwoR.s 			page 24


 364 0012 0A4A     		ldr	r2, .L24
 365 0014 1368     		ldr	r3, [r2]
 366 0016 0133     		adds	r3, r3, #1
 367 0018 1360     		str	r3, [r2]
 413:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 368              		.loc 1 413 2 is_stmt 1 view .LVU58
 413:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 369              		.loc 1 413 4 is_stmt 0 view .LVU59
 370 001a 012B     		cmp	r3, #1
 371 001c 00D0     		beq	.L23
 372              	.L20:
 417:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 373              		.loc 1 417 1 view .LVU60
 374 001e 08BD     		pop	{r3, pc}
 375              	.L23:
 415:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 376              		.loc 1 415 3 is_stmt 1 view .LVU61
 377 0020 4FF0E023 		mov	r3, #-536813568
 378 0024 D3F8043D 		ldr	r3, [r3, #3332]
 379 0028 13F0FF0F 		tst	r3, #255
 380 002c F7D0     		beq	.L20
 415:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 381              		.loc 1 415 3 discriminator 1 view .LVU62
 382 002e 40F29F12 		movw	r2, #415
 383 0032 0349     		ldr	r1, .L24+4
 384 0034 0348     		ldr	r0, .L24+8
 385 0036 FFF7FEFF 		bl	printf
 386              	.LVL11:
 417:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 387              		.loc 1 417 1 is_stmt 0 discriminator 1 view .LVU63
 388 003a F0E7     		b	.L20
 389              	.L25:
 390              		.align	2
 391              	.L24:
 392 003c 00000000 		.word	.LANCHOR0
 393 0040 00000000 		.word	.LC0
 394 0044 20000000 		.word	.LC1
 395              		.cfi_endproc
 396              	.LFE137:
 398              		.section	.text.vPortExitCritical,"ax",%progbits
 399              		.align	1
 400              		.global	vPortExitCritical
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu fpv4-sp-d16
 406              	vPortExitCritical:
 407              	.LFB138:
 421:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 408              		.loc 1 421 1 is_stmt 1 view -0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412 0000 08B5     		push	{r3, lr}
 413              	.LCFI6:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 3, -8
ARM GAS  /tmp/ccJubwoR.s 			page 25


 416              		.cfi_offset 14, -4
 422:./FreeRtos/port/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 417              		.loc 1 422 2 view .LVU65
 418 0002 094B     		ldr	r3, .L31
 419 0004 1B68     		ldr	r3, [r3]
 420 0006 3BB1     		cbz	r3, .L30
 421              	.L27:
 423:./FreeRtos/port/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 422              		.loc 1 423 2 view .LVU66
 423:./FreeRtos/port/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 423              		.loc 1 423 19 is_stmt 0 view .LVU67
 424 0008 074A     		ldr	r2, .L31
 425 000a 1368     		ldr	r3, [r2]
 426 000c 013B     		subs	r3, r3, #1
 427 000e 1360     		str	r3, [r2]
 424:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 428              		.loc 1 424 2 is_stmt 1 view .LVU68
 424:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 429              		.loc 1 424 4 is_stmt 0 view .LVU69
 430 0010 0BB9     		cbnz	r3, .L26
 426:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 431              		.loc 1 426 3 is_stmt 1 view .LVU70
 432              	.LVL12:
 433              	.LBB16:
 434              	.LBI16:
 196:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 197:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	);
 203:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 204:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 205:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 207:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 209:./FreeRtos/port/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 211:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 212:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 213:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:./FreeRtos/port/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	);
 220:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 221:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	warnings. */
 223:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:./FreeRtos/port/ARM_CM4F/portmacro.h **** }
 225:./FreeRtos/port/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
ARM GAS  /tmp/ccJubwoR.s 			page 26


 435              		.loc 2 227 30 view .LVU71
 436              	.LBB17:
 228:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 229:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	__asm volatile
 437              		.loc 2 229 2 view .LVU72
 438              		.syntax unified
 439              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 440 0012 83F31188 			msr basepri, r3	
 441              	@ 0 "" 2
 442              	.LVL13:
 443              		.thumb
 444              		.syntax unified
 445              	.L26:
 446              		.loc 2 229 2 is_stmt 0 view .LVU73
 447              	.LBE17:
 448              	.LBE16:
 428:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 449              		.loc 1 428 1 view .LVU74
 450 0016 08BD     		pop	{r3, pc}
 451              	.L30:
 422:./FreeRtos/port/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 452              		.loc 1 422 2 is_stmt 1 discriminator 1 view .LVU75
 453 0018 4FF4D372 		mov	r2, #422
 454 001c 0349     		ldr	r1, .L31+4
 455 001e 0448     		ldr	r0, .L31+8
 456 0020 FFF7FEFF 		bl	printf
 457              	.LVL14:
 458 0024 F0E7     		b	.L27
 459              	.L32:
 460 0026 00BF     		.align	2
 461              	.L31:
 462 0028 00000000 		.word	.LANCHOR0
 463 002c 00000000 		.word	.LC0
 464 0030 20000000 		.word	.LC1
 465              		.cfi_endproc
 466              	.LFE138:
 468              		.section	.text.PendSV_Handler,"ax",%progbits
 469              		.align	1
 470              		.global	PendSV_Handler
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu fpv4-sp-d16
 476              	PendSV_Handler:
 477              	.LFB139:
 432:./FreeRtos/port/ARM_CM4F/port.c **** 	/* This is a naked function. */
 478              		.loc 1 432 1 view -0
 479              		.cfi_startproc
 480              		@ Naked Function: prologue and epilogue provided by programmer.
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 435:./FreeRtos/port/ARM_CM4F/port.c **** 	(
 483              		.loc 1 435 2 view .LVU77
 484              		.syntax unified
 485              	@ 435 "./FreeRtos/port/ARM_CM4F/port.c" 1
 486 0000 EFF30980 			mrs r0, psp							
 487 0004 BFF36F8F 		isb									
ARM GAS  /tmp/ccJubwoR.s 			page 27


 488              											
 489 0008 154B     		ldr	r3, pxCurrentTCBConst			
 490 000a 1A68     		ldr	r2, [r3]						
 491              											
 492 000c 1EF0100F 		tst r14, #0x10						
 493 0010 08BF     		it eq								
 494 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 495              											
 496 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 497 001a 1060     		str r0, [r2]						
 498              											
 499 001c 2DE90900 		stmdb sp!, {r0, r3}					
 500 0020 4FF05000 		mov r0, #80 							
 501 0024 80F31188 		msr basepri, r0						
 502 0028 BFF34F8F 		dsb									
 503 002c BFF36F8F 		isb									
 504 0030 FFF7FEFF 		bl vTaskSwitchContext				
 505 0034 4FF00000 		mov r0, #0							
 506 0038 80F31188 		msr basepri, r0						
 507 003c 09BC     		ldmia sp!, {r0, r3}					
 508              											
 509 003e 1968     		ldr r1, [r3]						
 510 0040 0868     		ldr r0, [r1]						
 511              											
 512 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 513              											
 514 0046 1EF0100F 		tst r14, #0x10						
 515 004a 08BF     		it eq								
 516 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 517              											
 518 0050 80F30988 		msr psp, r0							
 519 0054 BFF36F8F 		isb									
 520              											
 521              											
 522 0058 7047     		bx r14								
 523              											
 524 005a 00BFAFF3 		.align 4							
 524      0080
 525 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 526              	
 527              	@ 0 "" 2
 485:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 528              		.loc 1 485 1 is_stmt 0 view .LVU78
 529              		.thumb
 530              		.syntax unified
 531              		.cfi_endproc
 532              	.LFE139:
 534              		.section	.text.xPortSysTickHandler,"ax",%progbits
 535              		.align	1
 536              		.global	xPortSysTickHandler
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv4-sp-d16
 542              	xPortSysTickHandler:
 543              	.LFB140:
 489:./FreeRtos/port/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
ARM GAS  /tmp/ccJubwoR.s 			page 28


 544              		.loc 1 489 1 is_stmt 1 view -0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 08B5     		push	{r3, lr}
 549              	.LCFI7:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 3, -8
 552              		.cfi_offset 14, -4
 494:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 553              		.loc 1 494 2 view .LVU80
 554              	.LBB18:
 555              	.LBI18:
 191:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 556              		.loc 2 191 30 view .LVU81
 557              	.LBB19:
 193:./FreeRtos/port/ARM_CM4F/portmacro.h **** 
 558              		.loc 2 193 1 view .LVU82
 195:./FreeRtos/port/ARM_CM4F/portmacro.h **** 	(
 559              		.loc 2 195 2 view .LVU83
 560              		.syntax unified
 561              	@ 195 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 562 0002 4FF05003 			mov r3, #80												
 563 0006 83F31188 		msr basepri, r3											
 564 000a BFF36F8F 		isb														
 565 000e BFF34F8F 		dsb														
 566              	
 567              	@ 0 "" 2
 568              		.thumb
 569              		.syntax unified
 570              	.LBE19:
 571              	.LBE18:
 497:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 572              		.loc 1 497 3 view .LVU84
 497:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 573              		.loc 1 497 7 is_stmt 0 view .LVU85
 574 0012 FFF7FEFF 		bl	xTaskIncrementTick
 575              	.LVL15:
 497:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 576              		.loc 1 497 5 view .LVU86
 577 0016 28B1     		cbz	r0, .L35
 501:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 578              		.loc 1 501 4 is_stmt 1 view .LVU87
 501:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 579              		.loc 1 501 26 is_stmt 0 view .LVU88
 580 0018 4FF0E023 		mov	r3, #-536813568
 581 001c 4FF08052 		mov	r2, #268435456
 582 0020 C3F8042D 		str	r2, [r3, #3332]
 583              	.L35:
 504:./FreeRtos/port/ARM_CM4F/port.c **** }
 584              		.loc 1 504 2 is_stmt 1 view .LVU89
 585              	.LVL16:
 586              	.LBB20:
 587              	.LBI20:
 227:./FreeRtos/port/ARM_CM4F/portmacro.h **** {
 588              		.loc 2 227 30 view .LVU90
 589              	.LBB21:
ARM GAS  /tmp/ccJubwoR.s 			page 29


 590              		.loc 2 229 2 view .LVU91
 591 0024 0023     		movs	r3, #0
 592              		.syntax unified
 593              	@ 229 "./FreeRtos/port/ARM_CM4F/portmacro.h" 1
 594 0026 83F31188 			msr basepri, r3	
 595              	@ 0 "" 2
 596              	.LVL17:
 597              		.loc 2 229 2 is_stmt 0 view .LVU92
 598              		.thumb
 599              		.syntax unified
 600              	.LBE21:
 601              	.LBE20:
 505:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 602              		.loc 1 505 1 view .LVU93
 603 002a 08BD     		pop	{r3, pc}
 604              		.cfi_endproc
 605              	.LFE140:
 607              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 608              		.align	1
 609              		.weak	vPortSetupTimerInterrupt
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu fpv4-sp-d16
 615              	vPortSetupTimerInterrupt:
 616              	.LFB141:
 680:./FreeRtos/port/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 617              		.loc 1 680 1 is_stmt 1 view -0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 691:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 622              		.loc 1 691 2 view .LVU95
 691:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 623              		.loc 1 691 28 is_stmt 0 view .LVU96
 624 0000 4FF0E022 		mov	r2, #-536813568
 625 0004 0023     		movs	r3, #0
 626 0006 1361     		str	r3, [r2, #16]
 692:./FreeRtos/port/ARM_CM4F/port.c **** 
 627              		.loc 1 692 2 is_stmt 1 view .LVU97
 692:./FreeRtos/port/ARM_CM4F/port.c **** 
 628              		.loc 1 692 37 is_stmt 0 view .LVU98
 629 0008 9361     		str	r3, [r2, #24]
 695:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 630              		.loc 1 695 2 is_stmt 1 view .LVU99
 695:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 631              		.loc 1 695 55 is_stmt 0 view .LVU100
 632 000a 054B     		ldr	r3, .L38
 633 000c 1B68     		ldr	r3, [r3]
 634 000e 0549     		ldr	r1, .L38+4
 635 0010 A1FB0313 		umull	r1, r3, r1, r3
 636 0014 9B09     		lsrs	r3, r3, #6
 695:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 637              		.loc 1 695 78 view .LVU101
 638 0016 013B     		subs	r3, r3, #1
 695:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
ARM GAS  /tmp/ccJubwoR.s 			page 30


 639              		.loc 1 695 28 view .LVU102
 640 0018 5361     		str	r3, [r2, #20]
 696:./FreeRtos/port/ARM_CM4F/port.c **** }
 641              		.loc 1 696 2 is_stmt 1 view .LVU103
 696:./FreeRtos/port/ARM_CM4F/port.c **** }
 642              		.loc 1 696 28 is_stmt 0 view .LVU104
 643 001a 0723     		movs	r3, #7
 644 001c 1361     		str	r3, [r2, #16]
 697:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 645              		.loc 1 697 1 view .LVU105
 646 001e 7047     		bx	lr
 647              	.L39:
 648              		.align	2
 649              	.L38:
 650 0020 00000000 		.word	SystemCoreClock
 651 0024 D34D6210 		.word	274877907
 652              		.cfi_endproc
 653              	.LFE141:
 655              		.section	.text.xPortStartScheduler,"ax",%progbits
 656              		.align	1
 657              		.global	xPortStartScheduler
 658              		.syntax unified
 659              		.thumb
 660              		.thumb_func
 661              		.fpu fpv4-sp-d16
 663              	xPortStartScheduler:
 664              	.LFB135:
 288:./FreeRtos/port/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 665              		.loc 1 288 1 is_stmt 1 view -0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 8
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669 0000 30B5     		push	{r4, r5, lr}
 670              	.LCFI8:
 671              		.cfi_def_cfa_offset 12
 672              		.cfi_offset 4, -12
 673              		.cfi_offset 5, -8
 674              		.cfi_offset 14, -4
 675 0002 83B0     		sub	sp, sp, #12
 676              	.LCFI9:
 677              		.cfi_def_cfa_offset 24
 291:./FreeRtos/port/ARM_CM4F/port.c **** 
 678              		.loc 1 291 2 view .LVU107
 296:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 679              		.loc 1 296 2 view .LVU108
 680 0004 4FF0E023 		mov	r3, #-536813568
 681 0008 D3F8002D 		ldr	r2, [r3, #3328]
 682 000c 3F4B     		ldr	r3, .L52
 683 000e 9A42     		cmp	r2, r3
 684 0010 1AD0     		beq	.L48
 685              	.L41:
 297:./FreeRtos/port/ARM_CM4F/port.c **** 
 686              		.loc 1 297 2 view .LVU109
 687 0012 4FF0E023 		mov	r3, #-536813568
 688 0016 D3F8002D 		ldr	r2, [r3, #3328]
 689 001a 3D4B     		ldr	r3, .L52+4
 690 001c 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccJubwoR.s 			page 31


 691 001e 1AD0     		beq	.L49
 692              	.L42:
 693              	.LBB22:
 301:./FreeRtos/port/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 694              		.loc 1 301 3 view .LVU110
 302:./FreeRtos/port/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 695              		.loc 1 302 3 view .LVU111
 696              	.LVL18:
 303:./FreeRtos/port/ARM_CM4F/port.c **** 
 697              		.loc 1 303 3 view .LVU112
 311:./FreeRtos/port/ARM_CM4F/port.c **** 
 698              		.loc 1 311 3 view .LVU113
 311:./FreeRtos/port/ARM_CM4F/port.c **** 
 699              		.loc 1 311 24 is_stmt 0 view .LVU114
 700 0020 3C4B     		ldr	r3, .L52+8
 701 0022 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 702 0024 D2B2     		uxtb	r2, r2
 311:./FreeRtos/port/ARM_CM4F/port.c **** 
 703              		.loc 1 311 22 view .LVU115
 704 0026 0192     		str	r2, [sp, #4]
 315:./FreeRtos/port/ARM_CM4F/port.c **** 
 705              		.loc 1 315 3 is_stmt 1 view .LVU116
 315:./FreeRtos/port/ARM_CM4F/port.c **** 
 706              		.loc 1 315 33 is_stmt 0 view .LVU117
 707 0028 FF22     		movs	r2, #255
 708 002a 1A70     		strb	r2, [r3]
 318:./FreeRtos/port/ARM_CM4F/port.c **** 
 709              		.loc 1 318 3 is_stmt 1 view .LVU118
 318:./FreeRtos/port/ARM_CM4F/port.c **** 
 710              		.loc 1 318 24 is_stmt 0 view .LVU119
 711 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 712 002e DBB2     		uxtb	r3, r3
 318:./FreeRtos/port/ARM_CM4F/port.c **** 
 713              		.loc 1 318 22 view .LVU120
 714 0030 8DF80330 		strb	r3, [sp, #3]
 321:./FreeRtos/port/ARM_CM4F/port.c **** 
 715              		.loc 1 321 3 is_stmt 1 view .LVU121
 321:./FreeRtos/port/ARM_CM4F/port.c **** 
 716              		.loc 1 321 63 is_stmt 0 view .LVU122
 717 0034 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 718 0038 03F05003 		and	r3, r3, #80
 321:./FreeRtos/port/ARM_CM4F/port.c **** 
 719              		.loc 1 321 24 view .LVU123
 720 003c 364A     		ldr	r2, .L52+12
 721 003e 1370     		strb	r3, [r2]
 325:./FreeRtos/port/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 722              		.loc 1 325 3 is_stmt 1 view .LVU124
 325:./FreeRtos/port/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 723              		.loc 1 325 22 is_stmt 0 view .LVU125
 724 0040 364B     		ldr	r3, .L52+16
 725 0042 0722     		movs	r2, #7
 726 0044 1A60     		str	r2, [r3]
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 727              		.loc 1 326 3 is_stmt 1 view .LVU126
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 728              		.loc 1 326 8 is_stmt 0 view .LVU127
 729 0046 17E0     		b	.L43
ARM GAS  /tmp/ccJubwoR.s 			page 32


 730              	.LVL19:
 731              	.L48:
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 732              		.loc 1 326 8 view .LVU128
 733              	.LBE22:
 296:./FreeRtos/port/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 734              		.loc 1 296 2 is_stmt 1 discriminator 1 view .LVU129
 735 0048 4FF49472 		mov	r2, #296
 736 004c 3449     		ldr	r1, .L52+20
 737 004e 3548     		ldr	r0, .L52+24
 738 0050 FFF7FEFF 		bl	printf
 739              	.LVL20:
 740 0054 DDE7     		b	.L41
 741              	.L49:
 297:./FreeRtos/port/ARM_CM4F/port.c **** 
 742              		.loc 1 297 2 discriminator 1 view .LVU130
 743 0056 40F22912 		movw	r2, #297
 744 005a 3149     		ldr	r1, .L52+20
 745 005c 3148     		ldr	r0, .L52+24
 746 005e FFF7FEFF 		bl	printf
 747              	.LVL21:
 748 0062 DDE7     		b	.L42
 749              	.LVL22:
 750              	.L44:
 751              	.LBB23:
 328:./FreeRtos/port/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 752              		.loc 1 328 4 view .LVU131
 328:./FreeRtos/port/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 753              		.loc 1 328 22 is_stmt 0 view .LVU132
 754 0064 2D4A     		ldr	r2, .L52+16
 755 0066 1368     		ldr	r3, [r2]
 756 0068 013B     		subs	r3, r3, #1
 757 006a 1360     		str	r3, [r2]
 329:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 758              		.loc 1 329 4 is_stmt 1 view .LVU133
 329:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 759              		.loc 1 329 23 is_stmt 0 view .LVU134
 760 006c 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 761 0070 5B00     		lsls	r3, r3, #1
 762 0072 DBB2     		uxtb	r3, r3
 763 0074 8DF80330 		strb	r3, [sp, #3]
 764              	.L43:
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 765              		.loc 1 326 8 is_stmt 1 view .LVU135
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 766              		.loc 1 326 31 is_stmt 0 view .LVU136
 767 0078 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 326:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 768              		.loc 1 326 8 view .LVU137
 769 007c 13F0800F 		tst	r3, #128
 770 0080 F0D1     		bne	.L44
 337:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 771              		.loc 1 337 4 is_stmt 1 view .LVU138
 772 0082 264B     		ldr	r3, .L52+16
 773 0084 1B68     		ldr	r3, [r3]
 774 0086 032B     		cmp	r3, #3
 775 0088 32D1     		bne	.L50
ARM GAS  /tmp/ccJubwoR.s 			page 33


 776              	.L45:
 346:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 777              		.loc 1 346 4 view .LVU139
 778 008a 244B     		ldr	r3, .L52+16
 779 008c 1B68     		ldr	r3, [r3]
 780 008e 032B     		cmp	r3, #3
 781 0090 35D1     		bne	.L51
 782              	.L46:
 352:./FreeRtos/port/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 783              		.loc 1 352 3 view .LVU140
 352:./FreeRtos/port/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 784              		.loc 1 352 22 is_stmt 0 view .LVU141
 785 0092 224A     		ldr	r2, .L52+16
 786 0094 1368     		ldr	r3, [r2]
 787 0096 1B02     		lsls	r3, r3, #8
 788 0098 1360     		str	r3, [r2]
 353:./FreeRtos/port/ARM_CM4F/port.c **** 
 789              		.loc 1 353 3 is_stmt 1 view .LVU142
 353:./FreeRtos/port/ARM_CM4F/port.c **** 
 790              		.loc 1 353 22 is_stmt 0 view .LVU143
 791 009a 03F4E063 		and	r3, r3, #1792
 792 009e 1360     		str	r3, [r2]
 357:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 793              		.loc 1 357 3 is_stmt 1 view .LVU144
 357:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 794              		.loc 1 357 33 is_stmt 0 view .LVU145
 795 00a0 019B     		ldr	r3, [sp, #4]
 796 00a2 DBB2     		uxtb	r3, r3
 797 00a4 1B4A     		ldr	r2, .L52+8
 798 00a6 1370     		strb	r3, [r2]
 799              	.LBE23:
 362:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800              		.loc 1 362 2 is_stmt 1 view .LVU146
 362:./FreeRtos/port/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801              		.loc 1 362 23 is_stmt 0 view .LVU147
 802 00a8 4FF0E024 		mov	r4, #-536813568
 803 00ac D4F8203D 		ldr	r3, [r4, #3360]
 804 00b0 43F47003 		orr	r3, r3, #15728640
 805 00b4 C4F8203D 		str	r3, [r4, #3360]
 363:./FreeRtos/port/ARM_CM4F/port.c **** 
 806              		.loc 1 363 2 is_stmt 1 view .LVU148
 363:./FreeRtos/port/ARM_CM4F/port.c **** 
 807              		.loc 1 363 23 is_stmt 0 view .LVU149
 808 00b8 D4F8203D 		ldr	r3, [r4, #3360]
 809 00bc 43F07043 		orr	r3, r3, #-268435456
 810 00c0 C4F8203D 		str	r3, [r4, #3360]
 367:./FreeRtos/port/ARM_CM4F/port.c **** 
 811              		.loc 1 367 2 is_stmt 1 view .LVU150
 812 00c4 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 813              	.LVL23:
 370:./FreeRtos/port/ARM_CM4F/port.c **** 
 814              		.loc 1 370 2 view .LVU151
 370:./FreeRtos/port/ARM_CM4F/port.c **** 
 815              		.loc 1 370 20 is_stmt 0 view .LVU152
 816 00c8 0025     		movs	r5, #0
 817 00ca 174B     		ldr	r3, .L52+28
 818 00cc 1D60     		str	r5, [r3]
ARM GAS  /tmp/ccJubwoR.s 			page 34


 373:./FreeRtos/port/ARM_CM4F/port.c **** 
 819              		.loc 1 373 2 is_stmt 1 view .LVU153
 820 00ce FFF7FEFF 		bl	vPortEnableVFP
 821              	.LVL24:
 376:./FreeRtos/port/ARM_CM4F/port.c **** 
 822              		.loc 1 376 2 view .LVU154
 376:./FreeRtos/port/ARM_CM4F/port.c **** 
 823              		.loc 1 376 17 is_stmt 0 view .LVU155
 824 00d2 D4F8343F 		ldr	r3, [r4, #3892]
 825 00d6 43F04043 		orr	r3, r3, #-1073741824
 826 00da C4F8343F 		str	r3, [r4, #3892]
 379:./FreeRtos/port/ARM_CM4F/port.c **** 
 827              		.loc 1 379 2 is_stmt 1 view .LVU156
 828 00de FFF7FEFF 		bl	prvPortStartFirstTask
 829              	.LVL25:
 387:./FreeRtos/port/ARM_CM4F/port.c **** 	prvTaskExitError();
 830              		.loc 1 387 2 view .LVU157
 831 00e2 FFF7FEFF 		bl	vTaskSwitchContext
 832              	.LVL26:
 388:./FreeRtos/port/ARM_CM4F/port.c **** 
 833              		.loc 1 388 2 view .LVU158
 834 00e6 FFF7FEFF 		bl	prvTaskExitError
 835              	.LVL27:
 391:./FreeRtos/port/ARM_CM4F/port.c **** }
 836              		.loc 1 391 2 view .LVU159
 392:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 837              		.loc 1 392 1 is_stmt 0 view .LVU160
 838 00ea 2846     		mov	r0, r5
 839 00ec 03B0     		add	sp, sp, #12
 840              	.LCFI10:
 841              		.cfi_remember_state
 842              		.cfi_def_cfa_offset 12
 843              		@ sp needed
 844 00ee 30BD     		pop	{r4, r5, pc}
 845              	.L50:
 846              	.LCFI11:
 847              		.cfi_restore_state
 848              	.LBB24:
 337:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 849              		.loc 1 337 4 is_stmt 1 discriminator 1 view .LVU161
 850 00f0 40F25112 		movw	r2, #337
 851 00f4 0A49     		ldr	r1, .L52+20
 852 00f6 0B48     		ldr	r0, .L52+24
 853 00f8 FFF7FEFF 		bl	printf
 854              	.LVL28:
 855 00fc C5E7     		b	.L45
 856              	.L51:
 346:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 857              		.loc 1 346 4 discriminator 1 view .LVU162
 858 00fe 4FF4AD72 		mov	r2, #346
 859 0102 0749     		ldr	r1, .L52+20
 860 0104 0748     		ldr	r0, .L52+24
 861 0106 FFF7FEFF 		bl	printf
 862              	.LVL29:
 863 010a C2E7     		b	.L46
 864              	.L53:
 865              		.align	2
ARM GAS  /tmp/ccJubwoR.s 			page 35


 866              	.L52:
 867 010c 71C20F41 		.word	1091551857
 868 0110 70C20F41 		.word	1091551856
 869 0114 00E400E0 		.word	-536812544
 870 0118 00000000 		.word	.LANCHOR1
 871 011c 00000000 		.word	.LANCHOR2
 872 0120 00000000 		.word	.LC0
 873 0124 20000000 		.word	.LC1
 874 0128 00000000 		.word	.LANCHOR0
 875              	.LBE24:
 876              		.cfi_endproc
 877              	.LFE135:
 879              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 880              		.align	1
 881              		.global	vPortValidateInterruptPriority
 882              		.syntax unified
 883              		.thumb
 884              		.thumb_func
 885              		.fpu fpv4-sp-d16
 887              	vPortValidateInterruptPriority:
 888              	.LFB143:
 713:./FreeRtos/port/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 714:./FreeRtos/port/ARM_CM4F/port.c **** 
 715:./FreeRtos/port/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 716:./FreeRtos/port/ARM_CM4F/port.c **** 
 717:./FreeRtos/port/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 718:./FreeRtos/port/ARM_CM4F/port.c **** 	{
 889              		.loc 1 718 2 view -0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 0
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893 0000 08B5     		push	{r3, lr}
 894              	.LCFI12:
 895              		.cfi_def_cfa_offset 8
 896              		.cfi_offset 3, -8
 897              		.cfi_offset 14, -4
 719:./FreeRtos/port/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 898              		.loc 1 719 2 view .LVU164
 720:./FreeRtos/port/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 899              		.loc 1 720 2 view .LVU165
 721:./FreeRtos/port/ARM_CM4F/port.c **** 
 722:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 723:./FreeRtos/port/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 900              		.loc 1 723 3 view .LVU166
 901              		.syntax unified
 902              	@ 723 "./FreeRtos/port/ARM_CM4F/port.c" 1
 903 0002 EFF30583 		mrs r3, ipsr
 904              	@ 0 "" 2
 905              	.LVL30:
 724:./FreeRtos/port/ARM_CM4F/port.c **** 
 725:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 726:./FreeRtos/port/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 906              		.loc 1 726 3 view .LVU167
 907              		.loc 1 726 5 is_stmt 0 view .LVU168
 908              		.thumb
 909              		.syntax unified
 910 0006 0F2B     		cmp	r3, #15
ARM GAS  /tmp/ccJubwoR.s 			page 36


 911 0008 06D9     		bls	.L55
 727:./FreeRtos/port/ARM_CM4F/port.c **** 		{
 728:./FreeRtos/port/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 729:./FreeRtos/port/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 912              		.loc 1 729 4 is_stmt 1 view .LVU169
 913              		.loc 1 729 52 is_stmt 0 view .LVU170
 914 000a 104A     		ldr	r2, .L60
 915              		.loc 1 729 22 view .LVU171
 916 000c 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 917              	.LVL31:
 918              		.loc 1 729 22 view .LVU172
 919 000e DBB2     		uxtb	r3, r3
 920              	.LVL32:
 730:./FreeRtos/port/ARM_CM4F/port.c **** 
 731:./FreeRtos/port/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 732:./FreeRtos/port/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 733:./FreeRtos/port/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 734:./FreeRtos/port/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 735:./FreeRtos/port/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 736:./FreeRtos/port/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 737:./FreeRtos/port/ARM_CM4F/port.c **** 
 738:./FreeRtos/port/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 739:./FreeRtos/port/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 740:./FreeRtos/port/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 741:./FreeRtos/port/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 742:./FreeRtos/port/ARM_CM4F/port.c **** 
 743:./FreeRtos/port/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 744:./FreeRtos/port/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 745:./FreeRtos/port/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 746:./FreeRtos/port/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 747:./FreeRtos/port/ARM_CM4F/port.c **** 
 748:./FreeRtos/port/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 749:./FreeRtos/port/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 750:./FreeRtos/port/ARM_CM4F/port.c **** 
 751:./FreeRtos/port/ARM_CM4F/port.c **** 			The following links provide detailed information:
 752:./FreeRtos/port/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 753:./FreeRtos/port/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 754:./FreeRtos/port/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 921              		.loc 1 754 4 is_stmt 1 view .LVU173
 922 0010 0F4A     		ldr	r2, .L60+4
 923 0012 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 924 0014 9A42     		cmp	r2, r3
 925 0016 0AD8     		bhi	.L58
 926              	.LVL33:
 927              	.L55:
 755:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 756:./FreeRtos/port/ARM_CM4F/port.c **** 
 757:./FreeRtos/port/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 758:./FreeRtos/port/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 759:./FreeRtos/port/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 760:./FreeRtos/port/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 761:./FreeRtos/port/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 762:./FreeRtos/port/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 763:./FreeRtos/port/ARM_CM4F/port.c **** 
 764:./FreeRtos/port/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 765:./FreeRtos/port/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 766:./FreeRtos/port/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
ARM GAS  /tmp/ccJubwoR.s 			page 37


 767:./FreeRtos/port/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 768:./FreeRtos/port/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 769:./FreeRtos/port/ARM_CM4F/port.c **** 		of zero will result in unpredictable behaviour. */
 770:./FreeRtos/port/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 928              		.loc 1 770 3 view .LVU174
 929 0018 4FF0E023 		mov	r3, #-536813568
 930 001c D3F80C3D 		ldr	r3, [r3, #3340]
 931 0020 03F4E063 		and	r3, r3, #1792
 932 0024 0B4A     		ldr	r2, .L60+8
 933 0026 1268     		ldr	r2, [r2]
 934 0028 9342     		cmp	r3, r2
 935 002a 07D8     		bhi	.L59
 936              	.L54:
 771:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 937              		.loc 1 771 2 is_stmt 0 view .LVU175
 938 002c 08BD     		pop	{r3, pc}
 939              	.LVL34:
 940              	.L58:
 754:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 941              		.loc 1 754 4 is_stmt 1 discriminator 1 view .LVU176
 942 002e 40F2F222 		movw	r2, #754
 943 0032 0949     		ldr	r1, .L60+12
 944 0034 0948     		ldr	r0, .L60+16
 945 0036 FFF7FEFF 		bl	printf
 946              	.LVL35:
 754:./FreeRtos/port/ARM_CM4F/port.c **** 		}
 947              		.loc 1 754 4 is_stmt 0 discriminator 1 view .LVU177
 948 003a EDE7     		b	.L55
 949              	.L59:
 770:./FreeRtos/port/ARM_CM4F/port.c **** 	}
 950              		.loc 1 770 3 is_stmt 1 discriminator 1 view .LVU178
 951 003c 40F20232 		movw	r2, #770
 952 0040 0549     		ldr	r1, .L60+12
 953 0042 0648     		ldr	r0, .L60+16
 954 0044 FFF7FEFF 		bl	printf
 955              	.LVL36:
 956              		.loc 1 771 2 is_stmt 0 discriminator 1 view .LVU179
 957 0048 F0E7     		b	.L54
 958              	.L61:
 959 004a 00BF     		.align	2
 960              	.L60:
 961 004c F0E300E0 		.word	-536812560
 962 0050 00000000 		.word	.LANCHOR1
 963 0054 00000000 		.word	.LANCHOR2
 964 0058 00000000 		.word	.LC0
 965 005c 20000000 		.word	.LC1
 966              		.cfi_endproc
 967              	.LFE143:
 969              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 970              		.set	.LANCHOR1,. + 0
 973              	ucMaxSysCallPriority:
 974 0000 00       		.space	1
 975              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 976              		.align	2
 977              		.set	.LANCHOR2,. + 0
 980              	ulMaxPRIGROUPValue:
 981 0000 00000000 		.space	4
ARM GAS  /tmp/ccJubwoR.s 			page 38


 982              		.section	.data.uxCriticalNesting,"aw"
 983              		.align	2
 984              		.set	.LANCHOR0,. + 0
 987              	uxCriticalNesting:
 988 0000 AAAAAAAA 		.word	-1431655766
 989              		.text
 990              	.Letext0:
 991              		.file 3 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 992              		.file 4 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 993              		.file 5 "./FreeRtos/port/include/projdefs.h"
 994              		.file 6 "./Libraries/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 995              		.file 7 "/home/hao/Documents/gcc-arm-none-eabi/arm-none-eabi/include/stdio.h"
 996              		.file 8 "./FreeRtos/port/include/task.h"
ARM GAS  /tmp/ccJubwoR.s 			page 39


DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccJubwoR.s:18     .text.prvPortStartFirstTask:0000000000000000 $t
     /tmp/ccJubwoR.s:25     .text.prvPortStartFirstTask:0000000000000000 prvPortStartFirstTask
     /tmp/ccJubwoR.s:57     .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccJubwoR.s:63     .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccJubwoR.s:87     .rodata.prvTaskExitError.str1.4:0000000000000000 $d
     /tmp/ccJubwoR.s:94     .text.prvTaskExitError:0000000000000000 $t
     /tmp/ccJubwoR.s:100    .text.prvTaskExitError:0000000000000000 prvTaskExitError
     /tmp/ccJubwoR.s:173    .text.prvTaskExitError:000000000000003c $d
     /tmp/ccJubwoR.s:180    .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccJubwoR.s:187    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccJubwoR.s:237    .text.pxPortInitialiseStack:0000000000000028 $d
     /tmp/ccJubwoR.s:242    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccJubwoR.s:249    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccJubwoR.s:270    .text.SVC_Handler:0000000000000020 pxCurrentTCBConst2
     /tmp/ccJubwoR.s:270    .text.SVC_Handler:0000000000000020 $d
     /tmp/ccJubwoR.s:280    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccJubwoR.s:287    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccJubwoR.s:318    .text.vPortEndScheduler:000000000000001c $d
     /tmp/ccJubwoR.s:325    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccJubwoR.s:332    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccJubwoR.s:392    .text.vPortEnterCritical:000000000000003c $d
     /tmp/ccJubwoR.s:399    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccJubwoR.s:406    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccJubwoR.s:462    .text.vPortExitCritical:0000000000000028 $d
     /tmp/ccJubwoR.s:469    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccJubwoR.s:476    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccJubwoR.s:525    .text.PendSV_Handler:0000000000000060 pxCurrentTCBConst
     /tmp/ccJubwoR.s:525    .text.PendSV_Handler:0000000000000060 $d
     /tmp/ccJubwoR.s:535    .text.xPortSysTickHandler:0000000000000000 $t
     /tmp/ccJubwoR.s:542    .text.xPortSysTickHandler:0000000000000000 xPortSysTickHandler
     /tmp/ccJubwoR.s:608    .text.vPortSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccJubwoR.s:615    .text.vPortSetupTimerInterrupt:0000000000000000 vPortSetupTimerInterrupt
     /tmp/ccJubwoR.s:650    .text.vPortSetupTimerInterrupt:0000000000000020 $d
     /tmp/ccJubwoR.s:656    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccJubwoR.s:663    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccJubwoR.s:867    .text.xPortStartScheduler:000000000000010c $d
     /tmp/ccJubwoR.s:880    .text.vPortValidateInterruptPriority:0000000000000000 $t
     /tmp/ccJubwoR.s:887    .text.vPortValidateInterruptPriority:0000000000000000 vPortValidateInterruptPriority
     /tmp/ccJubwoR.s:961    .text.vPortValidateInterruptPriority:000000000000004c $d
     /tmp/ccJubwoR.s:973    .bss.ucMaxSysCallPriority:0000000000000000 ucMaxSysCallPriority
     /tmp/ccJubwoR.s:974    .bss.ucMaxSysCallPriority:0000000000000000 $d
     /tmp/ccJubwoR.s:976    .bss.ulMaxPRIGROUPValue:0000000000000000 $d
     /tmp/ccJubwoR.s:980    .bss.ulMaxPRIGROUPValue:0000000000000000 ulMaxPRIGROUPValue
     /tmp/ccJubwoR.s:983    .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccJubwoR.s:987    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccJubwoR.s:86     .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccJubwoR.s:2882   .text.vPortEnableVFP:0000000000000010 $d
     /tmp/ccJubwoR.s:56     .text.prvPortStartFirstTask:0000000000000022 $d
     /tmp/ccJubwoR.s:2882   .text.prvPortStartFirstTask:0000000000000024 $d

UNDEFINED SYMBOLS
printf
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
ARM GAS  /tmp/ccJubwoR.s 			page 40


SystemCoreClock
